Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 18, 24, 35, 40, 46, 47, 48, 49, 50, 51, 53, 56, 59, 67, 70, 86, 100, 102, 104, 154, 156, 209, 240, 299, 373], "supervis": [0, 1, 10, 46, 47, 48, 49, 50, 51, 53, 56, 59, 86, 104, 373], "contrast": [0, 1, 46, 47, 49, 50, 51, 59, 68, 72, 86, 104, 154, 156, 197, 198, 210, 237, 373], "learn": [0, 1, 10, 12, 15, 16, 17, 19, 21, 22, 23, 25, 46, 47, 49, 50, 51, 59, 68, 72, 73, 86, 104, 107, 108, 111, 113, 154, 156, 206, 210, 225, 237, 253, 275, 286, 372, 373], "simclr": [0, 1, 10, 46, 47, 49, 51, 54, 55, 57, 58, 86, 104, 166, 210, 237, 373], "neighbor": [0, 3, 4, 9, 10, 15, 16, 21, 22, 160, 161, 163, 164, 166, 170, 172, 173, 178, 179, 183, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 247, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 283, 286, 288, 289, 290, 291, 294, 301, 305, 308, 311, 314, 315, 318, 321, 333, 334, 335, 337, 341, 345, 348, 349, 353, 356, 357, 358, 361, 365, 367, 370, 373], "unet": [0, 3, 9, 10, 166, 212, 224, 242, 243, 244, 245, 246, 247, 248, 373], "segment": [0, 3, 9, 109, 110, 124, 125, 154, 156, 373], "project": [0, 3, 4, 5, 7, 9, 11, 27, 31, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 175, 181, 209, 240, 306, 309, 311, 314, 317, 319, 320, 334, 335, 340, 345, 348, 350, 351, 352, 355, 357, 358, 364, 371, 373], "textur": [0, 3, 4, 9, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 207, 208, 213, 222, 223, 225, 226, 249, 250, 251, 252, 253, 255, 264, 297, 298, 305, 308, 309, 312, 318, 321, 322, 341, 346, 353, 354, 365, 370, 371, 373], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 166, 172, 173, 175, 178, 179, 181, 196, 199, 200, 201, 206, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 246, 247, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 305, 306, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 370, 371, 373], "match": [0, 3, 9, 28, 32, 159, 161, 162, 164, 304, 309, 371, 373], "augment": [0, 3, 9, 10, 27, 28, 30, 31, 32, 46, 47, 49, 50, 51, 59, 60, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 160, 161, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 373], "download": [0, 2, 4, 5, 6, 7, 8, 29, 33, 84, 86, 104], "all": [0, 2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 53, 56, 71, 76, 77, 78, 79, 80, 82, 83, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 146, 150, 159, 162, 210, 212, 224, 237, 238, 239, 241, 244, 245, 246, 280, 281, 282, 291, 292, 293, 373], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 18, 24, 29, 33, 35, 40, 50, 53, 56, 59, 79, 80, 85, 87, 102, 147, 151, 154, 156, 160, 163, 211, 213, 224, 225, 226, 236, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 370, 371, 373], "python": [0, 2, 4, 5, 6, 7, 8, 10, 12, 100], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 222, 223, 224, 225, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 264, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "code": [0, 2, 4, 5, 6, 7, 8, 14, 20, 60, 63, 97, 98], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 329], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 59, 82, 83, 144, 146, 148, 150, 185, 195, 196, 199, 200, 201, 206, 308, 314, 329, 331, 332, 343, 344, 348, 370], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 79, 80, 373], "000": [1, 2, 373], "total": [1, 4, 5, 6, 7, 8, 9, 108, 109, 110, 113, 124, 125, 373], "execut": [1, 9, 324, 373], "1": [1, 2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 82, 83, 85, 87, 102, 107, 108, 109, 110, 111, 113, 122, 123, 124, 125, 128, 129, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 160, 161, 163, 164, 169, 170, 173, 179, 183, 187, 188, 189, 196, 199, 200, 201, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 242, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 281, 282, 283, 286, 288, 289, 290, 292, 293, 294, 297, 298, 299, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 343, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 367, 370, 371], "file": [1, 9, 27, 28, 29, 30, 31, 32, 33, 60, 86, 104, 197, 198, 325, 326, 327, 329, 331, 332, 368, 372, 373], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 15, 16, 18, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 66, 67, 69, 70, 77, 78, 79, 80, 85, 87, 102, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 140, 142, 144, 146, 147, 148, 150, 151, 154, 156, 160, 163, 170, 173, 179, 183, 197, 198, 207, 211, 212, 213, 224, 225, 226, 236, 245, 246, 249, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 371, 373], "auto_galleri": [1, 9], "mem": [1, 9, 373], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 373], "simclr_stl10": [1, 2, 373], "py": [1, 2, 4, 5, 6, 7, 8, 9, 373], "0": [1, 2, 4, 5, 6, 7, 8, 14, 19, 20, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 66, 67, 68, 69, 70, 72, 73, 77, 78, 79, 80, 83, 102, 109, 110, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 159, 160, 161, 162, 163, 164, 173, 175, 179, 181, 188, 189, 209, 225, 235, 238, 239, 240, 241, 244, 253, 276, 281, 282, 287, 292, 293, 297, 298, 304, 306, 309, 311, 314, 319, 334, 335, 339, 340, 341, 345, 348, 357, 358, 363, 364, 365, 367, 371, 373], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 97, 98, 103], "full": [2, 4, 5, 6, 7, 8, 10, 35, 40, 77, 78, 160, 161, 163, 164, 313, 347], "http": [2, 11, 15, 16, 17, 19, 21, 22, 23, 25, 29, 33, 54, 55, 57, 58, 66, 69, 76, 100, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 144, 148, 206, 328, 330], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 166, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "In": [2, 35, 40, 46, 47, 49, 50, 51, 59, 64, 67, 70, 83, 144, 145, 146, 147, 148, 149, 150, 151, 212, 224, 245, 246, 273], "thi": [2, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "tutori": [2, 11], "we": [2, 5, 6, 8, 29, 33, 46, 47, 49, 51, 54, 57, 101, 144, 146, 148, 150, 273, 285, 328, 330], "take": [2, 29, 33, 49, 51, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 254, 280, 281, 282, 291, 292, 293], "closer": [2, 49, 50, 51, 59], "look": [2, 49, 51, 314, 348], "also": [2, 10, 27, 28, 30, 31, 32, 46, 47, 49, 50, 51, 59, 79, 80, 100, 195, 197, 198, 324, 372], "sometim": [2, 85, 87], "call": [2, 14, 18, 20, 24, 27, 28, 30, 31, 32, 35, 40, 46, 47, 49, 50, 51, 59, 67, 70, 71, 74, 83, 103, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 145, 147, 149, 151, 197, 198, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 324, 341, 365], "unsupervis": 2, "describ": [2, 17, 23, 49, 51, 60, 372], "scenario": 2, "where": [2, 6, 17, 18, 23, 24, 27, 28, 29, 30, 31, 32, 33, 49, 50, 51, 54, 57, 59, 60, 68, 72, 86, 104, 154, 155, 156, 157, 160, 163, 197, 198, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286, 297, 298, 300, 308, 367, 370], "have": [2, 5, 6, 14, 20, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 140, 142, 155, 157, 324, 334, 357], "given": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 68, 72, 82, 86, 103, 104, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 205, 207, 249, 299, 324, 341, 365, 366, 367], "input": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 50, 59, 60, 62, 67, 68, 70, 72, 75, 76, 77, 78, 81, 82, 83, 86, 104, 107, 108, 109, 110, 111, 113, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 191, 193, 197, 198, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 299, 304, 305, 308, 309, 318, 324, 326, 327, 342, 370, 371], "accompani": 2, "label": [2, 6, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 46, 47, 50, 59, 68, 72, 145, 147, 149, 151, 160, 161, 163, 164, 200, 201, 297, 298], "classic": [2, 224, 246, 247], "wai": [2, 334, 357, 372], "howev": [2, 160, 161, 163, 164], "still": [2, 299], "contain": [2, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 85, 87, 197, 198, 211, 236, 254, 297, 298, 324, 340, 364], "lot": 2, "inform": [2, 27, 28, 30, 31, 32, 60, 68, 72, 197, 198, 206, 211, 236], "which": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 68, 72, 103, 109, 110, 124, 125, 140, 142, 145, 149, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 299, 304, 314, 341, 348, 365], "can": [2, 5, 18, 24, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 67, 70, 83, 101, 140, 142, 144, 148, 155, 157, 169, 176, 187, 190, 197, 198, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 254, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 323, 324], "how": [2, 4, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "ar": [2, 5, 6, 8, 14, 17, 19, 20, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 76, 77, 78, 82, 83, 85, 87, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 154, 156, 160, 161, 163, 164, 168, 197, 198, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 285, 299, 304, 308, 321, 334, 341, 343, 353, 357, 365, 367, 370], "imag": [2, 6, 27, 28, 29, 30, 31, 32, 33, 46, 47, 49, 50, 51, 59, 145, 146, 147, 149, 150, 151, 154, 156, 160, 161, 163, 164, 168, 197, 198, 205, 308, 325, 370], "differ": [2, 5, 27, 28, 29, 30, 31, 32, 33, 35, 40, 49, 50, 51, 59, 60, 160, 163, 173, 179, 197, 198, 211, 212, 224, 236, 245, 246], "each": [2, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 60, 79, 80, 108, 109, 110, 113, 124, 125, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 159, 162, 170, 172, 173, 178, 179, 183, 186, 194, 196, 199, 200, 201, 205, 207, 208, 209, 211, 212, 222, 223, 224, 236, 240, 244, 245, 246, 249, 250, 251, 252, 299, 314, 315, 334, 335, 341, 348, 349, 357, 358, 365], "other": [2, 5, 35, 40, 46, 47, 49, 51, 60, 299, 309, 371], "what": [2, 50, 59, 60, 63], "pattern": [2, 6, 27, 28, 30, 31, 32, 197, 198, 285], "descript": [2, 160, 161, 163, 164], "certain": [2, 314, 337, 348, 361], "cluster": [2, 35, 37, 40, 42, 50, 59], "To": [2, 5, 18, 24, 27, 31, 35, 40, 46, 47, 49, 51, 68, 72, 74], "get": [2, 18, 24, 29, 33, 49, 51, 160, 163, 299, 333, 336, 337, 338, 356, 360, 361, 362, 367], "an": [2, 6, 7, 8, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 50, 53, 56, 59, 60, 62, 63, 85, 86, 87, 100, 102, 103, 104, 109, 110, 124, 125, 144, 148, 172, 173, 178, 179, 182, 185, 186, 188, 192, 194, 211, 212, 224, 236, 245, 246, 275, 286, 299, 305, 308, 309, 313, 318, 320, 322, 333, 336, 337, 338, 341, 347, 352, 354, 355, 356, 360, 361, 362, 365, 370, 371], "insight": 2, "question": 2, "implement": [2, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 66, 67, 68, 69, 70, 72, 73, 82, 83, 100, 145, 149, 172, 178, 206, 209, 210, 225, 237, 240, 244, 253], "popular": [2, 10, 195], "simpl": [2, 4, 5, 7, 8, 49, 51, 53, 56, 107, 111, 144, 146, 148, 150, 210, 237, 306, 319, 367], "method": [2, 10, 14, 18, 20, 24, 27, 29, 31, 33, 35, 40, 50, 59, 67, 68, 70, 72, 75, 83, 85, 86, 87, 101, 102, 104, 154, 156, 160, 161, 163, 164, 167, 195, 209, 211, 212, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 245, 246, 247, 248, 253, 255, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 299, 341, 365], "appli": [2, 5, 6, 18, 24, 29, 33, 46, 47, 49, 51, 53, 56, 67, 70, 82, 83, 86, 104, 109, 110, 124, 125, 139, 141, 146, 147, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 165, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 187, 188, 190, 191, 209, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 285, 306, 317, 319, 335, 351, 358], "stl10": 2, "requir": [2, 35, 40, 46, 47, 49, 50, 51, 59, 67, 70, 73, 147, 151], "some": [2, 7, 10, 35, 40, 46, 47, 49, 50, 51, 59, 60, 62, 67, 70, 109, 110, 124, 125, 176, 177, 190, 191, 195, 299, 367], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 372], "let": [2, 49, 51], "": [2, 5, 7, 18, 24, 29, 33, 35, 40, 49, 50, 51, 59, 67, 70, 77, 78, 103, 144, 148, 160, 163, 171, 172, 173, 175, 178, 179, 181, 184, 196, 199, 200, 201, 207, 208, 212, 222, 223, 224, 242, 245, 246, 247, 249, 250, 251, 252, 275, 286, 311, 314, 324, 334, 335, 339, 340, 345, 348, 357, 358, 363, 364], "first": [2, 5, 6, 8, 29, 33, 50, 53, 56, 59, 66, 68, 69, 72, 77, 78, 108, 109, 110, 113, 124, 125, 207, 209, 212, 224, 240, 242, 243, 245, 246, 249, 341, 365], "start": [2, 18, 24, 109, 110, 124, 125, 173, 179, 314, 348], "import": [2, 4, 5, 6, 7, 8, 49, 51, 60, 62, 63, 79, 80, 85, 87, 102, 147, 151, 154, 156, 160, 163, 195, 211, 213, 224, 225, 226, 236, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 371], "our": [2, 5, 46, 47], "standard": [2, 68, 72, 139, 140, 141, 142, 155, 157, 172, 174, 178, 180, 211, 212, 224, 236, 245, 246, 299, 320, 323, 340, 352, 364], "librari": 2, "below": [2, 49, 50, 51, 59, 60], "o": [2, 5, 7, 301, 311, 314, 334, 335, 340, 345, 348, 357, 358, 364], "matplotlib": [2, 4, 5, 6, 7, 8, 297, 298, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "pyplot": [2, 4, 5, 6, 7, 8, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "plt": [2, 4, 5, 6, 7, 8, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "pytorch_lightn": [2, 18, 24], "pl": 2, "torch": [2, 6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 50, 59, 66, 68, 69, 72, 82, 83, 86, 104, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 206, 213, 224, 225, 226, 244, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "nn": [2, 6, 8, 10, 35, 40, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 66, 68, 69, 71, 72, 86, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 166, 172, 178, 207, 208, 210, 222, 223, 237, 238, 239, 241, 242, 244, 247, 249, 250, 251, 252, 254, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "util": [2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 50, 53, 54, 55, 56, 57, 58, 59, 74, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 166, 172, 173, 175, 178, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 224, 225, 226, 246, 253, 264, 274, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 296, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "torchvis": [2, 50, 59, 83, 144, 146, 148, 150], "collect": 2, "ordereddict": [2, 46, 47], "copi": [2, 27, 31, 299], "deepcopi": 2, "weight": [2, 10, 15, 17, 21, 23, 29, 33, 46, 47, 49, 50, 51, 59, 60, 67, 68, 70, 72, 74, 75, 77, 78, 79, 80, 86, 104, 166, 170, 183, 203, 204, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 315, 321, 335, 341, 349, 353, 358, 365], "estim": [2, 4, 5, 6, 7, 8, 10, 18, 19, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 67, 70, 74, 75, 79, 80, 101, 103, 166, 299, 306, 319], "ssl": [2, 10, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 166], "linear": [2, 10, 18, 24, 46, 47, 50, 53, 54, 56, 57, 59, 67, 68, 70, 72, 107, 111, 146, 150, 160, 161, 163, 164, 166, 209, 212, 224, 240, 245, 246, 247], "logisticregress": [2, 10, 17, 23, 45, 46, 47, 166], "callback": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 40, 46, 47, 50, 59, 166], "learningratemonitor": [2, 50, 59], "modelcheckpoint": [2, 35, 40], "transform": [2, 5, 10, 27, 28, 29, 30, 31, 32, 33, 35, 39, 40, 44, 49, 50, 51, 59, 60, 81, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 176, 177, 186, 187, 189, 190, 191, 194, 197, 198, 206, 207, 209, 240, 241, 249, 299, 300, 302, 303, 306, 307, 319, 340, 364, 369], "defin": [2, 27, 28, 30, 31, 32, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 60, 61, 71, 77, 78, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 160, 163, 170, 183, 185, 188, 197, 198, 210, 212, 224, 237, 238, 239, 241, 244, 245, 246, 247, 248, 273, 280, 281, 282, 291, 292, 293, 297, 298, 300, 317, 320, 326, 327, 331, 332, 351, 352], "global": [2, 15, 17, 21, 23, 60, 144, 148, 273], "paramet": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 102, 103, 104, 107, 108, 109, 110, 111, 113, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 29, 33, 50, 59, 79, 80, 85, 87, 225, 226, 235, 253, 264, 334, 340, 357, 364, 373], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 35, 40, 50, 59, 74, 75, 79, 80, 86, 92, 97, 98, 99, 102, 104, 108, 113, 144, 148, 169, 186, 187, 194, 203, 204, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 244, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 283, 286, 288, 289, 290, 294, 297, 298, 299, 305, 306, 309, 312, 314, 318, 319, 334, 339, 346, 348, 357, 363, 371], "benchmark": 2, "fals": [2, 4, 6, 7, 18, 24, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 77, 78, 79, 80, 86, 100, 102, 104, 108, 109, 110, 113, 114, 115, 124, 125, 144, 148, 197, 198, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 242, 243, 244, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 297, 298, 299, 306, 311, 313, 314, 319, 320, 321, 322, 323, 325, 328, 330, 334, 335, 339, 340, 341, 345, 347, 348, 352, 353, 354, 357, 358, 363, 364, 365, 366], "devic": [2, 35, 40, 46, 47], "gpu": [2, 35, 40, 46, 47, 49, 51], "cuda": 2, "is_avail": 2, "els": 2, "cpu": [2, 35, 40], "As": [2, 8, 49, 51], "mani": [2, 5, 15, 16, 17, 19, 21, 22, 23, 25, 29, 33, 35, 40, 49, 50, 51, 59, 108, 109, 110, 113, 124, 125], "befor": [2, 49, 51, 103, 146, 150, 212, 224, 245, 246, 282, 293, 299], "provid": [2, 27, 28, 30, 31, 32, 35, 40, 139, 141, 145, 147, 149, 151, 160, 163, 175, 181, 197, 198, 274, 299, 315, 341, 349, 365, 372], "pre": 2, "model": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 59, 60, 84, 86, 104, 109, 110, 112, 119, 124, 125, 166, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], "If": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 50, 59, 67, 68, 70, 72, 76, 79, 80, 82, 83, 86, 103, 104, 109, 110, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 299, 324, 341, 365], "you": [2, 5, 11, 14, 18, 20, 24, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 86, 104, 299], "run": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 21, 22, 23, 24, 50, 59, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 340, 364], "local": [2, 29, 33, 60, 64, 86, 104], "make": [2, 18, 24, 35, 40, 102, 144, 148, 273], "sure": 2, "suffici": 2, "disk": [2, 29, 33, 35, 40, 46, 47], "space": [2, 6, 29, 33, 49, 50, 51, 59, 107, 108, 109, 110, 111, 113, 124, 125, 145, 149, 160, 161, 163, 164, 207, 208, 209, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 246, 249, 250, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 317, 351], "avail": [2, 29, 33, 35, 40, 46, 47, 50, 59, 60, 79, 80, 86, 102, 104, 146, 150, 160, 161, 163, 164], "load_pretrain": [2, 86, 104], "makedir": 2, "exist_ok": 2, "name": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 50, 59, 60, 63, 79, 80, 86, 103, 104, 207, 208, 222, 223, 249, 250, 251, 252, 273, 297, 298, 299, 310, 324], "hf": [2, 29, 33, 60, 86, 104], "hub": [2, 60, 86, 104], "neurospin": [2, 11, 86, 104], "resnet18": [2, 10, 50, 59, 106, 120, 130, 166], "data_dir": [2, 86, 104], "filepath": [2, 86, 104], "pt": 2, "allow": [2, 5, 14, 20, 28, 32, 49, 51, 60, 61, 299, 324, 341, 365], "effici": [2, 108, 113], "need": [2, 5, 6, 35, 40, 49, 50, 51, 59, 60, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 285, 291, 292, 293], "prepar": 2, "load": [2, 8, 10, 27, 28, 29, 31, 32, 33, 35, 40, 60, 63, 64, 86, 104, 195, 197, 198, 328, 330], "sampl": [2, 8, 10, 17, 23, 29, 33, 35, 40, 50, 59, 67, 68, 70, 72, 74, 75, 77, 78, 79, 80, 139, 140, 141, 142, 144, 146, 148, 150, 166, 195, 196, 199, 200, 201, 205, 207, 208, 212, 213, 224, 225, 226, 242, 245, 246, 247, 249, 250, 253, 255, 264, 277, 278, 279, 283, 285, 288, 289, 290, 294, 308, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370], "two": [2, 5, 29, 33, 46, 47, 49, 50, 51, 53, 56, 59, 68, 72, 139, 140, 141, 142, 304, 306, 319, 334, 357], "random": [2, 4, 35, 40, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 160, 163, 169, 173, 179, 185, 186, 187, 188, 194, 196, 199, 200, 201], "batch": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 68, 72, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 244, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "The": [2, 5, 18, 24, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 82, 83, 103, 140, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 172, 174, 175, 178, 180, 181, 206, 207, 208, 209, 212, 222, 223, 224, 225, 240, 244, 245, 246, 249, 250, 251, 252, 253, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 299, 302, 303, 323, 324], "easiest": 2, "do": [2, 5, 18, 24, 35, 40, 46, 47, 49, 51, 299], "i": [2, 5, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "creat": [2, 100, 154, 156, 160, 163, 182, 188, 189, 192, 195, 197, 198, 235, 273], "when": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 74, 75, 76, 79, 80, 83, 86, 102, 104, 145, 147, 149, 151, 154, 156, 297, 298, 299, 304, 309, 324, 339, 363, 371], "being": 2, "set": [2, 5, 15, 16, 21, 22, 29, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 59, 60, 64, 67, 68, 70, 72, 77, 78, 82, 88, 154, 156, 159, 161, 162, 164, 173, 175, 179, 181, 195, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 243, 244, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 300, 311, 321, 325, 345, 353], "twice": 2, "class": [2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 83, 84, 85, 86, 87, 88, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 323], "contrastivetransform": 2, "framework": [2, 35, 40, 50, 59, 210, 237], "easili": [2, 5], "extend": [2, 75, 85, 87], "more": [2, 15, 17, 21, 23, 27, 28, 30, 31, 32, 50, 59, 108, 113, 146, 150, 159, 162, 167, 197, 198, 372], "posit": [2, 35, 40, 67, 70, 82, 83], "than": [2, 35, 40, 49, 51], "same": [2, 5, 29, 33, 35, 40, 49, 50, 51, 59, 60, 61, 68, 72, 74, 75, 79, 80, 81, 82, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 304, 306, 319, 324, 329, 334, 357], "most": [2, 297, 298], "usual": [2, 49, 51, 82], "obtain": [2, 49, 51, 54, 57], "us": [2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "onli": [2, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "def": [2, 4, 6, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 102], "__init__": [2, 18, 24, 35, 40, 46, 47, 49, 51, 102], "base_transform": 2, "n_view": [2, 82], "2": [2, 4, 5, 7, 8, 15, 16, 18, 21, 22, 24, 50, 59, 60, 67, 68, 70, 72, 73, 77, 78, 79, 80, 85, 87, 102, 109, 110, 124, 125, 139, 141, 145, 149, 160, 163, 182, 188, 189, 192, 196, 199, 200, 201, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 302, 303, 305, 306, 308, 309, 311, 312, 313, 314, 317, 318, 319, 321, 322, 333, 334, 335, 340, 345, 346, 347, 348, 351, 353, 354, 356, 357, 358, 364, 366, 370, 371], "__call__": 2, "x": [2, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 49, 51, 53, 56, 67, 70, 82, 102, 107, 108, 109, 110, 111, 113, 122, 123, 124, 125, 145, 149, 154, 155, 156, 157, 200, 201, 205, 208, 209, 212, 213, 222, 223, 224, 225, 226, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 302, 303, 305, 307, 308, 309, 312, 318, 321, 322, 334, 341, 346, 350, 353, 354, 357, 365, 369, 370, 371], "return": [2, 18, 24, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 100, 102, 104, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 191, 192, 193, 194, 197, 198, 200, 201, 205, 207, 208, 209, 211, 213, 222, 223, 225, 226, 236, 240, 249, 250, 251, 252, 253, 254, 255, 264, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371], "rang": [2, 4, 5, 8, 35, 40, 67, 70, 139, 140, 141, 142, 144, 146, 148, 150, 154, 156, 302, 303, 337, 361], "next": [2, 5, 35, 40, 46, 47, 49, 51, 324], "specif": [2, 10, 170, 171, 183, 184, 212, 224, 245, 246, 273, 336, 360], "want": [2, 11, 49, 51, 86, 104], "choic": [2, 60, 146, 150, 160, 161, 163, 164], "crucial": 2, "hyperparamet": [2, 35, 40, 49, 51], "sinc": [2, 5, 6, 49, 51, 71, 77, 78, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 154, 156, 160, 161, 163, 164, 210, 237, 238, 239, 241, 244, 280, 281, 282, 285, 291, 292, 293], "directli": [2, 35, 40, 50, 59, 144, 148, 168], "affect": [2, 35, 40], "latent": [2, 50, 59, 207, 208, 209, 222, 223, 225, 240, 249, 250, 251, 252, 253], "structur": [2, 5, 35, 40, 79, 80], "might": [2, 35, 40, 46, 47, 49, 50, 51, 59, 145, 149], "overal": 2, "experi": [2, 10, 60, 61, 62, 63, 64, 166, 372], "5": [2, 4, 6, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 79, 80, 147, 151, 154, 156, 175, 181, 211, 212, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 244, 245, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 291, 317, 334, 335, 351, 357, 358], "follow": [2, 18, 24, 29, 33, 49, 51, 53, 56, 60, 67, 70, 76, 79, 80, 154, 155, 156, 157], "origin": [2, 6, 49, 51, 146, 150, 154, 155, 156, 157, 160, 163, 168, 205, 299], "horizont": [2, 6], "flip": [2, 145, 147, 149, 151], "crop": [2, 146, 150, 159, 162], "resiz": [2, 10, 83, 146, 150, 161, 164, 166], "color": [2, 7, 10, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 166, 297, 298], "distort": 2, "grayscal": 2, "gaussian": [2, 50, 59, 67, 68, 70, 72, 139, 140, 141, 142, 146, 150, 160, 161, 163, 164, 172, 174, 178, 180, 196, 199, 200, 201], "blur": [2, 139, 141, 172, 178], "comparison": [2, 160, 161, 163, 164], "reduc": [2, 35, 40, 74, 109, 110, 124, 125, 170, 183, 209, 240, 312, 313, 315, 346, 347, 349], "effect": [2, 109, 110, 124, 125, 160, 163, 299], "jitter": 2, "slightli": 2, "instead": [2, 71, 74, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 299], "8": [2, 4, 6, 8, 29, 33, 35, 40, 46, 47, 79, 80, 155, 157, 160, 161, 163, 164, 224, 238, 246, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 59, 71, 103, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 170, 183, 210, 237, 238, 239, 241, 244, 279, 280, 281, 282, 290, 291, 292, 293, 299], "wa": [2, 49, 51], "faster": [2, 324], "stabl": 2, "instanc": [2, 5, 35, 40, 50, 59, 71, 76, 103, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 169, 187, 188, 189, 210, 235, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "scale": [2, 6, 8, 17, 23, 29, 33, 35, 40, 46, 47, 66, 67, 68, 69, 70, 72, 144, 146, 148, 150, 154, 155, 156, 157, 167, 196, 199, 200, 201, 299, 308, 309, 312, 317, 321, 322, 335, 341, 346, 351, 353, 354, 358, 365, 370, 371], "highli": 2, "vari": 2, "benefici": [2, 46, 47], "t": [2, 6, 35, 40, 46, 47, 144, 146, 148, 150], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 17, 23, 29, 33, 49, 50, 51, 59, 66, 67, 68, 69, 70, 72, 77, 78, 83, 144, 146, 148, 150, 160, 161, 163, 164, 170, 171, 183, 184, 297, 298, 304, 306, 319, 334, 343, 357, 367], "contrast_transform": 2, "compos": [2, 60, 209, 240, 300, 334, 357], "randomhorizontalflip": 2, "randomresizedcrop": [2, 10, 83, 143, 146, 150, 166], "size": [2, 6, 7, 8, 49, 50, 51, 59, 68, 72, 107, 108, 109, 110, 111, 113, 124, 125, 139, 141, 144, 146, 148, 150, 154, 156, 159, 160, 162, 163, 170, 171, 173, 179, 183, 184, 185, 197, 198, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 281, 282, 285, 291, 292, 293, 314, 317, 335, 340, 342, 348, 351, 358, 364], "96": [2, 4, 9, 282, 293, 305, 318, 373], "randomappli": 2, "colorjitt": 2, "p": [2, 67, 70, 81, 83, 165], "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 281, 282, 292, 293], "9": [2, 4, 5, 9, 50, 59, 79, 80, 203, 204, 373], "totensor": 2, "normal": [2, 10, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 66, 69, 109, 110, 124, 125, 144, 148, 154, 155, 156, 157, 166, 167, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 299, 301, 350, 359], "after": [2, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 67, 70, 109, 110, 124, 125, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "discuss": 2, "techniqu": [2, 146, 150, 160, 161, 163, 164, 367], "now": [2, 5, 8, 49, 51, 109, 110, 124, 125, 154, 156, 254], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 29, 33, 50, 59, 66, 69, 79, 80, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 213, 224, 226, 246, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364, 373], "airplan": 2, "bird": 2, "car": 2, "cat": 2, "deer": 2, "dog": 2, "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": [2, 35, 40], "resolut": [2, 109, 110, 124, 125, 154, 156, 197, 198, 212, 224, 245, 246], "pixel": 2, "500": 2, "per": [2, 19, 25, 27, 29, 31, 33, 109, 110, 124, 125, 139, 141, 145, 149, 154, 155, 156, 157], "addition": 2, "much": [2, 108, 113], "larger": [2, 49, 51], "100": [2, 4, 7, 8, 17, 23, 154, 156, 311, 314, 334, 335, 340, 343, 345, 348, 357, 358, 364], "unlabel": 2, "similar": [2, 5, 49, 50, 51, 59, 67, 68, 70, 72, 144, 148], "wider": [2, 49, 51], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": [2, 146, 150, 160, 161, 163, 164], "luckili": 2, "through": [2, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 36, 37, 38, 39, 41, 42, 43, 44, 53, 56], "keep": [2, 29, 33, 197, 198], "mind": 2, "rel": [2, 17, 23, 27, 28, 30, 31, 32, 144, 146, 148, 150], "larg": [2, 29, 33, 299], "ha": [2, 5, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 79, 80, 108, 109, 110, 113, 124, 125, 140, 142, 154, 155, 156, 157, 212, 224, 245, 246, 299], "consider": [2, 49, 51], "3gb": 2, "bit": [2, 50, 59], "time": [2, 4, 5, 6, 7, 8, 82, 144, 146, 148, 150, 341, 365], "For": [2, 15, 16, 17, 19, 21, 22, 23, 25, 35, 40, 46, 47, 49, 51, 103, 154, 156, 160, 161, 163, 164, 254, 334, 357], "initi": [2, 29, 33, 50, 53, 54, 55, 56, 57, 58, 59, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 241, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "loader": [2, 8], "abov": 2, "unlabeled_data": 2, "via": [2, 29, 33, 46, 47, 341, 365], "train_data_contrast": 2, "valid": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 64, 83, 100, 101, 102, 103, 166], "root": [2, 11, 16, 19, 22, 25, 27, 28, 29, 30, 31, 32, 33, 79, 80, 197, 198], "split": [2, 27, 28, 29, 30, 31, 32, 33, 49, 51, 197, 198], "pair": [2, 35, 40, 50, 59, 68, 72, 147, 151, 197, 198], "img": 2, "stack": [2, 18, 24], "idx": [2, 4, 7, 27, 28, 31, 32, 314, 334, 340, 348, 357, 364], "dim": [2, 8, 50, 59, 71, 160, 163, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "img_grid": 2, "make_grid": 2, "nrow": 2, "pad_valu": 2, "permut": [2, 5, 171, 184, 304, 306, 319], "figur": [2, 6, 297, 298], "figsiz": [2, 4, 5, 6, 7, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "titl": [2, 6, 94, 95], "imshow": [2, 6, 308, 370], "axi": [2, 6, 8, 145, 147, 149, 151, 159, 162, 297, 298, 299, 304, 315, 321, 328, 330, 334, 341, 349, 350, 353, 357, 365], "off": [2, 6], "And": 2, "associ": [2, 7, 29, 33, 46, 47, 50, 59, 68, 72, 301, 309, 315, 341, 349, 365, 371], "dataload": [2, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 51, 60], "batch_siz": [2, 8, 35, 40, 66, 68, 69, 72, 208, 222, 223, 225, 250, 251, 252, 253], "256": [2, 53, 56, 88, 207, 208, 222, 223, 249, 250, 251, 252], "train_load": 2, "shuffl": [2, 8, 35, 40], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 26, 34, 35, 40, 46, 47, 65, 105, 106, 168, 202, 206, 299], "resnet": [2, 10, 50, 59, 106, 109, 110, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 166], "18": [2, 4, 50, 59, 110, 120, 121, 125, 130, 131, 154, 156], "architectur": [2, 8, 10, 46, 47, 49, 50, 51, 59, 105, 106, 107, 108, 109, 110, 111, 113, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 206, 212, 213, 224, 225, 226, 244, 245, 246, 253, 255, 264], "f": [2, 6, 46, 47, 49, 51, 154, 156, 212, 224, 245, 246], "paper": [2, 49, 51, 108, 113], "g": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 54, 57, 59, 68, 72, 109, 110, 124, 125, 144, 148, 160, 163, 299], "layer": [2, 46, 47, 49, 50, 51, 53, 54, 56, 57, 59, 107, 108, 109, 110, 111, 113, 124, 125, 126, 127, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 244, 245, 246, 247, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295], "mlp": [2, 46, 47, 49, 50, 51, 53, 54, 56, 57, 59, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "relu": [2, 49, 50, 51, 53, 54, 56, 57, 59, 117, 212, 224, 242, 243, 244, 245, 246, 247, 248], "activ": [2, 49, 50, 51, 59, 207, 208, 212, 222, 223, 224, 225, 245, 246, 249, 250, 251, 252, 253], "hidden": [2, 49, 50, 51, 54, 57, 59, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "note": [2, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 82, 100, 107, 111, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 324], "up": [2, 18, 24, 49, 51, 211, 212, 224, 236, 245, 246, 304, 306, 314, 319, 337, 348, 361], "simclrv2": [2, 49, 51], "author": [2, 49, 51, 60], "mention": [2, 49, 51], "boost": [2, 49, 51], "why": [2, 5], "four": 2, "dimens": [2, 5, 49, 50, 51, 59, 83, 139, 141, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 161, 162, 164, 209, 240, 254], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 79, 80, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 27, 28, 29, 30, 31, 32, 33, 46, 47, 49, 50, 51, 59, 86, 104, 168, 197, 198, 206, 210, 237, 300], "observ": 2, "u": [2, 6, 49, 51, 139, 140, 141, 142, 154, 156, 197, 198, 212, 224, 244, 245, 246], "compar": [2, 49, 51], "neg": 2, "lead": [2, 35, 40], "smoother": 2, "loss": [2, 8, 10, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 60, 66, 67, 68, 69, 70, 71, 72, 166, 203, 204, 205], "gradient": [2, 35, 40, 46, 47, 49, 50, 51, 59], "case": [2, 35, 40, 46, 47, 49, 50, 51, 59, 60, 63, 64, 67, 70, 77, 78, 144, 145, 146, 147, 148, 149, 150, 151, 299], "experienc": 2, "good": [2, 146, 150, 160, 161, 163, 164], "result": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 77, 78, 79, 80, 93, 100, 160, 161, 163, 164, 273, 323], "hidden_dim": [2, 49, 51, 54, 55, 57, 58, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "128": [2, 50, 53, 54, 55, 56, 57, 58, 59, 107, 111, 160, 163, 207, 208, 222, 223, 249, 250, 251, 252], "encod": [2, 35, 40, 46, 47, 49, 50, 51, 59, 202, 206, 208, 212, 222, 223, 224, 225, 245, 246, 250, 251, 252, 253], "none": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 60, 63, 64, 68, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 103, 104, 109, 110, 122, 123, 124, 125, 145, 147, 149, 151, 154, 155, 156, 157, 160, 163, 165, 170, 172, 173, 175, 178, 179, 181, 183, 196, 197, 198, 199, 200, 201, 203, 204, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 244, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 282, 293, 297, 298, 299, 312, 313, 322, 324, 341, 343, 344, 346, 347, 354, 355, 365, 368], "num_class": [2, 46, 47, 226, 227, 228, 229, 230, 231, 232, 233, 234, 264, 265, 266, 267, 268, 269, 270, 271, 272], "4": [2, 4, 5, 7, 8, 9, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 50, 59, 79, 80, 108, 109, 110, 113, 124, 125, 145, 147, 149, 151, 160, 161, 163, 164, 224, 235, 246, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 290, 293, 294, 295, 304, 306, 309, 312, 313, 319, 322, 337, 346, 347, 354, 361, 367, 371, 373], "latent_s": [2, 46, 47, 49, 51], "fc": [2, 46, 47], "out_featur": [2, 53, 56], "ident": [2, 10, 12, 35, 40, 81, 109, 110, 124, 125, 145, 147, 149, 151, 160, 163, 166], "save_weights_onli": 2, "mode": [2, 11, 35, 40, 46, 47, 49, 50, 51, 59, 60, 67, 70, 159, 162, 242, 299], "max": [2, 144, 148, 154, 156, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 279, 289, 290], "monitor": [2, 35, 40, 50, 59], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 18, 24, 35, 40, 46, 47, 50, 59], "trainer_param": [2, 35, 40], "default_root_dir": 2, "acceler": [2, 35, 40, 46, 47], "max_epoch": [2, 35, 40, 46, 47, 49, 50, 51, 59], "lr": [2, 8, 46, 47, 49, 50, 51, 59, 145, 147, 149, 151], "5e": [2, 50, 59], "temperatur": [2, 46, 47, 49, 50, 51, 59, 66, 68, 69, 72, 210, 237], "07": 2, "weight_decai": [2, 8, 46, 47, 49, 50, 51, 59], "1e": [2, 8, 17, 23, 50, 59, 155, 157, 304, 309, 371], "random_st": [2, 35, 40, 46, 47, 49, 51], "42": [2, 4, 6, 8, 79, 80, 308, 309, 312, 321, 322, 341, 346, 353, 354, 365, 370, 371], "print": [2, 4, 5, 6, 8, 29, 33, 79, 80, 84, 88, 102, 160, 163, 211, 213, 225, 226, 236, 253, 255, 264, 320, 333, 336, 337, 338, 339, 352, 356, 360, 361, 362, 363], "found": [2, 5, 27, 28, 29, 30, 31, 32, 33, 35, 40, 50, 59, 103], "pretrain": [2, 49, 51], "weight_fil": [2, 86, 104], "fitted_": 2, "fit": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 50, 59, 67, 70, 103, 299], "deploi": [2, 46, 47], "downstream": [2, 46, 47, 49, 51], "task": [2, 46, 47, 49, 51, 74, 75, 109, 110, 124, 125], "see": [2, 27, 28, 30, 31, 32, 46, 47, 49, 50, 51, 59, 60, 66, 68, 69, 72, 100, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 159, 160, 161, 162, 163, 164, 175, 181, 197, 198, 299, 328, 330], "well": [2, 35, 40, 46, 47, 49, 51, 68, 72, 145, 147, 149, 151], "littl": [2, 46, 47], "verifi": [2, 46, 47, 83, 103], "whether": [2, 18, 24, 35, 40, 46, 47, 83, 86, 104], "represent": [2, 29, 33, 46, 47, 49, 50, 51, 59, 107, 111, 175, 181, 206, 210, 222, 223, 225, 237, 251, 252, 253, 299, 315, 341, 349, 365, 367], "featur": [2, 10, 17, 18, 23, 24, 29, 33, 46, 47, 49, 50, 51, 59, 68, 72, 108, 109, 110, 113, 124, 125, 195, 212, 224, 242, 243, 244, 245, 246, 247, 248, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 299], "word": [2, 46, 47], "singl": [2, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 59, 82, 372], "map": [2, 5, 6, 28, 29, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 109, 110, 124, 125, 160, 161, 163, 164, 281, 282, 285, 292, 293, 297, 298, 306, 319, 340, 364], "predict": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 53, 56, 77, 78, 209, 213, 226, 240, 255, 264], "base": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 66, 67, 68, 69, 70, 71, 72, 81, 82, 83, 85, 86, 87, 88, 100, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 199, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 304, 323, 324, 334, 335, 340, 357, 358, 364], "network": [2, 49, 50, 51, 59, 144, 148, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "chang": [2, 50, 59, 83, 160, 163, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299], "dure": [2, 29, 33, 35, 40, 46, 47, 146, 150, 160, 161, 163, 164, 173, 179], "process": [2, 11, 35, 40, 46, 47, 211, 236], "h": [2, 49, 51, 54, 57, 67, 68, 70, 72, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 205, 254], "necessari": 2, "further": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "worri": 2, "too": [2, 29, 33, 299], "about": [2, 60, 341, 365], "veri": [2, 5, 46, 47, 144, 148, 160, 161, 163, 164], "few": 2, "henc": 2, "expect": [2, 8, 27, 28, 29, 30, 31, 32, 33, 50, 59, 60, 146, 150, 159, 162, 197, 198], "even": [2, 86, 104], "assum": [2, 46, 47, 145, 147, 149, 151, 160, 163, 170, 171, 183, 184, 304], "alreadi": [2, 29, 33, 82, 83, 86, 104], "been": [2, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59], "vector": [2, 17, 23, 29, 33, 49, 50, 51, 59, 68, 72, 334, 357], "dynam": [2, 46, 47, 60, 62, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], "so": [2, 5, 46, 47, 109, 110, 124, 125], "here": [2, 5, 35, 40, 46, 47, 49, 51, 60, 82, 328, 330], "within": [2, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "second": [2, 4, 5, 6, 7, 8, 50, 53, 56, 59, 66, 68, 69, 72, 77, 78], "did": [2, 5], "ani": [2, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 76, 81, 82, 83, 140, 142, 144, 146, 148, 150, 154, 156, 197, 198, 320, 352], "signific": [2, 35, 40], "gain": 2, "test": [2, 5, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 40], "while": [2, 5, 35, 40, 46, 47, 49, 50, 51, 59, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 154, 156, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "800": 2, "64": [2, 4, 35, 40, 79, 80, 108, 109, 110, 113, 122, 123, 124, 125, 147, 151, 154, 156, 160, 163, 207, 208, 209, 222, 223, 225, 238, 240, 249, 250, 251, 252, 253], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 29, 33, 35, 40, 46, 47, 50, 59, 68, 72, 77, 78, 79, 80, 82, 107, 108, 109, 110, 111, 113, 124, 125, 144, 148, 170, 173, 179, 182, 183, 188, 189, 192, 196, 199, 200, 201, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286, 297, 298, 308, 312, 313, 322, 333, 336, 337, 338, 340, 346, 347, 354, 356, 360, 361, 362, 364, 370], "len": [2, 4, 5, 6, 8, 224, 225, 226, 246, 253, 264, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 314, 333, 338, 348, 356, 362], "froozen": 2, "e": [2, 6, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 63, 67, 68, 70, 72, 77, 78, 82, 108, 109, 110, 113, 124, 125, 144, 148, 160, 163, 299, 308, 370], "output": [2, 18, 24, 35, 40, 46, 47, 50, 59, 60, 63, 74, 75, 77, 78, 79, 80, 81, 83, 85, 87, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 173, 178, 179, 207, 209, 212, 224, 240, 242, 243, 244, 245, 246, 247, 248, 249, 254, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 323, 324], "new_model": 2, "sequenti": [2, 46, 47, 53, 56, 115, 116, 334, 357], "normal_": 2, "mean": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 51, 64, 79, 80, 140, 142, 144, 146, 148, 150, 155, 157, 159, 162, 209, 224, 240, 242, 246, 279, 290, 299, 321, 353], "std": [2, 140, 142, 155, 157, 299], "01": [2, 9, 373], "bia": [2, 53, 56, 275, 286], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 29, 33, 107, 111, 224, 246], "evalu": [2, 6, 67, 70, 285], "everi": [2, 35, 40, 49, 50, 51, 59, 71, 83, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 311, 345], "earli": [2, 35, 40], "stop": [2, 35, 40, 50, 59, 334, 357], "low": [2, 29, 33, 50, 59, 188], "frequenc": [2, 50, 59], "ensur": [2, 75, 193], "despit": 2, "thei": [2, 5, 8, 29, 33, 85, 87], "smaller": [2, 17, 23], "20": [2, 4, 6, 7, 8, 154, 156, 170, 183], "50": [2, 4, 132, 133, 134, 135], "200": 2, "give": [2, 10, 35, 40, 160, 161, 163, 164], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 15, 16, 17, 21, 22, 23, 35, 40, 46, 47, 49, 50, 51, 59, 60, 74, 75, 77, 78, 79, 80, 109, 110, 124, 125, 244, 299, 300], "classif": [2, 6, 8, 15, 17, 18, 21, 23, 24, 35, 40, 50, 59, 68, 72, 196, 199, 200, 201, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "test_load": 2, "val_acc": 2, "check_val_every_n_epoch": [2, 35, 40, 50, 59], "3": [2, 4, 5, 7, 8, 9, 18, 24, 50, 59, 60, 79, 80, 85, 87, 100, 108, 109, 110, 113, 124, 125, 139, 141, 144, 148, 160, 161, 163, 164, 172, 173, 175, 178, 179, 181, 196, 197, 198, 199, 200, 201, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 235, 236, 245, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 305, 306, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 326, 327, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 370, 371, 373], "pred": [2, 8, 46, 47], "shape": [2, 5, 6, 8, 15, 16, 17, 21, 22, 23, 29, 33, 50, 59, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 213, 224, 225, 226, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 320, 321, 336, 352, 353, 360], "acc": [2, 35, 40], "argmax": [2, 8], "float": [2, 4, 8, 17, 19, 23, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 165, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 192, 203, 204, 209, 240, 244, 297, 298, 302, 303, 304, 307, 309, 369, 371], "accuraci": [2, 8, 15, 17, 21, 23, 35, 40, 46, 47, 49, 51], "2f": 2, "_pretrained_filenam": 2, "path": [2, 27, 28, 29, 31, 32, 33, 60, 86, 104, 172, 173, 178, 179, 212, 224, 245, 246, 324, 325, 329, 331, 332, 334, 343, 344, 357], "join": 2, "isfil": 2, "save": [2, 60, 331, 332], "state_dict": 2, "one": [2, 5, 49, 50, 51, 53, 54, 56, 57, 59, 60, 71, 74, 75, 79, 80, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 139, 141, 144, 146, 148, 150, 160, 163, 173, 179, 186, 194, 207, 210, 237, 238, 239, 241, 244, 249, 280, 281, 282, 291, 292, 293, 309, 371], "would": [2, 49, 51, 79, 80], "improv": [2, 109, 110, 124, 125, 144, 148], "classifi": [2, 15, 21, 36, 41], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 27, 28, 30, 31, 32, 46, 47, 173, 179, 197, 198, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286], "dimension": [2, 49, 50, 51, 59], "With": 2, "achiev": 2, "80": [2, 4, 79, 80], "increas": [2, 322, 354], "suggest": 2, "exponenti": [2, 50, 59, 67, 68, 70, 72], "could": [2, 5, 49, 50, 51, 59, 145, 147, 149, 151], "finetun": [2, 49, 51], "adapt": [2, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 173, 179, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "indic": [2, 29, 33, 35, 40, 50, 59, 77, 78, 145, 149, 170, 183, 242, 247, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 304, 312, 313, 314, 315, 321, 322, 334, 340, 346, 347, 348, 349, 353, 354, 357, 364, 366], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "clear": [2, 18, 24], "its": [2, 29, 33, 50, 59, 81, 83, 97, 98, 109, 110, 124, 125, 154, 156, 160, 163, 324, 334, 357], "count": 2, "1000": [2, 35, 40], "fair": 2, "ones": [2, 50, 59], "becaus": [2, 5, 49, 51, 299], "distribut": [2, 35, 40, 49, 51, 140, 142, 144, 148, 208, 225, 250, 253], "notic": 2, "ad": [2, 155, 157, 212, 224, 245, 246], "restrict": 2, "oper": [2, 35, 40, 46, 47, 49, 51, 244, 299], "125": 2, "1250": 2, "done": [2, 35, 40, 324], "recogn": 2, "object": [2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 60, 63, 85, 86, 87, 88, 100, 102, 104, 169, 182, 187, 188, 192, 203, 204, 297, 298, 299, 300, 323, 324], "check": [2, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 31, 35, 40, 60, 73, 74, 81, 82, 83, 100, 101, 102, 103, 145, 146, 149, 150, 160, 163, 165], "patch": [2, 49, 51, 173, 179, 197, 198, 209, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 335, 340, 342, 358, 364], "belong": [2, 74], "chosen": [2, 17, 23, 35, 40], "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 62, 63, 64, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 154, 155, 156, 157, 166, 168, 172, 173, 175, 177, 178, 179, 181, 182, 186, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 205, 206, 207, 208, 210, 212, 222, 223, 224, 237, 238, 239, 241, 244, 245, 246, 249, 250, 251, 252, 254, 273, 280, 281, 282, 285, 291, 292, 293, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "almost": [2, 6, 155, 157], "strongli": 2, "iter": [2, 17, 23, 35, 40, 46, 47, 49, 51, 254], "train_transform": 2, "sigma": [2, 4, 50, 54, 57, 59, 68, 72, 139, 140, 141, 142, 155, 157, 160, 161, 163, 164, 172, 173, 174, 178, 179, 180], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 29, 33, 79, 80, 109, 110, 124, 125, 334, 357], "less": 2, "leverag": [2, 50, 59], "amount": 2, "generaliz": 2, "sole": [2, 35, 40], "par": 2, "tenth": 2, "experiment": [2, 60], "limit": 2, "recent": 2, "work": [2, 5, 27, 31, 50, 59, 60, 160, 163, 172, 173, 178, 179, 254, 299], "ting": [2, 210, 237], "chen": [2, 66, 69, 210, 237], "et": [2, 49, 50, 51, 59, 66, 69, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 154, 156, 160, 161, 163, 164, 209, 212, 224, 240, 245, 246], "al": [2, 49, 50, 51, 59, 66, 69, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 154, 156, 160, 161, 163, 164, 209, 212, 224, 240, 245, 246], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": [2, 17, 23], "come": [2, 49, 51], "close": [2, 5, 50, 59], "approach": [2, 11], "combin": [2, 170, 183], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 29, 33, 109, 110, 124, 125, 207, 249], "year": [2, 29, 33], "great": [2, 49, 51], "includ": [2, 10, 16, 19, 22, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 51, 83, 195, 197, 198], "distil": 2, "byol": 2, "redund": [2, 74], "reduct": [2, 35, 40], "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4, 29, 33], "step": [2, 8, 18, 24, 35, 40, 46, 47, 49, 50, 51, 59, 212, 224, 245, 246], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 18, 24, 28, 32, 108, 113, 145, 149, 299, 324], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 328, 330], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8, 29, 33], "c": [4, 5, 7, 17, 23, 29, 33, 85, 87, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 205, 311, 314, 334, 335, 345, 348, 357, 358], "ambrois": [4, 5, 29, 33], "numpi": [4, 5, 6, 8, 18, 24, 27, 28, 29, 30, 31, 32, 33, 50, 59, 73, 83, 154, 156, 159, 160, 162, 163, 165, 299, 302, 303, 307, 369], "np": [4, 5, 6, 8, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 305, 318, 321, 353], "surfifi": [4, 5, 6, 7, 8, 9, 10, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373], "min_depth_to_get_n_neighbor": [4, 10, 166, 301, 333, 356], "plot": [4, 5, 6, 7, 8, 10, 166, 297, 298, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "plot_trisurf": [4, 5, 6, 7, 8, 10, 166, 296, 297, 298, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 334, 335, 340, 341, 345, 346, 347, 348, 352, 353, 354, 357, 358, 364, 365, 370, 371], "interv": [4, 10, 50, 59, 166, 168, 182, 185, 188, 192], "vertic": [4, 5, 7, 29, 33, 170, 171, 172, 173, 175, 178, 179, 181, 183, 184, 196, 199, 200, 201, 209, 224, 235, 240, 246, 275, 276, 286, 287, 297, 298, 299, 305, 306, 308, 309, 311, 312, 313, 315, 318, 319, 320, 321, 322, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 370, 371], "triangl": [4, 5, 7, 172, 173, 175, 178, 179, 181, 224, 235, 246, 297, 298, 305, 306, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 326, 327, 331, 332, 334, 335, 339, 340, 341, 342, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 363, 364, 365, 366, 367, 371], "order": [4, 5, 6, 7, 8, 35, 40, 50, 59, 60, 79, 80, 82, 145, 149, 160, 161, 163, 164, 172, 173, 178, 179, 197, 198, 207, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 246, 249, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 300, 304, 305, 306, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 371], "neigh": [4, 7, 172, 173, 178, 179, 280, 291, 314, 315, 334, 335, 341, 342, 348, 349, 357, 358, 365], "direct_neighbor": [4, 7, 275, 277, 278, 279, 283, 286, 288, 289, 290, 294, 314, 334, 340, 342, 348, 357, 364], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 60, 79, 80, 92, 99, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 310], "aug": 4, "add_axi": 4, "alpha": [4, 5, 16, 19, 22, 25, 160, 161, 163, 164, 297, 298, 302, 303, 306, 307, 319, 369], "arg": [4, 82, 83, 110, 125, 177, 191, 225, 253, 299], "kwarg": [4, 15, 16, 17, 19, 21, 22, 23, 25, 35, 40, 46, 47, 49, 50, 51, 59, 81, 82, 83, 85, 87, 110, 112, 118, 119, 120, 121, 125, 126, 127, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 177, 191, 225, 253, 299], "data": [4, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 67, 68, 70, 72, 74, 75, 76, 77, 78, 81, 82, 83, 86, 104, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 190, 191, 192, 193, 194, 195, 197, 198, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 299, 305, 308, 311, 312, 318, 321, 322, 324, 325, 328, 330, 341, 343, 344, 345, 346, 353, 354, 365, 370], "fig": [4, 5, 7, 297, 298, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "ax": [4, 5, 6, 7, 145, 147, 149, 151, 282, 293, 297, 298, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "subplot": [4, 5, 7, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "subplot_kw": [4, 5, 7, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "3d": [4, 5, 7, 29, 33, 50, 59, 68, 72, 83, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 306, 311, 314, 317, 319, 320, 334, 335, 340, 345, 348, 351, 352, 357, 358, 364], "aspect": [4, 5, 7, 144, 146, 148, 150, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "auto": [4, 5, 7, 35, 40, 60, 64, 202, 206, 306, 311, 314, 319, 320, 334, 335, 340, 345, 348, 352, 357, 358, 364], "flatten": [4, 6, 209, 240, 285], "colorbar": [4, 7, 297, 298, 306, 311, 313, 314, 319, 320, 334, 335, 340, 345, 347, 348, 352, 357, 358, 364], "edgecolor": [4, 5, 297, 298, 306, 319], "white": [4, 174, 180], "linewidth": [4, 7, 297, 298], "red": [4, 7, 311, 314, 334, 335, 345, 348, 357, 358], "blue": [4, 5, 7, 306, 314, 319, 334, 335, 348, 357, 358], "green": [4, 5, 7, 306, 319], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 50, 59, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 145, 149, 154, 155, 156, 157, 160, 163, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 191, 193, 196, 197, 198, 199, 200, 201, 242, 247, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 304, 305, 306, 308, 309, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 331, 332, 334, 335, 339, 340, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 363, 364, 365, 366, 367, 370, 371], "patch_siz": [4, 173, 179], "int": [4, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 31, 33, 35, 40, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 67, 68, 70, 72, 79, 80, 82, 83, 107, 108, 109, 110, 111, 113, 121, 124, 125, 126, 127, 131, 133, 135, 144, 145, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 178, 179, 182, 183, 184, 185, 192, 196, 197, 198, 199, 200, 201, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 304, 305, 308, 312, 313, 314, 317, 318, 320, 322, 333, 334, 335, 336, 337, 338, 340, 346, 347, 348, 351, 352, 354, 356, 357, 358, 360, 361, 362, 364, 366, 370], "n_patch": [4, 173, 179, 209, 240], "uniform": [4, 50, 59, 77, 78, 79, 80], "phi": [4, 175, 181], "180": 4, "theta": [4, 175, 181], "psi": [4, 175, 181], "controlateral_textur": 4, "prob": [4, 170, 171, 183, 184, 185], "n_vertic": [4, 6, 8, 170, 171, 183, 184, 185, 200, 201, 209, 222, 223, 225, 240, 251, 252, 253, 299, 312, 322, 333, 336, 337, 338, 341, 346, 354, 356, 360, 361, 362, 365], "controlateral_data": [4, 171, 184], "group_textur": 4, "group_data": [4, 170, 183], "n_sampl": [4, 6, 8, 15, 16, 17, 21, 22, 23, 67, 70, 74, 75, 77, 78, 79, 80, 170, 183, 196, 199, 200, 201, 209, 240, 308, 309, 311, 312, 321, 322, 341, 345, 346, 353, 354, 365, 370, 371], "neigh_ind": [4, 170, 183], "groupbi": [4, 170, 183], "n_neighbor": [4, 15, 16, 21, 22, 170, 183], "n_compon": [4, 170, 183], "30": [4, 8, 170, 183], "58": 4, "74": [4, 29, 33, 79, 80], "49": 4, "62": 4, "47": 4, "15": [4, 8, 79, 80], "99": [4, 8, 50, 59, 154, 156], "92": [4, 79, 80], "54": 4, "65": [4, 6, 79, 80], "31": 4, "14": 4, "78": 4, "90": [4, 79, 80, 147, 151], "76": 4, "93": [4, 29, 33], "21": [4, 9, 79, 80, 373], "70": 4, "22": 4, "46": 4, "89": 4, "25": [4, 8, 79, 80], "82": 4, "11": [4, 5], "59": 4, "56": 4, "12": [4, 5, 108, 113, 334, 357], "19": [4, 29, 33], "13": [4, 7], "23": 4, "28": 4, "51": 4, "79": 4, "16": [4, 35, 40, 50, 59, 108, 113, 281, 282, 292, 293], "17": 4, "77": 4, "88": [4, 29, 33], "52": 4, "95": [4, 68, 72, 79, 80], "48": 4, "72": 4, "66": 4, "24": [4, 5, 108, 113], "69": [4, 5], "86": [4, 154, 156], "26": [4, 79, 80], "27": [4, 79, 80], "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 35, 40, 108, 113, 212, 224, 225, 244, 245, 246, 253], "33": [4, 144, 146, 148, 150], "34": [4, 29, 33, 79, 80], "39": 4, "35": [4, 8], "37": 4, "38": [4, 29, 33], "45": [4, 341, 365], "71": 4, "40": [4, 6, 7, 8, 196, 199, 200, 201], "41": 4, "81": 4, "43": 4, "44": [4, 79, 80], "87": [4, 6, 9, 373], "98": 4, "97": 4, "53": 4, "68": [4, 9, 29, 33, 79, 80, 373], "55": [4, 79, 80], "57": 4, "61": [4, 79, 80], "94": [4, 68, 72], "67": 4, "75": [4, 79, 80, 146, 150], "84": 4, "85": [4, 79, 80], "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 29, 33, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 169, 176, 187, 190, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "probabl": [4, 29, 33, 67, 70, 83, 145, 147, 149, 151, 169, 170, 171, 183, 184, 185, 187, 189, 300], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "222": [4, 9, 373], "plot_augment": [4, 9, 373], "math": [5, 54, 57, 67, 70, 154, 156], "warn": [5, 29, 33, 35, 40, 50, 59, 60, 96], "scipi": [5, 67, 70, 299, 306, 319], "spatial": [5, 10, 83, 109, 110, 124, 125, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 306, 319], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 297, 298], "ico2ico": [5, 10, 166, 301, 306, 309, 319, 371], "build": [5, 7, 50, 59, 60, 79, 80, 172, 173, 178, 179, 182, 192, 211, 236, 299, 334, 335, 340, 342, 343, 344, 355, 357, 358, 364, 367], "refer": [5, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 306, 309, 319, 320, 340, 352, 364, 371], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 29, 33, 60, 195, 343, 344], "freesurf": [5, 29, 33, 211, 236, 326, 331, 340, 343, 364], "try": [5, 15, 16, 19, 21, 22, 25, 299], "find": [5, 15, 16, 17, 19, 21, 22, 23, 25, 60, 76, 304, 306, 311, 314, 319, 321, 345, 348, 353, 355], "optim": [5, 8, 17, 23, 35, 40, 46, 47, 49, 50, 51, 59, 60], "rotat": [5, 147, 151, 175, 181, 306, 315, 319, 341, 349, 365], "modul": [5, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 66, 68, 69, 71, 72, 83, 86, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 166, 167, 168, 172, 178, 207, 208, 209, 210, 211, 212, 213, 222, 223, 224, 225, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "rmse": [5, 79, 80], "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 18, 24, 49, 51, 73, 299], "suppos": 5, "equal": [5, 50, 59, 67, 68, 70, 72, 77, 78, 139, 141, 144, 148], "zero": [5, 6, 49, 51, 77, 78, 109, 110, 124, 125, 173, 179, 213, 224, 225, 226, 246, 247, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 318], "issu": [5, 63], "matric": [5, 299], "That": 5, "previou": 5, "algorithm": [5, 17, 23], "properli": 5, "correspond": [5, 15, 16, 18, 19, 21, 22, 24, 25, 29, 33, 50, 59, 74, 75, 145, 149, 170, 171, 183, 184, 304, 309, 336, 360, 371], "row": [5, 172, 173, 178, 179, 334, 357], "matrix": [5, 15, 16, 17, 21, 22, 23, 50, 59, 67, 68, 70, 72, 145, 147, 149, 151, 160, 163, 170, 183, 299], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": [5, 8, 9, 373], "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 274, 301], "togeth": [5, 300], "place": [5, 64], "comput": [5, 18, 19, 24, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 66, 67, 68, 69, 70, 71, 72, 76, 79, 80, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 154, 155, 156, 157, 205, 210, 237, 238, 239, 241, 244, 254, 280, 281, 282, 291, 292, 293, 299, 315, 324, 341, 349, 350, 365], "small": [5, 29, 33, 49, 50, 51, 59, 107, 111, 155, 157], "subset": [5, 197, 198], "point": [5, 7, 75, 76, 79, 80, 311, 314, 317, 321, 334, 335, 340, 345, 348, 350, 351, 353, 355, 357, 358, 364], "both": [5, 29, 33, 35, 40, 49, 51, 53, 54, 55, 56, 57, 58, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 210, 237, 238, 239, 241, 282, 293, 334, 357], "absolut": [5, 16, 19, 22, 25, 60, 63, 79, 80], "valu": [5, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 49, 50, 51, 59, 60, 68, 72, 74, 75, 79, 80, 83, 85, 87, 100, 102, 139, 140, 141, 142, 144, 148, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 173, 178, 179, 197, 198, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 297, 298, 302, 303, 304, 321, 334, 353, 357], "sign": [5, 306, 319], "vertices_of_interest_norm": 5, "search": [5, 314, 334, 348, 357], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 54, 55, 57, 58, 109, 110, 124, 125, 144, 148], "sum": [5, 8], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 35, 40, 46, 47, 49, 51, 86, 104, 159, 162], "depend": [5, 29, 33, 50, 59, 83], "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 35, 40, 50, 59, 71, 79, 80, 81, 82, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 145, 147, 149, 151, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 299], "categori": 5, "userwarn": [5, 27, 28, 30, 31, 32], "format": [5, 8, 14, 20, 79, 80, 83, 145, 147, 149, 151, 160, 163, 310, 326, 327, 331, 332], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 50, 59, 79, 80, 373], "simpli": [5, 50, 59], "solv": 5, "outlin": 5, "proper": [5, 27, 28, 31, 32], "anoth": 5, "half": 5, "clearli": 5, "appear": [5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": [5, 29, 33], "coord": [5, 10, 166, 303, 304, 305, 306, 307, 308, 309], "246": 5, "closest": [5, 315, 349], "9190925817849288": 5, "481": [5, 9, 373], "plot_match_icosahedron": [5, 9, 373], "convert": [6, 75, 160, 163, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 245, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 305, 308, 318, 370], "onto": [6, 209, 240, 308, 309, 370, 371], "spheric": [6, 9, 202, 203, 204, 206, 211, 212, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 243, 245, 246, 247, 248, 253, 255, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 281, 282, 285, 292, 293, 301, 302, 303, 305, 307, 308, 317, 318, 334, 351, 357, 369, 370, 373], "evenli": [6, 308, 370], "resampl": [6, 10, 83, 146, 150, 160, 161, 163, 164, 166, 308, 370], "respect": [6, 146, 150, 160, 163, 285, 308, 370], "sin": [6, 308, 370], "elev": [6, 203, 204, 207, 208, 213, 225, 226, 249, 250, 253, 255, 264, 285, 302, 303, 307, 308, 369, 370], "azimuth": [6, 203, 204, 207, 208, 213, 225, 226, 249, 250, 253, 255, 264, 285, 302, 303, 307, 308, 369, 370], "vice": 6, "versa": 6, "dataset": [6, 10, 15, 16, 21, 22, 27, 28, 29, 30, 31, 32, 33, 60, 166, 196, 197, 198, 199, 200, 201, 296, 308, 309, 312, 321, 322, 341, 346, 353, 354, 365, 370, 371], "ico_ord": [6, 8, 172, 173, 178, 179, 197, 198], "n_class": [6, 8, 196, 199, 200, 201, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 308, 309, 312, 321, 322, 341, 346, 353, 354, 365, 370, 371], "ico_vertic": [6, 8, 196, 199, 200, 201], "ico_triangl": [6, 8], "_": [6, 49, 51, 67, 70, 278, 279, 289, 290, 300, 328, 330], "make_classif": [6, 8, 10, 166, 195, 200, 201, 308, 309, 312, 321, 322, 341, 346, 353, 354, 365, 370, 371], "seed": [6, 8, 46, 47, 49, 51, 196, 199, 200, 201, 308, 309, 312, 321, 322, 341, 346, 353, 354, 365, 370, 371], "proj_textur": 6, "text2grid": [6, 10, 166, 301, 302, 303, 305, 307, 308, 318, 369, 370], "proj": [6, 305, 308, 318, 370], "lower": [6, 146, 150, 312, 343, 346], "nearest": [6, 15, 16, 21, 22, 146, 150, 160, 161, 163, 164, 170, 183, 224, 246, 247, 305, 308, 311, 318, 321, 345, 353, 370], "192": [6, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 245, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 305, 308, 318, 370], "text": [6, 7, 49, 51, 67, 68, 70, 72, 79, 80, 84, 92, 97, 98, 99, 154, 156], "grid2text": [6, 10, 166, 301, 302, 303, 305, 307, 308, 318, 369, 370], "is_label": [6, 8, 297, 298, 305, 309, 312, 318, 321, 322, 341, 346, 353, 354, 365, 371], "enabl": [6, 29, 33, 35, 40, 46, 47, 49, 51, 60, 85, 87], "scatter_dens": 6, "y": [6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 50, 59, 68, 72, 144, 145, 148, 149, 200, 201, 299, 302, 303, 305, 307, 308, 309, 312, 318, 321, 322, 341, 346, 353, 354, 365, 369, 370, 371], "labelx": 6, "labe": 6, "scatter": [6, 7, 311, 314, 334, 335, 340, 345, 348, 357, 358, 364], "densiti": [6, 67, 70, 317, 335, 351, 358], "left": [6, 29, 33, 49, 51, 67, 68, 70, 72, 145, 147, 149, 151, 154, 156, 203, 204, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 325], "width": [6, 109, 110, 124, 125, 297, 298], "bottom": 6, "height": [6, 254], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 49, 51, 160, 163, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286, 308, 334, 357, 370], "top": [6, 15, 16, 17, 19, 21, 22, 23, 25, 49, 51], "right": [6, 29, 33, 49, 51, 67, 68, 70, 72, 145, 147, 149, 151, 154, 156, 203, 204, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 325], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": [6, 145, 147, 149, 151, 160, 163], "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 302, 303, 307, 369], "cart2sph": [6, 10, 166, 301, 302, 303, 307, 369], "sin_elev": 6, "circularli": [6, 285], "continu": [6, 50, 59, 68, 72, 74, 75, 285], "circular": [6, 281, 282, 285, 292, 293], "pad": [6, 129, 159, 162, 224, 246, 247, 276, 281, 282, 285, 287, 292, 293], "boundari": [6, 285], "expand_dim": 6, "astyp": [6, 160, 163], "float32": [6, 160, 163], "from_numpi": [6, 160, 163], "pad_textur": 6, "circular_pad": [6, 10, 166, 274, 285], "padd": 6, "conv": [6, 109, 110, 117, 124, 125, 212, 224, 242, 243, 244, 245, 246, 247, 248, 275, 286], "conv2d": [6, 254], "in_channel": [6, 8, 50, 59, 107, 108, 109, 110, 111, 113, 124, 125, 212, 224, 244, 245, 246], "out_channel": [6, 8, 212, 224, 244, 245, 246], "stride": [6, 109, 110, 122, 123, 124, 125, 128, 129, 281, 282, 292, 293], "conv_textur": 6, "194": [6, 213, 214, 215, 216, 217, 218, 219, 220, 221, 255, 256, 257, 258, 259, 260, 261, 262, 263, 281, 292], "694": [6, 9, 373], "plot_project_textur": [6, 9, 373], "get_rectangular_project": [7, 10, 166, 301, 317, 351], "depth": [7, 8, 29, 33, 110, 121, 125, 127, 131, 133, 135, 209, 212, 224, 240, 241, 244, 245, 246, 275, 277, 278, 279, 283, 286, 288, 289, 290, 294, 314, 333, 334, 337, 348, 356, 357, 361], "vidx": 7, "cnt": [7, 311, 314, 334, 335, 340, 345, 348, 357, 358, 364], "enumer": [7, 8, 311, 314, 334, 335, 340, 345, 348, 357, 358, 364], "marker": [7, 311, 314, 334, 335, 340, 345, 348, 357, 358, 364], "str": [7, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 63, 67, 68, 70, 72, 74, 79, 80, 86, 101, 103, 104, 126, 127, 144, 145, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 170, 172, 173, 175, 178, 179, 181, 183, 197, 198, 207, 208, 209, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 246, 247, 249, 250, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 290, 299, 310, 315, 324, 325, 326, 327, 329, 331, 332, 341, 343, 344, 349, 365, 368], "3x3": [7, 109, 110, 124, 125, 129, 212, 224, 245, 246], "rectangular": [7, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 317, 335, 351, 358], "sphere": [7, 242, 247, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 317, 335, 339, 350, 351, 355, 358, 359, 363], "zoom": [7, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 291, 314, 317, 335, 348, 351, 358], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": [7, 29, 33], "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 35, 40, 173, 179, 275, 286, 314, 317, 348, 351, 367], "node_rec_neigh": 7, "node_tplane_neigh": 7, "247": [7, 9, 373], "196": [7, 9, 373], "plot_spherical_neighbor": [7, 9, 373], "sphericalunet": [8, 10, 166, 206, 212, 224, 244, 245, 246], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 29, 33, 166, 167, 168, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 240, 245, 246, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 297, 298, 305, 308, 318, 325, 326, 327, 328, 331, 332, 334, 357, 370, 372], "crossentropi": 8, "sgd": [8, 50, 59], "obviou": 8, "classificationdataset": [8, 10, 166, 195, 196, 199], "in_ord": [8, 224, 246], "start_filt": [8, 212, 224, 245, 246], "conv_mod": [8, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "dine": [8, 172, 173, 178, 179, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286, 334, 357], "dine_s": [8, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "up_mod": [8, 224, 246, 247], "transpos": [8, 212, 224, 245, 246, 247, 277, 282, 283, 288, 293, 294], "loss_fn": 8, "crossentropyloss": 8, "momentum": [8, 50, 59], "n_batch": 8, "zero_grad": 8, "backward": [8, 50, 59, 74, 75], "current": [8, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 61, 62, 64, 83, 145, 149], "item": [8, 324], "7f": 8, "5d": 8, "eval": [8, 35, 40, 46, 47, 49, 51], "test_loss": 8, "correct": [8, 74, 75, 79, 80, 83], "y_pred": [8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 74, 75, 77, 78, 79, 80], "no_grad": 8, "logit": [8, 66, 69], "softmax": [8, 49, 51], "type": [8, 14, 20, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 59, 60, 61, 74, 75, 76, 81, 82, 83, 109, 110, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 175, 181, 182, 192, 224, 246, 247, 279, 290, 315, 334, 341, 349, 357, 365], "append": [8, 18, 24, 35, 40], "concaten": [8, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 244, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "error": [8, 16, 19, 22, 25, 29, 33, 35, 40, 46, 47, 79, 80, 100, 103, 155, 157, 299, 323], "n": [8, 15, 16, 17, 19, 21, 22, 23, 25, 35, 40, 68, 72, 86, 104, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 191, 196, 199, 200, 201, 205, 209, 240, 275, 277, 280, 286, 288, 291, 297, 298, 304, 305, 306, 308, 309, 313, 314, 315, 318, 319, 320, 326, 327, 331, 332, 334, 335, 339, 341, 347, 348, 349, 352, 357, 358, 363, 365, 366, 367, 370, 371], "1f": 8, "avg": 8, "8f": 8, "076410": 8, "872445": 8, "761760": 8, "624251": 8, "504724": 8, "404453": 8, "310382": 8, "227838": 8, "003671": 8, "003717": 8, "004383": 8, "004837": 8, "004373": 8, "002926": 8, "001555": 8, "001219": 8, "000555": 8, "000464": 8, "000371": 8, "000276": 8, "000189": 8, "000122": 8, "000075": 8, "000046": 8, "000003": 8, "000004": 8, "000005": 8, "000007": 8, "000010": 8, "000015": 8, "000021": 8, "000016": 8, "corresspond": 8, "exactli": 8, "ground": [8, 74, 75, 79, 80], "truth": [8, 74, 75, 79, 80], "199": [8, 9, 373], "plot_unet_segment": [8, 9, 373], "842": [9, 373], "02": [9, 144, 148, 373], "pleas": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "detail": [10, 15, 17, 21, 23, 66, 69, 83, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 146, 150], "raw": [10, 29, 33, 325, 328, 330], "mai": [10, 35, 40, 299], "enough": 10, "guidelin": 10, "deep": [10, 12, 49, 50, 51, 59, 154, 156, 372], "neuroimag": [10, 12, 27, 28, 29, 30, 31, 32, 33, 197, 198, 225, 253], "metric": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 59, 74, 75, 76, 77, 78, 79, 80, 166, 170, 183], "variou": [10, 84, 254], "help": [10, 35, 40, 84], "develop": [10, 11, 84], "volum": [10, 29, 33, 50, 59, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 325, 330, 372], "definit": [10, 60, 67, 70, 105, 106, 202, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 321, 353], "backbon": [10, 50, 59, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 166, 210, 237], "intens": [10, 83, 139, 140, 141, 142, 154, 155, 156, 157, 166], "preprocess": [10, 29, 33, 83, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 299], "link": 10, "plugin": 10, "helper": [10, 167], "integr": [10, 68, 72, 76, 167, 244], "pytorch": [10, 35, 40, 46, 47, 49, 50, 51, 59, 167, 207, 208, 222, 223, 249, 250, 251, 252, 310, 372], "artifici": [10, 144, 148, 195], "dedic": [10, 274], "content": [10, 27, 31], "fetch_experi": [10, 12, 60, 166], "filter_config": [10, 12, 61, 166], "get_env": [10, 12, 62, 166], "load_interfac": [10, 12, 63, 166], "update_param": [10, 12, 64, 166], "multiviewstransform": [10, 12, 82, 166], "batchtypingcallback": [10, 13, 14, 20, 35, 40, 166], "kneighborsclassifiercvcallback": [10, 13, 15, 21, 166], "kneighborsregressorcvcallback": [10, 13, 16, 22, 166], "logisticregressioncvcallback": [10, 13, 17, 23, 166], "modelprob": [10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 166], "ridgecvcallback": [10, 13, 19, 25, 166], "model_prob": [10, 21, 22, 23, 24, 25, 166], "check_typ": [10, 20, 166], "baseimagedataset": [10, 26, 27, 31, 166], "basenumpydataset": [10, 26, 28, 32, 166], "openbhb": [10, 29, 33, 166], "basedataset": [10, 26, 27, 28, 30, 31, 32, 166], "baseestim": [10, 18, 24, 34, 35, 40, 46, 47, 49, 50, 51, 59, 67, 70, 166], "classifiermixin": [10, 34, 36, 41, 46, 47, 166], "clustermixin": [10, 34, 37, 42, 166], "regressormixin": [10, 34, 38, 43, 166], "transformermixin": [10, 18, 24, 34, 39, 44, 49, 50, 51, 59, 166], "logistic_regress": [10, 47, 166], "yawarecontrastivelearn": [10, 48, 50, 59, 166], "yawar": [10, 55, 58, 59, 166], "projectionhead": [10, 52, 53, 54, 55, 56, 57, 58, 166], "simclrprojectionhead": [10, 52, 54, 57, 166], "yawareprojectionhead": [10, 50, 52, 55, 58, 59, 166], "projection_head": [10, 50, 53, 56, 57, 58, 59, 166], "infonc": [10, 46, 47, 49, 50, 51, 59, 66, 68, 69, 72, 166], "kernelmetr": [10, 50, 59, 65, 67, 68, 70, 72, 166], "yawareinfonc": [10, 50, 59, 65, 68, 72, 166], "yaware_infonc": [10, 50, 59, 70, 71, 72, 166], "pairwisecosinesimilar": [10, 65, 71, 166], "pearson_r": [10, 73, 77, 78, 166], "regression_report": [10, 73, 79, 80, 166], "_regress": [10, 74, 75, 76, 166], "_check_reg_target": [10, 73, 74, 75, 166], "_check_reg_targets_with_floating_dtyp": [10, 73, 74, 75, 166], "_find_matching_floating_dtyp": [10, 73, 74, 75, 76, 166], "regress": [10, 16, 17, 18, 19, 22, 23, 24, 25, 35, 38, 40, 43, 46, 47, 74, 75, 78, 79, 80, 166], "bunch": [10, 60, 85, 87, 166], "print_multicolor": [10, 84, 92, 99, 166], "attr": [10, 84, 89, 101, 166], "fg": [10, 84, 90, 166], "hex": [10, 84, 91, 166], "print_result": [10, 84, 93, 166], "print_subtitl": [10, 84, 94, 166], "print_titl": [10, 84, 95, 166], "print_warn": [10, 84, 96, 166], "random_styl": [10, 84, 97, 166], "styliz": [10, 84, 98, 166], "_availableifdescriptor": [10, 84, 100, 166], "_estimator_i": [10, 84, 101, 166], "available_if": [10, 84, 102, 166], "check_is_fit": [10, 84, 103, 166], "alexnet": [10, 106, 107, 111, 166], "densenet": [10, 106, 108, 112, 113, 119, 166], "resnettrunc": [10, 106, 110, 125, 166], "densenet121": [10, 106, 112, 119, 166], "resnet18_trunc": [10, 106, 121, 131, 166], "resnet50": [10, 106, 109, 110, 124, 125, 132, 134, 166], "resnet50_trunc": [10, 106, 133, 135, 166], "densenet3d": [10, 113, 114, 115, 116, 117, 118, 119, 166], "_denseblock": [10, 106, 114, 166], "_denselay": [10, 106, 115, 166], "_transit": [10, 106, 116, 166], "_bn_function_factori": [10, 106, 117, 166], "_densenet": [10, 106, 118, 166], "alexnet3d": [10, 111, 166], "resnet3d": [10, 50, 59, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 166], "basicblock": [10, 106, 109, 110, 122, 124, 125, 166], "bottleneck": [10, 106, 108, 109, 110, 113, 123, 124, 125, 166], "_resnet": [10, 106, 126, 166], "_resnet_trunc": [10, 106, 127, 166], "conv1x1": [10, 106, 128, 166], "conv3x3": [10, 106, 129, 166], "volume_transform": [10, 165, 166], "volumetransform": [10, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 165, 166], "randomgaussianblur": [10, 83, 138, 139, 141, 166], "randomgaussiannois": [10, 83, 138, 140, 142, 166], "random_blur": [10, 141, 166], "random_nois": [10, 142, 166], "randomeras": [10, 83, 143, 144, 148, 166], "randomflip": [10, 83, 143, 145, 149, 166], "randomrot": [10, 83, 143, 147, 151, 166], "random_eras": [10, 148, 166], "random_rot": [10, 151, 166], "random_flip": [10, 149, 166], "random_resized_crop": [10, 150, 166], "robustresc": [10, 83, 153, 154, 156, 166], "znormal": [10, 83, 153, 155, 157, 166], "rescal": [10, 154, 156, 166, 343], "z_normal": [10, 157, 166], "croporpad": [10, 83, 158, 159, 162, 166], "crop_or_pad": [10, 162, 166], "standardscal": [10, 166, 167, 299], "randomcompos": [10, 166, 167, 300], "basetransform": [10, 166, 168, 169, 176, 177, 187, 190, 191], "groupmixup": [10, 166, 168, 170, 183], "hemimixup": [10, 166, 168, 171, 184], "surfblur": [10, 166, 168, 172, 178], "surfcutout": [10, 166, 168, 173, 179], "surfnois": [10, 166, 168, 174, 180], "surfrot": [10, 166, 168, 175, 181], "apply_chained_transform": [10, 166, 168, 177, 191], "multichannel_augment": [10, 166, 168, 186, 194], "mixup": [10, 166, 183, 184, 185], "mixupaugment": [10, 166, 168, 170, 171, 183, 184, 185], "randomaugment": [10, 166, 168, 169, 172, 173, 174, 175, 178, 179, 180, 181, 185, 186, 187, 188, 194], "listifi": [10, 166, 168, 193], "genericsurfdataset": [10, 166, 195, 197, 198], "_samples_gener": [10, 166, 199, 200], "_gener": [10, 166, 198], "sphericalvaeloss": [10, 166, 202, 203, 204], "vae": [10, 166, 203, 204, 205, 225, 249, 250, 251, 252, 253, 254], "log_likelihood": [10, 166, 202, 205], "hemifusiondecod": [10, 166, 206, 207, 249], "hemifusionencod": [10, 166, 206, 208, 250], "sit": [10, 166, 209, 238, 239, 240, 241], "sphericalbas": [10, 166, 206, 211, 222, 223, 224, 226, 236, 246, 251, 252, 264], "sphericalgunet": [10, 166, 206, 212, 224, 244, 245, 246], "sphericalgvgg": [10, 166, 206, 213, 226, 255, 264], "sphericalgvgg11": [10, 166, 206, 213, 214, 255, 256], "sphericalgvgg11bn": [10, 166, 206, 215, 257], "sphericalgvgg13": [10, 166, 206, 216, 258], "sphericalgvgg13bn": [10, 166, 206, 217, 259], "sphericalgvgg16": [10, 166, 206, 218, 260], "sphericalgvgg16bn": [10, 166, 206, 219, 261], "sphericalgvgg19": [10, 166, 206, 220, 262], "sphericalgvgg19bn": [10, 166, 206, 221, 263], "sphericalhemifusiondecod": [10, 166, 206, 222, 251], "sphericalhemifusionencod": [10, 166, 206, 223, 252], "sphericalva": [10, 166, 206, 225, 253], "sphericalvgg": [10, 166, 206, 213, 226, 255, 264], "sphericalvgg11": [10, 166, 206, 226, 227, 264, 265], "sphericalvgg11bn": [10, 166, 206, 228, 266], "sphericalvgg13": [10, 166, 206, 229, 267], "sphericalvgg13bn": [10, 166, 206, 230, 268], "sphericalvgg16": [10, 166, 206, 231, 269], "sphericalvgg16bn": [10, 166, 206, 232, 270], "sphericalvgg19": [10, 166, 206, 233, 271], "sphericalvgg19bn": [10, 166, 206, 234, 272], "ico": [10, 166, 172, 173, 178, 179, 197, 198, 206, 211, 235, 236, 275, 286], "attent": [10, 166, 206, 209, 238, 240], "feedforward": [10, 166, 206, 239], "compute_output_dim": [10, 166, 206, 254], "vgg": [10, 166, 213, 226, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], "class_factori": [10, 166, 206, 273], "downblock": [10, 166, 206, 242], "downgblock": [10, 166, 206, 243], "graphicalunet": [10, 166, 206, 244], "upblock": [10, 166, 206, 247], "upgblock": [10, 166, 206, 248], "icodineconv": [10, 166, 172, 178, 274, 275, 280, 281, 286, 291, 292], "icofixindexupsampl": [10, 166, 274, 276, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295], "icogenericupconv": [10, 166, 274, 276, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295], "icomaxindexupsampl": [10, 166, 274, 276, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295], "icopool": [10, 166, 274, 278, 279, 289, 290], "icorepaconv": [10, 166, 274, 275, 280, 281, 286, 291, 292], "icospmaconv": [10, 166, 254, 274, 275, 280, 281, 286, 291, 292], "icospmaconvtranspos": [10, 166, 274, 276, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295], "icoupconv": [10, 166, 274, 276, 277, 278, 283, 284, 287, 288, 289, 294, 295], "icoupsampl": [10, 166, 274, 276, 277, 278, 282, 283, 284, 287, 288, 289, 293, 294, 295], "debug_msg": [10, 166, 301, 310], "downsampl": [10, 122, 123, 166, 197, 198, 211, 236, 242, 243, 247, 277, 278, 279, 283, 288, 289, 290, 294, 301, 311, 312, 313, 321, 322, 343, 345, 346, 347, 353, 354], "downsample_data": [10, 166, 301, 311, 312, 313, 321, 322, 345, 346, 347, 353, 354], "downsample_ico": [10, 166, 301, 311, 312, 313, 321, 322, 345, 346, 347, 353, 354], "find_neighbor": [10, 166, 301, 314, 348], "find_rotation_interpol_coef": [10, 166, 301, 315, 339, 349, 363], "get_logg": [10, 166, 301, 316], "interpol": [10, 146, 150, 160, 161, 163, 164, 166, 175, 181, 224, 246, 247, 276, 284, 287, 295, 297, 298, 301, 305, 308, 311, 312, 313, 315, 318, 321, 322, 339, 341, 345, 346, 347, 349, 353, 354, 363, 365, 370], "interpolate_data": [10, 166, 301, 311, 312, 313, 321, 322, 345, 346, 347, 353, 354], "neighbors_rec": [10, 166, 280, 291, 301, 314, 334, 335, 348, 357, 358], "number_of_ico_vertic": [10, 166, 301, 336, 338, 360, 362], "number_of_neighbor": [10, 166, 301, 333, 337, 356, 361], "order_of_ico_from_vertic": [10, 166, 301, 336, 338, 360, 362], "order_triangl": [10, 166, 301, 339, 363], "patch_tri": [10, 166, 301, 340, 342, 364], "rotate_data": [10, 166, 175, 181, 301, 315, 341, 349, 365], "setup_log": [10, 166, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 368], "sph2cart": [10, 166, 301, 302, 303, 307, 369], "text2ico": [10, 166, 301, 306, 309, 319, 371], "hideprint": [10, 166, 301, 323], "compute_and_stor": [10, 166, 301, 324], "decompose_cifti": [10, 166, 301, 325], "read_freesurf": [10, 166, 301, 326], "read_gifti": [10, 166, 301, 327], "surf_data_from_cifti": [10, 166, 301, 328], "ungzip": [10, 166, 301, 329], "volume_from_cifti": [10, 166, 301, 330], "write_freesurf": [10, 166, 301, 331], "write_gifti": [10, 166, 301, 332], "find_corresponding_ord": [10, 166, 301, 304], "_patch_tri_it": [10, 166, 301, 342], "build_freesurfer_ico": [10, 166, 301, 343], "build_fslr_ref": [10, 166, 301, 344], "get_angle_with_xaxi": [10, 166, 301, 350], "middle_point": [10, 166, 301, 355], "triangles_to_edg": [10, 166, 301, 366], "vertex_adjacency_graph": [10, 166, 301, 367], "walk": 11, "intal": 11, "offici": [11, 76], "releas": 11, "best": [11, 15, 16, 17, 19, 21, 22, 23, 25, 60, 160, 161, 163, 164, 306, 319], "user": [11, 15, 17, 21, 23, 35, 40, 61, 212, 224, 245, 246, 299, 341, 365], "who": 11, "latest": [11, 73, 76], "contribut": 11, "without": [11, 50, 59, 145, 149, 154, 156, 329], "privileg": 11, "pip": 11, "git": 11, "repositori": [11, 29, 33, 86, 104], "github": [11, 206, 328, 330], "com": [11, 206], "deepinsight": 11, "page": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "document": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "explain": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "signatur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "big": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "pictur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "rais": [14, 18, 20, 24, 27, 28, 29, 30, 31, 32, 33, 82, 83, 100, 102, 103, 165, 299], "typeerror": [14, 20, 103], "annot": [14, 20], "traiterror": [14, 20], "incorrect": [14, 20], "notimplementederror": [14, 20], "handl": [14, 20, 50, 59, 82, 86, 104, 139, 141, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164], "on_predict_batch_start": [14, 20], "trainer": [14, 18, 20, 24, 35, 40, 46, 47, 49, 50, 51, 59], "pl_modul": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "batch_idx": [14, 20, 35, 40, 46, 47, 49, 50, 51, 59], "dataloader_idx": [14, 20, 35, 40, 46, 47, 49, 50, 51, 59], "begin": [14, 18, 20, 24], "on_test_batch_start": [14, 20], "on_train_batch_start": [14, 20], "train": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 146, 150, 160, 161, 163, 164, 168, 197, 198], "on_validation_batch_start": [14, 20], "train_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 50, 59], "test_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40], "probe_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "tupl": [15, 16, 18, 19, 21, 22, 24, 25, 29, 33, 46, 47, 49, 50, 51, 53, 56, 59, 60, 61, 86, 104, 108, 109, 113, 124, 126, 127, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 159, 160, 161, 162, 163, 164, 188, 189, 193, 235, 281, 282, 285, 292, 293], "cv": [15, 16, 17, 19, 21, 22, 23, 25, 60, 64], "n_job": [15, 16, 17, 21, 22, 23, 340, 364], "score": [15, 16, 17, 19, 21, 22, 23, 25, 77, 78, 79, 80], "balanced_accuraci": [15, 17, 21, 23], "knn": [15, 16, 18, 21, 22, 24], "embed": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 50, 59, 66, 68, 69, 72, 107, 108, 109, 110, 111, 113, 124, 125, 209, 240], "concret": [15, 16, 17, 19, 21, 22, 23, 25, 67, 70], "emb": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "fold": [15, 16, 17, 19, 21, 22, 23, 25], "log": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 46, 47, 49, 50, 51, 59, 68, 72, 203, 204, 205, 209, 211, 212, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 244, 245, 246, 253, 255, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 316, 368], "main": [15, 16, 17, 19, 21, 22, 23, 25, 79, 80], "averag": [15, 16, 17, 19, 21, 22, 23, 25, 77, 78, 79, 80], "across": [15, 17, 21, 23, 29, 33, 35, 40, 79, 80, 139, 141, 144, 146, 148, 150, 159, 162, 170, 171, 183, 184, 209, 240], "support": [15, 17, 21, 23, 29, 33, 35, 40, 46, 47, 49, 51, 83], "unweight": [15, 17, 21, 23], "precis": [15, 17, 21, 23, 35, 40, 50, 59, 76], "recal": [15, 17, 21, 23], "f1": [15, 17, 21, 23], "guid": [15, 17, 21, 23, 299], "report": [15, 17, 21, 23, 79, 80], "yield": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "form": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 33, 60, 86, 104, 170, 183], "probe": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 60], "default": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 63, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 103, 104, 107, 108, 109, 110, 111, 113, 124, 125, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 160, 161, 163, 164, 169, 170, 172, 173, 175, 178, 179, 181, 182, 183, 186, 187, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 281, 282, 286, 290, 292, 293, 297, 298, 299, 304, 308, 309, 312, 313, 315, 317, 320, 322, 323, 324, 325, 334, 335, 336, 339, 340, 341, 343, 344, 346, 347, 349, 351, 352, 354, 357, 358, 360, 363, 364, 365, 368, 370, 371], "metric_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "cross": [15, 16, 17, 19, 21, 22, 23, 25, 60, 64, 66, 69, 281, 282, 292, 293], "hyper": [15, 16, 17, 19, 21, 22, 23, 25], "job": [15, 16, 17, 21, 22, 23, 340, 364], "parallel": [15, 16, 17, 21, 22, 23], "unless": [15, 16, 17, 21, 22, 23], "joblib": [15, 16, 17, 21, 22, 23], "parallel_backend": [15, 16, 17, 21, 22, 23], "context": [15, 16, 17, 21, 22, 23, 323], "processor": [15, 16, 17, 21, 22, 23], "complet": [15, 16, 17, 19, 21, 22, 23, 25, 323, 324], "list": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 49, 50, 51, 53, 56, 59, 60, 64, 67, 68, 70, 72, 74, 82, 170, 177, 183, 191, 193, 196, 197, 198, 199, 200, 201, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 244, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 312, 313, 314, 321, 322, 346, 347, 348, 353, 354, 366], "option": [15, 16, 17, 19, 21, 22, 23, 25, 50, 53, 56, 59, 68, 72, 77, 78, 79, 80, 83, 172, 173, 178, 179, 203, 204, 207, 208, 211, 222, 223, 236, 249, 250, 251, 252, 297, 298, 299, 312, 313, 320, 322, 323, 339, 340, 346, 347, 352, 354, 363, 364], "scikit": [15, 16, 17, 19, 21, 22, 23, 25, 73], "org": [15, 16, 17, 19, 21, 22, 23, 25, 29, 33, 54, 55, 57, 58, 66, 69, 76, 100, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 144, 148, 328, 330], "model_evalu": [15, 16, 17, 19, 21, 22, 23, 25], "html": [15, 16, 17, 19, 21, 22, 23, 25, 76, 100], "dict": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 61, 62, 63, 64, 79, 80, 81, 82, 83, 85, 87, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 173, 178, 179, 197, 198, 211, 236, 273, 300, 314, 315, 334, 348, 349, 357], "addit": [15, 16, 17, 19, 21, 22, 23, 25, 35, 40, 46, 47, 49, 50, 51, 59, 81, 82, 83, 144, 148, 212, 224, 245, 246, 275, 286], "keyword": [15, 16, 17, 19, 21, 22, 23, 25, 50, 59, 74, 75, 81, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164], "argument": [15, 16, 17, 19, 21, 22, 23, 25, 50, 59, 63, 74, 75, 81, 82, 83, 103, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 324, 341, 365], "pass": [15, 16, 17, 19, 21, 22, 23, 25, 35, 40, 50, 53, 56, 59, 71, 74, 102, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 299], "constructor": [15, 16, 17, 19, 21, 22, 23, 25], "every_n_train_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "every_n_val_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "prog_bar": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40], "k": [15, 16, 21, 22, 49, 51, 67, 68, 70, 72, 108, 113, 170, 183, 275, 280, 286, 291, 309, 371], "spars": [15, 16, 17, 21, 22, 23, 299], "n_featur": [15, 16, 17, 21, 22, 23, 50, 59, 66, 67, 68, 69, 70, 72, 312, 322, 341, 346, 354, 365], "precomput": [15, 21], "n_output": [15, 16, 21, 22, 74, 75, 77, 78, 79, 80], "target": [15, 16, 17, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 74, 75, 79, 80, 154, 156, 159, 160, 161, 162, 163, 164, 197, 198, 306, 309, 319, 371], "log_metr": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "y_true": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 74, 75, 77, 78, 79, 80], "new": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 35, 40, 49, 51, 67, 70, 86, 104, 145, 149, 160, 161, 163, 164, 169, 187, 188, 189, 235, 276, 287, 299], "r2": [16, 19, 22, 25, 33, 79, 80], "regressor": [16, 19, 22, 25, 38, 43, 79, 80, 107, 111], "median": [16, 19, 22, 25, 79, 80, 159, 162], "squar": [16, 19, 22, 25, 79, 80, 207, 249, 254], "r\u00b2": [16, 19, 22, 25], "pearson": [16, 22, 77, 78, 79, 80], "correl": [16, 22, 77, 78, 79, 80, 281, 282, 292, 293], "coeffici": [16, 22, 77, 78, 79, 80, 315, 349], "varianc": [16, 19, 22, 25, 77, 78, 79, 80, 155, 157, 299], "regular": [16, 17, 19, 22, 23, 25, 50, 59, 144, 148, 321, 353], "strength": [16, 17, 19, 22, 23, 25], "ridg": [16, 18, 19, 22, 24, 25], "neg_mean_absolute_error": [16, 19, 22, 25], "neg_mean_squared_error": [16, 19, 22, 25], "max_it": [17, 23], "linear_solv": [17, 23], "lbfg": [17, 23, 50, 59], "logist": [17, 18, 23, 24, 46, 47], "l2": [17, 19, 23, 25], "invers": [17, 23, 66, 69], "grid": [17, 23, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 305, 308, 317, 318, 335, 351, 358, 370], "logarithm": [17, 23], "1e4": [17, 23], "machin": [17, 23, 60, 86, 104], "specifi": [17, 23, 27, 28, 29, 30, 31, 32, 33, 35, 40, 50, 59, 60, 63, 68, 72, 83, 86, 104, 145, 146, 149, 150, 160, 163, 169, 172, 173, 178, 179, 187, 197, 198, 297, 298, 312, 313, 322, 346, 347, 354], "strenght": [17, 23], "maximum": [17, 23, 49, 51, 159, 162, 297, 298, 340, 364], "taken": [17, 23, 154, 155, 156, 157], "solver": [17, 23], "converg": [17, 23, 49, 51], "liblinear": [17, 23], "newton": [17, 23], "cg": [17, 23], "choleski": [17, 23], "sag": [17, 23], "saga": [17, 23], "problem": [17, 23, 200, 201, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "accord": [17, 23, 29, 33, 109, 110, 124, 125, 154, 156, 334, 357], "on_test_epoch_start": [18, 24], "bool": [18, 24, 29, 33, 35, 40, 77, 78, 79, 80, 86, 101, 104, 108, 109, 110, 113, 124, 125, 144, 148, 169, 186, 187, 194, 197, 198, 203, 204, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 243, 244, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 286, 297, 298, 299, 320, 323, 325, 334, 339, 340, 352, 357, 363, 364], "on_test_epoch_end": [18, 24], "abc": [18, 24, 83], "basic": [18, 24], "logic": [18, 24, 35, 40, 46, 47, 83], "transform_step": [18, 24, 35, 40, 49, 50, 51, 59], "abstract": [18, 24, 35, 40, 83], "should": [18, 24, 29, 33, 35, 40, 46, 47, 50, 59, 71, 77, 78, 82, 83, 86, 102, 104, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 155, 157, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 299], "inherit": [18, 24, 35, 40, 60], "disabl": [18, 24, 35, 40, 46, 47, 49, 51], "progress": [18, 24, 35, 40, 46, 47, 49, 50, 51, 59], "bar": [18, 24, 35, 40, 46, 47, 49, 51], "extract_featur": [18, 24], "extract": [18, 24, 29, 33, 49, 50, 51, 59, 329], "By": [18, 24, 35, 40, 46, 47, 50, 59], "linear_prob": [18, 24], "valueerror": [18, 24, 82, 83, 165], "on_train_epoch_end": [18, 24], "access": [18, 24, 29, 33, 85, 87, 273, 324], "cach": [18, 24, 46, 47, 86, 104, 172, 173, 175, 178, 179, 181, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 324], "attribut": [18, 24, 29, 33, 35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 64, 85, 87, 88, 89, 102, 103], "core": [18, 24, 35, 40, 46, 47], "lightningmodul": [18, 24, 35, 40, 50, 59], "them": [18, 24, 50, 59, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 176, 190, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 299, 324, 367], "hook": [18, 24, 35, 40, 50, 59, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "mylightningmodul": [18, 24], "l": [18, 24, 144, 148, 154, 156], "super": [18, 24, 35, 40, 46, 47, 49, 51], "training_step_output": [18, 24], "training_step": [18, 24, 35, 40, 46, 47, 49, 50, 51, 59], "mycallback": [18, 24], "someth": [18, 24], "epoch_mean": [18, 24], "training_epoch_mean": [18, 24], "free": [18, 24], "on_validation_epoch_end": [18, 24, 46, 47], "val": [18, 24, 29, 33, 35, 40], "pearsonr": [19, 25, 79, 80], "multipl": [19, 25, 29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 61, 77, 78, 82, 108, 113, 144, 147, 148, 151, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "multivari": [19, 25], "channel": [27, 28, 30, 31, 32, 107, 108, 109, 110, 111, 113, 124, 125, 139, 141, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 169, 186, 187, 194, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295], "subject_in_pattern": [27, 31, 197, 198], "target_map": [27, 28, 30, 31, 32, 197, 198], "mask": [27, 28, 30, 31, 32, 154, 155, 156, 157, 185, 197, 198, 203, 204, 299], "withdraw_subject": [27, 28, 30, 31, 32, 197, 198], "scalabl": [27, 31, 35, 40, 197, 198], "locat": [27, 28, 30, 31, 32, 86, 104, 197, 198, 329], "store": [27, 28, 29, 30, 31, 32, 33, 49, 51, 197, 198, 324, 325, 326, 327, 341, 365], "folder": [27, 31, 175, 181, 197, 198, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "level": [27, 31, 197, 198, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 368], "subject": [27, 28, 30, 31, 32, 170, 171, 183, 184, 197, 198, 299], "identifi": [27, 31, 197, 198, 306, 319], "retriev": [27, 29, 31, 33, 86, 104, 197, 198], "tabular": [27, 28, 30, 31, 32, 197, 198], "optionali": [27, 28, 30, 31, 32, 46, 47, 49, 51, 197, 198, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "dictionari": [27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 79, 80, 85, 87, 88, 172, 173, 178, 179, 197, 198, 334, 357], "replac": [27, 28, 29, 30, 31, 32, 33, 64, 77, 78, 107, 109, 110, 111, 124, 125, 144, 148, 173, 179, 197, 198, 212, 224, 245, 246], "exist": [27, 28, 30, 31, 32, 86, 104, 197, 198, 299, 343, 344], "panda": [27, 28, 30, 31, 32, 170, 183, 197, 198], "datafram": [27, 28, 30, 31, 32, 170, 183, 197, 198], "callabl": [27, 28, 29, 30, 31, 32, 33, 35, 40, 82, 102, 154, 155, 156, 157, 197, 198, 324], "optionnali": [27, 28, 30, 31, 32, 46, 47, 49, 51, 172, 173, 178, 179, 186, 194, 197, 198], "remov": [27, 28, 29, 30, 31, 32, 33, 49, 51, 155, 157, 197, 198, 299], "filenotfounderror": [27, 28, 30, 31, 32], "mandatorri": [27, 28, 30, 31, 32], "keyerror": [27, 28, 30, 31, 32], "mandatori": [27, 28, 30, 31, 32, 300], "kei": [27, 28, 29, 30, 31, 32, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 85, 87, 172, 173, 178, 179, 211, 236, 300, 334, 357], "miss": [27, 28, 29, 30, 31, 32, 33, 321, 353], "particip": [27, 28, 29, 30, 31, 32, 33, 197, 198], "tsv": [27, 28, 29, 30, 31, 32, 33, 197, 198], "request": [27, 28, 29, 30, 31, 32, 33, 145, 149, 197, 198, 206, 299], "conta": [27, 28, 30, 31, 32, 197, 198], "idea": [27, 31], "your": [27, 30, 31, 35, 40, 50, 59, 60, 86, 97, 98, 104, 372], "rather": [27, 31], "symlink": [27, 31], "aggreg": [27, 29, 31, 33, 77, 78], "enforc": [27, 31, 50, 59], "reproduc": [27, 31, 35, 40, 46, 47, 49, 51], "persist": [27, 31], "get_checksum": [27, 31], "hash": [27, 31, 86, 104], "get_data": [27, 28, 31, 32], "index": [27, 28, 31, 32, 35, 40, 46, 47, 49, 50, 51, 59, 79, 80, 145, 149, 172, 173, 178, 179, 311, 314, 334, 345, 348, 357, 366], "modal": [29, 33], "vbm": [29, 33], "ag": [29, 33], "stream": [29, 33], "max_work": [29, 33], "target_transform": [29, 33], "r1": 29, "open": [29, 33, 329], "healthi": [29, 33], "brain": [29, 33, 154, 156, 372], "multi": [29, 33, 35, 40, 46, 47, 49, 51, 82, 186, 194, 209, 240], "mri": [29, 33, 50, 59, 68, 72, 154, 156], "consist": [29, 33, 50, 59, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164], "3227": [29, 33], "757": [29, 33], "t1": [29, 33], "t1w": [29, 33], "scan": [29, 33, 154, 156], "public": [29, 33], "ixi": [29, 33], "abid": [29, 33], "ii": [29, 33, 50, 59], "corr": [29, 33], "gsp": [29, 33], "mpi": [29, 33], "leipzig": [29, 33], "nar": [29, 33], "npc": [29, 33], "rbp": [29, 33], "These": [29, 33, 50, 59], "were": [29, 33], "acquir": [29, 33], "center": [29, 33, 167, 299, 314, 334, 335, 339, 348, 350, 357, 358, 363], "worldwid": [29, 33], "north": [29, 33], "america": [29, 33], "europ": [29, 33], "china": [29, 33], "control": [29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 169, 172, 178, 187, 196, 199, 200, 201, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 281, 282, 292, 293, 317, 335, 351, 358], "balanc": [29, 33, 49, 51], "male": [29, 33], "femal": [29, 33], "uniformli": [29, 33], "cat12": [29, 33], "spm": [29, 33], "quasi": [29, 33], "hous": [29, 33], "minim": [29, 33, 49, 50, 51, 59, 333, 356], "voxel": [29, 33, 83, 144, 145, 148, 149, 154, 155, 156, 157, 160, 163], "morphometri": [29, 33], "sbm": [29, 33], "entir": [29, 33], "350gb": [29, 33], "recommend": [29, 33], "intend": [29, 33], "portion": [29, 33, 146, 150], "directori": [29, 33, 324], "multimod": [29, 33], "__getitem__": [29, 33], "whole": [29, 33, 154, 155, 156, 157], "121": [29, 33, 112, 119], "145": [29, 33], "quasiraw": [29, 33], "182": [29, 33], "218": [29, 33], "vbm_roi": [29, 33], "matter": [29, 33], "region": [29, 33], "neuromorphometr": [29, 33], "atla": [29, 33], "142": [29, 33], "hemispher": [29, 33, 170, 171, 183, 184, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "284": [29, 33], "fs_desikan_roi": [29, 33], "desikan": [29, 33], "fs_destrieux_roi": [29, 33], "destrieux": [29, 33], "148": [29, 33], "fs_xhemi": [29, 33], "curvatur": [29, 33], "sulcal": [29, 33], "cortic": [29, 33, 170, 171, 175, 181, 183, 184, 185, 195, 202, 203, 204, 206, 207, 208, 209, 212, 213, 222, 223, 224, 225, 226, 240, 245, 246, 249, 250, 251, 252, 253, 255, 264], "thick": [29, 33], "fsaverage7": [29, 33], "mesh": [29, 33, 320, 321, 334, 352, 353, 357, 367], "163842": [29, 33], "sex": [29, 33], "string": [29, 33, 50, 59, 74, 75, 103, 297, 298], "internal_v": [29, 33], "external_v": [29, 33], "union": [29, 33, 50, 59, 68, 72], "scanner": [29, 33], "out": [29, 33, 35, 40, 46, 47, 49, 51, 173, 179, 193, 213, 224, 225, 226, 246, 253, 255, 264], "lazili": [29, 33], "hug": [29, 33, 60, 86, 104], "face": [29, 33, 60, 86, 104, 297, 298], "demand": [29, 33], "concurr": [29, 33, 340, 364], "thread": [29, 33], "429": [29, 33], "version": [29, 33, 49, 51, 60, 63, 67, 70, 73, 299], "1d": [29, 33, 50, 59, 68, 72], "exclus": [29, 33], "huggingfac": [29, 33], "either": [29, 33, 50, 59, 102, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 299], "fly": [29, 33], "lazi": [29, 33], "immedi": [29, 33], "dufumi": [29, 33, 50, 59, 68, 72], "b": [29, 33, 85, 87, 139, 140, 141, 142, 154, 156, 160, 161, 163, 164], "victor": [29, 33], "j": [29, 33, 49, 51, 67, 68, 70, 72], "frouin": [29, 33], "v": [29, 33], "duchesnai": [29, 33], "2022": [29, 33, 68, 72, 209, 240], "debias": [29, 33], "254": [29, 33], "119121": [29, 33], "doi": [29, 33, 66, 69, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "1016": [29, 33], "119637": [29, 33], "download_dataset_split": [29, 33], "increment": [29, 33], "present": [29, 33, 50, 59, 86, 103, 104], "make_dataset": [29, 33], "otherwis": [29, 33, 35, 40, 50, 59, 77, 78, 82, 102, 103, 145, 147, 149, 151, 299], "eventu": [29, 33, 144, 147, 148, 151], "download_fil": [29, 33], "filenam": [29, 33], "get_cat12_templ": [29, 33], "tissu": [29, 33], "nifti": [29, 33], "gm": [29, 33], "tpm": [29, 33], "mni152": [29, 33], "nii": [29, 33], "nibabel": [29, 33, 145, 147, 149, 151, 160, 163, 197, 198, 328, 330], "nifti1imag": [29, 33], "templat": [29, 33], "resourc": [29, 33], "cat12vbm_spac": [29, 33], "mni152_desc": [29, 33], "gm_tpm": [29, 33], "gz": [29, 33, 329], "get_fs_label": [29, 33], "symmetr": [29, 33, 67, 70, 77, 78, 159, 162], "resp": [29, 33], "lh": [29, 33], "rh": [29, 33], "length": [29, 33, 67, 70, 334, 357], "divid": [29, 33, 109, 110, 124, 125], "json": [29, 33], "automat": [29, 33, 35, 40, 46, 47, 49, 50, 51, 59, 60, 67, 70, 75, 341, 365], "get_fs_roi_feature_nam": [29, 33], "get_fs_xhemi_feature_nam": [29, 33], "get_neuromorphometrics_atla": [29, 33], "along": [29, 33, 145, 149, 299, 304], "abbrevi": [29, 33], "integ": [29, 33, 35, 40], "under": [29, 33], "csv": [29, 33], "get_quasiraw_templ": [29, 33], "quasiraw_spac": [29, 33], "brain_t1w": [29, 33], "get_vbm_roi_label": [29, 33], "csf": [29, 33], "construct": [29, 33, 60], "unimod": [29, 33], "configur": [29, 33, 35, 40, 50, 59, 60, 61, 154, 156, 372], "exclud": [29, 33], "metadata": [29, 33, 160, 163, 299], "val_check_interv": [35, 40], "min_epoch": [35, 40], "max_step": [35, 40, 50, 59], "min_step": [35, 40], "enable_checkpoint": [35, 40], "enable_progress_bar": [35, 40], "enable_model_summari": [35, 40], "strategi": [35, 40, 46, 47, 209, 240], "num_nod": [35, 40], "liter": [35, 40], "engin": [35, 40], "float16": [35, 40], "mix": [35, 40], "bf16": [35, 40], "sequenc": [35, 40, 46, 47, 49, 51, 82, 169, 176, 187, 190, 209, 240], "design": [35, 40, 60], "lightn": [35, 40, 50, 59, 372], "interfac": [35, 40, 60, 61, 63, 64, 67, 70, 372], "capabl": [35, 40], "basicali": [35, 40], "child": [35, 40, 60, 186, 194], "mixin": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "add": [35, 40, 46, 47, 62, 108, 113, 140, 142, 174, 180, 282, 293], "loop": [35, 40], "often": [35, 40, 50, 59], "fraction": [35, 40], "fix": [35, 40, 276, 287, 297, 298, 359], "onc": [35, 40], "reach": [35, 40], "infinit": [35, 40], "forc": [35, 40, 86, 104], "least": [35, 40], "checkpoint": [35, 40, 108, 113], "summar": [35, 40], "tpu": [35, 40, 46, 47, 49, 51], "hpu": [35, 40], "mp": [35, 40], "custom": [35, 40, 50, 59, 74, 75, 103], "alias": [35, 40], "listof": [35, 40], "select": [35, 40, 60, 61, 75, 144, 148], "doubl": [35, 40, 212, 224, 245, 246], "16bit": [35, 40], "bfloat16": [35, 40], "extra": [35, 40], "tune": [35, 40], "debug": [35, 40, 197, 198, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 310], "boolean": [35, 40, 154, 155, 156, 157], "hparam": [35, 40], "dictionarai": [35, 40, 60], "TO": [35, 40], "BE": [35, 40], "validation_step": [35, 40, 46, 47, 49, 50, 51, 59], "anyth": [35, 40, 46, 47, 49, 51], "interest": [35, 40, 46, 47, 49, 51, 197, 198, 211, 236], "predict_step": [35, 40, 46, 47, 49, 50, 51, 59], "log_dict": [35, 40], "val_dataload": [35, 40, 50, 59], "instruct": [35, 40], "tensor": [35, 40, 46, 47, 49, 50, 51, 53, 56, 59, 66, 68, 69, 72, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 203, 204, 205, 207, 208, 209, 213, 222, 223, 225, 226, 240, 247, 249, 250, 251, 252, 253, 255, 264, 285, 310], "logger": [35, 40, 46, 47, 49, 51, 316], "on_step": [35, 40], "on_epoch": [35, 40], "reduce_fx": [35, 40], "enable_graph": [35, 40], "sync_dist": [35, 40], "sync_dist_group": [35, 40], "add_dataloader_idx": [35, 40], "metric_attribut": [35, 40], "rank_zero_onli": [35, 40], "must": [35, 40, 46, 47, 49, 50, 51, 59, 60, 67, 68, 70, 72, 83, 103, 139, 141, 145, 149, 154, 155, 156, 157, 160, 161, 163, 164, 169, 187, 324, 329], "ddp": [35, 40], "determin": [35, 40, 49, 51, 170, 183], "accumul": [35, 40], "over": [35, 40, 49, 51, 147, 151], "detach": [35, 40], "graph": [35, 40, 244, 367], "care": [35, 40, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293, 341, 365], "commun": [35, 40], "overhead": [35, 40], "group": [35, 40, 109, 110, 122, 123, 124, 125, 129, 170, 183, 299], "sync": [35, 40], "uniqu": [35, 40, 304], "infer": [35, 40, 46, 47], "explicitli": [35, 40], "restor": [35, 40, 323], "state": [35, 40, 53, 54, 55, 56, 57, 58, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 206, 207, 210, 225, 237, 238, 239, 241, 249, 253], "torchmetr": [35, 40], "tell": [35, 40], "rank": [35, 40], "won": [35, 40, 46, 47], "abl": [35, 40], "improp": [35, 40], "deadlock": [35, 40], "train_loss": [35, 40], "metriccollect": [35, 40], "test_step": [35, 40], "metric_n": [35, 40], "forward": [35, 40, 46, 47, 53, 56, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 207, 208, 209, 210, 212, 213, 222, 223, 224, 225, 226, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "overrid": [35, 40, 46, 47, 50, 59], "prevent": [35, 40, 46, 47], "oom": [35, 40, 46, 47], "basepredictionwrit": [35, 40, 46, 47], "write": [35, 40, 46, 47, 331, 332], "databas": [35, 40, 46, 47], "spawn": [35, 40, 46, 47], "happen": [35, 40, 46, 47], "ddp_spawn": [35, 40, 46, 47], "produc": [35, 40, 46, 47, 49, 50, 51, 59, 160, 161, 163, 164], "step_output": [35, 40, 46, 47, 49, 51], "skip": [35, 40, 46, 47, 49, 51, 242, 243, 244], "deepspe": [35, 40, 46, 47, 49, 51], "manual": [35, 40, 46, 47, 49, 50, 51, 59], "special": [35, 40, 46, 47, 49, 51, 60], "switch": [35, 40, 46, 47, 49, 50, 51, 59], "accumulate_grad_batch": [35, 40, 46, 47, 49, 51], "intern": [35, 40, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 160, 161, 163, 164, 210, 237, 238, 239, 241], "automatic_optim": [35, 40, 46, 47, 49, 51], "gan": [35, 40, 46, 47, 49, 50, 51, 59], "opt1": [35, 40, 46, 47, 49, 51], "opt2": [35, 40, 46, 47, 49, 51], "decod": [35, 40, 46, 47, 49, 51, 207, 212, 222, 224, 225, 245, 246, 249, 251, 253], "share": [35, 40, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 145, 149, 210, 237, 238, 239, 241], "api": [35, 40, 49, 50, 51, 59, 75, 76], "d": [35, 40, 46, 47, 49, 50, 51, 59, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 245, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 281, 282, 285, 292, 293, 305, 308, 318, 370], "calcul": [35, 40, 46, 47, 49, 50, 51, 59, 67, 68, 70, 72], "put": [35, 40, 46, 47, 49, 51], "At": [35, 40, 46, 47, 49, 51, 224, 246], "goe": [35, 40, 46, 47, 49, 51], "back": [35, 40, 46, 47, 49, 51, 299], "estimator_typ": [36, 37, 38, 39, 41, 42, 43, 44], "tag": [36, 37, 38, 39, 41, 42, 43, 44, 86, 104], "setup": [46, 47, 316, 368], "freez": [46, 47], "freeze_encod": [46, 47], "rate": [46, 47, 49, 50, 51, 59, 196, 199, 200, 201, 209, 240], "adam": [46, 47, 49, 50, 51, 59], "decai": [46, 47, 49, 50, 51, 59], "multisteplr": [46, 47], "schedul": [46, 47, 49, 50, 51, 59, 60], "element": [46, 47, 49, 51, 145, 149], "variabl": [46, 47, 49, 50, 51, 59, 60, 68, 72, 73, 273], "validation_step_output": [46, 47], "dictionnari": [46, 47, 211, 236, 324], "respectivelli": [46, 47], "configure_optim": [46, 47, 49, 50, 51, 59], "declar": [46, 47, 49, 51, 61], "adamw": [46, 47, 49, 50, 51, 59], "cross_entropy_loss": [46, 47], "cross_entropi": [46, 47], "clean": [46, 47], "x_i": [49, 51, 154, 155, 156, 157], "x_j": [49, 51], "maxim": [49, 50, 51, 59], "part": [49, 51], "head": [49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 107, 111, 209, 238, 240, 241], "cnn": [49, 51, 168], "scnn": [49, 51], "respons": [49, 51], "denot": [49, 51, 53, 56], "finish": [49, 51], "extractor": [49, 51], "z": [49, 51, 144, 145, 148, 149, 155, 157, 207, 208, 225, 249, 250, 253, 302, 303, 305, 307, 308, 318, 369, 370], "shown": [49, 50, 51, 59], "wors": [49, 51], "those": [49, 51, 334, 357], "becom": [49, 51], "invari": [49, 51], "thu": [49, 50, 51, 59], "stage": [49, 51], "z_i": [49, 51], "z_j": [49, 51], "therebi": [49, 51], "propos": [49, 51], "aaron": [49, 51], "van": [49, 51], "den": [49, 51], "oord": [49, 51], "short": [49, 51], "formal": [49, 51], "written": [49, 51], "ell_": [49, 51], "frac": [49, 51, 67, 68, 70, 72, 154, 155, 156, 157, 160, 163], "exp": [49, 51, 68, 72], "sim": [49, 51, 68, 72, 139, 140, 141, 142], "tau": [49, 51, 68, 72], "sum_": [49, 51, 68, 72], "2n": [49, 51], "mathbb": [49, 51], "neq": [49, 51], "z_k": [49, 51], "peak": [49, 51], "bound": [49, 51, 146, 150, 182, 192], "influenc": [49, 51], "dissimilar": [49, 50, 51, 59], "versu": [49, 51], "cosin": [49, 50, 51, 59, 67, 68, 70, 72, 146, 150, 160, 161, 163, 164], "cdot": [49, 51], "minimum": [49, 51, 154, 156, 159, 162, 297, 298], "around": [49, 51, 147, 151], "exact": [49, 51], "opposit": [49, 51], "flexibl": [49, 51], "altern": [49, 51], "track": [49, 51], "projector": [49, 51], "cosineannealinglr": [49, 51], "auxiliari": [49, 50, 51, 59, 68, 72], "info_nce_loss": [49, 51], "encoder_kwarg": [50, 59], "projection_head_kwarg": [50, 59], "kernel": [50, 59, 67, 68, 70, 72, 109, 110, 124, 125, 139, 141, 160, 161, 163, 164, 172, 178, 281, 282, 292, 293, 334, 335, 357, 358], "bandwidth": [50, 59, 67, 68, 70, 72], "ndarrai": [50, 59, 67, 68, 70, 72, 77, 78, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 200, 201, 299, 302, 303, 307, 369], "optimizer_kwarg": [50, 59], "learning_r": [50, 59], "0001": [50, 59, 304, 309, 371], "lr_schedul": [50, 59], "lrschedul": [50, 59], "reducelronplateau": [50, 59], "lr_scheduler_kwarg": [50, 59], "awar": [50, 59, 68, 72], "visual": [50, 59, 210, 237], "agreement": [50, 59], "view": [50, 59, 66, 68, 69, 72, 82, 339, 363], "encourag": [50, 59], "push": [50, 59], "apart": [50, 59], "uninstanti": [50, 59], "although": [50, 59, 71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "instanti": [50, 59, 160, 163], "op": [50, 59], "hidden_channel": [50, 59, 244], "n_embed": [50, 59, 107, 108, 109, 110, 111, 113, 124, 125], "2048": [50, 54, 55, 57, 58, 59], "unit": [50, 59, 155, 157, 212, 224, 245, 246, 299, 317, 335, 351, 355, 358, 359], "input_dim": [50, 54, 55, 57, 58, 59, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "output_dim": [50, 54, 55, 57, 58, 59, 254], "impli": [50, 59], "wherea": [50, 59], "high": [50, 59, 160, 161, 163, 164, 188], "impos": [50, 59, 60], "sensit": [50, 59], "epanechnikov": [50, 59, 67, 68, 70, 72], "scalar": [50, 59, 67, 68, 70, 72, 83, 146, 150, 160, 161, 163, 164], "diagnon": [50, 59, 68, 72], "diagon": [50, 59, 67, 68, 70, 72], "2d": [50, 59, 67, 68, 70, 72, 144, 146, 147, 148, 150, 151, 317, 351], "pairwis": [50, 59, 67, 68, 70, 72], "stochast": [50, 59, 82, 207, 225, 249, 253], "descent": [50, 59], "decoupl": [50, 59], "loshchilov": [50, 59], "hutter": [50, 59], "iclr": [50, 59], "2019": [50, 59, 212, 224, 244, 245, 246], "subclass": [50, 59, 71, 82, 83, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "beta": [50, 59, 203, 204, 302, 303, 307, 369], "moment": [50, 59, 60], "lrschedulerpltyp": [50, 59], "num_sanity_val_step": [50, 59], "etc": [50, 59], "proxi": [50, 59, 68, 72], "meta": [50, 59, 68, 72, 170, 183, 299], "miccai": [50, 59, 68, 72], "2021": [50, 55, 58, 59, 68, 72, 107, 111, 154, 156, 225, 253], "neural": [50, 59, 144, 148], "choos": [50, 59], "But": [50, 59], "lr_scheduler_config": [50, 59], "whose": [50, 59], "updat": [50, 59, 62, 299], "val_loss": [50, 59], "strict": [50, 59], "condit": [50, 59, 100], "metric_to_track": [50, 59], "optimizer1": [50, 59], "optimizer2": [50, 59], "scheduler1": [50, 59], "scheduler2": [50, 59], "lambdalr": [50, 59], "made": [50, 59], "metric_v": [50, 59], "thing": [50, 59], "know": [50, 59, 83], "closur": [50, 59], "yourself": [50, 59], "optimizer_step": [50, 59], "parse_batch": [50, 59], "pars": [50, 59, 81, 82, 83], "v1": [50, 59], "v2": [50, 59], "block": [53, 56, 60, 108, 109, 110, 113, 124, 125, 126, 127, 209, 240, 242, 243, 247, 248], "read": [53, 56, 326, 327], "in_featur": [53, 56], "batch_norm_lay": [53, 56], "non_linearity_lay": [53, 56], "non": [53, 54, 56, 57, 155, 157], "norm": [53, 56, 117], "batchnorm1d": [53, 56], "scriptmodul": [53, 54, 55, 56, 57, 58, 66, 68, 69, 71, 72, 107, 108, 109, 110, 111, 113, 114, 115, 116, 122, 123, 124, 125, 210, 237, 238, 239, 241], "zi": [54, 57], "w_2": [54, 57], "w_1": [54, 57], "2020": [54, 55, 57, 58, 66, 69, 144, 148], "arxiv": [54, 55, 57, 58, 66, 69, 108, 109, 110, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135, 144, 148, 244], "2002": [54, 57, 66, 69], "05709": [54, 57, 66, 69], "512": [55, 58, 108, 109, 110, 113, 124, 125, 213, 226, 255, 264], "z\u03b82": [55, 58], "vanilla": [55, 58], "multilay": [55, 58], "perceptron": [55, 58], "2106": [55, 58], "08808": [55, 58], "expfil": 60, "selector": [60, 61], "logdir": 60, "verbos": 60, "useful": 60, "date": 60, "reus": [60, 341, 365], "section": 60, "descipt": 60, "scaler": [60, 299], "dl": 60, "environ": [60, 61, 62, 64], "fullfil": 60, "constraint": 60, "interface_occurr": 60, "term": [60, 63, 67, 70, 84], "interface_vers": 60, "__version__": 60, "mismatch": 60, "detect": 60, "connot": 60, "previous": 60, "param": [60, 63, 64], "instanci": 60, "prefix": 60, "filter": [60, 61, 108, 113, 139, 141, 172, 178, 207, 208, 211, 212, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 280, 283, 286, 288, 290, 291, 294], "hierarch": 60, "properti": [60, 100], "parent": 60, "separ": [60, 154, 155, 156, 157], "architecture_nam": [60, 86, 104], "revis": [60, 86, 104], "specifid": 60, "appropri": [60, 61, 103], "scheme": [60, 67, 70], "hyperparapet": 60, "defautl": 60, "coupl": 60, "config": 61, "env": [61, 62, 64], "filter_conf": 61, "updated_env": 62, "environemt": 62, "my_modul": 63, "my_class": 63, "exppect": 63, "module": 63, "cl": [63, 209, 240], "updated_param": 64, "param_set": 64, "entropi": [66, 69], "deriv": [66, 69], "icml": [66, 69], "48550": [66, 69, 108, 109, 110, 112, 113, 119, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "z1": [66, 68, 69, 72], "z2": [66, 68, 69, 72], "scott": [67, 70], "fast": [67, 70, 160, 161, 163, 164], "kde": [67, 70], "x1": [67, 70, 71, 247, 248], "xn": [67, 70], "w_": [67, 68, 70, 72], "xi": [67, 70], "xj": [67, 70], "geq": [67, 70], "dx": [67, 70], "silverman": [67, 70], "covari": [67, 70], "mathrm": [67, 70], "diag": [67, 70], "distanc": [67, 70, 170, 183, 280, 291], "rosenblatt": [67, 70], "m": [67, 70, 170, 172, 173, 175, 178, 179, 181, 183, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 297, 298, 313, 320, 326, 327, 331, 332, 334, 339, 347, 352, 357, 363, 367], "1956": [67, 70], "remark": [67, 70], "nonparametr": [67, 70], "annal": [67, 70], "mathemat": [67, 70], "statist": [67, 70, 144, 148, 155, 157], "parzen": [67, 70], "1962": [67, 70], "On": [67, 70, 323], "scotts_factor": [67, 70], "factor": [67, 70, 108, 113, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 317, 335, 351, 358], "set_bandwidth": [67, 70], "subsequ": [67, 70], "silverman_factor": [67, 70], "mini": [68, 72], "repres": [68, 72, 297, 298, 366, 367], "w": [68, 72, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 205, 254], "ell": [68, 72], "z_1": [68, 72], "z_2": [68, 72], "\u03c4": [68, 72], "y_i": [68, 72], "y_j": [68, 72], "phd": [68, 72], "thesi": [68, 72], "dot": [68, 72], "product": [68, 72, 372], "n_label": [68, 72], "x2": [71, 247, 248], "overridden": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "recip": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "afterward": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "former": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "latter": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "silent": [71, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 210, 237, 238, 239, 241, 244, 280, 281, 282, 291, 292, 293], "re": 73, "sample_weight": [74, 75, 77, 78, 79, 80, 299], "multioutput": [74, 75, 77, 78], "dtype": [74, 76, 182, 188, 192, 305, 318], "numer": [74, 155, 157], "raw_valu": [74, 75, 77, 78], "uniform_averag": [74, 75, 77, 78], "variance_weight": [74, 75], "accept": [74, 75, 83], "due": [74, 75], "compat": [74, 75, 372], "r2_score": [74, 75], "check_arrai": 74, "type_tru": [74, 75], "multiclass": [74, 75], "type_of_target": [74, 75], "just": [74, 75], "suitabl": [75, 76], "privat": 75, "highest": 76, "promot": 76, "rule": 76, "api_specif": 76, "type_promot": 76, "namespac": 76, "force_finit": [77, 78], "alwai": [77, 78, 83, 86, 104, 145, 149, 299], "perfect": [77, 78], "anti": [77, 78], "flag": [77, 78], "nan": [77, 78], "inf": [77, 78], "constant": [77, 78, 154, 155, 156, 157, 159, 162], "real": [77, 78], "target_nam": [79, 80], "digit": [79, 80], "output_dict": [79, 80], "round": [79, 80], "summari": [79, 80], "mae": [79, 80], "meda": [79, 80], "mse": [79, 80], "pcc": [79, 80], "evar": [79, 80], "arithmet": [79, 80], "apply_transform": [81, 82, 83, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164], "data_pars": [81, 82, 83], "sever": [82, 300], "elsewher": 82, "parse_data": [82, 83, 165], "actual": 83, "compliant": 83, "conjonct": 83, "geometri": [83, 313, 321, 326, 327, 331, 332, 347, 353, 355], "nd": [83, 144, 146, 148, 150], "gamma": 83, "todo": 83, "randombright": 83, "biasfield": 83, "typetransforminput": 83, "static": [83, 160, 163], "parse_prob": 83, "termin": 84, "expos": [85, 87], "value_kei": [85, 87], "avaiabl": [86, 104], "pathlib": [86, 104], "repo": [86, 104], "classmethod": [86, 104, 170, 183, 211, 236], "hf_download": [86, 104], "hf_id": [86, 104], "hf_revis": [86, 104], "force_download": [86, 104], "resum": [86, 104], "id": [86, 104], "commit": [86, 104], "hub_split": [86, 104], "hub_nam": [86, 104], "interpret": [86, 104, 160, 163], "hub_id": [86, 104], "hub_revis": [86, 104], "decalr": [86, 104, 167], "ns_download": [86, 104], "ns_id": [86, 104], "reset": [88, 97, 98], "background": 88, "foreground": [88, 90], "reverse_dict": 88, "revers": [88, 145, 149, 207, 249], "alia": [89, 90, 160, 161, 163, 164, 188, 189, 235, 299], "conveni": [97, 98], "style": [97, 98], "ansi": [97, 98], "fn": 100, "attribute_nam": 100, "descriptor": 100, "protocol": 100, "decor": [100, 102, 186, 194, 324, 341, 365], "attributeerror": [100, 102], "falsei": 100, "hasattr": [100, 102], "doc": 100, "howto": 100, "explan": 100, "deleg": 101, "underli": 101, "truthi": 102, "unavail": 102, "helloifeven": 102, "_x_is_even": 102, "say_hello": 102, "hello": 102, "obj": 102, "msg": [103, 310], "presenc": 103, "trail": 103, "underscor": 103, "except": [103, 299], "messag": [103, 209, 212, 213, 224, 225, 226, 240, 244, 245, 246, 253, 255, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 310], "yet": 103, "substitut": 103, "eg": 103, "sparsifi": 103, "fitt": 103, "abrol": [107, 111], "5281": [107, 111], "zenodo": [107, 111], "4309677": [107, 111], "growth_rat": [108, 113, 114, 115, 118], "block_config": [108, 113, 118], "num_init_featur": [108, 113, 118], "bn_size": [108, 113, 114, 115], "memory_effici": [108, 113, 114, 115], "huang": [108, 112, 113, 119], "2018": [108, 112, 113, 119], "1608": [108, 112, 113, 119], "06993": [108, 112, 113, 119], "pool": [108, 113, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 279, 290], "convolut": [108, 109, 110, 113, 124, 125, 128, 129, 144, 148, 172, 178, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 280, 281, 282, 283, 286, 288, 291, 292, 293, 294], "slower": [108, 113, 160, 161, 163, 164], "pdf": [108, 113], "1707": [108, 113], "06990": [108, 113], "zero_init_residu": [109, 110, 124, 125], "width_per_group": [109, 110, 124, 125], "replace_stride_with_dil": [109, 110, 124, 125], "norm_lay": [109, 110, 122, 123, 124, 125], "initial_kernel_s": [109, 110, 124, 125], "he": [109, 110, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "2015": [109, 110, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "1512": [109, 110, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "03385": [109, 110, 120, 121, 124, 125, 130, 131, 132, 133, 134, 135], "bn": [109, 110, 124, 125, 242, 243, 247, 248], "residu": [109, 110, 124, 125], "branch": [109, 110, 124, 125], "behav": [109, 110, 124, 125], "1706": [109, 110, 124, 125], "02677": [109, 110, 124, 125], "dilat": [109, 110, 122, 123, 124, 125, 129], "atrou": [109, 110, 124, 125], "preserv": [109, 110, 124, 125, 144, 148, 160, 161, 163, 164], "dens": [109, 110, 124, 125, 207, 249, 299], "batchnorm3d": [109, 110, 124, 125], "truncat": [110, 121, 125, 131, 133, 135], "num_lay": 114, "num_input_featur": [114, 115, 116], "init_featur": 114, "prev_featur": 115, "num_output_featur": 116, "arch": [118, 126, 127], "inplan": [122, 123], "plane": [122, 123, 147, 151, 280, 291, 334, 350, 357], "base_width": [122, 123], "in_plan": [128, 129], "out_plan": [128, 129], "1x1": [128, 224, 246], "deviat": [139, 140, 141, 142, 155, 157, 172, 174, 178, 180, 299], "mathcal": [139, 140, 141, 142], "six": [139, 141], "a_1": [139, 141], "b_1": [139, 141], "a_2": [139, 141], "b_2": [139, 141], "a_3": [139, 141], "b_3": [139, 141], "sigma_i": [139, 141], "a_i": [139, 141], "b_i": [139, 141], "nois": [140, 142, 174, 180], "mu": [140, 142, 155, 157], "ratio": [144, 146, 148, 150, 244], "num_iter": [144, 148], "inplac": [144, 148, 299], "randomli": [144, 147, 148, 151, 170, 171, 183, 184], "eras": [144, 148], "box": [144, 148], "r3": 144, "cutout": [144, 148, 173, 179], "r4": 144, "arbitrari": [144, 148], "extens": [144, 148, 329], "proport": [144, 148], "area": [144, 146, 148, 150], "against": [144, 148], "min": [144, 148, 154, 156], "modifi": [144, 148, 161, 164], "geometr": [144, 146, 148, 150], "don": [144, 146, 148, 150], "particular": [144, 146, 148, 150], "three": [144, 146, 148, 150, 315, 349], "zhong": [144, 148], "zheng": [144, 148], "kang": [144, 148], "li": [144, 148], "yang": [144, 148], "aaai": [144, 148], "confer": [144, 148], "intellig": [144, 148], "1708": [144, 148], "04896": [144, 148], "devri": [144, 148], "taylor": [144, 148], "2017": [144, 148], "04552": [144, 148], "flip_prob": [145, 149], "anatom": [145, 147, 149, 151], "ap": [145, 147, 149, 151], "antero": [145, 147, 149, 151], "posterior": [145, 147, 149, 151], "inferior": [145, 147, 149, 151], "ra": [145, 147, 149, 151, 160, 163], "affin": [145, 147, 149, 151, 160, 163], "never": [145, 149, 161, 164], "typic": [145, 147, 149, 151, 160, 163], "get_index_from_anat_label": [145, 149], "anterior": [145, 149], "superior": [145, 149], "4x4": [145, 149], "target_shap": [146, 150, 159, 161, 162, 164], "08": [146, 150, 155, 157], "upper": [146, 150, 322, 354], "bspline": [146, 150, 160, 161, 163, 164], "cubic": [146, 150, 160, 161, 163, 164], "label_gaussian": [146, 150, 160, 161, 163, 164], "ham": [146, 150, 160, 161, 163, 164], "welch": [146, 150, 160, 161, 163, 164], "lanczo": [146, 150, 160, 161, 163, 164], "blackman": [146, 150, 160, 161, 163, 164], "itk": [146, 150, 160, 161, 163, 164], "compromis": [146, 150, 160, 161, 163, 164], "qualiti": [146, 150, 160, 161, 163, 164], "speed": [146, 150, 160, 161, 163, 164, 172, 178, 211, 236], "solid": [146, 150, 160, 161, 163, 164], "rotation_prob": [147, 151], "degre": [147, 151, 175, 181, 315, 341, 349, 365], "potenti": [147, 151, 367], "randn": [147, 151], "r5": 148, "r6": 148, "out_min_max": [154, 156], "percentil": [154, 156], "masking_fn": [154, 155, 156, 157], "robust": [154, 156, 160, 161, 163, 164], "outlier": [154, 156], "clip": [154, 156], "inter": [154, 156], "quantil": [154, 156], "p_l": [154, 156], "p_u": [154, 156], "o_": [154, 156], "p_": [154, 156], "quad": [154, 156], "ext": [154, 156], "percentag": [154, 156], "synthseg": [154, 156], "r7": 154, "nnunet": [154, 156], "r8": 154, "insid": [154, 156, 299], "cutoff": [154, 156], "convent": [154, 156], "billot": [154, 156], "2023": [154, 156], "retrain": [154, 156], "medic": [154, 156, 160, 161, 163, 164], "analysi": [154, 156, 209, 240], "102789": [154, 156], "isense": [154, 156], "nnu": [154, 156], "net": [154, 156, 212, 224, 244, 245, 246], "biomed": [154, 156], "natur": [154, 156, 168], "203": [154, 156], "211": [154, 156], "loc": [154, 156], "ep": [155, 157], "epsilon": [155, 157], "stabil": [155, 157], "avoid": [155, 157, 299], "determinist": [155, 157], "r9": 156, "r10": 156, "padding_mod": [159, 162], "constant_valu": [159, 162], "edg": [159, 162, 297, 298, 366, 367], "reflect": [159, 162], "info": [159, 162, 368], "physic": [160, 161, 163, 164], "4d": [160, 163, 165], "coordin": [160, 163, 301, 302, 303, 305, 306, 307, 308, 318, 319, 343, 359, 369, 370], "simpleitk": [160, 161, 163, 164], "s_w": [160, 163], "s_h": [160, 163], "s_d": [160, 163], "mm": [160, 163], "offlin": [160, 161, 163, 164], "poorer": [160, 161, 163, 164], "categor": [160, 161, 163, 164], "r11": 160, "spline": [160, 161, 163, 164], "window": [160, 161, 163, 164], "meijer": [160, 161, 163, 164], "1999": [160, 161, 163, 164], "quantit": [160, 161, 163, 164], "approxim": [160, 161, 163, 164], "dummi": [160, 163], "rand": [160, 163], "1mm": [160, 163], "ey": [160, 163], "2mm": [160, 163], "isotrop": [160, 163], "image_torch": [160, 163], "resampled_torch": [160, 163], "as_sitk": [160, 163], "from_sitk": [160, 163], "get_sitk_metadata_from_ras_affin": [160, 163], "lp": [160, 163], "implicit": [161, 164], "r12": 161, "r13": 163, "r14": 164, "inspir": 168, "init": [169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 196, 199, 203, 204, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 323], "randomize_per_channel": [169, 186, 187, 189, 194], "tranform": [169, 187, 306, 319], "wise": [169, 187, 224, 246], "bootstrap": [170, 183], "measur": [170, 171, 175, 181, 183, 184, 185], "vertex": [170, 171, 172, 173, 178, 179, 183, 184, 224, 246, 334, 335, 341, 357, 358, 359, 365, 366, 367], "curupt": [170, 171, 183, 184, 185], "regroup": [170, 183], "pca": [170, 183], "compon": [170, 183, 302, 303, 307, 369], "extern": [170, 183], "popul": [170, 183], "bootstap": [170, 183], "arr": [170, 171, 173, 174, 175, 179, 180, 181, 183, 184], "bootsrap": [170, 183], "controlater": [171, 184], "cachedir": [172, 173, 175, 178, 179, 181, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 324], "recept": [172, 178], "field": [172, 178, 188, 189, 235], "icosahdron": [172, 173, 175, 178, 179, 181], "neighboor": [172, 173, 178, 179, 297, 298], "sufifi": [172, 173, 178, 179], "ie": [172, 173, 178, 179, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "organ": [172, 173, 178, 179, 325, 334, 357], "ring": [172, 173, 178, 179, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 279, 283, 286, 288, 290, 294, 314, 334, 348, 357], "replacement_valu": [173, 179], "connex": [173, 179], "neighborhood": [173, 179, 242, 247, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 317, 333, 335, 351, 356, 358], "ablat": [173, 179], "cut": [173, 179], "barycentr": [175, 181, 315, 339, 341, 349, 363, 365], "angl": [175, 181, 302, 303, 307, 315, 334, 341, 349, 350, 357, 365, 369], "euler": [175, 181, 315, 341, 349, 365], "smart": [175, 181, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "speedup": [175, 181, 211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "accordingli": [175, 181], "seri": [177, 191], "n_channel": [177, 191, 209, 240], "_data": [177, 191], "uplet": [182, 192, 280, 291, 315, 341, 349, 365], "aplli": 185, "rand_mask": 185, "binari": [185, 203, 204], "corrupt": 185, "multichannel": [186, 194], "multichannelaugment": [186, 194], "applic": [186, 194, 212, 224, 245, 246, 300], "liftifi": 193, "synthet": 195, "gene": [196, 199, 200, 201], "n_max": [197, 198], "target_ico_ord": [197, 198], "regex": [197, 198], "triangular": [197, 198, 297, 298, 340, 342, 364], "purpos": [197, 198], "desir": [197, 198, 333, 356], "assocait": [200, 201], "variat": [202, 206, 225, 253], "svae": [202, 225, 253], "left_mask": [203, 204], "right_mask": [203, 204], "use_ms": [203, 204], "kl": [203, 204], "diverg": [203, 204], "likelihood": [203, 204, 205], "recon": 205, "reconstruct": [205, 207, 225, 249, 253], "relat": [206, 211, 236], "vision": [206, 209, 240, 340, 364], "gmvae": 206, "rest": [206, 225, 253], "fmri": [206, 225, 253], "autoencod": [206, 225, 253], "libilab": 206, "rsfmri": 206, "output_shap": [207, 249, 282, 293], "before_latent_dim": [207, 249], "latent_dim": [207, 208, 210, 222, 223, 225, 237, 249, 250, 251, 252, 253], "conv_flt": [207, 208, 222, 223, 225, 249, 250, 251, 252, 253], "fusion_level": [207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "leakyrelu": [207, 208, 222, 223, 225, 249, 250, 251, 252, 253], "batch_norm": [207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "output_channel": [207, 249], "convnet": [207, 249, 254], "left_recon_x": [207, 225, 249, 253], "input_channel": [207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "right_recon_x": [207, 225, 249, 253], "left_x": [208, 213, 222, 223, 225, 226, 250, 251, 252, 253, 255, 264], "right_x": [208, 213, 222, 223, 225, 226, 250, 251, 252, 253, 255, 264], "q": [208, 225, 250, 253], "mlp_dim": [209, 240, 241], "dim_head": [209, 238, 240, 241], "dropout": [209, 238, 239, 240, 241], "emb_dropout": [209, 240], "msit": [209, 240], "dahan": [209, 240], "simon": [209, 210, 237, 240], "midl": [209, 240], "n_verticesi": [209, 240], "trainabl": [209, 240], "msa": [209, 240], "mechan": [209, 240, 299], "feed": [209, 240], "ffn": [209, 240], "expand": [209, 240], "poll": [209, 240], "token": [209, 240], "hidden_lay": [210, 237], "return_logit": [210, 237], "kornblith": [210, 237], "mohammad": [210, 237], "norouzi": [210, 237], "geoffrei": [210, 237], "hinton": [210, 237], "y1": [210, 237], "y2": [210, 237], "input_ord": [211, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "n_layer": [211, 236], "repa_s": [211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "repa_zoom": [211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "dynamic_repa_zoom": [211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 251, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272], "repa": [211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 335, 358], "ico_info": [211, 236], "build_ico_info": [211, 236], "tangent": [211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 291, 317, 334, 350, 351, 357], "tessal": [211, 236, 320, 340, 352, 364], "tessel": [211, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 246, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 340, 364], "icosehedron": [211, 236], "upsampl": [211, 224, 236, 246, 247, 276, 277, 278, 283, 284, 287, 288, 289, 294, 295, 322, 354], "onform": [211, 236], "gride": [212, 213, 243, 245, 248, 255, 305, 318], "built": [212, 224, 245, 246], "upon": [212, 224, 245, 246], "spma": [212, 245], "rectifi": [212, 224, 245, 246], "halv": [212, 224, 245, 246], "zhao": [212, 224, 245, 246], "ipmi": [212, 224, 245, 246], "cfg": [213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "4096": [213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "init_weight": [213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "stand": [213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 300], "wether": [213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "sphericalgvggbas": [214, 215, 216, 217, 218, 219, 220, 221, 256, 257, 258, 259, 260, 261, 262, 263], "interp": [224, 246, 247], "2x2": [224, 246], "maxpad": [224, 246, 247], "shift": [224, 246, 247], "zeropad": [224, 246, 247], "sphericalgva": [225, 253], "vert": [225, 226, 253, 264], "tri": [225, 226, 253, 264, 342], "reparameter": [225, 253], "reparametr": [225, 253], "trick": [225, 253], "sphericalvggbas": [227, 228, 229, 230, 231, 232, 233, 234, 265, 266, 267, 268, 269, 270, 271, 272], "neighbor_indic": [235, 275, 277, 278, 283, 286, 288, 289, 294], "down_indic": [235, 242, 247, 277, 278, 279, 283, 288, 289, 290, 294, 312, 313, 346, 347], "up_indic": [235, 276, 284, 287, 295, 321, 322, 353, 354], "conv_neighbor_indic": 235, "conv_lay": [242, 247], "in_ch": [242, 243, 247, 248], "out_ch": [242, 243, 247, 248], "conv_neigh_indic": [242, 247], "down_neigh_indic": [242, 278, 279, 289, 290], "pool_mod": 242, "discret": [242, 247, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "pool_ratio": 244, "sum_r": 244, "act": 244, "unpool": 244, "hongyang": 244, "gao": 244, "shuiwang": 244, "ji": 244, "connect": [244, 367], "summat": 244, "nonlinear": 244, "edge_index": 244, "neigh_indic": [247, 275, 280, 286, 291], "up_neigh_indic": [247, 276, 277, 278, 283, 284, 287, 288, 289, 294, 295], "upsamp": [247, 248], "upconv": [247, 248], "max_pool_indic": [247, 278, 289], "klass_nam": 273, "klass_param": 273, "destination_module_glob": 273, "publicli": 273, "assign": [273, 334, 357], "in_feat": [275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295], "out_feat": [275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295], "formul": [275, 286], "ico2_vertic": [275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295], "ico2_triangl": [275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295], "asarrai": [275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 294, 295, 321, 353], "ico2_x": [275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295], "ico3_vertic": [276, 277, 278, 279, 283, 284, 287, 288, 289, 290, 294, 295], "ico3_triangl": [276, 277, 278, 279, 283, 284, 287, 288, 289, 290, 294, 295], "ico3_x": [276, 277, 278, 279, 283, 284, 287, 288, 289, 290, 294, 295], "slow": [277, 288], "pooling_typ": [278, 279, 289, 290], "rectagular": [280, 291], "neigh_weight": [280, 291], "proj_ico_x": [281, 282, 292, 293], "pad_azimuth": [281, 282, 285, 292, 293], "pad_elev": [281, 282, 285, 292, 293], "zero_pad": [282, 293], "icoconv": [282, 293], "vmin": [297, 298], "vmax": [297, 298], "black": [297, 298], "color_map": [297, 298], "linearsegmentedcolormap": [297, 298], "opac": [297, 298], "Not": [297, 298], "line": [297, 298], "cm": [297, 298], "coolwarm": [297, 298], "colormap": [297, 298], "sub": 299, "with_mean": 299, "with_std": 299, "sklearn": 299, "scler": 299, "guarante": 299, "csr": 299, "attempt": 299, "entail": 299, "equival": 299, "later": 299, "n_subject": 299, "get_metadata_rout": 299, "rout": 299, "inverse_transform": 299, "x_tr": 299, "set_inverse_transform_request": 299, "unchang": 299, "relev": 299, "enable_metadata_rout": 299, "set_config": 299, "metadata_rout": 299, "retain": 299, "pipelin": 299, "set_partial_fit_request": 299, "partial_fit": 299, "set_transform_request": 299, "suffix": 300, "system": 301, "tool": [301, 372], "cartesian": [302, 303, 307, 369], "array_lik": [302, 303, 307, 369], "radiant": [302, 303, 307, 369], "pi": [302, 303], "r": [302, 303, 307, 369], "ref_arrai": 304, "atol": [304, 309, 371], "toler": [304, 309, 371], "new_ord": 304, "resx": [305, 308, 318, 370], "resi": [305, 308, 318, 370], "ico2_vert": [305, 306, 308, 309, 311, 312, 314, 318, 319, 321, 322, 334, 335, 340, 345, 346, 348, 353, 354, 357, 358, 364, 370, 371], "ico2_tri": [305, 306, 308, 309, 311, 312, 314, 318, 319, 321, 322, 334, 335, 340, 345, 346, 348, 353, 354, 357, 358, 364, 370, 371], "y_grid": [305, 308, 318, 370], "ref_vertic": [306, 309, 319, 371], "ico2_std_vert": [306, 309, 319, 371], "ico2_std_tri": [306, 309, 319, 371], "projecte": [308, 370], "y_std": [309, 371], "target_vertic": [311, 321, 345, 353], "n_dim": [311, 321, 345, 353], "n_queri": [311, 321, 345, 353], "nearest_idx": [311, 345], "ico3_vert": [311, 320, 321, 333, 336, 338, 340, 341, 345, 352, 353, 356, 360, 362, 364, 365], "ico3_tri": [311, 320, 321, 333, 336, 338, 340, 341, 345, 352, 353, 356, 360, 362, 364, 365], "down3to2": [311, 345], "ico3_down_vertic": [311, 345], "consecut": [312, 313, 322, 346, 347, 354], "downsampled_data": [312, 346], "new_n_vertic": [312, 322, 346, 354], "ico4_vert": [312, 313, 322, 346, 347, 354], "ico4_tri": [312, 313, 322, 346, 347, 354], "reshap": [312, 314, 321, 322, 341, 346, 348, 353, 354, 365], "y_down": [312, 346], "squeez": [312, 322, 341, 346, 354, 365], "new_vertic": [313, 347], "newli": [313, 347], "icosahedorn": [313, 347], "new_triangl": [313, 347], "ico2_down_vert": [313, 347], "ico2_down_tri": [313, 347], "start_nod": [314, 348], "recurs": [314, 348], "node_neigh": [314, 348], "asssoci": [315, 349], "euclidian": [315, 349], "grid_in_spher": [317, 335, 351, 358], "grid_in_tplan": [317, 351], "target_triangl": [321, 353], "interp_indic": [321, 353], "n_feat": [321, 353], "y_up": [321, 322, 353, 354], "upsampled_data": [322, 354], "hide_err": 323, "secur": 323, "redirect": 323, "manag": 323, "hide": 323, "func": 324, "wrap": 324, "receiv": 324, "transpar": 324, "overlap": 324, "cifti_fil": 325, "decompos": 325, "cifti": [325, 328, 330], "vol": 325, "surf_left": 325, "surf_right": 325, "surf_fil": [326, 327, 331, 332], "gifti": [327, 332], "surf_nam": 328, "nbviewer": [328, 330], "neurohackademi": [328, 330], "nh2020": [328, 330], "curriculum": [328, 330], "blob": [328, 330], "master": [328, 330], "markiewicz": [328, 330], "gnu": 329, "archiv": 329, "out_path": 329, "n_neigh": [333, 337, 356, 361], "remain": [334, 357], "n_vert": [336, 360], "min_order_to_get_n_neighbor": [337, 361], "hi": [338, 362], "clockwise_from_cent": [339, 363], "clockwis": [339, 363], "counter": [339, 363], "reordered_triangl": [339, 363], "reorder": [339, 363], "ico0_vert": [339, 363], "ico0_tri": [339, 363], "clockwise_ico0_tri": [339, 363], "counter_clockwise_ico0_tri": [339, 363], "euclidean": [341, 365], "rotated_data": [341, 365], "y_rot": [341, 365], "lower_vertic": 342, "ico_fil": 343, "topologi": [343, 344], "ref_fil": 344, "fslr": 344, "point_1": 355, "point_2": 355, "middle_point_cach": 355, "middl": 355, "return_index": 366, "triangles_index": 366, "networkx": 367, "nearbi": 367, "smooth": 367, "logfil": 368, "unifi": 372, "analyz": 372, "advanc": 372, "availbl": 372, "hydra": 372}, "objects": {"nidl.callbacks": [[14, 0, 1, "", "BatchTypingCallback"], [15, 0, 1, "", "KNeighborsClassifierCVCallback"], [16, 0, 1, "", "KNeighborsRegressorCVCallback"], [17, 0, 1, "", "LogisticRegressionCVCallback"], [18, 0, 1, "", "ModelProbing"], [19, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "log_metrics"], [15, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "log_metrics"], [16, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[18, 1, 1, "", "extract_features"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "linear_probing"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "on_test_epoch_end"], [18, 1, 1, "", "on_test_epoch_start"], [18, 1, 1, "", "on_train_epoch_end"], [18, 1, 1, "", "on_validation_epoch_end"], [18, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[20, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[20, 1, 1, "", "on_predict_batch_start"], [20, 1, 1, "", "on_test_batch_start"], [20, 1, 1, "", "on_train_batch_start"], [20, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[21, 0, 1, "", "KNeighborsClassifierCVCallback"], [22, 0, 1, "", "KNeighborsRegressorCVCallback"], [23, 0, 1, "", "LogisticRegressionCVCallback"], [24, 0, 1, "", "ModelProbing"], [25, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log_metrics"], [22, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[24, 1, 1, "", "extract_features"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "linear_probing"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "on_test_epoch_end"], [24, 1, 1, "", "on_test_epoch_start"], [24, 1, 1, "", "on_train_epoch_end"], [24, 1, 1, "", "on_validation_epoch_end"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "predict"]], "nidl.datasets": [[27, 0, 1, "", "BaseImageDataset"], [28, 0, 1, "", "BaseNumpyDataset"], [29, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[27, 1, 1, "", "get_checksum"], [27, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[28, 1, 1, "", "get_data"]], "nidl.datasets.OpenBHB": [[29, 1, 1, "", "download_dataset_split"], [29, 1, 1, "", "download_file"], [29, 1, 1, "", "get_cat12_template"], [29, 1, 1, "", "get_fs_labels"], [29, 1, 1, "", "get_fs_roi_feature_names"], [29, 1, 1, "", "get_fs_xhemi_feature_names"], [29, 1, 1, "", "get_neuromorphometrics_atlas"], [29, 1, 1, "", "get_quasiraw_template"], [29, 1, 1, "", "get_vbm_roi_labels"], [29, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[30, 0, 1, "", "BaseDataset"], [31, 0, 1, "", "BaseImageDataset"], [32, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[31, 1, 1, "", "get_checksum"], [31, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[32, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[33, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[33, 1, 1, "", "download_dataset_split"], [33, 1, 1, "", "download_file"], [33, 1, 1, "", "get_cat12_template"], [33, 1, 1, "", "get_fs_labels"], [33, 1, 1, "", "get_fs_roi_feature_names"], [33, 1, 1, "", "get_fs_xhemi_feature_names"], [33, 1, 1, "", "get_neuromorphometrics_atlas"], [33, 1, 1, "", "get_quasiraw_template"], [33, 1, 1, "", "get_vbm_roi_labels"], [33, 1, 1, "", "make_dataset"]], "nidl.estimators": [[35, 0, 1, "", "BaseEstimator"], [36, 0, 1, "", "ClassifierMixin"], [37, 0, 1, "", "ClusterMixin"], [38, 0, 1, "", "RegressorMixin"], [39, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[35, 1, 1, "", "fit"], [35, 1, 1, "", "log"], [35, 1, 1, "", "log_dict"], [35, 1, 1, "", "predict"], [35, 1, 1, "", "predict_step"], [35, 1, 1, "", "training_step"], [35, 1, 1, "", "transform"], [35, 1, 1, "", "transform_step"], [35, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[40, 0, 1, "", "BaseEstimator"], [41, 0, 1, "", "ClassifierMixin"], [42, 0, 1, "", "ClusterMixin"], [43, 0, 1, "", "RegressorMixin"], [44, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[40, 1, 1, "", "fit"], [40, 1, 1, "", "log"], [40, 1, 1, "", "log_dict"], [40, 1, 1, "", "predict"], [40, 1, 1, "", "predict_step"], [40, 1, 1, "", "training_step"], [40, 1, 1, "", "transform"], [40, 1, 1, "", "transform_step"], [40, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[46, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[46, 1, 1, "", "configure_optimizers"], [46, 1, 1, "", "cross_entropy_loss"], [46, 1, 1, "", "freeze_encoder"], [46, 1, 1, "", "on_validation_epoch_end"], [46, 1, 1, "", "predict_step"], [46, 1, 1, "", "training_step"], [46, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[47, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[47, 1, 1, "", "configure_optimizers"], [47, 1, 1, "", "cross_entropy_loss"], [47, 1, 1, "", "freeze_encoder"], [47, 1, 1, "", "on_validation_epoch_end"], [47, 1, 1, "", "predict_step"], [47, 1, 1, "", "training_step"], [47, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[49, 0, 1, "", "SimCLR"], [50, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[49, 1, 1, "", "configure_optimizers"], [49, 1, 1, "", "info_nce_loss"], [49, 1, 1, "", "training_step"], [49, 1, 1, "", "transform_step"], [49, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[50, 1, 1, "", "configure_optimizers"], [50, 1, 1, "", "parse_batch"], [50, 1, 1, "", "training_step"], [50, 1, 1, "", "transform_step"], [50, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[51, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[51, 1, 1, "", "configure_optimizers"], [51, 1, 1, "", "info_nce_loss"], [51, 1, 1, "", "training_step"], [51, 1, 1, "", "transform_step"], [51, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[53, 0, 1, "", "ProjectionHead"], [54, 0, 1, "", "SimCLRProjectionHead"], [55, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[53, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[56, 0, 1, "", "ProjectionHead"], [57, 0, 1, "", "SimCLRProjectionHead"], [58, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[56, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[59, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[59, 1, 1, "", "configure_optimizers"], [59, 1, 1, "", "parse_batch"], [59, 1, 1, "", "training_step"], [59, 1, 1, "", "transform_step"], [59, 1, 1, "", "validation_step"]], "nidl.experiment": [[60, 2, 1, "", "fetch_experiment"], [61, 2, 1, "", "filter_config"], [62, 2, 1, "", "get_env"], [63, 2, 1, "", "load_interface"], [64, 2, 1, "", "update_params"]], "nidl.losses": [[66, 0, 1, "", "InfoNCE"], [67, 0, 1, "", "KernelMetric"], [68, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[66, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[67, 1, 1, "", "fit"], [67, 1, 1, "", "pairwise"], [67, 1, 1, "", "scotts_factor"], [67, 1, 1, "", "set_bandwidth"], [67, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[68, 1, 1, "", "forward"]], "nidl.losses.infonce": [[69, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[69, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[70, 0, 1, "", "KernelMetric"], [71, 0, 1, "", "PairwiseCosineSimilarity"], [72, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[70, 1, 1, "", "fit"], [70, 1, 1, "", "pairwise"], [70, 1, 1, "", "scotts_factor"], [70, 1, 1, "", "set_bandwidth"], [70, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[71, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[72, 1, 1, "", "forward"]], "nidl.metrics._regression": [[74, 2, 1, "", "_check_reg_targets"], [75, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [76, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[77, 2, 1, "", "pearson_r"], [80, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[78, 2, 1, "", "pearson_r"], [79, 2, 1, "", "regression_report"]], "nidl.transforms": [[81, 0, 1, "", "Identity"], [82, 0, 1, "", "MultiViewsTransform"], [83, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[81, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[82, 1, 1, "", "apply_transform"], [82, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[83, 1, 1, "", "apply_transform"], [83, 1, 1, "", "parse_data"], [83, 1, 1, "", "parse_probability"]], "nidl.utils": [[85, 0, 1, "", "Bunch"], [86, 0, 1, "", "Weights"], [99, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[86, 1, 1, "", "hf_download"], [86, 1, 1, "", "hub_split"], [86, 1, 1, "", "load_pretrained"], [86, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[87, 0, 1, "", "Bunch"]], "nidl.utils.color": [[88, 0, 1, "", "Colored"], [89, 2, 1, "", "attr"], [90, 2, 1, "", "fg"], [91, 2, 1, "", "hex"], [92, 2, 1, "", "print_multicolor"], [93, 2, 1, "", "print_result"], [94, 2, 1, "", "print_subtitle"], [95, 2, 1, "", "print_title"], [96, 2, 1, "", "print_warning"], [97, 2, 1, "", "random_stylize"], [98, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[88, 1, 1, "", "attribute"], [88, 1, 1, "", "background"], [88, 1, 1, "", "foreground"], [88, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[100, 0, 1, "", "_AvailableIfDescriptor"], [101, 2, 1, "", "_estimator_is"], [102, 2, 1, "", "available_if"], [103, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[104, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[104, 1, 1, "", "hf_download"], [104, 1, 1, "", "hub_split"], [104, 1, 1, "", "load_pretrained"], [104, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[107, 0, 1, "", "AlexNet"], [108, 0, 1, "", "DenseNet"], [109, 0, 1, "", "ResNet"], [110, 0, 1, "", "ResNetTruncated"], [112, 2, 1, "", "densenet121"], [120, 2, 1, "", "resnet18"], [121, 2, 1, "", "resnet18_trunc"], [134, 2, 1, "", "resnet50"], [135, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[107, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[108, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[109, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[110, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[111, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[111, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[113, 0, 1, "", "DenseNet"], [114, 0, 1, "", "_DenseBlock"], [115, 0, 1, "", "_DenseLayer"], [116, 0, 1, "", "_Transition"], [117, 2, 1, "", "_bn_function_factory"], [118, 2, 1, "", "_densenet"], [119, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[114, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[115, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[122, 0, 1, "", "BasicBlock"], [123, 0, 1, "", "Bottleneck"], [124, 0, 1, "", "ResNet"], [125, 0, 1, "", "ResNetTruncated"], [126, 2, 1, "", "_resnet"], [127, 2, 1, "", "_resnet_trunc"], [128, 2, 1, "", "conv1x1"], [129, 2, 1, "", "conv3x3"], [130, 2, 1, "", "resnet18"], [131, 2, 1, "", "resnet18_trunc"], [132, 2, 1, "", "resnet50"], [133, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[122, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[123, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[124, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[125, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[139, 0, 1, "", "RandomGaussianBlur"], [140, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[139, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[140, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[141, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[141, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[142, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[142, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[144, 0, 1, "", "RandomErasing"], [145, 0, 1, "", "RandomFlip"], [146, 0, 1, "", "RandomResizedCrop"], [147, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[144, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[145, 1, 1, "", "apply_transform"], [145, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[146, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[147, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[148, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[148, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[149, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[149, 1, 1, "", "apply_transform"], [149, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[150, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[150, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[151, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[151, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[154, 0, 1, "", "RobustRescaling"], [155, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[154, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[155, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[156, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[156, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[157, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[157, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[159, 0, 1, "", "CropOrPad"], [160, 0, 1, "", "Resample"], [161, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[159, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[160, 1, 1, "", "apply_transform"], [160, 1, 1, "", "as_sitk"], [160, 1, 1, "", "from_sitk"], [160, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[161, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[162, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[162, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[163, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[163, 1, 1, "", "apply_transform"], [163, 1, 1, "", "as_sitk"], [163, 1, 1, "", "from_sitk"], [163, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[164, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[164, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[165, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[165, 1, 1, "", "parse_data"]], "surfify.augmentation": [[169, 0, 1, "", "BaseTransformer"], [170, 0, 1, "", "GroupMixUp"], [171, 0, 1, "", "HemiMixUp"], [172, 0, 1, "", "SurfBlur"], [173, 0, 1, "", "SurfCutOut"], [174, 0, 1, "", "SurfNoise"], [175, 0, 1, "", "SurfRotation"], [176, 0, 1, "", "Transformer"], [177, 2, 1, "", "apply_chained_transforms"], [182, 2, 1, "", "interval"], [186, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[169, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[170, 1, 1, "", "groupby"], [170, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[171, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[172, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[173, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[174, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[175, 1, 1, "", "run"]], "surfify.augmentation.base": [[178, 0, 1, "", "SurfBlur"], [179, 0, 1, "", "SurfCutOut"], [180, 0, 1, "", "SurfNoise"], [181, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[178, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[179, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[180, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[181, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[183, 0, 1, "", "GroupMixUp"], [184, 0, 1, "", "HemiMixUp"], [185, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[183, 1, 1, "", "groupby"], [183, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[184, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[185, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[187, 0, 1, "", "BaseTransformer"], [188, 0, 1, "", "RandomAugmentation"], [189, 0, 1, "", "Transform"], [190, 0, 1, "", "Transformer"], [191, 2, 1, "", "apply_chained_transforms"], [192, 2, 1, "", "interval"], [193, 2, 1, "", "listify"], [194, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[187, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[188, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[188, 3, 1, "", "dtype"], [188, 3, 1, "", "high"], [188, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[189, 3, 1, "", "probability"], [189, 3, 1, "", "randomize_per_channel"], [189, 3, 1, "", "transform"]], "surfify.datasets": [[196, 0, 1, "", "ClassificationDataset"], [197, 0, 1, "", "GenericSurfDataset"], [201, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[198, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[199, 0, 1, "", "ClassificationDataset"], [200, 2, 1, "", "make_classification"]], "surfify.losses": [[203, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[204, 0, 1, "", "SphericalVAELoss"], [205, 2, 1, "", "log_likelihood"]], "surfify.models": [[207, 0, 1, "", "HemiFusionDecoder"], [208, 0, 1, "", "HemiFusionEncoder"], [209, 0, 1, "", "SiT"], [210, 0, 1, "", "SimCLR"], [211, 0, 1, "", "SphericalBase"], [212, 0, 1, "", "SphericalGUNet"], [213, 0, 1, "", "SphericalGVGG"], [214, 0, 1, "", "SphericalGVGG11"], [215, 0, 1, "", "SphericalGVGG11BN"], [216, 0, 1, "", "SphericalGVGG13"], [217, 0, 1, "", "SphericalGVGG13BN"], [218, 0, 1, "", "SphericalGVGG16"], [219, 0, 1, "", "SphericalGVGG16BN"], [220, 0, 1, "", "SphericalGVGG19"], [221, 0, 1, "", "SphericalGVGG19BN"], [222, 0, 1, "", "SphericalHemiFusionDecoder"], [223, 0, 1, "", "SphericalHemiFusionEncoder"], [224, 0, 1, "", "SphericalUNet"], [225, 0, 1, "", "SphericalVAE"], [226, 0, 1, "", "SphericalVGG"], [227, 0, 1, "", "SphericalVGG11"], [228, 0, 1, "", "SphericalVGG11BN"], [229, 0, 1, "", "SphericalVGG13"], [230, 0, 1, "", "SphericalVGG13BN"], [231, 0, 1, "", "SphericalVGG16"], [232, 0, 1, "", "SphericalVGG16BN"], [233, 0, 1, "", "SphericalVGG19"], [234, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[207, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[208, 1, 1, "", "forward"]], "surfify.models.SiT": [[209, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[210, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[211, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[212, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[213, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[222, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[223, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[224, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[225, 1, 1, "", "decode"], [225, 1, 1, "", "encode"], [225, 1, 1, "", "forward"], [225, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[226, 1, 1, "", "forward"]], "surfify.models.base": [[235, 0, 1, "", "Ico"], [236, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[235, 3, 1, "", "conv_neighbor_indices"], [235, 3, 1, "", "down_indices"], [235, 3, 1, "", "neighbor_indices"], [235, 3, 1, "", "order"], [235, 3, 1, "", "triangles"], [235, 3, 1, "", "up_indices"], [235, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[236, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[237, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[237, 1, 1, "", "forward"]], "surfify.models.sit": [[238, 0, 1, "", "Attention"], [239, 0, 1, "", "FeedForward"], [240, 0, 1, "", "SiT"], [241, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[238, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[239, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[240, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[241, 1, 1, "", "forward"]], "surfify.models.unet": [[242, 0, 1, "", "DownBlock"], [243, 0, 1, "", "DownGBlock"], [244, 0, 1, "", "GraphicalUNet"], [245, 0, 1, "", "SphericalGUNet"], [246, 0, 1, "", "SphericalUNet"], [247, 0, 1, "", "UpBlock"], [248, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[242, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[243, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[244, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[245, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[246, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[247, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[248, 1, 1, "", "forward"]], "surfify.models.vae": [[249, 0, 1, "", "HemiFusionDecoder"], [250, 0, 1, "", "HemiFusionEncoder"], [251, 0, 1, "", "SphericalHemiFusionDecoder"], [252, 0, 1, "", "SphericalHemiFusionEncoder"], [253, 0, 1, "", "SphericalVAE"], [254, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[249, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[250, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[251, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[252, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[253, 1, 1, "", "decode"], [253, 1, 1, "", "encode"], [253, 1, 1, "", "forward"], [253, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[255, 0, 1, "", "SphericalGVGG"], [256, 0, 1, "", "SphericalGVGG11"], [257, 0, 1, "", "SphericalGVGG11BN"], [258, 0, 1, "", "SphericalGVGG13"], [259, 0, 1, "", "SphericalGVGG13BN"], [260, 0, 1, "", "SphericalGVGG16"], [261, 0, 1, "", "SphericalGVGG16BN"], [262, 0, 1, "", "SphericalGVGG19"], [263, 0, 1, "", "SphericalGVGG19BN"], [264, 0, 1, "", "SphericalVGG"], [265, 0, 1, "", "SphericalVGG11"], [266, 0, 1, "", "SphericalVGG11BN"], [267, 0, 1, "", "SphericalVGG13"], [268, 0, 1, "", "SphericalVGG13BN"], [269, 0, 1, "", "SphericalVGG16"], [270, 0, 1, "", "SphericalVGG16BN"], [271, 0, 1, "", "SphericalVGG19"], [272, 0, 1, "", "SphericalVGG19BN"], [273, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[255, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[264, 1, 1, "", "forward"]], "surfify.nn": [[275, 0, 1, "", "IcoDiNeConv"], [276, 0, 1, "", "IcoFixIndexUpSample"], [277, 0, 1, "", "IcoGenericUpConv"], [278, 0, 1, "", "IcoMaxIndexUpSample"], [279, 0, 1, "", "IcoPool"], [280, 0, 1, "", "IcoRePaConv"], [281, 0, 1, "", "IcoSpMaConv"], [282, 0, 1, "", "IcoSpMaConvTranspose"], [283, 0, 1, "", "IcoUpConv"], [284, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[275, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[276, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[277, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[278, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[279, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[280, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[281, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[282, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[283, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[284, 1, 1, "", "forward"]], "surfify.nn.functional": [[285, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[286, 0, 1, "", "IcoDiNeConv"], [287, 0, 1, "", "IcoFixIndexUpSample"], [288, 0, 1, "", "IcoGenericUpConv"], [289, 0, 1, "", "IcoMaxIndexUpSample"], [290, 0, 1, "", "IcoPool"], [291, 0, 1, "", "IcoRePaConv"], [292, 0, 1, "", "IcoSpMaConv"], [293, 0, 1, "", "IcoSpMaConvTranspose"], [294, 0, 1, "", "IcoUpConv"], [295, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[286, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[287, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[288, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[289, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[290, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[291, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[292, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[293, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[294, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[295, 1, 1, "", "forward"]], "surfify.plotting": [[297, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[298, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[299, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[299, 1, 1, "", "fit"], [299, 1, 1, "", "get_metadata_routing"], [299, 1, 1, "", "inverse_transform"], [299, 1, 1, "", "set_inverse_transform_request"], [299, 1, 1, "", "set_partial_fit_request"], [299, 1, 1, "", "set_transform_request"], [299, 1, 1, "", "transform"]], "surfify.transforms": [[300, 0, 1, "", "RandomCompose"]], "surfify.utils": [[302, 2, 1, "", "cart2sph"], [310, 2, 1, "", "debug_msg"], [311, 2, 1, "", "downsample"], [312, 2, 1, "", "downsample_data"], [313, 2, 1, "", "downsample_ico"], [314, 2, 1, "", "find_neighbors"], [315, 2, 1, "", "find_rotation_interpol_coefs"], [316, 2, 1, "", "get_logger"], [317, 2, 1, "", "get_rectangular_projection"], [318, 2, 1, "", "grid2text"], [319, 2, 1, "", "ico2ico"], [320, 2, 1, "", "icosahedron"], [321, 2, 1, "", "interpolate"], [322, 2, 1, "", "interpolate_data"], [333, 2, 1, "", "min_depth_to_get_n_neighbors"], [334, 2, 1, "", "neighbors"], [335, 2, 1, "", "neighbors_rec"], [336, 2, 1, "", "number_of_ico_vertices"], [337, 2, 1, "", "number_of_neighbors"], [338, 2, 1, "", "order_of_ico_from_vertices"], [339, 2, 1, "", "order_triangles"], [340, 2, 1, "", "patch_tri"], [341, 2, 1, "", "rotate_data"], [368, 2, 1, "", "setup_logging"], [369, 2, 1, "", "sph2cart"], [370, 2, 1, "", "text2grid"], [371, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[303, 2, 1, "", "cart2sph"], [304, 2, 1, "", "find_corresponding_order"], [305, 2, 1, "", "grid2text"], [306, 2, 1, "", "ico2ico"], [307, 2, 1, "", "sph2cart"], [308, 2, 1, "", "text2grid"], [309, 2, 1, "", "text2ico"]], "surfify.utils.io": [[323, 0, 1, "", "HidePrints"], [324, 2, 1, "", "compute_and_store"], [325, 2, 1, "", "decompose_cifti"], [326, 2, 1, "", "read_freesurfer"], [327, 2, 1, "", "read_gifti"], [328, 2, 1, "", "surf_data_from_cifti"], [329, 2, 1, "", "ungzip"], [330, 2, 1, "", "volume_from_cifti"], [331, 2, 1, "", "write_freesurfer"], [332, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[342, 2, 1, "", "_patch_tri_iter"], [343, 2, 1, "", "build_freesurfer_ico"], [344, 2, 1, "", "build_fslr_ref"], [345, 2, 1, "", "downsample"], [346, 2, 1, "", "downsample_data"], [347, 2, 1, "", "downsample_ico"], [348, 2, 1, "", "find_neighbors"], [349, 2, 1, "", "find_rotation_interpol_coefs"], [350, 2, 1, "", "get_angle_with_xaxis"], [351, 2, 1, "", "get_rectangular_projection"], [352, 2, 1, "", "icosahedron"], [353, 2, 1, "", "interpolate"], [354, 2, 1, "", "interpolate_data"], [355, 2, 1, "", "middle_point"], [356, 2, 1, "", "min_depth_to_get_n_neighbors"], [357, 2, 1, "", "neighbors"], [358, 2, 1, "", "neighbors_rec"], [359, 2, 1, "", "normalize"], [360, 2, 1, "", "number_of_ico_vertices"], [361, 2, 1, "", "number_of_neighbors"], [362, 2, 1, "", "order_of_ico_from_vertices"], [363, 2, 1, "", "order_triangles"], [364, 2, 1, "", "patch_tri"], [365, 2, 1, "", "rotate_data"], [366, 2, 1, "", "triangles_to_edges"], [367, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 274], "comput": [1, 9, 373], "time": [1, 9, 373], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 48, 206], "setup": 2, "data": [2, 6], "augment": [2, 4, 137, 138, 143, 168], "dataset": [2, 8, 26, 195], "train": [2, 8], "logist": 2, "regress": [2, 73], "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 12, 136, 137, 138, 143, 152, 153, 158, 167], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 296], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 206], "segment": 8, "inspect": 8, "model": [8, 206], "predict": 8, "label": 8, "api": [10, 12, 13, 26, 34, 45, 48, 52, 65, 73, 84, 105, 106, 136, 137, 138, 143, 152, 153, 158, 166, 167, 168, 195, 202, 206, 274, 296, 301], "document": [10, 12, 13, 26, 34, 45, 48, 52, 65, 73, 84, 105, 106, 136, 137, 138, 143, 152, 153, 158, 166, 167, 168, 195, 202, 206, 274, 296, 301], "nidl": [10, 11, 12, 13, 26, 34, 45, 48, 52, 65, 73, 84, 105, 106, 136, 137, 138, 143, 152, 153, 158, 166], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "model_prob": 13, "check_typ": 13, "openbhb": 26, "base": [26, 34, 168, 206], "estim": [34, 45, 48, 52], "linear": 45, "logistic_regress": 45, "exampl": [46, 47, 49, 51, 86, 104], "ssl": [48, 52], "yawar": 48, "util": [52, 84, 168, 301], "projection_head": 52, "loss": [65, 202], "infonc": 65, "yaware_infonc": 65, "metric": 73, "_regress": 73, "classif": 73, "color": 84, "valid": 84, "weight": 84, "bunch": 84, "volum": [105, 106, 136, 137, 138, 143, 152, 153, 158], "backbon": 106, "densenet3d": 106, "alexnet3d": 106, "resnet3d": 106, "volume_transform": 136, "intens": [138, 153], "random_blur": 138, "random_nois": 138, "spatial": [143, 158], "random_eras": 143, "random_rot": 143, "random_flip": 143, "random_resized_crop": 143, "preprocess": [152, 153, 158, 167], "rescal": 153, "z_normal": 153, "resampl": 158, "crop_or_pad": 158, "resiz": 158, "search": 166, "surfifi": [167, 168, 195, 202, 206, 274, 296, 301], "mixup": 168, "_samples_gener": 195, "_gener": 195, "vae": [202, 206], "sit": 206, "vgg": 206, "nn": 274, "function": 274, "plot": 296, "io": 301, "coord": 301, "sampl": 301}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [373, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of nidl": [[10, "api-documentation-of-nidl"], [12, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "nidl.transforms": [[12, "nidl-transforms"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[13, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[26, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[26, "nidl-datasets"]], "nidl.datasets.openbhb": [[26, "id1"]], "nidl.datasets.base": [[26, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[34, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[34, "nidl-estimators"]], "nidl.estimators.base": [[34, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[45, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[45, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[45, "nidl-estimators-linear-logistic-regression"]], "Examples": [[46, "examples"], [47, "examples"], [49, "examples"], [51, "examples"], [86, "examples"], [104, "examples"]], "API documentation of nidl.estimators.ssl": [[48, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[48, "nidl-estimators-ssl"]], "nidl.estimators.ssl.yaware": [[48, "nidl-estimators-ssl-yaware"]], "nidl.estimators.ssl.simclr": [[48, "id1"]], "API documentation of nidl.estimators.ssl.utils": [[52, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[52, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[52, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[65, "api-documentation-of-nidl-losses"]], "nidl.losses": [[65, "nidl-losses"]], "nidl.losses.infonce": [[65, "id1"]], "nidl.losses.yaware_infonce": [[65, "nidl-losses-yaware-infonce"]], "API documentation of nidl.metrics": [[73, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[73, "nidl-metrics"]], "nidl.metrics._regression": [[73, "nidl-metrics-regression"]], "nidl.metrics.classification": [[73, "nidl-metrics-classification"]], "nidl.metrics.regression": [[73, "id1"]], "API documentation of nidl.utils": [[84, "api-documentation-of-nidl-utils"]], "nidl.utils": [[84, "nidl-utils"]], "nidl.utils.color": [[84, "nidl-utils-color"]], "nidl.utils.validation": [[84, "nidl-utils-validation"]], "nidl.utils.weights": [[84, "id1"]], "nidl.utils.bunch": [[84, "id2"]], "API documentation of nidl.volume": [[105, "api-documentation-of-nidl-volume"]], "nidl.volume": [[105, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[106, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[106, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[106, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[106, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[106, "nidl-volume-backbones-resnet3d"]], "API documentation of nidl.volume.transforms": [[136, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[136, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[136, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[137, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[137, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[138, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[138, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[138, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[138, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[143, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[143, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[143, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[143, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[143, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[143, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "API documentation of nidl.volume.transforms.preprocessing": [[152, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[152, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[153, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[153, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[153, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[153, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[158, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[158, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[158, "id1"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[158, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[158, "id2"]], "Search in API documentation of nidl": [[166, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[167, "api-documentation-of-surfify"]], "surfify": [[167, "surfify"]], "surfify.preprocessing": [[167, "surfify-preprocessing"]], "surfify.transforms": [[167, "surfify-transforms"]], "API documentation of surfify.augmentation": [[168, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[168, "surfify-augmentation"]], "surfify.augmentation.base": [[168, "surfify-augmentation-base"]], "surfify.augmentation.mixup": [[168, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[168, "surfify-augmentation-utils"]], "API documentation of surfify.datasets": [[195, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[195, "surfify-datasets"]], "surfify.datasets._samples_generator": [[195, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[195, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[202, "api-documentation-of-surfify-losses"]], "surfify.losses": [[202, "surfify-losses"]], "surfify.losses.vae": [[202, "surfify-losses-vae"]], "API documentation of surfify.models": [[206, "api-documentation-of-surfify-models"]], "surfify.models": [[206, "surfify-models"]], "surfify.models.base": [[206, "surfify-models-base"]], "surfify.models.sit": [[206, "id1"]], "surfify.models.vae": [[206, "surfify-models-vae"]], "surfify.models.vgg": [[206, "surfify-models-vgg"]], "surfify.models.simclr": [[206, "id2"]], "surfify.models.unet": [[206, "surfify-models-unet"]], "API documentation of surfify.nn": [[274, "api-documentation-of-surfify-nn"]], "surfify.nn": [[274, "surfify-nn"]], "surfify.nn.modules": [[274, "surfify-nn-modules"]], "surfify.nn.functional": [[274, "surfify-nn-functional"]], "API documentation of surfify.plotting": [[296, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[296, "surfify-plotting"]], "surfify.plotting.surface": [[296, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[301, "api-documentation-of-surfify-utils"]], "surfify.utils": [[301, "surfify-utils"]], "surfify.utils.io": [[301, "surfify-utils-io"]], "surfify.utils.coord": [[301, "surfify-utils-coord"]], "surfify.utils.sampling": [[301, "surfify-utils-sampling"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[14, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[18, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[19, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[27, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[28, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[28, "nidl.datasets.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets)": [[29, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[29, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[30, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[31, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[31, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[31, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[32, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[32, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[33, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[33, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "baseestimator (class in nidl.estimators)": [[35, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[35, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[36, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[37, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[38, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[39, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[40, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[40, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[41, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[42, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[43, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[44, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[46, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[46, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[47, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[49, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[49, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[49, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[49, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[49, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[49, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[50, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[51, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[51, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[51, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[51, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[51, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[51, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[53, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[53, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[54, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[55, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[56, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[56, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[57, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[58, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[60, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[61, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[62, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[63, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[64, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[66, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[66, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[67, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[67, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[67, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[67, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[67, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[67, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[68, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[68, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[69, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[69, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[70, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[70, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[70, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[70, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[70, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[70, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[71, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[71, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[72, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[72, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[74, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[75, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[76, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[77, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[78, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[79, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[80, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[81, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[81, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[82, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[82, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[82, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[83, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[83, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[83, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[83, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[85, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[86, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[86, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[86, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[86, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[86, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[87, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[88, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[88, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[88, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[88, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[88, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[89, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[90, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[91, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[92, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[93, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[94, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[95, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[96, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[97, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[98, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[99, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[100, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[101, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[102, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[103, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[104, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[104, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[104, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[104, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[104, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[107, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[107, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[108, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[108, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[109, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[109, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[110, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[110, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[111, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[111, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[112, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[113, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[113, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[114, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[114, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[115, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[115, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[116, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[117, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[118, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[119, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[120, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[121, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[122, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[122, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[123, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[123, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[124, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[124, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[125, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[125, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[126, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[127, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[132, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[134, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[135, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[139, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[139, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[140, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[140, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[141, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[141, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[142, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[142, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[144, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[144, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[145, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[145, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[145, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[146, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[146, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[147, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[147, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[148, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[148, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[149, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[149, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[149, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[150, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[150, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[151, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[151, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[154, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[154, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[155, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[155, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[156, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[156, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[157, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[157, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[159, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[159, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[160, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[160, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[160, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[160, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[160, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[161, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[161, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[162, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[162, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[163, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[163, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[164, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[164, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[165, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[165, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[169, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[169, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[170, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[170, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[170, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[171, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[171, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[172, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[172, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[173, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[173, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[174, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[174, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[175, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[175, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[176, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[177, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[178, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[178, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[179, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[179, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[180, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[180, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[181, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[181, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[182, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[183, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[183, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[183, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[184, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[184, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[185, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[185, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[186, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[187, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[187, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[188, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[188, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[188, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[188, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[188, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[189, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[189, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[189, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[189, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[190, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[191, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[192, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[196, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[197, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[198, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[199, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[200, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[201, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[203, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[204, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[205, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[207, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[207, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[208, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[208, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[209, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[209, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[210, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[210, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[211, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[211, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[212, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[212, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[213, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[213, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[214, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[215, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[216, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[217, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[218, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[219, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[220, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[221, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[222, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[222, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[223, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[223, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[224, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[224, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[225, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[225, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[225, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[225, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[225, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[226, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[226, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[227, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[228, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[229, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[230, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[231, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[232, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[233, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[234, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[235, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[235, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[236, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[236, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[237, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[237, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[238, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[238, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[239, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[239, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[240, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[240, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[241, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[241, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[242, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[242, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[243, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[243, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[244, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[244, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[245, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[245, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[246, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[246, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[247, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[247, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[248, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[248, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[249, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[249, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[250, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[250, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[251, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[251, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[252, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[252, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[253, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[253, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[253, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[253, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[253, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[254, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[255, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[255, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[256, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[257, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[258, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[259, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[260, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[261, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[262, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[263, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[264, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[264, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[265, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[273, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[275, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[275, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[276, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[276, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[277, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[277, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[278, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[278, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[279, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[279, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[280, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[280, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[281, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[281, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[282, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[282, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[283, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[283, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[284, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[284, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[285, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[286, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[286, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[287, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[287, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[288, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[288, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[289, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[289, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[290, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[290, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[291, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[291, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[292, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[292, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[293, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[293, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[294, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[294, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[295, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[295, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[297, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[298, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[299, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[299, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[300, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[302, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[303, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[304, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[305, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[306, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[307, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[308, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[309, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[310, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[311, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[312, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[313, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[314, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[315, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[316, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[317, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[318, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[319, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[320, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[321, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[322, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[323, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[324, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[325, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[326, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[327, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[328, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[329, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[330, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[331, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[332, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[333, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[334, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[335, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[336, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[337, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[338, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[339, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[340, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[341, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[342, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[343, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[344, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[345, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[346, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[347, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[348, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[349, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[350, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[351, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[352, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[368, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[369, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[370, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[371, "surfify.utils.text2ico"]]}})
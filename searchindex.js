Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.transforms", "generated/nidl.transforms.ContrastiveTransforms", "generated/nidl.transforms.ssl.ContrastiveTransforms", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.transforms.rst", "generated/nidl.transforms.ContrastiveTransforms.rst", "generated/nidl.transforms.ssl.ContrastiveTransforms.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.transforms</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 22, 27, 33, 34, 35, 36, 37, 46, 47, 48, 51, 65, 67, 69, 144, 175, 234, 308], "supervis": [0, 1, 10, 33, 34, 35, 36, 37, 46, 47, 48, 51, 69, 308], "contrast": [0, 1, 33, 34, 36, 37, 51, 69, 132, 133, 145, 172, 308], "learn": [0, 1, 10, 12, 33, 34, 36, 37, 46, 47, 48, 51, 69, 72, 73, 76, 78, 141, 145, 160, 172, 188, 210, 221, 307, 308], "simclr": [0, 1, 10, 33, 34, 36, 37, 51, 69, 101, 145, 172, 308], "neighbor": [0, 3, 4, 9, 10, 101, 105, 107, 108, 113, 114, 118, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 182, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 218, 221, 223, 224, 225, 226, 229, 236, 240, 243, 246, 249, 250, 253, 256, 268, 269, 270, 272, 276, 280, 283, 284, 288, 291, 292, 293, 296, 300, 302, 305, 308], "unet": [0, 3, 9, 10, 101, 147, 159, 177, 178, 179, 180, 181, 182, 183, 308], "segment": [0, 3, 9, 74, 75, 89, 90, 308], "project": [0, 3, 4, 5, 7, 9, 11, 16, 19, 36, 37, 38, 110, 116, 144, 175, 241, 244, 246, 249, 252, 254, 255, 269, 270, 275, 280, 283, 285, 286, 287, 290, 292, 293, 299, 306, 308], "textur": [0, 3, 4, 9, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 142, 143, 148, 157, 158, 160, 161, 184, 185, 186, 187, 188, 190, 199, 232, 233, 240, 243, 244, 247, 253, 256, 257, 276, 281, 288, 289, 300, 305, 306, 308], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 101, 107, 108, 110, 113, 114, 116, 131, 134, 135, 136, 141, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 181, 182, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 240, 241, 243, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 305, 306, 308], "match": [0, 3, 9, 17, 20, 239, 244, 306, 308], "augment": [0, 3, 9, 10, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 47, 48, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 308], "download": [0, 2, 4, 5, 6, 7, 8, 49, 51, 69], "all": [0, 2, 5, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 147, 159, 172, 173, 174, 176, 179, 180, 181, 215, 216, 217, 226, 227, 228, 308], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 22, 27, 47, 48, 50, 52, 67, 146, 148, 159, 160, 161, 171, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 305, 306, 308], "python": [0, 2, 4, 5, 6, 7, 8, 10, 12, 65], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 157, 158, 159, 160, 161, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 199, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "code": [0, 2, 4, 5, 6, 7, 8, 14, 38, 41, 62, 63], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 264], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 19, 22, 27, 33, 34, 36, 37, 120, 130, 131, 134, 135, 136, 141, 243, 249, 264, 266, 267, 278, 279, 283, 305], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 308], "000": [1, 2, 308], "total": [1, 4, 5, 6, 7, 8, 9, 73, 74, 75, 78, 89, 90, 308], "execut": [1, 9, 259, 308], "1": [1, 2, 4, 5, 6, 7, 8, 22, 27, 33, 34, 36, 37, 38, 44, 45, 50, 52, 67, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 93, 94, 104, 105, 108, 114, 118, 122, 123, 124, 131, 134, 135, 136, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 216, 217, 218, 221, 223, 224, 225, 227, 228, 229, 232, 233, 234, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 278, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 302, 305, 306], "file": [1, 9, 16, 17, 18, 19, 20, 38, 51, 69, 132, 133, 260, 261, 262, 264, 266, 267, 303, 307, 308], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 44, 45, 50, 52, 67, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 105, 108, 114, 118, 132, 133, 142, 146, 147, 148, 159, 160, 161, 171, 180, 181, 184, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 305, 306, 308], "auto_galleri": [1, 9], "mem": [1, 9, 308], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 308], "simclr_stl10": [1, 2, 308], "py": [1, 2, 4, 5, 6, 7, 8, 9, 308], "0": [1, 2, 4, 5, 6, 7, 8, 9, 14, 22, 27, 33, 34, 36, 37, 38, 44, 45, 67, 74, 75, 89, 90, 108, 110, 114, 116, 123, 124, 144, 160, 170, 173, 174, 175, 176, 179, 188, 211, 216, 217, 222, 227, 228, 232, 233, 239, 241, 244, 246, 249, 254, 269, 270, 274, 275, 276, 280, 283, 292, 293, 298, 299, 300, 302, 306, 308], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 22, 27, 33, 34, 36, 37, 62, 63, 68], "full": [2, 4, 5, 6, 7, 8, 10, 22, 27, 248, 282], "http": [2, 11, 44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 141, 263, 265], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 101, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "In": [2, 22, 27, 33, 34, 36, 37, 42, 47, 48, 147, 159, 180, 181, 208], "thi": [2, 5, 10, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "tutori": [2, 11], "we": [2, 5, 6, 8, 33, 34, 36, 37, 47, 48, 66, 208, 220, 263, 265], "take": [2, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 189, 215, 216, 217, 226, 227, 228], "closer": [2, 36, 37], "look": [2, 36, 37, 249, 283], "also": [2, 10, 16, 17, 18, 19, 20, 33, 34, 36, 37, 65, 130, 132, 133, 259, 307], "sometim": [2, 50, 52], "call": [2, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 47, 48, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 132, 133, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 259, 276, 300], "unsupervis": 2, "describ": [2, 36, 37, 38, 307], "scenario": 2, "where": [2, 6, 16, 17, 18, 19, 20, 36, 37, 38, 51, 69, 132, 133, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221, 232, 233, 235, 243, 302, 305], "have": [2, 5, 6, 14, 22, 27, 33, 34, 36, 37, 259, 269, 292], "given": [2, 51, 68, 69, 140, 142, 184, 234, 259, 276, 300, 301, 302], "input": [2, 8, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 38, 40, 47, 48, 51, 69, 72, 73, 74, 75, 76, 78, 89, 90, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 126, 128, 132, 133, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 239, 240, 243, 244, 253, 259, 261, 262, 277, 305, 306], "accompani": 2, "label": [2, 6, 33, 34, 135, 136, 232, 233], "classic": [2, 159, 181, 182], "wai": [2, 47, 48, 269, 292, 307], "howev": 2, "still": [2, 234], "contain": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 50, 52, 132, 133, 146, 171, 189, 232, 233, 259, 275, 299], "lot": 2, "inform": [2, 16, 17, 18, 19, 20, 38, 132, 133, 141, 146, 171], "which": [2, 22, 27, 33, 34, 36, 37, 68, 74, 75, 89, 90, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 234, 239, 249, 276, 283, 300], "can": [2, 5, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 66, 104, 111, 122, 125, 132, 133, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 189, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 258, 259], "how": [2, 4, 5, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "ar": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 50, 52, 103, 132, 133, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 220, 234, 239, 243, 256, 269, 276, 278, 288, 292, 300, 302, 305], "imag": [2, 6, 16, 17, 18, 19, 20, 33, 34, 36, 37, 47, 48, 103, 132, 133, 140, 243, 260, 305], "differ": [2, 5, 16, 17, 18, 19, 20, 22, 27, 36, 37, 38, 47, 48, 108, 114, 132, 133, 146, 147, 159, 171, 180, 181], "each": [2, 5, 16, 19, 22, 27, 33, 34, 36, 37, 38, 47, 48, 73, 74, 75, 78, 89, 90, 105, 107, 108, 113, 114, 118, 121, 129, 131, 134, 135, 136, 140, 142, 143, 144, 146, 147, 157, 158, 159, 171, 175, 179, 180, 181, 184, 185, 186, 187, 234, 249, 250, 269, 270, 276, 283, 284, 292, 293, 300], "other": [2, 5, 22, 27, 33, 34, 36, 37, 38, 234, 244, 306], "what": [2, 38, 41], "pattern": [2, 6, 16, 17, 18, 19, 20, 132, 133, 220], "descript": 2, "certain": [2, 249, 272, 283, 296], "cluster": [2, 22, 24, 27, 29], "To": [2, 5, 16, 19, 22, 27, 33, 34, 36, 37], "get": [2, 36, 37, 234, 268, 271, 272, 273, 291, 295, 296, 297, 302], "an": [2, 6, 7, 8, 11, 22, 27, 33, 34, 36, 37, 38, 40, 41, 47, 48, 50, 51, 52, 65, 67, 68, 69, 74, 75, 89, 90, 107, 108, 113, 114, 117, 120, 121, 123, 127, 129, 146, 147, 159, 171, 180, 181, 210, 221, 234, 240, 243, 244, 248, 253, 255, 257, 268, 271, 272, 273, 276, 282, 287, 289, 290, 291, 295, 296, 297, 300, 305, 306], "insight": 2, "question": 2, "implement": [2, 22, 27, 33, 34, 36, 37, 44, 45, 65, 107, 113, 141, 144, 145, 160, 172, 175, 179, 188], "popular": [2, 10, 130], "simpl": [2, 4, 5, 7, 8, 36, 37, 72, 76, 145, 172, 241, 254, 302], "method": [2, 10, 14, 16, 19, 22, 27, 50, 51, 52, 66, 67, 69, 102, 130, 144, 146, 147, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 180, 181, 182, 183, 188, 190, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 234, 276, 300], "appli": [2, 5, 6, 33, 34, 36, 37, 47, 48, 51, 69, 74, 75, 89, 90, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 122, 123, 125, 126, 144, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 220, 241, 252, 254, 270, 286, 293], "stl10": 2, "requir": [2, 22, 27, 33, 34, 36, 37], "some": [2, 7, 10, 22, 27, 33, 34, 36, 37, 38, 40, 74, 75, 89, 90, 111, 112, 125, 126, 130, 234, 302], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 307], "let": [2, 36, 37], "": [2, 5, 7, 22, 27, 36, 37, 68, 106, 107, 108, 110, 113, 114, 116, 119, 131, 134, 135, 136, 142, 143, 147, 157, 158, 159, 177, 180, 181, 182, 184, 185, 186, 187, 210, 221, 246, 249, 259, 269, 270, 274, 275, 280, 283, 292, 293, 298, 299], "first": [2, 5, 6, 8, 44, 45, 73, 74, 75, 78, 89, 90, 142, 144, 147, 159, 175, 177, 178, 180, 181, 184, 276, 300], "start": [2, 74, 75, 89, 90, 108, 114, 249, 283], "import": [2, 4, 5, 6, 7, 8, 36, 37, 38, 40, 41, 50, 52, 67, 130, 146, 148, 159, 160, 161, 171, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 305, 306], "our": [2, 5, 33, 34], "standard": [2, 107, 109, 113, 115, 146, 147, 159, 171, 180, 181, 234, 255, 258, 275, 287, 299], "librari": 2, "below": [2, 36, 37, 38], "o": [2, 5, 7, 236, 246, 249, 269, 270, 275, 280, 283, 292, 293, 299], "matplotlib": [2, 4, 5, 6, 7, 8, 232, 233, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "pyplot": [2, 4, 5, 6, 7, 8, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "plt": [2, 4, 5, 6, 7, 8, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "pytorch_lightn": 2, "pl": 2, "torch": [2, 6, 8, 22, 27, 44, 45, 51, 69, 141, 148, 159, 160, 161, 179, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "nn": [2, 6, 8, 10, 22, 27, 33, 34, 36, 37, 44, 45, 51, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 101, 107, 113, 142, 143, 145, 157, 158, 172, 173, 174, 176, 177, 179, 182, 184, 185, 186, 187, 189, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "util": [2, 4, 5, 6, 7, 8, 10, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 101, 107, 108, 110, 113, 114, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 159, 160, 161, 181, 188, 199, 209, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "torchvis": 2, "collect": 2, "ordereddict": [2, 33, 34], "copi": [2, 16, 19, 234], "deepcopi": 2, "weight": [2, 10, 33, 34, 36, 37, 38, 51, 69, 101, 105, 118, 138, 139, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 250, 256, 270, 276, 284, 288, 293, 300], "estim": [2, 4, 5, 6, 7, 8, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 66, 68, 101, 234, 241, 254], "ssl": [2, 10, 36, 37, 48, 101], "linear": [2, 10, 33, 34, 72, 76, 101, 144, 147, 159, 175, 180, 181, 182], "logisticregress": [2, 10, 32, 33, 34, 101], "callback": [2, 10, 14, 22, 27, 33, 34, 101], "learningratemonitor": 2, "modelcheckpoint": [2, 22, 27], "transform": [2, 5, 10, 16, 17, 18, 19, 20, 22, 26, 27, 31, 38, 47, 48, 101, 103, 104, 111, 112, 121, 122, 124, 125, 126, 129, 132, 133, 141, 142, 144, 175, 176, 184, 234, 235, 237, 238, 241, 242, 254, 275, 299, 304], "defin": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 118, 120, 123, 132, 133, 145, 147, 159, 172, 173, 174, 176, 179, 180, 181, 182, 183, 208, 215, 216, 217, 226, 227, 228, 232, 233, 235, 252, 255, 261, 262, 266, 267, 286, 287], "global": [2, 38, 208], "paramet": [2, 8, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 67, 68, 69, 72, 73, 74, 75, 76, 78, 89, 90, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 50, 52, 160, 161, 170, 188, 199, 269, 275, 292, 299, 308], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 22, 27, 51, 57, 62, 63, 64, 67, 69, 73, 78, 104, 121, 122, 129, 138, 139, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 179, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 218, 221, 223, 224, 225, 229, 232, 233, 234, 240, 241, 244, 247, 249, 253, 254, 269, 274, 281, 283, 292, 298, 306], "benchmark": 2, "fals": [2, 4, 6, 7, 22, 27, 33, 34, 36, 37, 51, 65, 67, 69, 73, 74, 75, 78, 79, 80, 89, 90, 132, 133, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 232, 233, 234, 241, 246, 248, 249, 254, 255, 256, 257, 258, 260, 263, 265, 269, 270, 274, 275, 276, 280, 282, 283, 287, 288, 289, 292, 293, 298, 299, 300, 301], "devic": [2, 22, 27, 33, 34], "gpu": [2, 22, 27, 33, 34, 36, 37], "cuda": 2, "is_avail": 2, "els": 2, "cpu": [2, 22, 27], "As": [2, 8, 36, 37], "mani": [2, 5, 22, 27, 36, 37, 73, 74, 75, 78, 89, 90], "befor": [2, 36, 37, 68, 147, 159, 180, 181, 217, 228, 234], "provid": [2, 16, 17, 18, 19, 20, 22, 27, 110, 116, 132, 133, 209, 234, 250, 276, 284, 300, 307], "pre": 2, "model": [2, 10, 22, 27, 33, 34, 36, 37, 38, 49, 51, 69, 74, 75, 77, 84, 89, 90, 101, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "If": [2, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 51, 68, 69, 74, 75, 89, 90, 234, 259, 276, 300], "you": [2, 5, 11, 14, 16, 19, 22, 27, 33, 34, 36, 37, 38, 39, 51, 69, 234], "run": [2, 4, 5, 6, 7, 8, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 275, 299], "local": [2, 38, 42, 51, 69], "make": [2, 22, 27, 67, 208], "sure": 2, "suffici": 2, "disk": [2, 22, 27, 33, 34], "space": [2, 6, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 142, 143, 144, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 181, 184, 185, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 252, 286], "avail": [2, 22, 27, 33, 34, 38, 51, 67, 69], "load_pretrain": [2, 51, 69], "makedir": 2, "exist_ok": 2, "name": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 38, 41, 51, 68, 69, 142, 143, 157, 158, 184, 185, 186, 187, 208, 232, 233, 234, 245, 259], "hf": [2, 38, 51, 69], "hub": [2, 38, 51, 69], "neurospin": [2, 11, 51, 69], "resnet18": [2, 10, 71, 85, 95, 101], "data_dir": [2, 51, 69], "filepath": [2, 51, 69], "pt": 2, "allow": [2, 5, 14, 17, 20, 36, 37, 38, 39, 47, 48, 234, 259, 276, 300], "effici": [2, 47, 48, 73, 78], "need": [2, 5, 6, 22, 27, 36, 37, 38, 47, 48, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 220, 226, 227, 228], "prepar": [2, 47, 48], "load": [2, 8, 10, 16, 17, 19, 20, 22, 27, 38, 41, 42, 47, 48, 51, 69, 130, 132, 133, 263, 265], "sampl": [2, 8, 10, 22, 27, 47, 48, 101, 130, 131, 134, 135, 136, 140, 142, 143, 147, 148, 159, 160, 161, 177, 180, 181, 182, 184, 185, 188, 190, 199, 212, 213, 214, 218, 220, 223, 224, 225, 229, 243, 270, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305], "two": [2, 5, 33, 34, 36, 37, 47, 48, 239, 241, 254, 269, 292], "random": [2, 4, 22, 27, 47, 48, 104, 108, 114, 120, 121, 122, 123, 129, 131, 134, 135, 136], "batch": [2, 8, 14, 22, 27, 33, 34, 36, 37, 47, 48, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 179, 180, 181, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "The": [2, 5, 16, 19, 22, 27, 33, 34, 36, 37, 38, 44, 45, 47, 48, 68, 107, 109, 110, 113, 115, 116, 141, 142, 143, 144, 147, 157, 158, 159, 160, 175, 179, 180, 181, 184, 185, 186, 187, 188, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 234, 237, 238, 258, 259], "easiest": [2, 47, 48], "do": [2, 5, 22, 27, 33, 34, 36, 37, 47, 48, 234], "i": [2, 5, 8, 10, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "creat": [2, 47, 48, 65, 117, 123, 124, 127, 130, 132, 133, 170, 208], "when": [2, 14, 22, 27, 33, 34, 36, 37, 47, 48, 51, 67, 69, 232, 233, 234, 239, 244, 259, 274, 298, 306], "being": [2, 47, 48], "set": [2, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 42, 47, 48, 53, 108, 110, 114, 116, 130, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 178, 179, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 235, 246, 256, 260, 280, 288], "twice": [2, 47, 48], "class": [2, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 258], "contrastivetransform": [2, 10, 46, 47, 48, 101], "framework": [2, 22, 27, 145, 172], "easili": [2, 5], "extend": [2, 50, 52], "more": [2, 16, 17, 18, 19, 20, 47, 48, 73, 78, 102, 132, 133, 307], "posit": [2, 22, 27, 47, 48], "than": [2, 22, 27, 36, 37], "same": [2, 5, 36, 37, 38, 39, 239, 241, 254, 259, 264, 269, 292], "most": [2, 232, 233], "usual": [2, 36, 37], "obtain": [2, 36, 37], "us": [2, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "onli": [2, 5, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "def": [2, 4, 6, 22, 27, 33, 34, 36, 37, 67], "__init__": [2, 22, 27, 33, 34, 36, 37, 67], "base_transform": 2, "n_view": [2, 47, 48], "2": [2, 4, 5, 7, 8, 38, 47, 48, 50, 52, 67, 74, 75, 89, 90, 117, 123, 124, 127, 131, 134, 135, 136, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 237, 238, 240, 241, 243, 244, 246, 247, 248, 249, 252, 253, 254, 256, 257, 268, 269, 270, 275, 280, 281, 282, 283, 286, 288, 289, 291, 292, 293, 299, 301, 305, 306], "__call__": 2, "x": [2, 6, 7, 8, 36, 37, 67, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 135, 136, 140, 143, 144, 147, 148, 157, 158, 159, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 237, 238, 240, 242, 243, 244, 247, 253, 256, 257, 269, 276, 281, 285, 288, 289, 292, 300, 304, 305, 306], "return": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 51, 65, 67, 69, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 126, 127, 128, 129, 132, 133, 135, 136, 140, 142, 143, 144, 146, 148, 157, 158, 160, 161, 171, 175, 184, 185, 186, 187, 188, 189, 190, 199, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306], "rang": [2, 4, 5, 8, 22, 27, 237, 238, 272, 296], "next": [2, 5, 22, 27, 33, 34, 36, 37, 259], "specif": [2, 10, 105, 106, 118, 119, 147, 159, 180, 181, 208, 271, 295], "want": [2, 11, 36, 37, 51, 69], "choic": [2, 38], "crucial": 2, "hyperparamet": [2, 22, 27, 36, 37], "sinc": [2, 5, 6, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 220, 226, 227, 228], "directli": [2, 22, 27, 103], "affect": [2, 22, 27], "latent": [2, 142, 143, 144, 157, 158, 160, 175, 184, 185, 186, 187, 188], "structur": [2, 5, 22, 27], "might": [2, 22, 27, 33, 34, 36, 37], "overal": 2, "experi": [2, 10, 38, 39, 40, 41, 42, 101, 307], "5": [2, 4, 6, 7, 8, 9, 110, 116, 146, 147, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 215, 226, 252, 269, 270, 286, 292, 293], "follow": [2, 36, 37, 38], "origin": [2, 6, 36, 37, 103, 140, 234], "horizont": [2, 6], "flip": 2, "crop": 2, "resiz": 2, "color": [2, 7, 10, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 101, 232, 233], "distort": 2, "grayscal": 2, "gaussian": [2, 107, 109, 113, 115, 131, 134, 135, 136], "blur": [2, 107, 113], "comparison": 2, "reduc": [2, 22, 27, 74, 75, 89, 90, 105, 118, 144, 175, 247, 248, 250, 281, 282, 284], "effect": [2, 74, 75, 89, 90, 234], "jitter": 2, "slightli": 2, "instead": [2, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 234], "8": [2, 4, 6, 8, 22, 27, 33, 34, 159, 173, 181, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 22, 27, 33, 34, 36, 37, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 118, 145, 172, 173, 174, 176, 179, 214, 215, 216, 217, 225, 226, 227, 228, 234], "wa": [2, 36, 37], "faster": [2, 259], "stabl": 2, "instanc": [2, 5, 22, 27, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 104, 122, 123, 124, 145, 170, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "scale": [2, 6, 8, 22, 27, 33, 34, 44, 45, 102, 131, 134, 135, 136, 234, 243, 244, 247, 252, 256, 257, 270, 276, 281, 286, 288, 289, 293, 300, 305, 306], "highli": 2, "vari": 2, "benefici": [2, 33, 34], "t": [2, 6, 22, 27, 33, 34], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 36, 37, 44, 45, 105, 106, 118, 119, 232, 233, 239, 241, 254, 269, 278, 292, 302], "contrast_transform": 2, "compos": [2, 38, 47, 48, 144, 175, 235, 269, 292], "randomhorizontalflip": 2, "randomresizedcrop": 2, "size": [2, 6, 7, 8, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 105, 106, 108, 114, 118, 119, 120, 132, 133, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 215, 216, 217, 220, 226, 227, 228, 249, 252, 270, 275, 277, 283, 286, 293, 299], "96": [2, 4, 217, 228, 240, 253], "randomappli": 2, "colorjitt": 2, "p": 2, "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 216, 217, 227, 228], "9": [2, 4, 5, 9, 138, 139, 308], "totensor": 2, "normal": [2, 10, 22, 27, 33, 34, 36, 37, 44, 45, 74, 75, 89, 90, 101, 102, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 234, 236, 285, 294], "after": [2, 22, 27, 33, 34, 36, 37, 74, 75, 89, 90, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 180, 181, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "discuss": 2, "techniqu": [2, 302], "now": [2, 5, 8, 36, 37, 74, 75, 89, 90, 189], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 9, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 148, 159, 161, 181, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299, 308], "airplan": 2, "bird": 2, "car": 2, "cat": 2, "deer": 2, "dog": 2, "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": [2, 22, 27], "resolut": [2, 74, 75, 89, 90, 132, 133, 147, 159, 180, 181], "pixel": 2, "500": 2, "per": [2, 16, 19, 74, 75, 89, 90], "addition": 2, "much": [2, 73, 78], "larger": [2, 36, 37], "100": [2, 4, 7, 8, 9, 246, 249, 269, 270, 275, 278, 280, 283, 292, 293, 299, 308], "unlabel": 2, "similar": [2, 5, 36, 37], "wider": [2, 36, 37], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": 2, "luckili": 2, "through": [2, 11, 23, 24, 25, 26, 28, 29, 30, 31], "keep": [2, 132, 133], "mind": 2, "rel": [2, 16, 17, 18, 19, 20], "larg": [2, 234], "ha": [2, 5, 22, 27, 33, 34, 36, 37, 73, 74, 75, 78, 89, 90, 147, 159, 180, 181, 234], "consider": [2, 36, 37], "3gb": 2, "bit": 2, "time": [2, 4, 5, 6, 7, 8, 276, 300], "For": [2, 22, 27, 33, 34, 36, 37, 68, 189, 269, 292], "initi": [2, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 176, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "loader": [2, 8], "abov": 2, "unlabeled_data": 2, "via": [2, 33, 34, 276, 300], "train_data_contrast": 2, "valid": [2, 10, 14, 22, 27, 33, 34, 36, 37, 38, 42, 65, 66, 67, 68, 101], "root": [2, 11, 16, 17, 18, 19, 20, 132, 133], "split": [2, 16, 17, 18, 19, 20, 36, 37, 132, 133], "pair": [2, 22, 27, 132, 133], "img": 2, "stack": 2, "idx": [2, 4, 7, 16, 17, 19, 20, 249, 269, 275, 283, 292, 299], "dim": [2, 8, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "img_grid": 2, "make_grid": 2, "nrow": 2, "pad_valu": 2, "permut": [2, 5, 106, 119, 239, 241, 254], "figur": [2, 6, 232, 233], "figsiz": [2, 4, 5, 6, 7, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "titl": [2, 6, 59, 60], "imshow": [2, 6, 243, 305], "axi": [2, 6, 8, 232, 233, 234, 239, 250, 256, 263, 265, 269, 276, 284, 285, 288, 292, 300], "off": [2, 6], "And": 2, "associ": [2, 7, 33, 34, 236, 244, 250, 276, 284, 300, 306], "dataload": [2, 8, 22, 27, 33, 34, 36, 37, 38], "batch_siz": [2, 8, 22, 27, 44, 45, 143, 157, 158, 160, 185, 186, 187, 188], "256": [2, 53, 142, 143, 157, 158, 184, 185, 186, 187], "train_load": 2, "shuffl": [2, 8, 22, 27], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 15, 21, 22, 27, 33, 34, 43, 46, 70, 71, 103, 137, 141, 234], "resnet": [2, 10, 71, 74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 101], "18": [2, 4, 75, 85, 86, 90, 95, 96], "architectur": [2, 8, 10, 33, 34, 36, 37, 70, 71, 72, 73, 74, 75, 76, 78, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 141, 147, 148, 159, 160, 161, 179, 180, 181, 188, 190, 199], "f": [2, 6, 33, 34, 36, 37, 147, 159, 180, 181], "paper": [2, 36, 37, 73, 78], "g": [2, 22, 27, 33, 34, 36, 37, 74, 75, 89, 90, 234], "layer": [2, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 91, 92, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 179, 180, 181, 182, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230], "mlp": [2, 33, 34, 36, 37, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "relu": [2, 36, 37, 82, 147, 159, 177, 178, 179, 180, 181, 182, 183], "activ": [2, 36, 37, 142, 143, 147, 157, 158, 159, 160, 180, 181, 184, 185, 186, 187, 188], "hidden": [2, 36, 37, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "note": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 65, 72, 76, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 259], "up": [2, 36, 37, 146, 147, 159, 171, 180, 181, 239, 241, 249, 254, 272, 283, 296], "simclrv2": [2, 36, 37], "author": [2, 36, 37, 38], "mention": [2, 36, 37], "boost": [2, 36, 37], "why": [2, 5], "four": 2, "dimens": [2, 5, 36, 37, 144, 175, 189], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 33, 34, 36, 37, 51, 69, 103, 132, 133, 141, 145, 172, 235], "observ": 2, "u": [2, 6, 36, 37, 132, 133, 147, 159, 179, 180, 181], "compar": [2, 36, 37], "neg": 2, "lead": [2, 22, 27], "smoother": 2, "loss": [2, 8, 10, 22, 27, 33, 34, 36, 37, 38, 44, 45, 101, 138, 139, 140], "gradient": [2, 22, 27, 33, 34, 36, 37], "case": [2, 22, 27, 33, 34, 36, 37, 38, 41, 42, 234], "experienc": 2, "good": 2, "result": [2, 58, 65, 208, 258], "hidden_dim": [2, 36, 37, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 174, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "128": [2, 72, 76, 142, 143, 157, 158, 184, 185, 186, 187], "encod": [2, 22, 27, 33, 34, 36, 37, 137, 141, 143, 147, 157, 158, 159, 160, 180, 181, 185, 186, 187, 188], "none": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 41, 42, 51, 68, 69, 74, 75, 87, 88, 89, 90, 105, 107, 108, 110, 113, 114, 116, 118, 131, 132, 133, 134, 135, 136, 138, 139, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 179, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 217, 228, 232, 233, 234, 247, 248, 257, 259, 276, 278, 279, 281, 282, 289, 290, 300, 303], "num_class": [2, 33, 34, 161, 162, 163, 164, 165, 166, 167, 168, 169, 199, 200, 201, 202, 203, 204, 205, 206, 207], "4": [2, 4, 5, 7, 8, 73, 74, 75, 78, 89, 90, 159, 170, 181, 211, 212, 213, 214, 217, 218, 219, 222, 223, 224, 225, 228, 229, 230, 239, 241, 244, 247, 248, 254, 257, 272, 281, 282, 289, 296, 302, 306], "latent_s": [2, 33, 34, 36, 37], "fc": [2, 33, 34], "out_featur": 2, "ident": [2, 22, 27, 74, 75, 89, 90], "save_weights_onli": 2, "mode": [2, 11, 22, 27, 33, 34, 36, 37, 38, 177, 234], "max": [2, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 177, 178, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 224, 225], "monitor": [2, 22, 27], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 22, 27, 33, 34], "trainer_param": [2, 22, 27], "default_root_dir": 2, "acceler": [2, 22, 27, 33, 34], "max_epoch": [2, 22, 27, 33, 34, 36, 37], "lr": [2, 8, 33, 34, 36, 37], "5e": 2, "temperatur": [2, 33, 34, 36, 37, 44, 45, 145, 172], "07": 2, "weight_decai": [2, 8, 33, 34, 36, 37], "1e": [2, 8, 239, 244, 306], "random_st": [2, 22, 27, 33, 34, 36, 37], "42": [2, 4, 6, 8, 243, 244, 247, 256, 257, 276, 281, 288, 289, 300, 305, 306], "print": [2, 4, 5, 6, 8, 49, 53, 67, 146, 148, 160, 161, 171, 188, 190, 199, 255, 268, 271, 272, 273, 274, 287, 291, 295, 296, 297, 298], "found": [2, 5, 16, 17, 18, 19, 20, 22, 27, 68], "pretrain": [2, 36, 37], "weight_fil": [2, 51, 69], "fitted_": 2, "fit": [2, 22, 27, 68, 234], "deploi": [2, 33, 34], "downstream": [2, 33, 34, 36, 37], "task": [2, 33, 34, 36, 37, 74, 75, 89, 90], "see": [2, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 110, 116, 132, 133, 234, 263, 265], "well": [2, 22, 27, 33, 34, 36, 37], "littl": [2, 33, 34], "verifi": [2, 33, 34, 68], "whether": [2, 22, 27, 33, 34, 51, 69], "represent": [2, 33, 34, 36, 37, 72, 76, 110, 116, 141, 145, 157, 158, 160, 172, 186, 187, 188, 234, 250, 276, 284, 300, 302], "featur": [2, 10, 33, 34, 36, 37, 73, 74, 75, 78, 89, 90, 130, 147, 159, 177, 178, 179, 180, 181, 182, 183, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234], "word": [2, 33, 34], "singl": [2, 16, 19, 22, 27, 33, 34, 36, 37, 307], "map": [2, 5, 6, 17, 20, 22, 27, 33, 34, 36, 37, 74, 75, 89, 90, 216, 217, 220, 227, 228, 232, 233, 241, 254, 275, 299], "predict": [2, 14, 22, 27, 33, 34, 144, 148, 161, 175, 190, 199], "base": [2, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 44, 45, 47, 48, 50, 51, 52, 53, 65, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 131, 132, 133, 134, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 239, 258, 259, 269, 270, 275, 292, 293, 299], "network": [2, 36, 37, 141, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "chang": [2, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234], "dure": [2, 22, 27, 33, 34, 108, 114], "process": [2, 11, 22, 27, 33, 34, 146, 171], "h": [2, 36, 37, 140, 189], "necessari": 2, "further": [2, 10], "worri": 2, "too": [2, 234], "about": [2, 38, 276, 300], "veri": [2, 5, 33, 34], "few": 2, "henc": 2, "expect": [2, 8, 16, 17, 18, 19, 20, 38, 132, 133], "even": [2, 51, 69], "assum": [2, 33, 34, 105, 106, 118, 119, 239], "alreadi": [2, 51, 69], "been": [2, 22, 27, 33, 34, 36, 37], "vector": [2, 36, 37, 269, 292], "dynam": [2, 33, 34, 38, 40, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "so": [2, 5, 33, 34, 74, 75, 89, 90], "here": [2, 5, 22, 27, 33, 34, 36, 37, 38, 263, 265], "within": [2, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "second": [2, 4, 5, 6, 7, 8, 44, 45], "did": [2, 5], "ani": [2, 22, 27, 33, 34, 36, 37, 132, 133, 255, 287], "signific": [2, 22, 27], "gain": 2, "test": [2, 5, 8, 14, 22, 27], "while": [2, 5, 22, 27, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "800": 2, "64": [2, 4, 22, 27, 73, 74, 75, 78, 87, 88, 89, 90, 142, 143, 144, 157, 158, 160, 173, 175, 184, 185, 186, 187, 188], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 22, 27, 33, 34, 47, 48, 72, 73, 74, 75, 76, 78, 89, 90, 105, 108, 114, 117, 118, 123, 124, 127, 131, 134, 135, 136, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221, 232, 233, 243, 247, 248, 257, 268, 271, 272, 273, 275, 281, 282, 289, 291, 295, 296, 297, 299, 305], "len": [2, 4, 5, 6, 8, 159, 160, 161, 181, 188, 199, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 249, 268, 273, 283, 291, 297], "froozen": 2, "e": [2, 6, 11, 22, 27, 33, 34, 36, 37, 38, 41, 73, 74, 75, 78, 89, 90, 234, 243, 305], "output": [2, 22, 27, 33, 34, 38, 41, 50, 52, 107, 108, 113, 114, 142, 144, 147, 159, 175, 177, 178, 179, 180, 181, 182, 183, 184, 189, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 258, 259], "new_model": 2, "sequenti": [2, 33, 34, 80, 81, 269, 292], "normal_": 2, "mean": [2, 22, 27, 33, 34, 36, 37, 42, 144, 159, 175, 177, 181, 214, 225, 234, 256, 288], "std": [2, 234], "01": [2, 9, 308], "bia": [2, 210, 221], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 72, 76, 159, 181], "evalu": [2, 6, 220], "everi": [2, 22, 27, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 246, 280], "earli": [2, 22, 27], "stop": [2, 22, 27, 269, 292], "low": [2, 123], "frequenc": 2, "ensur": [2, 128], "despit": 2, "thei": [2, 5, 8, 50, 52], "smaller": 2, "20": [2, 4, 6, 7, 8, 105, 118], "50": [2, 4, 97, 98, 99, 100], "200": 2, "give": [2, 10, 22, 27], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 22, 27, 33, 34, 36, 37, 38, 74, 75, 89, 90, 179, 234, 235], "classif": [2, 6, 8, 22, 27, 131, 134, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "test_load": 2, "val_acc": 2, "check_val_every_n_epoch": [2, 22, 27], "3": [2, 4, 5, 7, 8, 9, 38, 50, 52, 65, 73, 74, 75, 78, 89, 90, 107, 108, 110, 113, 114, 116, 131, 132, 133, 134, 135, 136, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 170, 171, 180, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 261, 262, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 305, 306, 308], "pred": [2, 8, 33, 34], "shape": [2, 5, 6, 8, 44, 45, 148, 159, 160, 161, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 255, 256, 271, 287, 288, 295], "acc": [2, 22, 27], "argmax": [2, 8], "float": [2, 4, 8, 22, 27, 33, 34, 36, 37, 44, 45, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 127, 138, 139, 144, 175, 179, 232, 233, 237, 238, 239, 242, 244, 304, 306], "accuraci": [2, 8, 22, 27, 33, 34, 36, 37], "2f": 2, "_pretrained_filenam": 2, "path": [2, 16, 17, 19, 20, 38, 51, 69, 107, 108, 113, 114, 147, 159, 180, 181, 259, 260, 264, 266, 267, 269, 278, 279, 292], "join": 2, "isfil": 2, "save": [2, 38, 266, 267], "state_dict": 2, "one": [2, 5, 36, 37, 38, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 108, 114, 121, 129, 142, 145, 172, 173, 174, 176, 179, 184, 215, 216, 217, 226, 227, 228, 244, 306], "would": [2, 36, 37], "improv": [2, 74, 75, 89, 90], "classifi": [2, 23, 28], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 16, 17, 18, 19, 20, 33, 34, 108, 114, 132, 133, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221], "dimension": [2, 36, 37], "With": 2, "achiev": 2, "80": [2, 4, 5], "increas": [2, 257, 289], "suggest": 2, "exponenti": 2, "could": [2, 5, 36, 37], "finetun": [2, 36, 37], "adapt": [2, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 108, 114, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "indic": [2, 22, 27, 105, 118, 177, 182, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 239, 247, 248, 249, 250, 256, 257, 269, 275, 281, 282, 283, 284, 288, 289, 292, 299, 301], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "clear": 2, "its": [2, 62, 63, 74, 75, 89, 90, 259, 269, 292], "count": 2, "1000": [2, 22, 27], "fair": 2, "ones": 2, "becaus": [2, 5, 36, 37, 234], "distribut": [2, 22, 27, 36, 37, 143, 160, 185, 188], "notic": 2, "ad": [2, 147, 159, 180, 181], "restrict": 2, "oper": [2, 22, 27, 33, 34, 36, 37, 179, 234], "125": 2, "1250": 2, "done": [2, 22, 27, 259], "recogn": 2, "object": [2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 41, 47, 48, 50, 51, 52, 53, 65, 67, 69, 104, 117, 122, 123, 127, 138, 139, 232, 233, 234, 235, 258, 259], "check": [2, 14, 16, 19, 22, 27, 38, 65, 66, 67, 68], "patch": [2, 36, 37, 108, 114, 132, 133, 144, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 270, 275, 277, 293, 299], "belong": 2, "chosen": [2, 22, 27], "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 40, 41, 42, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 110, 112, 113, 114, 116, 117, 121, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 140, 141, 142, 143, 145, 147, 157, 158, 159, 172, 173, 174, 176, 179, 180, 181, 184, 185, 186, 187, 189, 208, 215, 216, 217, 220, 226, 227, 228, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "almost": [2, 6], "strongli": 2, "iter": [2, 22, 27, 33, 34, 36, 37, 189], "train_transform": 2, "sigma": [2, 4, 107, 108, 109, 113, 114, 115], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 74, 75, 89, 90, 269, 292], "less": 2, "leverag": 2, "amount": 2, "generaliz": 2, "sole": [2, 22, 27], "par": 2, "tenth": 2, "experiment": [2, 38], "limit": 2, "recent": 2, "work": [2, 5, 16, 19, 38, 107, 108, 113, 114, 189, 234], "ting": [2, 145, 172], "chen": [2, 44, 45, 145, 172], "et": [2, 36, 37, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 144, 147, 159, 175, 180, 181], "al": [2, 36, 37, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 144, 147, 159, 175, 180, 181], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": 2, "come": [2, 36, 37], "close": [2, 5], "approach": [2, 11], "combin": [2, 105, 118], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 74, 75, 89, 90, 142, 184], "year": 2, "great": [2, 36, 37], "includ": [2, 10, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 130, 132, 133], "distil": 2, "byol": 2, "redund": 2, "reduct": [2, 22, 27], "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4], "step": [2, 8, 22, 27, 33, 34, 36, 37, 147, 159, 180, 181], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 17, 20, 73, 78, 234, 259], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 263, 265], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8], "c": [4, 5, 7, 50, 52, 140, 246, 249, 269, 270, 280, 283, 292, 293], "ambrois": [4, 5], "numpi": [4, 5, 6, 8, 16, 17, 18, 19, 20, 234, 237, 238, 242, 304], "np": [4, 5, 6, 8, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 240, 253, 256, 288], "surfifi": [4, 5, 6, 7, 8, 9, 10, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308], "min_depth_to_get_n_neighbor": [4, 10, 101, 236, 268, 291], "plot": [4, 5, 6, 7, 8, 10, 101, 232, 233, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "plot_trisurf": [4, 5, 6, 7, 8, 10, 101, 231, 232, 233, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 269, 270, 275, 276, 280, 281, 282, 283, 287, 288, 289, 292, 293, 299, 300, 305, 306], "interv": [4, 10, 101, 103, 117, 120, 123, 127], "vertic": [4, 5, 7, 105, 106, 107, 108, 110, 113, 114, 116, 118, 119, 131, 134, 135, 136, 144, 159, 170, 175, 181, 210, 211, 221, 222, 232, 233, 234, 240, 241, 243, 244, 246, 247, 248, 250, 253, 254, 255, 256, 257, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 305, 306], "triangl": [4, 5, 7, 107, 108, 110, 113, 114, 116, 159, 170, 181, 232, 233, 240, 241, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 261, 262, 266, 267, 269, 270, 274, 275, 276, 277, 280, 281, 282, 283, 284, 287, 288, 289, 292, 293, 298, 299, 300, 301, 302, 306], "order": [4, 5, 6, 7, 8, 22, 27, 38, 107, 108, 113, 114, 132, 133, 142, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 181, 184, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 235, 239, 240, 241, 243, 244, 246, 247, 248, 249, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 305, 306], "neigh": [4, 7, 107, 108, 113, 114, 215, 226, 249, 250, 269, 270, 276, 277, 283, 284, 292, 293, 300], "direct_neighbor": [4, 7, 210, 212, 213, 214, 218, 221, 223, 224, 225, 229, 249, 269, 275, 277, 283, 292, 299], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 38, 57, 64, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245], "aug": 4, "add_axi": 4, "alpha": [4, 5, 232, 233, 237, 238, 241, 242, 254, 304], "arg": [4, 75, 90, 112, 126, 160, 188, 234], "kwarg": [4, 22, 27, 33, 34, 36, 37, 50, 52, 75, 77, 83, 84, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 112, 126, 160, 188, 234], "data": [4, 8, 10, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 47, 48, 51, 69, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 125, 126, 127, 128, 129, 130, 132, 133, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 234, 240, 243, 246, 247, 253, 256, 257, 259, 260, 263, 265, 276, 278, 279, 280, 281, 288, 289, 300, 305], "fig": [4, 5, 7, 232, 233, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "ax": [4, 5, 6, 7, 217, 228, 232, 233, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "subplot": [4, 5, 7, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "subplot_kw": [4, 5, 7, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "3d": [4, 5, 7, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 241, 246, 249, 252, 254, 255, 269, 270, 275, 280, 283, 286, 287, 292, 293, 299], "aspect": [4, 5, 7, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "auto": [4, 5, 7, 22, 27, 38, 42, 137, 141, 241, 246, 249, 254, 255, 269, 270, 275, 280, 283, 287, 292, 293, 299], "flatten": [4, 6, 144, 175, 220], "colorbar": [4, 7, 232, 233, 241, 246, 248, 249, 254, 255, 269, 270, 275, 280, 282, 283, 287, 292, 293, 299], "edgecolor": [4, 5, 232, 233, 241, 254], "white": [4, 109, 115], "linewidth": [4, 7, 232, 233], "red": [4, 7, 246, 249, 269, 270, 280, 283, 292, 293], "blue": [4, 5, 7, 241, 249, 254, 269, 270, 283, 292, 293], "green": [4, 5, 7, 241, 254], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 16, 17, 18, 19, 20, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 126, 128, 131, 132, 133, 134, 135, 136, 177, 182, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 239, 240, 241, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 266, 267, 269, 270, 274, 275, 276, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 298, 299, 300, 301, 302, 305, 306], "patch_siz": [4, 108, 114], "int": [4, 16, 19, 22, 27, 33, 34, 36, 37, 38, 47, 48, 72, 73, 74, 75, 76, 78, 86, 89, 90, 91, 92, 96, 98, 100, 105, 106, 107, 108, 113, 114, 117, 118, 119, 120, 127, 131, 132, 133, 134, 135, 136, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 239, 240, 243, 247, 248, 249, 252, 253, 255, 257, 268, 269, 270, 271, 272, 273, 275, 281, 282, 283, 286, 287, 289, 291, 292, 293, 295, 296, 297, 299, 301, 305], "n_patch": [4, 108, 114, 144, 175], "uniform": 4, "phi": [4, 110, 116], "180": 4, "theta": [4, 110, 116], "psi": [4, 110, 116], "controlateral_textur": 4, "prob": [4, 105, 106, 118, 119, 120], "n_vertic": [4, 6, 8, 105, 106, 118, 119, 120, 135, 136, 144, 157, 158, 160, 175, 186, 187, 188, 234, 247, 257, 268, 271, 272, 273, 276, 281, 289, 291, 295, 296, 297, 300], "controlateral_data": [4, 106, 119], "group_textur": 4, "group_data": [4, 105, 118], "n_sampl": [4, 6, 8, 105, 118, 131, 134, 135, 136, 144, 175, 243, 244, 246, 247, 256, 257, 276, 280, 281, 288, 289, 300, 305, 306], "neigh_ind": [4, 105, 118], "groupbi": [4, 105, 118], "n_neighbor": [4, 105, 118], "n_compon": [4, 105, 118], "30": [4, 8, 105, 118], "58": 4, "74": 4, "49": 4, "62": 4, "47": 4, "15": [4, 8], "99": [4, 8], "92": 4, "54": 4, "65": [4, 6], "31": 4, "14": 4, "78": 4, "90": 4, "76": 4, "93": 4, "21": 4, "70": 4, "22": 4, "46": 4, "89": [4, 6], "25": [4, 8], "82": 4, "11": [4, 5], "59": 4, "56": 4, "12": [4, 5, 73, 78, 269, 292], "19": 4, "13": [4, 7], "23": [4, 9, 308], "28": 4, "51": 4, "79": [4, 9, 308], "16": [4, 22, 27, 73, 78, 216, 217, 227, 228], "17": 4, "77": 4, "88": [4, 9, 308], "52": 4, "95": 4, "48": 4, "72": 4, "66": 4, "24": [4, 5, 73, 78], "69": 4, "86": 4, "26": 4, "27": 4, "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 22, 27, 73, 78, 147, 159, 160, 179, 180, 181, 188], "33": 4, "34": 4, "39": 4, "35": [4, 8], "37": 4, "38": 4, "45": [4, 276, 300], "71": 4, "40": [4, 6, 7, 8, 131, 134, 135, 136], "41": 4, "81": 4, "43": 4, "44": 4, "87": 4, "98": 4, "97": 4, "53": 4, "68": 4, "55": 4, "57": 4, "61": 4, "94": 4, "67": 4, "75": 4, "84": 4, "85": 4, "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 104, 111, 122, 125, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "probabl": [4, 104, 105, 106, 118, 119, 120, 122, 124, 235], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "598": [4, 9, 308], "106": [4, 9, 308], "plot_augment": [4, 9, 308], "math": 5, "warn": [5, 22, 27, 38, 61], "scipi": [5, 234, 241, 254], "spatial": [5, 74, 75, 89, 90, 241, 254], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 232, 233], "ico2ico": [5, 10, 101, 236, 241, 244, 254, 306], "build": [5, 7, 38, 107, 108, 113, 114, 117, 127, 146, 171, 234, 269, 270, 275, 277, 278, 279, 290, 292, 293, 299, 302], "refer": [5, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 241, 244, 254, 255, 275, 287, 299, 306], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 38, 130, 278, 279], "freesurf": [5, 146, 171, 261, 266, 275, 278, 299], "try": [5, 234], "find": [5, 38, 239, 241, 246, 249, 254, 256, 280, 283, 288, 290], "optim": [5, 8, 22, 27, 33, 34, 36, 37, 38], "rotat": [5, 110, 116, 241, 250, 254, 276, 284, 300], "modul": [5, 10, 22, 27, 33, 34, 36, 37, 38, 40, 44, 45, 51, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 91, 92, 101, 102, 103, 107, 113, 142, 143, 144, 145, 146, 147, 148, 157, 158, 159, 160, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "rmse": 5, "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 36, 37, 234], "suppos": 5, "equal": 5, "zero": [5, 6, 36, 37, 74, 75, 89, 90, 108, 114, 148, 159, 160, 161, 181, 182, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 240, 253], "issu": [5, 41], "matric": [5, 234], "That": 5, "previou": 5, "algorithm": 5, "properli": 5, "correspond": [5, 105, 106, 118, 119, 239, 244, 271, 295, 306], "row": [5, 107, 108, 113, 114, 269, 292], "matrix": [5, 105, 118, 234], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": [5, 8, 9, 308], "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 209, 236], "togeth": [5, 235], "place": [5, 42], "comput": [5, 22, 27, 33, 34, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 140, 145, 172, 173, 174, 176, 179, 189, 215, 216, 217, 226, 227, 228, 234, 250, 259, 276, 284, 285, 300], "small": [5, 36, 37, 72, 76], "subset": [5, 132, 133], "point": [5, 7, 246, 249, 252, 256, 269, 270, 275, 280, 283, 285, 286, 288, 290, 292, 293, 299], "both": [5, 22, 27, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 172, 173, 174, 176, 217, 228, 269, 292], "absolut": [5, 38, 41], "valu": [5, 14, 16, 17, 18, 19, 20, 22, 27, 36, 37, 38, 50, 52, 65, 67, 107, 108, 113, 114, 132, 133, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 232, 233, 237, 238, 239, 256, 269, 288, 292], "sign": [5, 241, 254], "vertices_of_interest_norm": 5, "search": [5, 249, 269, 283, 292], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 74, 75, 89, 90], "sum": [5, 8], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 22, 27, 33, 34, 36, 37, 51, 69], "depend": 5, "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 22, 27, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 234], "categori": 5, "userwarn": [5, 16, 17, 18, 19, 20], "format": [5, 8, 14, 245, 261, 262, 266, 267], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 308], "simpli": 5, "solv": 5, "outlin": 5, "proper": [5, 16, 17, 19, 20], "anoth": 5, "half": 5, "clearli": 5, "appear": 5, "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": 5, "coord": [5, 10, 101, 238, 239, 240, 241, 242, 243, 244], "246": 5, "closest": [5, 250, 284], "9190925817849288": 5, "737": [5, 9, 308], "plot_match_icosahedron": [5, 9, 308], "convert": [6, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 180, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 240, 243, 253, 305], "onto": [6, 144, 175, 243, 244, 305, 306], "spheric": [6, 9, 137, 138, 139, 141, 146, 147, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 178, 180, 181, 182, 183, 188, 190, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 216, 217, 220, 227, 228, 236, 237, 238, 240, 242, 243, 252, 253, 269, 286, 292, 304, 305, 308], "evenli": [6, 243, 305], "resampl": [6, 243, 305], "respect": [6, 220, 243, 305], "sin": [6, 243, 305], "elev": [6, 138, 139, 142, 143, 148, 160, 161, 184, 185, 188, 190, 199, 220, 237, 238, 242, 243, 304, 305], "azimuth": [6, 138, 139, 142, 143, 148, 160, 161, 184, 185, 188, 190, 199, 220, 237, 238, 242, 243, 304, 305], "vice": 6, "versa": 6, "dataset": [6, 10, 16, 17, 18, 19, 20, 38, 101, 131, 132, 133, 134, 135, 136, 231, 243, 244, 247, 256, 257, 276, 281, 288, 289, 300, 305, 306], "ico_ord": [6, 8, 107, 108, 113, 114, 132, 133], "n_class": [6, 8, 131, 134, 135, 136, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 243, 244, 247, 256, 257, 276, 281, 288, 289, 300, 305, 306], "ico_vertic": [6, 8, 131, 134, 135, 136], "ico_triangl": [6, 8], "_": [6, 36, 37, 213, 214, 224, 225, 235, 263, 265], "make_classif": [6, 8, 10, 101, 130, 135, 136, 243, 244, 247, 256, 257, 276, 281, 288, 289, 300, 305, 306], "seed": [6, 8, 33, 34, 36, 37, 131, 134, 135, 136, 243, 244, 247, 256, 257, 276, 281, 288, 289, 300, 305, 306], "proj_textur": 6, "text2grid": [6, 10, 101, 236, 237, 238, 240, 242, 243, 253, 304, 305], "proj": [6, 240, 243, 253, 305], "lower": [6, 247, 278, 281], "nearest": [6, 105, 118, 159, 181, 182, 240, 243, 246, 253, 256, 280, 288, 305], "192": [6, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 180, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 240, 243, 253, 305], "text": [6, 7, 36, 37, 49, 57, 62, 63, 64], "grid2text": [6, 10, 101, 236, 237, 238, 240, 242, 243, 253, 304, 305], "is_label": [6, 8, 232, 233, 240, 244, 247, 253, 256, 257, 276, 281, 288, 289, 300, 306], "enabl": [6, 22, 27, 33, 34, 36, 37, 38, 50, 52], "scatter_dens": 6, "y": [6, 8, 135, 136, 234, 237, 238, 240, 242, 243, 244, 247, 253, 256, 257, 276, 281, 288, 289, 300, 304, 305, 306], "labelx": 6, "labe": 6, "scatter": [6, 7, 246, 249, 269, 270, 275, 280, 283, 292, 293, 299], "densiti": [6, 252, 270, 286, 293], "left": [6, 36, 37, 138, 139, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 260], "width": [6, 74, 75, 89, 90, 232, 233], "bottom": 6, "height": [6, 189], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 36, 37, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221, 243, 269, 292, 305], "top": [6, 36, 37], "right": [6, 36, 37, 138, 139, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 260], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": 6, "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 237, 238, 242, 304], "cart2sph": [6, 10, 101, 236, 237, 238, 242, 304], "sin_elev": 6, "circularli": [6, 220], "continu": [6, 220], "circular": [6, 216, 217, 220, 227, 228], "pad": [6, 94, 159, 181, 182, 211, 216, 217, 220, 222, 227, 228], "boundari": [6, 220], "expand_dim": 6, "astyp": 6, "float32": 6, "from_numpi": 6, "pad_textur": 6, "circular_pad": [6, 10, 101, 209, 220], "padd": 6, "conv": [6, 74, 75, 82, 89, 90, 147, 159, 177, 178, 179, 180, 181, 182, 183, 210, 221], "conv2d": [6, 189], "in_channel": [6, 8, 73, 74, 75, 78, 89, 90, 147, 159, 179, 180, 181], "out_channel": [6, 8, 147, 159, 179, 180, 181], "stride": [6, 74, 75, 87, 88, 89, 90, 93, 94, 216, 217, 227, 228], "conv_textur": 6, "194": [6, 148, 149, 150, 151, 152, 153, 154, 155, 156, 190, 191, 192, 193, 194, 195, 196, 197, 198, 216, 227], "898": [6, 9, 308], "plot_project_textur": [6, 9, 308], "get_rectangular_project": [7, 10, 101, 236, 252, 286], "depth": [7, 8, 75, 86, 90, 92, 96, 98, 100, 144, 147, 159, 175, 176, 179, 180, 181, 210, 212, 213, 214, 218, 221, 223, 224, 225, 229, 249, 268, 269, 272, 283, 291, 292, 296], "vidx": 7, "cnt": [7, 246, 249, 269, 270, 275, 280, 283, 292, 293, 299], "enumer": [7, 8, 246, 249, 269, 270, 275, 280, 283, 292, 293, 299], "marker": [7, 246, 249, 269, 270, 275, 280, 283, 292, 293, 299], "str": [7, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 41, 51, 66, 68, 69, 91, 92, 105, 107, 108, 110, 113, 114, 116, 118, 132, 133, 142, 143, 144, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 181, 182, 184, 185, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 225, 234, 245, 250, 259, 260, 261, 262, 264, 266, 267, 276, 278, 279, 284, 300, 303], "3x3": [7, 74, 75, 89, 90, 94, 147, 159, 180, 181], "rectangular": [7, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 252, 270, 286, 293], "sphere": [7, 177, 182, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 252, 270, 274, 285, 286, 290, 293, 294, 298], "zoom": [7, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 215, 226, 249, 252, 270, 283, 286, 293], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": 7, "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 22, 27, 108, 114, 210, 221, 249, 252, 283, 286, 302], "node_rec_neigh": 7, "node_tplane_neigh": 7, "365": [7, 9, 308], "196": [7, 9, 308], "plot_spherical_neighbor": [7, 9, 308], "sphericalunet": [8, 10, 101, 141, 147, 159, 179, 180, 181], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 101, 102, 103, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 175, 180, 181, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 232, 233, 240, 243, 253, 260, 261, 262, 263, 266, 267, 269, 292, 305, 307], "crossentropi": 8, "sgd": 8, "obviou": 8, "classificationdataset": [8, 10, 101, 130, 131, 134], "in_ord": [8, 159, 181], "start_filt": [8, 147, 159, 180, 181], "conv_mod": [8, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "dine": [8, 107, 108, 113, 114, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221, 269, 292], "dine_s": [8, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "up_mod": [8, 159, 181, 182], "transpos": [8, 147, 159, 180, 181, 182, 212, 217, 218, 223, 228, 229], "loss_fn": 8, "crossentropyloss": 8, "momentum": 8, "n_batch": 8, "zero_grad": 8, "backward": 8, "current": [8, 22, 27, 33, 34, 36, 37, 39, 40, 42], "item": [8, 259], "7f": 8, "5d": 8, "eval": [8, 22, 27, 33, 34, 36, 37], "test_loss": 8, "correct": 8, "y_pred": 8, "no_grad": 8, "logit": [8, 44, 45], "softmax": [8, 36, 37], "type": [8, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 74, 75, 89, 90, 110, 116, 117, 127, 159, 181, 182, 214, 225, 250, 269, 276, 284, 292, 300], "append": [8, 22, 27], "concaten": [8, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 179, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "error": [8, 22, 27, 33, 34, 65, 68, 234, 258], "n": [8, 22, 27, 51, 69, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 126, 131, 134, 135, 136, 140, 144, 175, 210, 212, 215, 221, 223, 226, 232, 233, 239, 240, 241, 243, 244, 248, 249, 250, 253, 254, 255, 261, 262, 266, 267, 269, 270, 274, 276, 282, 283, 284, 287, 292, 293, 298, 300, 301, 302, 305, 306], "1f": 8, "avg": 8, "8f": 8, "309021": 8, "032931": 8, "804040": 8, "639833": 8, "503350": 8, "389929": 8, "292739": 8, "215416": 8, "005035": 8, "006457": 8, "007269": 8, "007292": 8, "006508": 8, "005049": 8, "003108": 8, "001256": 8, "000055": 8, "000083": 8, "000127": 8, "000183": 8, "000246": 8, "000298": 8, "000324": 8, "000331": 8, "000231": 8, "000226": 8, "000189": 8, "000138": 8, "000093": 8, "000059": 8, "000039": 8, "000030": 8, "000000": 8, "corresspond": 8, "exactli": 8, "ground": 8, "truth": 8, "502": [8, 9, 308], "plot_unet_segment": [8, 9, 308], "02": [9, 308], "pleas": [10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "detail": [10, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "raw": [10, 260, 263, 265], "mai": [10, 22, 27, 234], "enough": 10, "guidelin": 10, "deep": [10, 12, 36, 37, 307], "neuroimag": [10, 12, 16, 17, 18, 19, 20, 132, 133, 160, 188], "variou": [10, 49, 189], "help": [10, 22, 27, 49], "develop": [10, 11, 49], "volum": [10, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 260, 265, 307], "definit": [10, 38, 70, 71, 137, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 256, 288], "backbon": [10, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 145, 172], "link": 10, "plugin": 10, "helper": [10, 102], "integr": [10, 102, 179], "pytorch": [10, 22, 27, 33, 34, 36, 37, 102, 142, 143, 157, 158, 184, 185, 186, 187, 245, 307], "artifici": [10, 130], "dedic": [10, 209], "content": [10, 16, 19], "fetch_experi": [10, 12, 38, 101], "filter_config": [10, 12, 39, 101], "get_env": [10, 12, 40, 101], "load_interfac": [10, 12, 41, 101], "update_param": [10, 12, 42, 101], "check_typ": [10, 14, 101], "batchtypingcallback": [10, 13, 14, 22, 27, 101], "baseimagedataset": [10, 15, 16, 19, 101], "basenumpydataset": [10, 15, 17, 20, 101], "basedataset": [10, 15, 16, 17, 18, 19, 20, 101], "baseestim": [10, 21, 22, 27, 33, 34, 36, 37, 101], "classifiermixin": [10, 21, 23, 28, 33, 34, 101], "clustermixin": [10, 21, 24, 29, 101], "regressormixin": [10, 21, 25, 30, 101], "transformermixin": [10, 21, 26, 31, 36, 37, 101], "logistic_regress": [10, 34, 101], "infonc": [10, 33, 34, 36, 37, 44, 45, 101], "bunch": [10, 38, 50, 52, 101], "print_multicolor": [10, 49, 57, 64, 101], "attr": [10, 49, 54, 66, 101], "fg": [10, 49, 55, 101], "hex": [10, 49, 56, 101], "print_result": [10, 49, 58, 101], "print_subtitl": [10, 49, 59, 101], "print_titl": [10, 49, 60, 101], "print_warn": [10, 49, 61, 101], "random_styl": [10, 49, 62, 101], "styliz": [10, 49, 63, 101], "_availableifdescriptor": [10, 49, 65, 101], "_estimator_i": [10, 49, 66, 101], "available_if": [10, 49, 67, 101], "check_is_fit": [10, 49, 68, 101], "alexnet": [10, 71, 72, 76, 101], "densenet": [10, 71, 73, 77, 78, 84, 101], "resnettrunc": [10, 71, 75, 90, 101], "densenet121": [10, 71, 77, 84, 101], "resnet18_trunc": [10, 71, 86, 96, 101], "resnet50": [10, 71, 74, 75, 89, 90, 97, 99, 101], "resnet50_trunc": [10, 71, 98, 100, 101], "alexnet3d": [10, 76, 101], "resnet3d": [10, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101], "basicblock": [10, 71, 74, 75, 87, 89, 90, 101], "bottleneck": [10, 71, 73, 74, 75, 78, 88, 89, 90, 101], "_resnet": [10, 71, 91, 101], "_resnet_trunc": [10, 71, 92, 101], "conv1x1": [10, 71, 93, 101], "conv3x3": [10, 71, 94, 101], "densenet3d": [10, 78, 79, 80, 81, 82, 83, 84, 101], "_denseblock": [10, 71, 79, 101], "_denselay": [10, 71, 80, 101], "_transit": [10, 71, 81, 101], "_bn_function_factori": [10, 71, 82, 101], "_densenet": [10, 71, 83, 101], "randomcompos": [10, 101, 102, 235], "preprocess": [10, 101, 234], "standardscal": [10, 101, 102, 234], "basetransform": [10, 101, 103, 104, 111, 112, 122, 125, 126], "groupmixup": [10, 101, 103, 105, 118], "hemimixup": [10, 101, 103, 106, 119], "surfblur": [10, 101, 103, 107, 113], "surfcutout": [10, 101, 103, 108, 114], "surfnois": [10, 101, 103, 109, 115], "surfrot": [10, 101, 103, 110, 116], "apply_chained_transform": [10, 101, 103, 112, 126], "multichannel_augment": [10, 101, 103, 121, 129], "mixup": [10, 101, 118, 119, 120], "mixupaugment": [10, 101, 103, 105, 106, 118, 119, 120], "randomaugment": [10, 101, 103, 104, 107, 108, 109, 110, 113, 114, 115, 116, 120, 121, 122, 123, 129], "listifi": [10, 101, 103, 128], "genericsurfdataset": [10, 101, 130, 132, 133], "_samples_gener": [10, 101, 134, 135], "_gener": [10, 101, 133], "sphericalvaeloss": [10, 101, 137, 138, 139], "vae": [10, 101, 138, 139, 140, 160, 184, 185, 186, 187, 188, 189], "log_likelihood": [10, 101, 137, 140], "hemifusiondecod": [10, 101, 141, 142, 184], "hemifusionencod": [10, 101, 141, 143, 185], "sit": [10, 101, 144, 173, 174, 175, 176], "sphericalbas": [10, 101, 141, 146, 157, 158, 159, 161, 171, 181, 186, 187, 199], "sphericalgunet": [10, 101, 141, 147, 159, 179, 180, 181], "sphericalgvgg": [10, 101, 141, 148, 161, 190, 199], "sphericalgvgg11": [10, 101, 141, 148, 149, 190, 191], "sphericalgvgg11bn": [10, 101, 141, 150, 192], "sphericalgvgg13": [10, 101, 141, 151, 193], "sphericalgvgg13bn": [10, 101, 141, 152, 194], "sphericalgvgg16": [10, 101, 141, 153, 195], "sphericalgvgg16bn": [10, 101, 141, 154, 196], "sphericalgvgg19": [10, 101, 141, 155, 197], "sphericalgvgg19bn": [10, 101, 141, 156, 198], "sphericalhemifusiondecod": [10, 101, 141, 157, 186], "sphericalhemifusionencod": [10, 101, 141, 158, 187], "sphericalva": [10, 101, 141, 160, 188], "sphericalvgg": [10, 101, 141, 148, 161, 190, 199], "sphericalvgg11": [10, 101, 141, 161, 162, 199, 200], "sphericalvgg11bn": [10, 101, 141, 163, 201], "sphericalvgg13": [10, 101, 141, 164, 202], "sphericalvgg13bn": [10, 101, 141, 165, 203], "sphericalvgg16": [10, 101, 141, 166, 204], "sphericalvgg16bn": [10, 101, 141, 167, 205], "sphericalvgg19": [10, 101, 141, 168, 206], "sphericalvgg19bn": [10, 101, 141, 169, 207], "ico": [10, 101, 107, 108, 113, 114, 132, 133, 141, 146, 170, 171, 210, 221], "compute_output_dim": [10, 101, 141, 189], "vgg": [10, 101, 148, 161, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "class_factori": [10, 101, 141, 208], "attent": [10, 101, 141, 144, 173, 175], "feedforward": [10, 101, 141, 174], "downblock": [10, 101, 141, 177], "downgblock": [10, 101, 141, 178], "graphicalunet": [10, 101, 141, 179], "upblock": [10, 101, 141, 182], "upgblock": [10, 101, 141, 183], "icodineconv": [10, 101, 107, 113, 209, 210, 215, 216, 221, 226, 227], "icofixindexupsampl": [10, 101, 209, 211, 212, 213, 217, 218, 219, 222, 223, 224, 228, 229, 230], "icogenericupconv": [10, 101, 209, 211, 212, 213, 217, 218, 219, 222, 223, 224, 228, 229, 230], "icomaxindexupsampl": [10, 101, 209, 211, 212, 213, 217, 218, 219, 222, 223, 224, 228, 229, 230], "icopool": [10, 101, 209, 213, 214, 224, 225], "icorepaconv": [10, 101, 209, 210, 215, 216, 221, 226, 227], "icospmaconv": [10, 101, 189, 209, 210, 215, 216, 221, 226, 227], "icospmaconvtranspos": [10, 101, 209, 211, 212, 213, 217, 218, 219, 222, 223, 224, 228, 229, 230], "icoupconv": [10, 101, 209, 211, 212, 213, 218, 219, 222, 223, 224, 229, 230], "icoupsampl": [10, 101, 209, 211, 212, 213, 217, 218, 219, 222, 223, 224, 228, 229, 230], "debug_msg": [10, 101, 236, 245], "downsampl": [10, 87, 88, 101, 132, 133, 146, 171, 177, 178, 182, 212, 213, 214, 218, 223, 224, 225, 229, 236, 246, 247, 248, 256, 257, 278, 280, 281, 282, 288, 289], "downsample_data": [10, 101, 236, 246, 247, 248, 256, 257, 280, 281, 282, 288, 289], "downsample_ico": [10, 101, 236, 246, 247, 248, 256, 257, 280, 281, 282, 288, 289], "find_neighbor": [10, 101, 236, 249, 283], "find_rotation_interpol_coef": [10, 101, 236, 250, 274, 284, 298], "get_logg": [10, 101, 236, 251], "interpol": [10, 101, 110, 116, 159, 181, 182, 211, 219, 222, 230, 232, 233, 236, 240, 243, 246, 247, 248, 250, 253, 256, 257, 274, 276, 280, 281, 282, 284, 288, 289, 298, 300, 305], "interpolate_data": [10, 101, 236, 246, 247, 248, 256, 257, 280, 281, 282, 288, 289], "neighbors_rec": [10, 101, 215, 226, 236, 249, 269, 270, 283, 292, 293], "number_of_ico_vertic": [10, 101, 236, 271, 273, 295, 297], "number_of_neighbor": [10, 101, 236, 268, 272, 291, 296], "order_of_ico_from_vertic": [10, 101, 236, 271, 273, 295, 297], "order_triangl": [10, 101, 236, 274, 298], "patch_tri": [10, 101, 236, 275, 277, 299], "rotate_data": [10, 101, 110, 116, 236, 250, 276, 284, 300], "setup_log": [10, 101, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 303], "sph2cart": [10, 101, 236, 237, 238, 242, 304], "text2ico": [10, 101, 236, 241, 244, 254, 306], "find_corresponding_ord": [10, 101, 236, 239], "hideprint": [10, 101, 236, 258], "compute_and_stor": [10, 101, 236, 259], "decompose_cifti": [10, 101, 236, 260], "read_freesurf": [10, 101, 236, 261], "read_gifti": [10, 101, 236, 262], "surf_data_from_cifti": [10, 101, 236, 263], "ungzip": [10, 101, 236, 264], "volume_from_cifti": [10, 101, 236, 265], "write_freesurf": [10, 101, 236, 266], "write_gifti": [10, 101, 236, 267], "_patch_tri_it": [10, 101, 236, 277], "build_freesurfer_ico": [10, 101, 236, 278], "build_fslr_ref": [10, 101, 236, 279], "get_angle_with_xaxi": [10, 101, 236, 285], "middle_point": [10, 101, 236, 290], "triangles_to_edg": [10, 101, 236, 301], "vertex_adjacency_graph": [10, 101, 236, 302], "walk": 11, "intal": 11, "offici": 11, "releas": 11, "best": [11, 38, 241, 254], "user": [11, 22, 27, 39, 147, 159, 180, 181, 234, 276, 300], "who": 11, "latest": 11, "contribut": 11, "without": [11, 264], "privileg": 11, "pip": 11, "git": 11, "repositori": [11, 51, 69], "github": [11, 141, 263, 265], "com": [11, 141], "deepinsight": 11, "page": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "document": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "explain": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "signatur": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "big": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "pictur": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "rais": [14, 16, 17, 18, 19, 20, 65, 67, 68, 234], "typeerror": [14, 68], "annot": 14, "traiterror": 14, "incorrect": 14, "notimplementederror": 14, "handl": [14, 51, 69], "on_predict_batch_start": 14, "trainer": [14, 22, 27, 33, 34, 36, 37], "pl_modul": 14, "batch_idx": [14, 22, 27, 33, 34, 36, 37], "dataloader_idx": [14, 22, 27, 33, 34, 36, 37], "begin": 14, "on_test_batch_start": 14, "on_train_batch_start": 14, "train": [14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 47, 48, 103, 132, 133], "on_validation_batch_start": 14, "channel": [16, 17, 18, 19, 20, 72, 73, 74, 75, 76, 78, 89, 90, 104, 121, 122, 129, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230], "subject_in_pattern": [16, 19, 132, 133], "target": [16, 17, 18, 19, 20, 132, 133, 241, 244, 254, 306], "target_map": [16, 17, 18, 19, 20, 132, 133], "mask": [16, 17, 18, 19, 20, 120, 132, 133, 138, 139, 234], "withdraw_subject": [16, 17, 18, 19, 20, 132, 133], "scalabl": [16, 19, 22, 27, 132, 133], "locat": [16, 17, 18, 19, 20, 51, 69, 132, 133, 264], "store": [16, 17, 18, 19, 20, 36, 37, 132, 133, 259, 260, 261, 262, 276, 300], "list": [16, 17, 18, 19, 20, 22, 27, 36, 37, 38, 42, 105, 112, 118, 126, 128, 131, 132, 133, 134, 135, 136, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 179, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 247, 248, 249, 256, 257, 281, 282, 283, 288, 289, 301], "default": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 41, 44, 45, 47, 48, 51, 68, 69, 72, 73, 74, 75, 76, 78, 89, 90, 104, 105, 107, 108, 110, 113, 114, 116, 117, 118, 121, 122, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 214, 216, 217, 221, 225, 227, 228, 232, 233, 234, 239, 243, 244, 247, 248, 250, 252, 255, 257, 258, 259, 260, 269, 270, 271, 274, 275, 276, 278, 279, 281, 282, 284, 286, 287, 289, 292, 293, 295, 298, 299, 300, 303, 305, 306], "folder": [16, 19, 110, 116, 132, 133, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "level": [16, 19, 132, 133, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 303], "subject": [16, 17, 18, 19, 20, 105, 106, 118, 119, 132, 133, 234], "identifi": [16, 19, 132, 133, 241, 254], "retriev": [16, 19, 51, 69, 132, 133], "tabular": [16, 17, 18, 19, 20, 132, 133], "dict": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 39, 40, 41, 42, 50, 52, 107, 108, 113, 114, 132, 133, 146, 171, 208, 235, 249, 250, 269, 283, 284, 292], "optionali": [16, 17, 18, 19, 20, 33, 34, 36, 37, 132, 133, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "dictionari": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 50, 52, 53, 107, 108, 113, 114, 132, 133, 269, 292], "specifi": [16, 17, 18, 19, 20, 22, 27, 38, 41, 51, 69, 104, 107, 108, 113, 114, 122, 132, 133, 232, 233, 247, 248, 257, 281, 282, 289], "replac": [16, 17, 18, 19, 20, 42, 72, 74, 75, 76, 89, 90, 108, 114, 132, 133, 147, 159, 180, 181], "exist": [16, 17, 18, 19, 20, 51, 69, 132, 133, 234, 278, 279], "panda": [16, 17, 18, 19, 20, 105, 118, 132, 133], "datafram": [16, 17, 18, 19, 20, 105, 118, 132, 133], "callabl": [16, 17, 18, 19, 20, 22, 27, 67, 132, 133, 259], "optionnali": [16, 17, 18, 19, 20, 33, 34, 36, 37, 107, 108, 113, 114, 121, 129, 132, 133], "remov": [16, 17, 18, 19, 20, 36, 37, 132, 133, 234], "filenotfounderror": [16, 17, 18, 19, 20], "mandatorri": [16, 17, 18, 19, 20], "keyerror": [16, 17, 18, 19, 20], "mandatori": [16, 17, 18, 19, 20, 235], "kei": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 50, 52, 107, 108, 113, 114, 146, 171, 235, 269, 292], "miss": [16, 17, 18, 19, 20, 256, 288], "particip": [16, 17, 18, 19, 20, 132, 133], "tsv": [16, 17, 18, 19, 20, 132, 133], "request": [16, 17, 18, 19, 20, 132, 133, 141, 234], "conta": [16, 17, 18, 19, 20, 132, 133], "idea": [16, 19], "your": [16, 18, 19, 22, 27, 38, 51, 62, 63, 69, 307], "rather": [16, 19], "symlink": [16, 19], "aggreg": [16, 19], "enforc": [16, 19], "reproduc": [16, 19, 22, 27, 33, 34, 36, 37], "persist": [16, 19], "get_checksum": [16, 19], "hash": [16, 19, 51, 69], "get_data": [16, 17, 19, 20], "index": [16, 17, 19, 20, 22, 27, 33, 34, 36, 37, 107, 108, 113, 114, 246, 249, 269, 280, 283, 292, 301], "val_check_interv": [22, 27], "min_epoch": [22, 27], "max_step": [22, 27], "min_step": [22, 27], "enable_checkpoint": [22, 27], "bool": [22, 27, 51, 66, 69, 73, 74, 75, 78, 89, 90, 104, 121, 122, 129, 132, 133, 138, 139, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 221, 232, 233, 234, 255, 258, 260, 269, 274, 275, 287, 292, 298, 299], "enable_progress_bar": [22, 27], "enable_model_summari": [22, 27], "strategi": [22, 27, 33, 34, 144, 175], "num_nod": [22, 27], "precis": [22, 27], "liter": [22, 27], "engin": [22, 27], "float16": [22, 27], "mix": [22, 27], "bf16": [22, 27], "sequenc": [22, 27, 33, 34, 36, 37, 104, 111, 122, 125, 144, 175], "lightningmodul": [22, 27], "design": [22, 27, 38], "inherit": [22, 27, 38], "lightn": [22, 27, 307], "interfac": [22, 27, 38, 39, 41, 42, 307], "multi": [22, 27, 33, 34, 36, 37, 121, 129, 144, 175], "capabl": [22, 27], "basicali": [22, 27], "child": [22, 27, 38, 121, 129], "mixin": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "add": [22, 27, 33, 34, 40, 73, 78, 109, 115, 217, 228], "loop": [22, 27], "integ": [22, 27], "often": [22, 27], "pass": [22, 27, 67, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 234], "fraction": [22, 27], "fix": [22, 27, 211, 222, 232, 233, 294], "across": [22, 27, 105, 106, 118, 119, 144, 175], "onc": [22, 27], "reach": [22, 27], "infinit": [22, 27], "forc": [22, 27, 51, 69], "least": [22, 27], "disabl": [22, 27, 33, 34, 36, 37], "checkpoint": [22, 27, 73, 78], "configur": [22, 27, 38, 39, 307], "progress": [22, 27, 33, 34, 36, 37], "bar": [22, 27, 33, 34, 36, 37], "summar": [22, 27], "support": [22, 27, 33, 34, 36, 37], "tpu": [22, 27, 33, 34, 36, 37], "hpu": [22, 27], "mp": [22, 27], "custom": [22, 27, 68], "alias": [22, 27], "listof": [22, 27], "should": [22, 27, 33, 34, 51, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 234], "automat": [22, 27, 33, 34, 36, 37, 38, 276, 300], "select": [22, 27, 38, 39], "doubl": [22, 27, 147, 159, 180, 181], "16bit": [22, 27], "bfloat16": [22, 27], "attribut": [22, 27, 33, 34, 36, 37, 42, 50, 52, 53, 54, 67, 68], "control": [22, 27, 33, 34, 36, 37, 104, 107, 113, 122, 131, 134, 135, 136, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 217, 227, 228, 252, 270, 286, 293], "multipl": [22, 27, 33, 34, 36, 37, 38, 39, 73, 78, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "extra": [22, 27], "tune": [22, 27], "debug": [22, 27, 132, 133, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 245], "boolean": [22, 27], "otherwis": [22, 27, 67, 68, 234], "hparam": [22, 27], "dictionarai": [22, 27, 38], "regress": [22, 25, 27, 30, 33, 34], "training_step": [22, 27, 33, 34, 36, 37], "addit": [22, 27, 33, 34, 36, 37, 147, 159, 180, 181, 210, 221], "metric": [22, 27, 33, 34, 36, 37, 105, 118], "TO": [22, 27], "BE": [22, 27], "validation_step": [22, 27, 33, 34, 36, 37], "anyth": [22, 27, 33, 34, 36, 37], "interest": [22, 27, 33, 34, 36, 37, 132, 133, 146, 171], "transform_step": [22, 27, 36, 37], "new": [22, 27, 36, 37, 51, 69, 104, 122, 123, 124, 170, 211, 222, 234], "predict_step": [22, 27, 33, 34, 36, 37], "log": [22, 27, 33, 34, 36, 37, 138, 139, 140, 144, 146, 147, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 179, 180, 181, 188, 190, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 251, 303], "log_dict": [22, 27], "train_dataload": [22, 27], "val_dataload": [22, 27], "instruct": [22, 27], "tensor": [22, 27, 33, 34, 36, 37, 44, 45, 138, 139, 140, 142, 143, 144, 148, 157, 158, 160, 161, 175, 182, 184, 185, 186, 187, 188, 190, 199, 220, 245], "prog_bar": [22, 27], "logger": [22, 27, 33, 34, 36, 37, 251], "on_step": [22, 27], "on_epoch": [22, 27], "reduce_fx": [22, 27], "enable_graph": [22, 27], "sync_dist": [22, 27], "sync_dist_group": [22, 27], "add_dataloader_idx": [22, 27], "metric_attribut": [22, 27], "rank_zero_onli": [22, 27], "must": [22, 27, 33, 34, 36, 37, 38, 68, 104, 122, 259, 264], "ddp": [22, 27], "determin": [22, 27, 36, 37, 105, 118], "hook": [22, 27, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "accumul": [22, 27], "over": [22, 27, 36, 37], "detach": [22, 27], "graph": [22, 27, 179, 302], "care": [22, 27, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 276, 300], "commun": [22, 27], "overhead": [22, 27], "group": [22, 27, 74, 75, 87, 88, 89, 90, 94, 105, 118, 234], "sync": [22, 27], "uniqu": [22, 27, 239], "infer": [22, 27, 33, 34], "explicitli": [22, 27], "restor": [22, 27, 258], "state": [22, 27, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 141, 142, 145, 160, 172, 173, 174, 176, 184, 188], "torchmetr": [22, 27], "tell": [22, 27], "rank": [22, 27], "won": [22, 27, 33, 34], "abl": [22, 27], "improp": [22, 27], "deadlock": [22, 27], "train_loss": [22, 27], "metriccollect": [22, 27], "test_step": [22, 27], "val": [22, 27], "metric_n": [22, 27], "test_dataload": [22, 27], "out": [22, 27, 33, 34, 36, 37, 108, 114, 128, 148, 159, 160, 161, 181, 188, 190, 199], "By": [22, 27, 33, 34], "forward": [22, 27, 33, 34, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 142, 143, 144, 145, 147, 148, 157, 158, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "overrid": [22, 27, 33, 34], "logic": [22, 27, 33, 34], "prevent": [22, 27, 33, 34], "oom": [22, 27, 33, 34], "basepredictionwrit": [22, 27, 33, 34], "write": [22, 27, 33, 34, 266, 267], "databas": [22, 27, 33, 34], "spawn": [22, 27, 33, 34], "happen": [22, 27, 33, 34], "ddp_spawn": [22, 27, 33, 34], "core": [22, 27, 33, 34], "produc": [22, 27, 33, 34, 36, 37], "step_output": [22, 27, 33, 34, 36, 37], "skip": [22, 27, 33, 34, 36, 37, 177, 178, 179], "deepspe": [22, 27, 33, 34, 36, 37], "manual": [22, 27, 33, 34, 36, 37], "special": [22, 27, 33, 34, 36, 37, 38], "switch": [22, 27, 33, 34, 36, 37], "accumulate_grad_batch": [22, 27, 33, 34, 36, 37], "intern": [22, 27, 33, 34, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 172, 173, 174, 176], "super": [22, 27, 33, 34, 36, 37], "automatic_optim": [22, 27, 33, 34, 36, 37], "gan": [22, 27, 33, 34, 36, 37], "opt1": [22, 27, 33, 34, 36, 37], "opt2": [22, 27, 33, 34, 36, 37], "decod": [22, 27, 33, 34, 36, 37, 142, 147, 157, 159, 160, 180, 181, 184, 186, 188], "alia": [22, 27, 36, 37, 54, 55, 123, 124, 170, 234], "d": [22, 27, 33, 34, 36, 37, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 180, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 216, 217, 220, 227, 228, 240, 243, 253, 305], "calcul": [22, 27, 33, 34, 36, 37], "put": [22, 27, 33, 34, 36, 37], "At": [22, 27, 33, 34, 36, 37, 159, 181], "goe": [22, 27, 33, 34, 36, 37], "back": [22, 27, 33, 34, 36, 37, 234], "estimator_typ": [23, 24, 25, 26, 28, 29, 30, 31], "tag": [23, 24, 25, 26, 28, 29, 30, 31, 51, 69], "regressor": [25, 30, 72, 76], "setup": [33, 34, 251, 303], "logist": [33, 34], "freez": [33, 34], "freeze_encod": [33, 34], "rate": [33, 34, 36, 37, 131, 134, 135, 136, 144, 175], "adam": [33, 34, 36, 37], "decai": [33, 34, 36, 37], "multisteplr": [33, 34], "schedul": [33, 34, 36, 37, 38], "element": [33, 34, 36, 37], "variabl": [33, 34, 36, 37, 38, 208], "validation_step_output": [33, 34], "dictionnari": [33, 34, 146, 171, 259], "respectivelli": [33, 34], "configure_optim": [33, 34, 36, 37], "declar": [33, 34, 36, 37, 39], "adamw": [33, 34, 36, 37], "cross_entropy_loss": [33, 34], "tupl": [33, 34, 36, 37, 38, 39, 51, 69, 73, 74, 78, 89, 91, 92, 123, 124, 128, 170, 216, 217, 220, 227, 228], "cross_entropi": [33, 34], "on_validation_epoch_end": [33, 34], "clean": [33, 34], "cach": [33, 34, 51, 69, 107, 108, 110, 113, 114, 116, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 259], "version": [36, 37, 38, 41, 234], "x_i": [36, 37], "x_j": [36, 37], "maxim": [36, 37], "minim": [36, 37, 268, 291], "part": [36, 37], "head": [36, 37, 72, 76, 144, 173, 175, 176], "cnn": [36, 37, 103], "scnn": [36, 37], "respons": [36, 37], "extract": [36, 37, 264], "denot": [36, 37], "finish": [36, 37], "extractor": [36, 37], "z": [36, 37, 142, 143, 160, 184, 185, 188, 237, 238, 240, 242, 243, 253, 304, 305], "shown": [36, 37], "wors": [36, 37], "those": [36, 37, 269, 292], "becom": [36, 37], "invari": [36, 37], "thu": [36, 37], "stage": [36, 37], "z_i": [36, 37], "z_j": [36, 37], "therebi": [36, 37], "propos": [36, 37], "aaron": [36, 37], "van": [36, 37], "den": [36, 37], "oord": [36, 37], "short": [36, 37], "formal": [36, 37], "written": [36, 37], "ell_": [36, 37], "j": [36, 37], "frac": [36, 37], "exp": [36, 37], "sim": [36, 37], "tau": [36, 37], "sum_": [36, 37], "k": [36, 37, 73, 78, 105, 118, 210, 215, 221, 226, 244, 306], "2n": [36, 37], "mathbb": [36, 37], "neq": [36, 37], "z_k": [36, 37], "peak": [36, 37], "bound": [36, 37, 117, 127], "balanc": [36, 37], "influenc": [36, 37], "dissimilar": [36, 37], "versu": [36, 37], "cosin": [36, 37], "cdot": [36, 37], "maximum": [36, 37, 232, 233, 275, 299], "minimum": [36, 37, 232, 233], "converg": [36, 37], "around": [36, 37], "exact": [36, 37], "opposit": [36, 37], "flexibl": [36, 37], "altern": [36, 37], "track": [36, 37], "projector": [36, 37], "cosineannealinglr": [36, 37], "auxiliari": [36, 37], "info_nce_loss": [36, 37], "expfil": 38, "selector": [38, 39], "cv": [38, 42], "logdir": 38, "verbos": 38, "useful": 38, "date": 38, "reus": [38, 276, 300], "section": 38, "descipt": 38, "scaler": [38, 234], "dl": 38, "probe": 38, "environ": [38, 39, 40, 42], "fullfil": 38, "constraint": 38, "impos": 38, "interface_occurr": 38, "term": [38, 41, 49], "interface_vers": 38, "__version__": 38, "mismatch": 38, "detect": 38, "connot": 38, "previous": 38, "param": [38, 41, 42], "cross": [38, 42, 44, 45, 216, 217, 227, 228], "instanci": 38, "prefix": 38, "filter": [38, 39, 73, 78, 107, 113, 142, 143, 146, 147, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 214, 215, 218, 221, 223, 225, 226, 229], "block": [38, 73, 74, 75, 78, 89, 90, 91, 92, 144, 175, 177, 178, 182, 183], "construct": 38, "hierarch": 38, "properti": [38, 65], "parent": 38, "separ": 38, "form": [38, 51, 69, 105, 118], "architecture_nam": [38, 51, 69], "revis": [38, 51, 69], "hug": [38, 51, 69], "face": [38, 51, 69, 232, 233], "specifid": 38, "machin": [38, 51, 69], "appropri": [38, 39, 68], "scheme": 38, "hyperparapet": 38, "defautl": 38, "coupl": 38, "moment": 38, "config": 39, "env": [39, 40, 42], "filter_conf": 39, "updat": [40, 234], "updated_env": 40, "environemt": 40, "argument": [41, 68, 259, 276, 300], "my_modul": 41, "my_class": 41, "exppect": 41, "module": 41, "cl": [41, 144, 175], "updated_param": 42, "param_set": 42, "entropi": [44, 45], "deriv": [44, 45], "icml": [44, 45], "2020": [44, 45], "doi": [44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "org": [44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 263, 265], "48550": [44, 45, 73, 74, 75, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "arxiv": [44, 45, 73, 74, 75, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 179], "2002": [44, 45], "05709": [44, 45], "invers": [44, 45], "share": [44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 172, 173, 174, 176], "scriptmodul": [44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 172, 173, 174, 176], "z1": [44, 45], "z2": [44, 45], "n_featur": [44, 45, 247, 257, 276, 281, 289, 300], "embed": [44, 45, 72, 73, 74, 75, 76, 78, 89, 90, 144, 175], "view": [44, 45, 274, 298], "equival": [47, 48, 234], "termin": 49, "expos": [50, 52], "access": [50, 52, 208, 259], "value_kei": [50, 52], "b": [50, 52], "avaiabl": [51, 69], "pathlib": [51, 69], "repo": [51, 69], "classmethod": [51, 69, 105, 118, 146, 171], "hf_download": [51, 69], "hf_id": [51, 69], "hf_revis": [51, 69], "force_download": [51, 69], "present": [51, 68, 69], "alwai": [51, 69, 234], "resum": [51, 69], "id": [51, 69], "commit": [51, 69], "hub_split": [51, 69], "hub_nam": [51, 69], "interpret": [51, 69], "hub_id": [51, 69], "hub_revis": [51, 69], "decalr": [51, 69, 102], "ns_download": [51, 69], "ns_id": [51, 69], "reset": [53, 62, 63], "background": 53, "foreground": [53, 55], "reverse_dict": 53, "revers": [53, 142, 184], "conveni": [62, 63], "style": [62, 63], "ansi": [62, 63], "fn": 65, "attribute_nam": 65, "condit": 65, "descriptor": 65, "protocol": 65, "decor": [65, 67, 121, 129, 259, 276, 300], "attributeerror": [65, 67], "falsei": 65, "hasattr": [65, 67], "doc": 65, "howto": 65, "html": 65, "explan": 65, "deleg": 66, "underli": 66, "truthi": 67, "either": [67, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 234], "unavail": 67, "helloifeven": 67, "_x_is_even": 67, "say_hello": 67, "hello": 67, "obj": 67, "msg": [68, 245], "presenc": 68, "trail": 68, "underscor": 68, "except": [68, 234], "messag": [68, 144, 147, 148, 159, 160, 161, 175, 179, 180, 181, 188, 190, 199, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 245], "yet": 68, "string": [68, 232, 233], "substitut": 68, "eg": 68, "sparsifi": 68, "fitt": 68, "n_embed": [72, 73, 74, 75, 76, 78, 89, 90], "n_channel": [72, 76, 112, 126, 144, 175], "abrol": [72, 76], "2021": [72, 76, 160, 188], "5281": [72, 76], "zenodo": [72, 76], "4309677": [72, 76], "overridden": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "subclass": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "although": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "recip": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "afterward": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "former": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "latter": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "silent": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228], "them": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 111, 125, 145, 172, 173, 174, 176, 179, 215, 216, 217, 226, 227, 228, 234, 259, 302], "growth_rat": [73, 78, 79, 80, 83], "block_config": [73, 78, 83], "num_init_featur": [73, 78, 83], "bn_size": [73, 78, 79, 80], "512": [73, 74, 75, 78, 89, 90, 148, 161, 190, 199], "memory_effici": [73, 78, 79, 80], "huang": [73, 77, 78, 84], "2018": [73, 77, 78, 84], "1608": [73, 77, 78, 84], "06993": [73, 77, 78, 84], "pool": [73, 78, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 214, 225], "convolut": [73, 74, 75, 78, 89, 90, 93, 94, 107, 113, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 215, 216, 217, 218, 221, 223, 226, 227, 228, 229], "factor": [73, 78, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 252, 270, 286, 293], "slower": [73, 78], "pdf": [73, 78], "1707": [73, 78], "06990": [73, 78], "zero_init_residu": [74, 75, 89, 90], "width_per_group": [74, 75, 89, 90], "replace_stride_with_dil": [74, 75, 89, 90], "norm_lay": [74, 75, 87, 88, 89, 90], "initial_kernel_s": [74, 75, 89, 90], "he": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "2015": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "1512": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "03385": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "bn": [74, 75, 89, 90, 177, 178, 182, 183], "residu": [74, 75, 89, 90], "branch": [74, 75, 89, 90], "behav": [74, 75, 89, 90], "accord": [74, 75, 89, 90, 269, 292], "1706": [74, 75, 89, 90], "02677": [74, 75, 89, 90], "divid": [74, 75, 89, 90], "dilat": [74, 75, 87, 88, 89, 90, 94], "atrou": [74, 75, 89, 90], "preserv": [74, 75, 89, 90], "dens": [74, 75, 89, 90, 142, 184, 234], "batchnorm3d": [74, 75, 89, 90], "kernel": [74, 75, 89, 90, 107, 113, 216, 217, 227, 228, 269, 270, 292, 293], "truncat": [75, 86, 90, 96, 98, 100], "121": [77, 84], "num_lay": 79, "num_input_featur": [79, 80, 81], "init_featur": 79, "prev_featur": 80, "num_output_featur": 81, "norm": 82, "arch": [83, 91, 92], "inplan": [87, 88], "plane": [87, 88, 215, 226, 269, 285, 292], "base_width": [87, 88], "in_plan": [93, 94], "out_plan": [93, 94], "1x1": [93, 159, 181], "center": [102, 234, 249, 269, 270, 274, 283, 285, 292, 293, 298], "inspir": 103, "natur": 103, "init": [104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 125, 131, 134, 138, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 258], "randomize_per_channel": [104, 121, 122, 124, 129], "tranform": [104, 122, 241, 254], "wise": [104, 122, 159, 181], "randomli": [105, 106, 118, 119], "bootstrap": [105, 118], "measur": [105, 106, 110, 116, 118, 119, 120], "vertex": [105, 106, 107, 108, 113, 114, 118, 119, 159, 181, 269, 270, 276, 292, 293, 294, 300, 301, 302], "hemispher": [105, 106, 118, 119, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "curupt": [105, 106, 118, 119, 120], "cortic": [105, 106, 110, 116, 118, 119, 120, 130, 137, 138, 139, 141, 142, 143, 144, 147, 148, 157, 158, 159, 160, 161, 175, 180, 181, 184, 185, 186, 187, 188, 190, 199], "meta": [105, 118, 234], "regroup": [105, 118], "m": [105, 107, 108, 110, 113, 114, 116, 118, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 232, 233, 248, 255, 261, 262, 266, 267, 269, 274, 282, 287, 292, 298, 302], "pca": [105, 118], "compon": [105, 118, 237, 238, 242, 304], "extern": [105, 118], "distanc": [105, 118, 215, 226], "popul": [105, 118], "bootstap": [105, 118], "arr": [105, 106, 108, 109, 110, 114, 115, 116, 118, 119], "bootsrap": [105, 118], "controlater": [106, 119], "cachedir": [107, 108, 110, 113, 114, 116, 146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 259], "speed": [107, 113, 146, 171], "recept": [107, 113], "field": [107, 113, 123, 124, 170], "deviat": [107, 109, 113, 115, 234], "icosahdron": [107, 108, 110, 113, 114, 116], "neighboor": [107, 108, 113, 114, 232, 233], "sufifi": [107, 108, 113, 114], "ie": [107, 108, 113, 114, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "organ": [107, 108, 113, 114, 260, 269, 292], "ring": [107, 108, 113, 114, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 214, 218, 221, 223, 225, 229, 249, 269, 283, 292], "option": [107, 108, 113, 114, 138, 139, 142, 143, 146, 157, 158, 171, 184, 185, 186, 187, 232, 233, 234, 247, 248, 255, 257, 258, 274, 275, 281, 282, 287, 289, 298, 299], "replacement_valu": [108, 114], "connex": [108, 114], "neighborhood": [108, 114, 177, 182, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 252, 268, 270, 286, 291, 293], "ablat": [108, 114], "cutout": [108, 114], "cut": [108, 114], "nois": [109, 115], "barycentr": [110, 116, 250, 274, 276, 284, 298, 300], "angl": [110, 116, 237, 238, 242, 250, 269, 276, 284, 285, 292, 300, 304], "degre": [110, 116, 250, 276, 284, 300], "euler": [110, 116, 250, 276, 284, 300], "smart": [110, 116, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "speedup": [110, 116, 146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "accordingli": [110, 116], "seri": [112, 126], "_data": [112, 126], "dtype": [117, 123, 127, 240, 253], "uplet": [117, 127, 215, 226, 250, 276, 284, 300], "aplli": 120, "rand_mask": 120, "binari": [120, 138, 139], "corrupt": 120, "multichannel": [121, 129], "multichannelaugment": [121, 129], "applic": [121, 129, 147, 159, 180, 181, 235], "high": 123, "liftifi": 128, "synthet": 130, "gene": [131, 134, 135, 136], "n_max": [132, 133], "target_ico_ord": [132, 133], "regex": [132, 133], "nibabel": [132, 133, 263, 265], "triangular": [132, 133, 232, 233, 275, 277, 299], "purpos": [132, 133], "desir": [132, 133, 268, 291], "problem": [135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "ndarrai": [135, 136, 234, 237, 238, 242, 304], "assocait": [135, 136], "variat": [137, 141, 160, 188], "svae": [137, 160, 188], "beta": [138, 139, 237, 238, 242, 304], "left_mask": [138, 139], "right_mask": [138, 139], "use_ms": [138, 139], "kl": [138, 139], "diverg": [138, 139], "likelihood": [138, 139, 140], "recon": 140, "reconstruct": [140, 142, 160, 184, 188], "w": [140, 189], "relat": [141, 146, 171], "gmvae": 141, "rest": [141, 160, 188], "fmri": [141, 160, 188], "autoencod": [141, 160, 188], "libilab": 141, "rsfmri": 141, "vision": [141, 144, 175, 275, 299], "output_shap": [142, 184, 217, 228], "before_latent_dim": [142, 184], "latent_dim": [142, 143, 145, 157, 158, 160, 172, 184, 185, 186, 187, 188], "conv_flt": [142, 143, 157, 158, 160, 184, 185, 186, 187, 188], "fusion_level": [142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "leakyrelu": [142, 143, 157, 158, 160, 184, 185, 186, 187, 188], "batch_norm": [142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "output_channel": [142, 184], "input_dim": [142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "squar": [142, 184, 189], "convnet": [142, 184, 189], "stochast": [142, 160, 184, 188], "left_recon_x": [142, 160, 184, 188], "input_channel": [142, 143, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "right_recon_x": [142, 160, 184, 188], "grid": [143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 180, 181, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 240, 243, 252, 253, 270, 286, 293, 305], "left_x": [143, 148, 157, 158, 160, 161, 185, 186, 187, 188, 190, 199], "right_x": [143, 148, 157, 158, 160, 161, 185, 186, 187, 188, 190, 199], "q": [143, 160, 185, 188], "mlp_dim": [144, 175, 176], "dim_head": [144, 173, 175, 176], "dropout": [144, 173, 174, 175, 176], "emb_dropout": [144, 175], "msit": [144, 175], "dahan": [144, 175], "simon": [144, 145, 172, 175], "analysi": [144, 175], "midl": [144, 175], "2022": [144, 175], "n_verticesi": [144, 175], "trainabl": [144, 175], "msa": [144, 175], "mechan": [144, 175, 234], "feed": [144, 175], "ffn": [144, 175], "expand": [144, 175], "poll": [144, 175], "token": [144, 175], "hidden_lay": [145, 172], "return_logit": [145, 172], "kornblith": [145, 172], "mohammad": [145, 172], "norouzi": [145, 172], "geoffrei": [145, 172], "hinton": [145, 172], "visual": [145, 172], "y1": [145, 172], "y2": [145, 172], "input_ord": [146, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "n_layer": [146, 171], "repa_s": [146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "repa_zoom": [146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "dynamic_repa_zoom": [146, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 186, 187, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207], "repa": [146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 270, 293], "ico_info": [146, 171], "build_ico_info": [146, 171], "tangent": [146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 215, 226, 252, 269, 285, 286, 292], "tessal": [146, 171, 255, 275, 287, 299], "tessel": [146, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 181, 188, 199, 200, 201, 202, 203, 204, 205, 206, 207, 275, 299], "icosehedron": [146, 171], "upsampl": [146, 159, 171, 181, 182, 211, 212, 213, 218, 219, 222, 223, 224, 229, 230, 257, 289], "onform": [146, 171], "gride": [147, 148, 178, 180, 183, 190, 240, 253], "net": [147, 159, 179, 180, 181], "built": [147, 159, 180, 181], "upon": [147, 159, 180, 181], "spma": [147, 180], "rectifi": [147, 159, 180, 181], "unit": [147, 159, 180, 181, 234, 252, 270, 286, 290, 293, 294], "halv": [147, 159, 180, 181], "zhao": [147, 159, 180, 181], "ipmi": [147, 159, 180, 181], "2019": [147, 159, 179, 180, 181], "cfg": [148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "4096": [148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "init_weight": [148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "stand": [148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 235], "wether": [148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "sphericalgvggbas": [149, 150, 151, 152, 153, 154, 155, 156, 191, 192, 193, 194, 195, 196, 197, 198], "interp": [159, 181, 182], "2x2": [159, 181], "maxpad": [159, 181, 182], "shift": [159, 181, 182], "zeropad": [159, 181, 182], "sphericalgva": [160, 188], "vert": [160, 161, 188, 199], "tri": [160, 161, 188, 199, 277], "reparameter": [160, 188], "reparametr": [160, 188], "trick": [160, 188], "sphericalvggbas": [162, 163, 164, 165, 166, 167, 168, 169, 200, 201, 202, 203, 204, 205, 206, 207], "neighbor_indic": [170, 210, 212, 213, 218, 221, 223, 224, 229], "down_indic": [170, 177, 182, 212, 213, 214, 218, 223, 224, 225, 229, 247, 248, 281, 282], "up_indic": [170, 211, 219, 222, 230, 256, 257, 288, 289], "conv_neighbor_indic": 170, "conv_lay": [177, 182], "in_ch": [177, 178, 182, 183], "out_ch": [177, 178, 182, 183], "conv_neigh_indic": [177, 182], "down_neigh_indic": [177, 213, 214, 224, 225], "pool_mod": 177, "discret": [177, 182, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "hidden_channel": 179, "pool_ratio": 179, "sum_r": 179, "act": 179, "unpool": 179, "hongyang": 179, "gao": 179, "shuiwang": 179, "ji": 179, "ratio": 179, "connect": [179, 302], "summat": 179, "nonlinear": 179, "edge_index": 179, "neigh_indic": [182, 210, 215, 221, 226], "up_neigh_indic": [182, 211, 212, 213, 218, 219, 222, 223, 224, 229, 230], "upsamp": [182, 183], "upconv": [182, 183], "x1": [182, 183], "x2": [182, 183], "max_pool_indic": [182, 213, 224], "output_dim": 189, "klass_nam": 208, "klass_param": 208, "destination_module_glob": 208, "publicli": 208, "assign": [208, 269, 292], "in_feat": [210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230], "out_feat": [210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230], "formul": [210, 221], "ico2_vertic": [210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230], "ico2_triangl": [210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230], "asarrai": [210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 225, 229, 230, 256, 288], "ico2_x": [210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230], "ico3_vertic": [211, 212, 213, 214, 218, 219, 222, 223, 224, 225, 229, 230], "ico3_triangl": [211, 212, 213, 214, 218, 219, 222, 223, 224, 225, 229, 230], "ico3_x": [211, 212, 213, 214, 218, 219, 222, 223, 224, 225, 229, 230], "slow": [212, 223], "pooling_typ": [213, 214, 224, 225], "rectagular": [215, 226], "neigh_weight": [215, 226], "proj_ico_x": [216, 217, 227, 228], "correl": [216, 217, 227, 228], "pad_azimuth": [216, 217, 220, 227, 228], "pad_elev": [216, 217, 220, 227, 228], "zero_pad": [217, 228], "icoconv": [217, 228], "vmin": [232, 233], "vmax": [232, 233], "black": [232, 233], "color_map": [232, 233], "linearsegmentedcolormap": [232, 233], "repres": [232, 233, 301, 302], "opac": [232, 233], "Not": [232, 233], "edg": [232, 233, 301, 302], "line": [232, 233], "cm": [232, 233], "coolwarm": [232, 233], "colormap": [232, 233], "sub": 234, "with_mean": 234, "with_std": 234, "varianc": 234, "sklearn": 234, "scler": 234, "avoid": 234, "inplac": 234, "guarante": 234, "spars": 234, "csr": 234, "attempt": 234, "entail": 234, "later": 234, "n_subject": 234, "along": [234, 239], "get_metadata_rout": 234, "metadata": 234, "rout": 234, "inverse_transform": 234, "x_tr": 234, "set_inverse_transform_request": 234, "unchang": 234, "relev": 234, "enable_metadata_rout": 234, "set_config": 234, "guid": 234, "metadata_rout": 234, "retain": 234, "insid": 234, "pipelin": 234, "set_partial_fit_request": 234, "sample_weight": 234, "partial_fit": 234, "set_transform_request": 234, "sever": 235, "suffix": 235, "coordin": [236, 237, 238, 240, 241, 242, 243, 253, 254, 278, 294, 304, 305], "system": 236, "tool": [236, 307], "cartesian": [237, 238, 242, 304], "array_lik": [237, 238, 242, 304], "radiant": [237, 238, 242, 304], "pi": [237, 238], "r": [237, 238, 242, 304], "ref_arrai": 239, "atol": [239, 244, 306], "0001": [239, 244, 306], "toler": [239, 244, 306], "new_ord": 239, "resx": [240, 243, 253, 305], "resi": [240, 243, 253, 305], "ico2_vert": [240, 241, 243, 244, 246, 247, 249, 253, 254, 256, 257, 269, 270, 275, 280, 281, 283, 288, 289, 292, 293, 299, 305, 306], "ico2_tri": [240, 241, 243, 244, 246, 247, 249, 253, 254, 256, 257, 269, 270, 275, 280, 281, 283, 288, 289, 292, 293, 299, 305, 306], "y_grid": [240, 243, 253, 305], "ref_vertic": [241, 244, 254, 306], "ico2_std_vert": [241, 244, 254, 306], "ico2_std_tri": [241, 244, 254, 306], "projecte": [243, 305], "y_std": [244, 306], "target_vertic": [246, 256, 280, 288], "n_dim": [246, 256, 280, 288], "n_queri": [246, 256, 280, 288], "nearest_idx": [246, 280], "ico3_vert": [246, 255, 256, 268, 271, 273, 275, 276, 280, 287, 288, 291, 295, 297, 299, 300], "ico3_tri": [246, 255, 256, 268, 271, 273, 275, 276, 280, 287, 288, 291, 295, 297, 299, 300], "down3to2": [246, 280], "ico3_down_vertic": [246, 280], "consecut": [247, 248, 257, 281, 282, 289], "downsampled_data": [247, 281], "new_n_vertic": [247, 257, 281, 289], "ico4_vert": [247, 248, 257, 281, 282, 289], "ico4_tri": [247, 248, 257, 281, 282, 289], "reshap": [247, 249, 256, 257, 276, 281, 283, 288, 289, 300], "y_down": [247, 281], "squeez": [247, 257, 276, 281, 289, 300], "geometri": [248, 256, 261, 262, 266, 267, 282, 288, 290], "new_vertic": [248, 282], "newli": [248, 282], "icosahedorn": [248, 282], "new_triangl": [248, 282], "ico2_down_vert": [248, 282], "ico2_down_tri": [248, 282], "start_nod": [249, 283], "recurs": [249, 283], "node_neigh": [249, 283], "coeffici": [250, 284], "asssoci": [250, 284], "euclidian": [250, 284], "three": [250, 284], "2d": [252, 286], "grid_in_spher": [252, 270, 286, 293], "grid_in_tplan": [252, 286], "mesh": [255, 256, 269, 287, 288, 292, 302], "target_triangl": [256, 288], "regular": [256, 288], "interp_indic": [256, 288], "n_feat": [256, 288], "y_up": [256, 257, 288, 289], "upper": [257, 289], "upsampled_data": [257, 289], "hide_err": 258, "secur": 258, "redirect": 258, "context": 258, "manag": 258, "On": 258, "complet": [258, 259], "hide": 258, "func": 259, "wrap": 259, "receiv": 259, "directori": 259, "transpar": 259, "overlap": 259, "cifti_fil": 260, "decompos": 260, "cifti": [260, 263, 265], "vol": 260, "surf_left": 260, "surf_right": 260, "surf_fil": [261, 262, 266, 267], "read": [261, 262], "gifti": [262, 267], "surf_nam": 263, "nbviewer": [263, 265], "neurohackademi": [263, 265], "nh2020": [263, 265], "curriculum": [263, 265], "blob": [263, 265], "master": [263, 265], "markiewicz": [263, 265], "gnu": 264, "archiv": 264, "open": 264, "gz": 264, "out_path": 264, "extens": 264, "n_neigh": [268, 272, 291, 296], "length": [269, 292], "remain": [269, 292], "n_vert": [271, 295], "min_order_to_get_n_neighbor": [272, 296], "hi": [273, 297], "clockwise_from_cent": [274, 298], "clockwis": [274, 298], "counter": [274, 298], "reordered_triangl": [274, 298], "reorder": [274, 298], "ico0_vert": [274, 298], "ico0_tri": [274, 298], "clockwise_ico0_tri": [274, 298], "counter_clockwise_ico0_tri": [274, 298], "n_job": [275, 299], "concurr": [275, 299], "job": [275, 299], "euclidean": [276, 300], "rotated_data": [276, 300], "y_rot": [276, 300], "lower_vertic": 277, "ico_fil": 278, "rescal": 278, "topologi": [278, 279], "ref_fil": 279, "fslr": 279, "point_1": 290, "point_2": 290, "middle_point_cach": 290, "middl": 290, "return_index": 301, "triangles_index": 301, "networkx": 302, "nearbi": 302, "potenti": 302, "smooth": 302, "info": 303, "logfil": 303, "unifi": 307, "compat": 307, "analyz": 307, "brain": 307, "product": 307, "advanc": 307, "availbl": 307, "hydra": 307}, "objects": {"nidl.callbacks.check_typing": [[14, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.datasets": [[16, 0, 1, "", "BaseImageDataset"], [17, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.BaseImageDataset": [[16, 1, 1, "", "get_checksum"], [16, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[17, 1, 1, "", "get_data"]], "nidl.datasets.base": [[18, 0, 1, "", "BaseDataset"], [19, 0, 1, "", "BaseImageDataset"], [20, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[19, 1, 1, "", "get_checksum"], [19, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[20, 1, 1, "", "get_data"]], "nidl.estimators": [[22, 0, 1, "", "BaseEstimator"], [23, 0, 1, "", "ClassifierMixin"], [24, 0, 1, "", "ClusterMixin"], [25, 0, 1, "", "RegressorMixin"], [26, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log"], [22, 1, 1, "", "log_dict"], [22, 1, 1, "", "predict"], [22, 1, 1, "", "predict_step"], [22, 1, 1, "", "training_step"], [22, 1, 1, "", "transform"], [22, 1, 1, "", "transform_step"], [22, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[27, 0, 1, "", "BaseEstimator"], [28, 0, 1, "", "ClassifierMixin"], [29, 0, 1, "", "ClusterMixin"], [30, 0, 1, "", "RegressorMixin"], [31, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[27, 1, 1, "", "fit"], [27, 1, 1, "", "log"], [27, 1, 1, "", "log_dict"], [27, 1, 1, "", "predict"], [27, 1, 1, "", "predict_step"], [27, 1, 1, "", "training_step"], [27, 1, 1, "", "transform"], [27, 1, 1, "", "transform_step"], [27, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[33, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[33, 1, 1, "", "configure_optimizers"], [33, 1, 1, "", "cross_entropy_loss"], [33, 1, 1, "", "freeze_encoder"], [33, 1, 1, "", "on_validation_epoch_end"], [33, 1, 1, "", "predict_step"], [33, 1, 1, "", "training_step"], [33, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[34, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[34, 1, 1, "", "configure_optimizers"], [34, 1, 1, "", "cross_entropy_loss"], [34, 1, 1, "", "freeze_encoder"], [34, 1, 1, "", "on_validation_epoch_end"], [34, 1, 1, "", "predict_step"], [34, 1, 1, "", "training_step"], [34, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[36, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.SimCLR": [[36, 1, 1, "", "configure_optimizers"], [36, 1, 1, "", "info_nce_loss"], [36, 1, 1, "", "training_step"], [36, 1, 1, "", "transform_step"], [36, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[37, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[37, 1, 1, "", "configure_optimizers"], [37, 1, 1, "", "info_nce_loss"], [37, 1, 1, "", "training_step"], [37, 1, 1, "", "transform_step"], [37, 1, 1, "", "validation_step"]], "nidl.experiment": [[38, 2, 1, "", "fetch_experiment"], [39, 2, 1, "", "filter_config"], [40, 2, 1, "", "get_env"], [41, 2, 1, "", "load_interface"], [42, 2, 1, "", "update_params"]], "nidl.losses": [[44, 0, 1, "", "InfoNCE"]], "nidl.losses.InfoNCE": [[44, 1, 1, "", "forward"]], "nidl.losses.infonce": [[45, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[45, 1, 1, "", "forward"]], "nidl.transforms": [[47, 0, 1, "", "ContrastiveTransforms"]], "nidl.transforms.ssl": [[48, 0, 1, "", "ContrastiveTransforms"]], "nidl.utils": [[50, 0, 1, "", "Bunch"], [51, 0, 1, "", "Weights"], [64, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[51, 1, 1, "", "hf_download"], [51, 1, 1, "", "hub_split"], [51, 1, 1, "", "load_pretrained"], [51, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[52, 0, 1, "", "Bunch"]], "nidl.utils.color": [[53, 0, 1, "", "Colored"], [54, 2, 1, "", "attr"], [55, 2, 1, "", "fg"], [56, 2, 1, "", "hex"], [57, 2, 1, "", "print_multicolor"], [58, 2, 1, "", "print_result"], [59, 2, 1, "", "print_subtitle"], [60, 2, 1, "", "print_title"], [61, 2, 1, "", "print_warning"], [62, 2, 1, "", "random_stylize"], [63, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[53, 1, 1, "", "attribute"], [53, 1, 1, "", "background"], [53, 1, 1, "", "foreground"], [53, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[65, 0, 1, "", "_AvailableIfDescriptor"], [66, 2, 1, "", "_estimator_is"], [67, 2, 1, "", "available_if"], [68, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[69, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[69, 1, 1, "", "hf_download"], [69, 1, 1, "", "hub_split"], [69, 1, 1, "", "load_pretrained"], [69, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[72, 0, 1, "", "AlexNet"], [73, 0, 1, "", "DenseNet"], [74, 0, 1, "", "ResNet"], [75, 0, 1, "", "ResNetTruncated"], [77, 2, 1, "", "densenet121"], [85, 2, 1, "", "resnet18"], [86, 2, 1, "", "resnet18_trunc"], [99, 2, 1, "", "resnet50"], [100, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[72, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[73, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[74, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[75, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[76, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[76, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[78, 0, 1, "", "DenseNet"], [79, 0, 1, "", "_DenseBlock"], [80, 0, 1, "", "_DenseLayer"], [81, 0, 1, "", "_Transition"], [82, 2, 1, "", "_bn_function_factory"], [83, 2, 1, "", "_densenet"], [84, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[78, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[79, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[80, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[87, 0, 1, "", "BasicBlock"], [88, 0, 1, "", "Bottleneck"], [89, 0, 1, "", "ResNet"], [90, 0, 1, "", "ResNetTruncated"], [91, 2, 1, "", "_resnet"], [92, 2, 1, "", "_resnet_trunc"], [93, 2, 1, "", "conv1x1"], [94, 2, 1, "", "conv3x3"], [95, 2, 1, "", "resnet18"], [96, 2, 1, "", "resnet18_trunc"], [97, 2, 1, "", "resnet50"], [98, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[87, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[88, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[89, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[90, 1, 1, "", "forward"]], "surfify.augmentation": [[104, 0, 1, "", "BaseTransformer"], [105, 0, 1, "", "GroupMixUp"], [106, 0, 1, "", "HemiMixUp"], [107, 0, 1, "", "SurfBlur"], [108, 0, 1, "", "SurfCutOut"], [109, 0, 1, "", "SurfNoise"], [110, 0, 1, "", "SurfRotation"], [111, 0, 1, "", "Transformer"], [112, 2, 1, "", "apply_chained_transforms"], [117, 2, 1, "", "interval"], [121, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[104, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[105, 1, 1, "", "groupby"], [105, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[106, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[107, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[108, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[109, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[110, 1, 1, "", "run"]], "surfify.augmentation.base": [[113, 0, 1, "", "SurfBlur"], [114, 0, 1, "", "SurfCutOut"], [115, 0, 1, "", "SurfNoise"], [116, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[113, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[114, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[115, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[116, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[118, 0, 1, "", "GroupMixUp"], [119, 0, 1, "", "HemiMixUp"], [120, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[118, 1, 1, "", "groupby"], [118, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[119, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[120, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[122, 0, 1, "", "BaseTransformer"], [123, 0, 1, "", "RandomAugmentation"], [124, 0, 1, "", "Transform"], [125, 0, 1, "", "Transformer"], [126, 2, 1, "", "apply_chained_transforms"], [127, 2, 1, "", "interval"], [128, 2, 1, "", "listify"], [129, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[122, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[123, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[123, 3, 1, "", "dtype"], [123, 3, 1, "", "high"], [123, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[124, 3, 1, "", "probability"], [124, 3, 1, "", "randomize_per_channel"], [124, 3, 1, "", "transform"]], "surfify.datasets": [[131, 0, 1, "", "ClassificationDataset"], [132, 0, 1, "", "GenericSurfDataset"], [136, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[133, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[134, 0, 1, "", "ClassificationDataset"], [135, 2, 1, "", "make_classification"]], "surfify.losses": [[138, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[139, 0, 1, "", "SphericalVAELoss"], [140, 2, 1, "", "log_likelihood"]], "surfify.models": [[142, 0, 1, "", "HemiFusionDecoder"], [143, 0, 1, "", "HemiFusionEncoder"], [144, 0, 1, "", "SiT"], [145, 0, 1, "", "SimCLR"], [146, 0, 1, "", "SphericalBase"], [147, 0, 1, "", "SphericalGUNet"], [148, 0, 1, "", "SphericalGVGG"], [149, 0, 1, "", "SphericalGVGG11"], [150, 0, 1, "", "SphericalGVGG11BN"], [151, 0, 1, "", "SphericalGVGG13"], [152, 0, 1, "", "SphericalGVGG13BN"], [153, 0, 1, "", "SphericalGVGG16"], [154, 0, 1, "", "SphericalGVGG16BN"], [155, 0, 1, "", "SphericalGVGG19"], [156, 0, 1, "", "SphericalGVGG19BN"], [157, 0, 1, "", "SphericalHemiFusionDecoder"], [158, 0, 1, "", "SphericalHemiFusionEncoder"], [159, 0, 1, "", "SphericalUNet"], [160, 0, 1, "", "SphericalVAE"], [161, 0, 1, "", "SphericalVGG"], [162, 0, 1, "", "SphericalVGG11"], [163, 0, 1, "", "SphericalVGG11BN"], [164, 0, 1, "", "SphericalVGG13"], [165, 0, 1, "", "SphericalVGG13BN"], [166, 0, 1, "", "SphericalVGG16"], [167, 0, 1, "", "SphericalVGG16BN"], [168, 0, 1, "", "SphericalVGG19"], [169, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[142, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[143, 1, 1, "", "forward"]], "surfify.models.SiT": [[144, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[145, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[146, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[147, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[148, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[157, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[158, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[159, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[160, 1, 1, "", "decode"], [160, 1, 1, "", "encode"], [160, 1, 1, "", "forward"], [160, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[161, 1, 1, "", "forward"]], "surfify.models.base": [[170, 0, 1, "", "Ico"], [171, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[170, 3, 1, "", "conv_neighbor_indices"], [170, 3, 1, "", "down_indices"], [170, 3, 1, "", "neighbor_indices"], [170, 3, 1, "", "order"], [170, 3, 1, "", "triangles"], [170, 3, 1, "", "up_indices"], [170, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[171, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[172, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[172, 1, 1, "", "forward"]], "surfify.models.sit": [[173, 0, 1, "", "Attention"], [174, 0, 1, "", "FeedForward"], [175, 0, 1, "", "SiT"], [176, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[173, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[174, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[175, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[176, 1, 1, "", "forward"]], "surfify.models.unet": [[177, 0, 1, "", "DownBlock"], [178, 0, 1, "", "DownGBlock"], [179, 0, 1, "", "GraphicalUNet"], [180, 0, 1, "", "SphericalGUNet"], [181, 0, 1, "", "SphericalUNet"], [182, 0, 1, "", "UpBlock"], [183, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[177, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[178, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[179, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[180, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[181, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[182, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[183, 1, 1, "", "forward"]], "surfify.models.vae": [[184, 0, 1, "", "HemiFusionDecoder"], [185, 0, 1, "", "HemiFusionEncoder"], [186, 0, 1, "", "SphericalHemiFusionDecoder"], [187, 0, 1, "", "SphericalHemiFusionEncoder"], [188, 0, 1, "", "SphericalVAE"], [189, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[184, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[185, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[186, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[187, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[188, 1, 1, "", "decode"], [188, 1, 1, "", "encode"], [188, 1, 1, "", "forward"], [188, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[190, 0, 1, "", "SphericalGVGG"], [191, 0, 1, "", "SphericalGVGG11"], [192, 0, 1, "", "SphericalGVGG11BN"], [193, 0, 1, "", "SphericalGVGG13"], [194, 0, 1, "", "SphericalGVGG13BN"], [195, 0, 1, "", "SphericalGVGG16"], [196, 0, 1, "", "SphericalGVGG16BN"], [197, 0, 1, "", "SphericalGVGG19"], [198, 0, 1, "", "SphericalGVGG19BN"], [199, 0, 1, "", "SphericalVGG"], [200, 0, 1, "", "SphericalVGG11"], [201, 0, 1, "", "SphericalVGG11BN"], [202, 0, 1, "", "SphericalVGG13"], [203, 0, 1, "", "SphericalVGG13BN"], [204, 0, 1, "", "SphericalVGG16"], [205, 0, 1, "", "SphericalVGG16BN"], [206, 0, 1, "", "SphericalVGG19"], [207, 0, 1, "", "SphericalVGG19BN"], [208, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[190, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[199, 1, 1, "", "forward"]], "surfify.nn": [[210, 0, 1, "", "IcoDiNeConv"], [211, 0, 1, "", "IcoFixIndexUpSample"], [212, 0, 1, "", "IcoGenericUpConv"], [213, 0, 1, "", "IcoMaxIndexUpSample"], [214, 0, 1, "", "IcoPool"], [215, 0, 1, "", "IcoRePaConv"], [216, 0, 1, "", "IcoSpMaConv"], [217, 0, 1, "", "IcoSpMaConvTranspose"], [218, 0, 1, "", "IcoUpConv"], [219, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[210, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[211, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[212, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[213, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[214, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[215, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[216, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[217, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[218, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[219, 1, 1, "", "forward"]], "surfify.nn.functional": [[220, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[221, 0, 1, "", "IcoDiNeConv"], [222, 0, 1, "", "IcoFixIndexUpSample"], [223, 0, 1, "", "IcoGenericUpConv"], [224, 0, 1, "", "IcoMaxIndexUpSample"], [225, 0, 1, "", "IcoPool"], [226, 0, 1, "", "IcoRePaConv"], [227, 0, 1, "", "IcoSpMaConv"], [228, 0, 1, "", "IcoSpMaConvTranspose"], [229, 0, 1, "", "IcoUpConv"], [230, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[221, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[222, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[223, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[224, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[225, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[226, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[227, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[228, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[229, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[230, 1, 1, "", "forward"]], "surfify.plotting": [[232, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[233, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[234, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[234, 1, 1, "", "fit"], [234, 1, 1, "", "get_metadata_routing"], [234, 1, 1, "", "inverse_transform"], [234, 1, 1, "", "set_inverse_transform_request"], [234, 1, 1, "", "set_partial_fit_request"], [234, 1, 1, "", "set_transform_request"], [234, 1, 1, "", "transform"]], "surfify.transforms": [[235, 0, 1, "", "RandomCompose"]], "surfify.utils": [[237, 2, 1, "", "cart2sph"], [245, 2, 1, "", "debug_msg"], [246, 2, 1, "", "downsample"], [247, 2, 1, "", "downsample_data"], [248, 2, 1, "", "downsample_ico"], [249, 2, 1, "", "find_neighbors"], [250, 2, 1, "", "find_rotation_interpol_coefs"], [251, 2, 1, "", "get_logger"], [252, 2, 1, "", "get_rectangular_projection"], [253, 2, 1, "", "grid2text"], [254, 2, 1, "", "ico2ico"], [255, 2, 1, "", "icosahedron"], [256, 2, 1, "", "interpolate"], [257, 2, 1, "", "interpolate_data"], [268, 2, 1, "", "min_depth_to_get_n_neighbors"], [269, 2, 1, "", "neighbors"], [270, 2, 1, "", "neighbors_rec"], [271, 2, 1, "", "number_of_ico_vertices"], [272, 2, 1, "", "number_of_neighbors"], [273, 2, 1, "", "order_of_ico_from_vertices"], [274, 2, 1, "", "order_triangles"], [275, 2, 1, "", "patch_tri"], [276, 2, 1, "", "rotate_data"], [303, 2, 1, "", "setup_logging"], [304, 2, 1, "", "sph2cart"], [305, 2, 1, "", "text2grid"], [306, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[238, 2, 1, "", "cart2sph"], [239, 2, 1, "", "find_corresponding_order"], [240, 2, 1, "", "grid2text"], [241, 2, 1, "", "ico2ico"], [242, 2, 1, "", "sph2cart"], [243, 2, 1, "", "text2grid"], [244, 2, 1, "", "text2ico"]], "surfify.utils.io": [[258, 0, 1, "", "HidePrints"], [259, 2, 1, "", "compute_and_store"], [260, 2, 1, "", "decompose_cifti"], [261, 2, 1, "", "read_freesurfer"], [262, 2, 1, "", "read_gifti"], [263, 2, 1, "", "surf_data_from_cifti"], [264, 2, 1, "", "ungzip"], [265, 2, 1, "", "volume_from_cifti"], [266, 2, 1, "", "write_freesurfer"], [267, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[277, 2, 1, "", "_patch_tri_iter"], [278, 2, 1, "", "build_freesurfer_ico"], [279, 2, 1, "", "build_fslr_ref"], [280, 2, 1, "", "downsample"], [281, 2, 1, "", "downsample_data"], [282, 2, 1, "", "downsample_ico"], [283, 2, 1, "", "find_neighbors"], [284, 2, 1, "", "find_rotation_interpol_coefs"], [285, 2, 1, "", "get_angle_with_xaxis"], [286, 2, 1, "", "get_rectangular_projection"], [287, 2, 1, "", "icosahedron"], [288, 2, 1, "", "interpolate"], [289, 2, 1, "", "interpolate_data"], [290, 2, 1, "", "middle_point"], [291, 2, 1, "", "min_depth_to_get_n_neighbors"], [292, 2, 1, "", "neighbors"], [293, 2, 1, "", "neighbors_rec"], [294, 2, 1, "", "normalize"], [295, 2, 1, "", "number_of_ico_vertices"], [296, 2, 1, "", "number_of_neighbors"], [297, 2, 1, "", "order_of_ico_from_vertices"], [298, 2, 1, "", "order_triangles"], [299, 2, 1, "", "patch_tri"], [300, 2, 1, "", "rotate_data"], [301, 2, 1, "", "triangles_to_edges"], [302, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 209], "comput": [1, 9, 308], "time": [1, 9, 308], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 35, 141], "setup": 2, "data": [2, 6], "augment": [2, 4, 103], "dataset": [2, 8, 15, 130], "train": [2, 8], "logist": 2, "regress": 2, "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 46, 102], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 231], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 141], "segment": 8, "inspect": 8, "model": [8, 141], "predict": 8, "label": 8, "api": [10, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101, 102, 103, 130, 137, 141, 209, 231, 236], "document": [10, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101, 102, 103, 130, 137, 141, 209, 231, 236], "nidl": [10, 11, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "check_typ": 13, "base": [15, 21, 103, 141], "estim": [21, 32, 35], "linear": 32, "logistic_regress": 32, "exampl": [33, 34, 36, 37, 51, 69], "ssl": [35, 46], "loss": [43, 137], "infonc": 43, "util": [49, 103, 236], "bunch": 49, "color": 49, "valid": 49, "weight": 49, "volum": [70, 71], "backbon": 71, "alexnet3d": 71, "resnet3d": 71, "densenet3d": 71, "search": 101, "surfifi": [102, 103, 130, 137, 141, 209, 231, 236], "preprocess": 102, "mixup": 103, "_samples_gener": 130, "_gener": 130, "vae": [137, 141], "vgg": 141, "sit": 141, "nn": 209, "function": 209, "plot": 231, "coord": 236, "io": 236, "sampl": 236}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [308, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of nidl": [[10, "api-documentation-of-nidl"], [12, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[15, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[15, "nidl-datasets"]], "nidl.datasets.base": [[15, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[21, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[21, "nidl-estimators"]], "nidl.estimators.base": [[21, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[32, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[32, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[32, "nidl-estimators-linear-logistic-regression"]], "Examples": [[33, "examples"], [34, "examples"], [36, "examples"], [37, "examples"], [51, "examples"], [69, "examples"]], "API documentation of nidl.estimators.ssl": [[35, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[35, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[35, "id1"]], "API documentation of nidl.losses": [[43, "api-documentation-of-nidl-losses"]], "nidl.losses": [[43, "nidl-losses"]], "nidl.losses.infonce": [[43, "id1"]], "API documentation of nidl.transforms": [[46, "api-documentation-of-nidl-transforms"]], "nidl.transforms": [[46, "nidl-transforms"]], "nidl.transforms.ssl": [[46, "nidl-transforms-ssl"]], "API documentation of nidl.utils": [[49, "api-documentation-of-nidl-utils"]], "nidl.utils": [[49, "nidl-utils"]], "nidl.utils.bunch": [[49, "id1"]], "nidl.utils.color": [[49, "nidl-utils-color"]], "nidl.utils.validation": [[49, "nidl-utils-validation"]], "nidl.utils.weights": [[49, "id2"]], "API documentation of nidl.volume": [[70, "api-documentation-of-nidl-volume"]], "nidl.volume": [[70, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[71, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[71, "nidl-volume-backbones"]], "nidl.volume.backbones.alexnet3d": [[71, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[71, "nidl-volume-backbones-resnet3d"]], "nidl.volume.backbones.densenet3d": [[71, "nidl-volume-backbones-densenet3d"]], "Search in API documentation of nidl": [[101, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[102, "api-documentation-of-surfify"]], "surfify": [[102, "surfify"]], "surfify.transforms": [[102, "surfify-transforms"]], "surfify.preprocessing": [[102, "surfify-preprocessing"]], "API documentation of surfify.augmentation": [[103, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[103, "surfify-augmentation"]], "surfify.augmentation.base": [[103, "surfify-augmentation-base"]], "surfify.augmentation.mixup": [[103, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[103, "surfify-augmentation-utils"]], "API documentation of surfify.datasets": [[130, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[130, "surfify-datasets"]], "surfify.datasets._samples_generator": [[130, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[130, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[137, "api-documentation-of-surfify-losses"]], "surfify.losses": [[137, "surfify-losses"]], "surfify.losses.vae": [[137, "surfify-losses-vae"]], "API documentation of surfify.models": [[141, "api-documentation-of-surfify-models"]], "surfify.models": [[141, "surfify-models"]], "surfify.models.base": [[141, "surfify-models-base"]], "surfify.models.vae": [[141, "surfify-models-vae"]], "surfify.models.vgg": [[141, "surfify-models-vgg"]], "surfify.models.sit": [[141, "id1"]], "surfify.models.simclr": [[141, "id2"]], "surfify.models.unet": [[141, "surfify-models-unet"]], "API documentation of surfify.nn": [[209, "api-documentation-of-surfify-nn"]], "surfify.nn": [[209, "surfify-nn"]], "surfify.nn.functional": [[209, "surfify-nn-functional"]], "surfify.nn.modules": [[209, "surfify-nn-modules"]], "API documentation of surfify.plotting": [[231, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[231, "surfify-plotting"]], "surfify.plotting.surface": [[231, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[236, "api-documentation-of-surfify-utils"]], "surfify.utils": [[236, "surfify-utils"]], "surfify.utils.coord": [[236, "surfify-utils-coord"]], "surfify.utils.io": [[236, "surfify-utils-io"]], "surfify.utils.sampling": [[236, "surfify-utils-sampling"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks.check_typing)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "baseimagedataset (class in nidl.datasets)": [[16, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[16, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[16, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[17, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[17, "nidl.datasets.BaseNumpyDataset.get_data"]], "basedataset (class in nidl.datasets.base)": [[18, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[19, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[19, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[19, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[20, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[20, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "baseestimator (class in nidl.estimators)": [[22, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[22, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[23, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[24, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[25, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[26, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[27, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[27, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[28, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[29, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[30, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[31, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[33, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[36, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[37, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[38, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[39, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[40, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[41, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[42, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[44, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[44, "nidl.losses.InfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[45, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[45, "nidl.losses.infonce.InfoNCE.forward"]], "contrastivetransforms (class in nidl.transforms)": [[47, "nidl.transforms.ContrastiveTransforms"]], "contrastivetransforms (class in nidl.transforms.ssl)": [[48, "nidl.transforms.ssl.ContrastiveTransforms"]], "bunch (class in nidl.utils)": [[50, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[51, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[51, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[52, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[53, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[54, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[55, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[56, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[57, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[58, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[59, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[60, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[61, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[62, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[63, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[64, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[65, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[66, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[67, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[68, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[69, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[69, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[72, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[72, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[73, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[73, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[74, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[74, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[75, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[75, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[76, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[76, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[77, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[78, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[78, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[79, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[79, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[80, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[80, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[81, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[82, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[83, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[84, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[85, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[86, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[87, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[87, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[88, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[88, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[89, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[89, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[90, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[90, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[91, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[92, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[93, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[94, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[95, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[96, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[97, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[98, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[99, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[100, "nidl.volume.backbones.resnet50_trunc"]], "basetransformer (class in surfify.augmentation)": [[104, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[104, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[105, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[105, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[105, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[106, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[106, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[107, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[107, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[108, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[108, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[109, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[109, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[110, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[110, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[111, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[112, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[113, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[113, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[114, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[114, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[115, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[115, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[116, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[116, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[117, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[118, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[118, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[118, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[119, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[119, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[120, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[120, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[121, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[122, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[122, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[123, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[124, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[124, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[124, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[124, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[125, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[126, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[127, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[128, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[129, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[131, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[132, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[133, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[134, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[135, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[136, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[138, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[139, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[140, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[142, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[142, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[143, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[143, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[144, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[144, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[145, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[145, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[146, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[146, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[147, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[147, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[148, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[148, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[149, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[150, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[151, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[152, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[153, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[154, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[155, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[156, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[157, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[157, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[158, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[158, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[159, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[159, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[160, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[160, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[160, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[160, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[160, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[161, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[161, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[162, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[163, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[164, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[165, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[166, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[167, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[168, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[169, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[170, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[170, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[171, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[171, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[172, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[172, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[173, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[173, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[174, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[174, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[175, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[175, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[176, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[176, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[177, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[177, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[178, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[178, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[179, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[179, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[180, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[180, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[181, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[181, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[182, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[182, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[183, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[183, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[184, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[184, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[185, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[185, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[186, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[186, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[187, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[187, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[188, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[188, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[188, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[188, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[188, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[189, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[190, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[190, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[191, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[192, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[193, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[194, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[195, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[196, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[197, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[198, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[199, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[199, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[200, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[201, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[202, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[203, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[204, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[205, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[206, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[207, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[208, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[210, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[210, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[211, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[211, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[212, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[212, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[213, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[213, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[214, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[214, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[215, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[215, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[216, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[216, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[217, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[217, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[218, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[218, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[219, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[219, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[220, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[221, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[221, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[222, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[222, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[223, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[223, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[224, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[224, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[225, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[225, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[226, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[226, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[227, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[227, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[228, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[228, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[229, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[229, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[230, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[230, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[232, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[233, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[234, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[234, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[235, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[237, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[238, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[239, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[240, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[241, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[242, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[243, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[244, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[245, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[246, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[247, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[248, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[249, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[250, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[251, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[252, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[253, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[254, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[255, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[256, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[257, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[258, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[259, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[260, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[261, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[262, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[263, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[264, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[265, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[266, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[267, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[268, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[269, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[270, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[271, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[272, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[273, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[274, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[275, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[276, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[277, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[278, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[279, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[280, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[281, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[282, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[283, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[284, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[285, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[286, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[287, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[288, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[289, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[290, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[291, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[292, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[293, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[294, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[295, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[296, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[297, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[298, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[299, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[300, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[301, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[302, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[303, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[304, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[305, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[306, "surfify.utils.text2ico"]]}})
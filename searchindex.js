Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/openbhb", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "auto_gallery/yaware_openbhb", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.ImageDataFrameDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset", "generated/nidl.datasets.pandas_dataset.default_image_loader", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/openbhb.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "auto_gallery/yaware_openbhb.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.ImageDataFrameDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset.rst", "generated/nidl.datasets.pandas_dataset.default_image_loader.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Presentation of the OpenBHB dataset and baseline models for age and sex predictions", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "Weakly Supervised Contrastive Learning with y-Aware", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 2, 12, 20, 26, 40, 45, 51, 52, 53, 54, 55, 56, 58, 61, 64, 72, 75, 91, 105, 107, 109, 159, 161, 214, 245, 304, 378], "supervis": [0, 2, 12, 31, 32, 36, 37, 51, 52, 53, 54, 55, 56, 58, 61, 64, 87, 91, 109, 378], "contrast": [0, 2, 32, 36, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 73, 77, 87, 91, 109, 159, 161, 202, 203, 215, 242, 378], "learn": [0, 2, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 32, 36, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 73, 77, 78, 87, 91, 109, 112, 113, 116, 118, 159, 161, 211, 215, 230, 242, 258, 280, 291, 377, 378], "simclr": [0, 2, 12, 51, 52, 54, 56, 59, 60, 62, 63, 91, 109, 171, 215, 242, 378], "weakli": [0, 2, 32, 36, 55, 64, 87, 378], "y": [0, 1, 2, 7, 9, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 55, 64, 73, 77, 87, 149, 150, 153, 154, 205, 206, 304, 307, 308, 310, 312, 313, 314, 317, 323, 326, 327, 346, 351, 358, 359, 370, 374, 375, 376, 378], "awar": [0, 2, 32, 36, 55, 64, 73, 77, 87, 378], "present": [0, 2, 32, 36, 55, 64, 91, 108, 109, 378], "openbhb": [0, 2, 12, 32, 36, 171, 378], "dataset": [0, 2, 7, 12, 17, 18, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 65, 171, 201, 202, 203, 204, 205, 206, 301, 313, 314, 317, 326, 327, 346, 351, 358, 359, 370, 375, 376, 378], "baselin": [0, 2, 32, 36, 378], "model": [0, 2, 3, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 32, 36, 40, 45, 51, 52, 54, 55, 56, 64, 65, 89, 91, 109, 114, 115, 117, 124, 129, 130, 171, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 378], "ag": [0, 2, 11, 31, 32, 36, 37, 378], "sex": [0, 2, 32, 36, 378], "predict": [0, 2, 3, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 36, 40, 45, 51, 52, 54, 56, 58, 61, 82, 83, 214, 218, 231, 245, 260, 269, 378], "neighbor": [0, 4, 5, 10, 11, 12, 17, 18, 23, 24, 165, 166, 168, 169, 171, 175, 177, 178, 183, 184, 188, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 252, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 288, 291, 293, 294, 295, 296, 299, 306, 310, 313, 316, 319, 320, 323, 326, 338, 339, 340, 342, 346, 350, 353, 354, 358, 361, 362, 363, 366, 370, 372, 375, 378], "unet": [0, 4, 10, 12, 171, 217, 229, 247, 248, 249, 250, 251, 252, 253, 378], "segment": [0, 1, 4, 10, 114, 115, 129, 130, 159, 161, 378], "project": [0, 1, 4, 5, 6, 8, 10, 11, 13, 29, 34, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 180, 186, 214, 245, 311, 314, 316, 319, 322, 324, 325, 339, 340, 345, 350, 353, 355, 356, 357, 360, 362, 363, 369, 376, 378], "textur": [0, 4, 5, 10, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 212, 213, 218, 227, 228, 230, 231, 254, 255, 256, 257, 258, 260, 269, 302, 303, 310, 313, 314, 317, 323, 326, 327, 346, 351, 358, 359, 370, 375, 376, 378], "icosahedron": [0, 4, 5, 7, 8, 9, 10, 12, 171, 177, 178, 180, 183, 184, 186, 201, 204, 205, 206, 211, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 251, 252, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 310, 311, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 375, 376, 378], "match": [0, 4, 10, 30, 35, 164, 166, 167, 169, 309, 314, 376, 378], "augment": [0, 4, 10, 12, 29, 30, 33, 34, 35, 51, 52, 54, 55, 56, 64, 65, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166, 168, 169, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 378], "download": [0, 1, 3, 5, 6, 7, 8, 9, 11, 32, 36, 89, 91, 109], "all": [0, 1, 3, 6, 17, 18, 19, 20, 23, 24, 25, 26, 29, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 58, 61, 64, 76, 81, 82, 83, 84, 85, 87, 88, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 151, 155, 164, 167, 215, 217, 229, 242, 243, 244, 246, 249, 250, 251, 285, 286, 287, 296, 297, 298, 378], "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 20, 26, 31, 37, 40, 45, 58, 61, 84, 85, 90, 92, 107, 152, 156, 159, 161, 165, 168, 216, 218, 229, 230, 231, 241, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 375, 376, 378], "python": [0, 1, 3, 5, 6, 7, 8, 9, 11, 12, 14, 105], "sourc": [0, 1, 3, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 230, 231, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 269, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "code": [0, 1, 3, 5, 6, 7, 8, 9, 11, 16, 22, 54, 56, 65, 68, 102, 103], "auto_gallery_python": 0, "zip": [0, 1, 3, 5, 6, 7, 8, 9, 11, 334], "jupyt": [0, 1, 3, 5, 6, 7, 8, 9, 11], "notebook": [0, 1, 3, 5, 6, 7, 8, 9, 11], "auto_gallery_jupyt": 0, "galleri": [0, 1, 3, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378], "gener": [0, 1, 3, 5, 6, 7, 8, 9, 11, 12, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 32, 34, 36, 40, 45, 51, 52, 54, 55, 56, 64, 87, 88, 149, 151, 153, 155, 190, 200, 201, 204, 205, 206, 211, 313, 319, 334, 336, 337, 348, 349, 353, 375], "sphinx": [0, 1, 3, 5, 6, 7, 8, 9, 11], "go": [1, 3, 5, 6, 7, 8, 9, 11], "end": [1, 3, 5, 6, 7, 8, 9, 11, 20, 26, 40, 45, 51, 52, 55, 64, 102, 103, 108], "full": [1, 3, 5, 6, 7, 8, 9, 11, 12, 40, 45, 82, 83, 165, 166, 168, 169, 318, 352], "thi": [1, 3, 6, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "introduc": 1, "1": [1, 3, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 92, 107, 112, 113, 114, 115, 116, 118, 127, 128, 129, 130, 133, 134, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 165, 166, 168, 169, 174, 175, 178, 184, 188, 192, 193, 194, 201, 204, 205, 206, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 247, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288, 291, 293, 294, 295, 297, 298, 299, 302, 303, 304, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 348, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 372, 375, 376, 378], "larg": [1, 3, 32, 36, 304], "scale": [1, 3, 7, 9, 11, 19, 25, 32, 36, 40, 45, 51, 52, 71, 72, 73, 74, 75, 77, 149, 151, 153, 155, 159, 160, 161, 162, 172, 201, 204, 205, 206, 304, 313, 314, 317, 322, 326, 327, 340, 346, 351, 356, 358, 359, 363, 370, 375, 376], "multi": [1, 11, 32, 36, 40, 45, 51, 52, 54, 56, 87, 191, 199, 214, 245], "site": [1, 6, 32, 36], "mri": [1, 11, 32, 36, 55, 60, 63, 64, 73, 77, 159, 161], "It": [1, 3, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "i": [1, 3, 6, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "design": [1, 40, 45, 65], "perform": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 64, 76, 108, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 175, 188, 215, 242, 243, 244, 246, 249, 284, 285, 286, 287, 295, 296, 297, 298, 304], "benchmark": [1, 3], "deep": [1, 12, 14, 54, 55, 56, 64, 159, 161, 377], "neuroimag": [1, 11, 12, 14, 29, 30, 32, 33, 34, 35, 36, 202, 203, 230, 258], "data": [1, 5, 9, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 60, 63, 64, 65, 72, 73, 75, 77, 79, 80, 81, 82, 83, 86, 87, 88, 91, 109, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 195, 196, 197, 198, 199, 200, 202, 203, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304, 310, 313, 316, 317, 323, 326, 327, 329, 330, 333, 335, 346, 348, 349, 350, 351, 358, 359, 370, 375], "we": [1, 3, 6, 7, 9, 11, 32, 36, 51, 52, 54, 55, 56, 64, 72, 75, 106, 149, 151, 153, 155, 278, 290, 333, 335], "demonstr": 1, "how": [1, 3, 5, 6, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "us": [1, 3, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "two": [1, 3, 6, 11, 32, 36, 51, 52, 54, 55, 56, 58, 61, 64, 73, 77, 144, 145, 146, 147, 309, 311, 324, 339, 362], "import": [1, 3, 5, 6, 7, 8, 9, 11, 31, 37, 65, 67, 68, 84, 85, 90, 92, 107, 152, 156, 159, 161, 165, 168, 200, 216, 218, 229, 230, 231, 241, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 375, 376], "task": [1, 3, 11, 31, 37, 51, 52, 54, 56, 79, 80, 114, 115, 129, 130], "These": [1, 32, 36, 55, 64], "serv": [1, 54, 56], "simpl": [1, 3, 5, 6, 8, 9, 11, 54, 56, 58, 59, 60, 61, 62, 63, 112, 116, 149, 151, 153, 155, 215, 242, 311, 324, 372], "entri": 1, "point": [1, 6, 8, 11, 80, 81, 84, 85, 316, 319, 322, 326, 339, 340, 345, 350, 353, 355, 356, 358, 360, 362, 363, 369], "evalu": [1, 3, 7, 72, 75, 290], "potenti": [1, 152, 156, 372], "bia": [1, 3, 58, 61, 280, 291], "across": [1, 17, 19, 23, 25, 32, 36, 40, 45, 84, 85, 144, 146, 149, 151, 153, 155, 164, 167, 175, 176, 188, 189, 214, 245], "dufumi": [1, 11, 32, 36, 55, 60, 63, 64, 73, 77], "et": [1, 3, 11, 55, 59, 60, 62, 63, 64, 71, 73, 74, 77, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 159, 161, 165, 166, 168, 169, 214, 217, 229, 245, 250, 251], "al": [1, 3, 11, 55, 59, 60, 62, 63, 64, 71, 73, 74, 77, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 159, 161, 165, 166, 168, 169, 214, 217, 229, 245, 250, 251], "debias": [1, 32, 36], "2022": [1, 32, 36, 73, 77, 214, 245], "http": [1, 3, 13, 17, 18, 19, 21, 23, 24, 25, 27, 32, 36, 55, 59, 60, 62, 63, 64, 71, 73, 74, 77, 81, 105, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 149, 153, 211, 333, 335], "www": 1, "sciencedirect": 1, "com": [1, 13, 211], "scienc": 1, "articl": 1, "pii": 1, "s1053811922007522": 1, "first": [1, 3, 6, 7, 9, 11, 32, 36, 54, 55, 56, 58, 61, 64, 71, 73, 74, 77, 82, 83, 113, 114, 115, 118, 129, 130, 212, 214, 217, 229, 245, 247, 248, 250, 251, 254, 346, 370], "need": [1, 3, 6, 7, 40, 45, 55, 64, 65, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 290, 296, 297, 298], "run": [1, 3, 5, 6, 7, 8, 9, 11, 17, 18, 19, 20, 23, 24, 25, 26, 55, 64, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 345, 369], "matplotlib": [1, 3, 5, 6, 7, 8, 9, 11, 302, 303, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "pyplot": [1, 3, 5, 6, 7, 8, 9, 11, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "plt": [1, 3, 5, 6, 7, 8, 9, 11, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "nibabel": [1, 31, 32, 36, 37, 150, 152, 154, 156, 165, 168, 202, 203, 333, 335], "numpi": [1, 5, 6, 7, 9, 11, 20, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 55, 64, 78, 88, 159, 161, 164, 165, 167, 168, 170, 304, 307, 308, 312, 374], "np": [1, 5, 6, 7, 9, 11, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 310, 323, 326, 358], "panda": [1, 29, 30, 31, 33, 34, 35, 37, 175, 188, 202, 203], "pd": [1, 31, 37], "seaborn": 1, "sn": 1, "nilearn": 1, "sklearn": [1, 11, 304], "linear_model": [1, 11], "logisticregress": [1, 3, 12, 19, 25, 50, 51, 52, 171], "metric": [1, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 64, 79, 80, 81, 82, 83, 84, 85, 171, 175, 188], "accuracy_scor": 1, "r2_score": [1, 11, 79, 80], "pipelin": [1, 304], "make_pipelin": 1, "preprocess": [1, 11, 12, 32, 36, 88, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 304], "standardscal": [1, 12, 171, 172, 304], "nidl": [1, 3, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 377], "contain": [1, 3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 90, 92, 202, 203, 216, 241, 259, 302, 303, 329, 345, 369], "6": [1, 3, 5, 11, 32, 36, 55, 64, 84, 85, 90, 92, 230, 231, 240, 258, 269, 339, 345, 362, 369], "healthi": [1, 32, 36], "subject": [1, 11, 29, 30, 33, 34, 35, 175, 176, 188, 189, 202, 203, 304], "anatom": [1, 150, 152, 154, 156], "n_": 1, "train": [1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 40, 45, 51, 52, 54, 55, 56, 64, 65, 151, 155, 165, 166, 168, 169, 173, 202, 203], "3227": [1, 32, 36], "val": [1, 11, 20, 26, 32, 36, 40, 45], "757": [1, 32, 36], "valid": [1, 3, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 69, 88, 105, 106, 107, 108, 171], "demograph": 1, "inform": [1, 3, 11, 29, 30, 33, 34, 35, 65, 73, 77, 202, 203, 211, 216, 241], "about": [1, 3, 65, 346, 370], "ar": [1, 3, 6, 7, 9, 11, 16, 19, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 66, 81, 82, 83, 87, 88, 90, 92, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 159, 161, 165, 166, 168, 169, 173, 202, 203, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 290, 304, 309, 313, 326, 339, 346, 348, 358, 362, 370, 372, 375], "avail": [1, 3, 11, 32, 36, 40, 45, 51, 52, 55, 64, 65, 84, 85, 91, 107, 109, 151, 155, 165, 166, 168, 169], "along": [1, 32, 36, 150, 154, 304, 309], "detail": [1, 12, 17, 19, 23, 25, 54, 56, 71, 74, 88, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 151, 155], "acquisit": 1, "magnet": 1, "field": [1, 177, 183, 193, 194, 240], "strength": [1, 18, 19, 21, 24, 25, 27], "set": [1, 3, 6, 11, 17, 18, 23, 24, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 64, 65, 69, 72, 73, 75, 77, 82, 83, 87, 93, 159, 161, 164, 166, 167, 169, 178, 180, 184, 186, 200, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 248, 249, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 305, 316, 326, 330, 350, 358], "root": [1, 3, 13, 18, 21, 24, 27, 29, 30, 32, 33, 34, 35, 36, 84, 85, 202, 203], "tmp": [1, 3, 11], "quasiraw": [1, 32, 36], "vbm_roi": [1, 11, 32, 36], "fs_desikan_roi": [1, 11, 32, 36], "fs_destrieux_roi": [1, 32, 36], "fs_xhemi": [1, 32, 36], "target": [1, 11, 17, 18, 19, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 79, 80, 84, 85, 159, 161, 164, 165, 166, 167, 168, 169, 202, 203, 311, 314, 324, 376], "let": [1, 3, 11], "": [1, 3, 6, 8, 11, 20, 26, 31, 32, 36, 37, 40, 45, 55, 64, 72, 75, 82, 83, 108, 149, 153, 165, 168, 176, 177, 178, 180, 183, 184, 186, 189, 201, 204, 205, 206, 212, 213, 217, 227, 228, 229, 247, 250, 251, 252, 254, 255, 256, 257, 280, 291, 316, 319, 329, 339, 340, 344, 345, 350, 353, 362, 363, 368, 369], "take": [1, 3, 31, 32, 36, 37, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 259, 285, 286, 287, 296, 297, 298], "look": [1, 3, 11, 319, 353], "ll": 1, "differ": [1, 3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 54, 55, 56, 64, 65, 165, 168, 178, 184, 202, 203, 216, 217, 229, 241, 250, 251], "grai": [1, 8, 11, 32, 36], "matter": [1, 11, 32, 36], "densiti": [1, 7, 11, 72, 75, 322, 340, 356, 363], "map": [1, 3, 6, 7, 11, 30, 32, 35, 36, 40, 45, 51, 52, 54, 55, 56, 60, 63, 64, 114, 115, 129, 130, 165, 166, 168, 169, 286, 287, 290, 297, 298, 302, 303, 311, 324, 345, 369], "comput": [1, 6, 20, 21, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 71, 72, 73, 74, 75, 76, 77, 81, 84, 85, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 159, 160, 161, 162, 210, 215, 242, 243, 244, 246, 249, 259, 285, 286, 287, 296, 297, 298, 304, 320, 329, 346, 354, 355, 370], "cat12": [1, 32, 36], "toolbox": 1, "involv": 1, "tissu": [1, 32, 36], "normal": [1, 3, 12, 40, 45, 51, 52, 55, 58, 61, 64, 71, 72, 74, 75, 114, 115, 129, 130, 149, 153, 159, 160, 161, 162, 171, 172, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304, 306, 355, 364], "mni": 1, "space": [1, 3, 7, 11, 32, 36, 54, 55, 56, 60, 63, 64, 112, 113, 114, 115, 116, 118, 129, 130, 150, 154, 165, 166, 168, 169, 212, 213, 214, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 251, 254, 255, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 322, 356], "modul": [1, 6, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 73, 74, 76, 77, 88, 91, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 131, 132, 171, 172, 173, 177, 183, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 230, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "result": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 82, 83, 84, 85, 98, 105, 165, 166, 168, 169, 278, 328], "wise": [1, 174, 192, 229, 251], "reflect": [1, 11, 164, 167], "local": [1, 3, 32, 36, 65, 69, 91, 109], "volum": [1, 11, 12, 32, 36, 55, 64, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 330, 335, 377], "t1": [1, 32, 36], "weight": [1, 3, 12, 17, 19, 23, 25, 32, 36, 51, 52, 54, 55, 56, 64, 65, 72, 73, 75, 77, 79, 80, 82, 83, 84, 85, 91, 109, 171, 175, 188, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 320, 326, 340, 346, 354, 358, 363, 370], "scan": [1, 11, 32, 36, 159, 161], "have": [1, 3, 6, 7, 11, 16, 22, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 145, 147, 160, 162, 329, 339, 362], "been": [1, 3, 32, 36, 40, 45, 51, 52, 54, 55, 56, 64], "basic": [1, 20, 26], "step": [1, 3, 9, 11, 20, 26, 40, 45, 51, 52, 54, 55, 56, 64, 217, 229, 250, 251], "like": [1, 3, 17, 18, 19, 23, 24, 25, 40, 45, 51, 52, 55, 64, 65, 79, 80, 82, 83, 84, 85, 114, 115, 129, 130, 249, 304, 305], "correct": [1, 9, 79, 80, 84, 85, 88], "skull": 1, "strip": 1, "without": [1, 11, 13, 54, 55, 56, 64, 150, 154, 159, 161, 334], "spatial": [1, 6, 12, 88, 114, 115, 129, 130, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 311, 324], "heavi": 1, "smooth": [1, 372], "The": [1, 3, 6, 11, 20, 26, 29, 31, 32, 34, 36, 37, 40, 45, 51, 52, 54, 55, 56, 59, 62, 64, 65, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 87, 88, 108, 145, 147, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 177, 179, 180, 183, 185, 186, 211, 212, 213, 214, 217, 227, 228, 229, 230, 245, 249, 250, 251, 254, 255, 256, 257, 258, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 304, 307, 308, 328, 329], "goal": 1, "retain": [1, 304], "much": [1, 3, 11, 113, 118], "origin": [1, 3, 7, 11, 151, 155, 159, 160, 161, 162, 165, 168, 173, 210, 304], "possibl": [1, 6, 11, 40, 45, 51, 52, 91, 109, 164, 167], "provid": [1, 3, 29, 30, 31, 33, 34, 35, 37, 40, 45, 54, 56, 144, 146, 150, 152, 154, 156, 165, 168, 180, 186, 202, 203, 279, 304, 320, 346, 354, 370, 377], "input": [1, 3, 9, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 67, 72, 73, 75, 77, 80, 81, 82, 83, 86, 87, 88, 91, 109, 112, 113, 114, 115, 116, 118, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 196, 198, 202, 203, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 304, 309, 310, 313, 314, 323, 329, 331, 332, 347, 375, 376], "close": [1, 3, 6, 11, 54, 55, 56, 64], "while": [1, 3, 6, 11, 40, 45, 51, 52, 54, 55, 56, 64, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 159, 161, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "still": [1, 3, 304], "being": [1, 3], "same": [1, 3, 6, 11, 32, 36, 40, 45, 54, 55, 56, 64, 65, 66, 73, 77, 79, 80, 84, 85, 86, 87, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 309, 311, 324, 329, 334, 339, 362], "physic": [1, 165, 166, 168, 169], "all_mod": 1, "info": [1, 164, 167, 373], "0": [1, 2, 3, 5, 6, 7, 8, 9, 11, 16, 21, 22, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 71, 72, 73, 74, 75, 77, 78, 82, 83, 84, 85, 88, 107, 114, 115, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 164, 165, 166, 167, 168, 169, 178, 180, 184, 186, 193, 194, 214, 230, 240, 243, 244, 245, 246, 249, 258, 281, 286, 287, 292, 297, 298, 302, 303, 309, 311, 314, 316, 319, 324, 339, 340, 344, 345, 346, 350, 353, 362, 363, 368, 369, 370, 372, 376, 378], "get": [1, 3, 20, 26, 31, 32, 36, 37, 165, 168, 304, 338, 341, 342, 343, 361, 365, 366, 367, 372], "img_vbm": 1, "select": [1, 40, 45, 65, 66, 80, 149, 153], "onli": [1, 3, 6, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "channel": [1, 29, 30, 33, 34, 35, 112, 113, 114, 115, 116, 118, 129, 130, 144, 146, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 174, 191, 192, 199, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300], "nii_img": 1, "nifti1imag": [1, 31, 32, 36, 37], "affin": [1, 150, 152, 154, 156, 165, 168], "ey": [1, 165, 168], "4": [1, 3, 5, 6, 8, 9, 10, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 55, 64, 72, 75, 84, 85, 113, 114, 115, 118, 129, 130, 150, 152, 154, 156, 165, 166, 168, 169, 229, 240, 251, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 309, 311, 314, 317, 318, 324, 327, 342, 351, 352, 359, 366, 372, 376, 378], "print": [1, 3, 5, 6, 7, 9, 31, 32, 36, 37, 84, 85, 89, 93, 107, 165, 168, 216, 218, 230, 231, 241, 258, 260, 269, 325, 338, 341, 342, 343, 344, 357, 361, 365, 366, 367, 368], "shape": [1, 3, 6, 7, 9, 11, 17, 18, 19, 23, 24, 25, 32, 36, 55, 64, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 218, 229, 230, 231, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 325, 326, 341, 357, 358, 365], "plot_anat": 1, "titl": [1, 3, 7, 99, 100], "f": [1, 3, 7, 11, 51, 52, 54, 56, 159, 161, 217, 229, 250, 251], "img_quasiraw": 1, "In": [1, 3, 11, 31, 37, 40, 45, 51, 52, 55, 64, 69, 72, 75, 88, 149, 150, 151, 152, 153, 154, 155, 156, 217, 229, 250, 251, 278], "onto": [1, 7, 11, 214, 245, 313, 314, 375, 376], "featur": [1, 3, 11, 12, 19, 20, 25, 26, 32, 36, 51, 52, 54, 55, 56, 60, 63, 64, 72, 73, 75, 77, 113, 114, 115, 118, 129, 130, 200, 217, 229, 247, 248, 249, 250, 251, 252, 253, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 304], "averag": [1, 11, 17, 18, 19, 21, 23, 24, 25, 27, 82, 83, 84, 85], "within": [1, 3, 11, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "each": [1, 3, 6, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 32, 34, 36, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 65, 84, 85, 113, 114, 115, 118, 129, 130, 149, 151, 152, 153, 155, 156, 159, 160, 161, 162, 164, 167, 175, 177, 178, 183, 184, 188, 191, 199, 201, 204, 205, 206, 210, 212, 213, 214, 216, 217, 227, 228, 229, 241, 245, 249, 250, 251, 254, 255, 256, 257, 304, 319, 320, 339, 340, 346, 353, 354, 362, 363, 370], "142": [1, 32, 36], "defin": [1, 3, 11, 29, 30, 31, 33, 34, 35, 37, 40, 45, 51, 52, 58, 59, 61, 62, 65, 66, 76, 82, 83, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 165, 168, 175, 188, 190, 193, 202, 203, 215, 217, 229, 242, 243, 244, 246, 249, 250, 251, 252, 253, 278, 285, 286, 287, 296, 297, 298, 302, 303, 305, 322, 325, 331, 332, 336, 337, 356, 357], "correspond": [1, 6, 17, 18, 20, 21, 23, 24, 26, 27, 32, 36, 55, 64, 79, 80, 150, 154, 175, 176, 188, 189, 309, 314, 341, 365, 376], "structur": [1, 3, 6, 40, 45, 84, 85], "extract": [1, 11, 20, 26, 31, 32, 36, 37, 54, 55, 56, 64, 334], "independ": 1, "hemispher": [1, 32, 36, 175, 176, 188, 189, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "show": [1, 3, 5, 6, 7, 8, 9, 11, 84, 85, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "millilit": 1, "ml": 1, "def": [1, 3, 5, 7, 11, 20, 26, 40, 45, 51, 52, 55, 64, 107], "map_roi_on_neuromorphometrics_atla": 1, "roi_valu": 1, "label": [1, 3, 7, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 51, 52, 54, 55, 56, 64, 73, 77, 150, 152, 154, 156, 165, 166, 168, 169, 205, 206, 302, 303], "valu": [1, 6, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 55, 64, 65, 72, 73, 75, 77, 79, 80, 84, 85, 88, 90, 92, 105, 107, 144, 145, 146, 147, 149, 153, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 177, 178, 183, 184, 202, 203, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 302, 303, 307, 308, 309, 326, 339, 358, 362], "atlas_data": 1, "get_fdata": 1, "atlas_label": 1, "brain_map": 1, "zeros_lik": 1, "idx_map": 1, "name": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 55, 64, 65, 68, 84, 85, 91, 108, 109, 212, 213, 227, 228, 254, 255, 256, 257, 278, 302, 303, 304, 315, 329], "index": [1, 29, 30, 34, 35, 40, 45, 51, 52, 54, 55, 56, 64, 84, 85, 150, 154, 177, 178, 183, 184, 316, 319, 339, 350, 353, 362, 371], "idx": [1, 3, 5, 8, 29, 30, 34, 35, 319, 339, 345, 353, 362, 369], "enumer": [1, 8, 9, 11, 316, 319, 339, 340, 345, 350, 353, 362, 363, 369], "return": [1, 3, 11, 20, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 45, 51, 52, 54, 55, 56, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 105, 107, 109, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 196, 197, 198, 199, 202, 203, 205, 206, 210, 212, 213, 214, 216, 218, 227, 228, 230, 231, 241, 245, 254, 255, 256, 257, 258, 259, 260, 269, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376], "2": [1, 3, 5, 6, 8, 9, 11, 17, 18, 20, 23, 24, 26, 55, 64, 65, 72, 73, 75, 77, 78, 82, 83, 84, 85, 90, 92, 107, 114, 115, 129, 130, 144, 146, 150, 154, 165, 168, 187, 193, 194, 197, 201, 204, 205, 206, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 308, 310, 311, 313, 314, 316, 317, 318, 319, 322, 323, 324, 326, 327, 338, 339, 340, 345, 350, 351, 352, 353, 356, 358, 359, 361, 362, 363, 369, 371, 375, 376], "clean": [1, 51, 52], "up": [1, 3, 20, 26, 216, 217, 229, 241, 250, 251, 309, 311, 319, 324, 342, 353, 366], "remov": [1, 29, 30, 32, 33, 34, 35, 36, 160, 162, 202, 203, 304], "_gm_vol": 1, "suffix": [1, 305], "replac": [1, 29, 30, 32, 33, 34, 35, 36, 69, 82, 83, 112, 114, 115, 116, 129, 130, 149, 153, 178, 184, 202, 203, 217, 229, 250, 251], "get_vbm_roi_label": [1, 32, 36], "3": [1, 2, 3, 5, 6, 8, 9, 20, 26, 55, 64, 65, 84, 85, 90, 92, 105, 113, 114, 115, 118, 129, 130, 144, 146, 149, 153, 165, 166, 168, 169, 177, 178, 180, 183, 184, 186, 201, 202, 203, 204, 205, 206, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 240, 241, 250, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 311, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 331, 332, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 375, 376], "get_neuromorphometrics_atla": [1, 32, 36], "5": [1, 3, 5, 7, 8, 9, 10, 11, 17, 18, 19, 21, 23, 24, 25, 27, 84, 85, 152, 156, 159, 161, 180, 186, 216, 217, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 249, 250, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 296, 322, 339, 340, 356, 362, 363, 378], "plot_stat_map": 1, "cmap": [1, 11], "plasma": 1, "appeal": 1, "sequenti": [1, 3, 51, 52, 58, 61, 120, 121, 339, 362], "colormap": [1, 302, 303], "draw_cross": 1, "fals": [1, 3, 5, 7, 8, 11, 20, 26, 32, 36, 40, 45, 51, 52, 55, 64, 82, 83, 84, 85, 91, 105, 107, 109, 113, 114, 115, 118, 119, 120, 129, 130, 149, 153, 202, 203, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 247, 248, 249, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 302, 303, 304, 311, 316, 318, 319, 324, 325, 326, 327, 328, 330, 333, 335, 339, 340, 344, 345, 346, 350, 352, 353, 357, 358, 359, 362, 363, 368, 369, 370, 371], "colorbar": [1, 5, 8, 11, 302, 303, 311, 316, 318, 319, 324, 325, 339, 340, 345, 350, 352, 353, 357, 362, 363, 369], "true": [1, 3, 5, 6, 7, 8, 9, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 55, 64, 79, 80, 84, 85, 91, 97, 102, 103, 104, 107, 109, 113, 118, 149, 153, 174, 191, 192, 199, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 288, 291, 293, 294, 295, 299, 302, 303, 304, 310, 311, 314, 317, 319, 323, 324, 339, 344, 351, 353, 362, 368, 376], "includ": [1, 3, 12, 18, 21, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 88, 200, 202, 203], "cortic": [1, 11, 32, 36, 175, 176, 180, 186, 188, 189, 190, 200, 207, 208, 209, 211, 212, 213, 214, 217, 218, 227, 228, 229, 230, 231, 245, 250, 251, 254, 255, 256, 257, 258, 260, 269], "thick": [1, 11, 32, 36], "area": [1, 11, 149, 151, 153, 155], "curvatur": [1, 11, 32, 36], "over": [1, 40, 45, 152, 156], "predefin": 1, "desikan": [1, 11, 32, 36], "killiani": [1, 11], "34": [1, 5, 32, 36, 84, 85], "per": [1, 3, 21, 27, 29, 31, 32, 34, 36, 37, 114, 115, 129, 130, 144, 146, 150, 154, 159, 160, 161, 162], "74": [1, 5, 32, 36, 84, 85], "exclud": [1, 32, 36], "medial": 1, "wall": 1, "repres": [1, 73, 77, 302, 303, 371, 372], "summari": [1, 84, 85], "geometri": [1, 88, 318, 326, 331, 332, 336, 337, 352, 358, 360], "morphologi": 1, "cortex": 1, "addit": [1, 17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 40, 45, 51, 52, 54, 55, 56, 64, 86, 87, 88, 149, 153, 217, 229, 250, 251, 280, 291], "xhemi": 1, "cross": [1, 17, 18, 19, 21, 23, 24, 25, 27, 65, 69, 71, 74, 286, 287, 297, 298], "163842": [1, 32, 36], "vertic": [1, 5, 6, 8, 32, 36, 175, 176, 177, 178, 180, 183, 184, 186, 188, 189, 201, 204, 205, 206, 214, 229, 240, 245, 251, 280, 281, 291, 292, 302, 303, 304, 310, 311, 313, 314, 316, 317, 318, 320, 323, 324, 325, 326, 327, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 354, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 375, 376], "which": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 32, 36, 40, 45, 51, 52, 54, 55, 56, 60, 63, 64, 73, 77, 108, 114, 115, 129, 130, 145, 147, 150, 154, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304, 309, 319, 346, 353, 370], "merg": 1, "homolog": 1, "both": [1, 6, 11, 32, 36, 40, 45, 58, 59, 60, 61, 62, 63, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 215, 242, 243, 244, 246, 287, 298, 339, 362], "allow": [1, 3, 6, 16, 22, 30, 35, 65, 66, 304, 329, 346, 370], "analysi": [1, 72, 75, 159, 161, 214, 245], "reduc": [1, 3, 11, 40, 45, 79, 114, 115, 129, 130, 175, 188, 214, 245, 317, 318, 320, 351, 352, 354], "asymmetri": 1, "improv": [1, 3, 11, 54, 56, 114, 115, 129, 130, 149, 153], "statist": [1, 72, 75, 149, 153, 160, 162], "power": 1, "combin": [1, 3, 175, 188], "left": [1, 7, 32, 36, 72, 73, 75, 77, 150, 152, 154, 156, 159, 161, 208, 209, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 330], "right": [1, 7, 32, 36, 72, 73, 75, 77, 150, 152, 154, 156, 159, 161, 208, 209, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 330], "follow": [1, 3, 11, 20, 26, 31, 32, 36, 37, 58, 60, 61, 63, 65, 72, 75, 81, 84, 85, 159, 160, 161, 162], "small": [1, 6, 11, 32, 36, 55, 64, 112, 116, 160, 162], "util": [1, 3, 5, 6, 7, 8, 9, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 55, 58, 59, 60, 61, 62, 63, 64, 79, 80, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 171, 177, 178, 180, 183, 184, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 229, 230, 231, 251, 258, 269, 279, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "function": [1, 3, 6, 7, 9, 12, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 45, 51, 52, 55, 59, 62, 64, 65, 66, 67, 68, 69, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 159, 160, 161, 162, 171, 173, 177, 178, 180, 182, 183, 184, 186, 187, 191, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 210, 211, 212, 213, 215, 217, 227, 228, 229, 242, 243, 244, 246, 249, 250, 251, 254, 255, 256, 257, 259, 278, 285, 286, 287, 290, 296, 297, 298, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "standard": [1, 3, 11, 73, 77, 144, 145, 146, 147, 160, 162, 177, 179, 183, 185, 216, 217, 229, 241, 250, 251, 304, 325, 328, 345, 357, 369], "fsaverage5": 1, "For": [1, 3, 11, 17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 40, 45, 51, 52, 108, 159, 161, 165, 166, 168, 169, 259, 339, 362], "higher": [1, 3, 40, 45], "resolut": [1, 3, 114, 115, 129, 130, 159, 161, 202, 203, 217, 229, 250, 251], "can": [1, 3, 6, 11, 20, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 60, 63, 64, 65, 72, 75, 88, 106, 145, 147, 149, 153, 160, 162, 174, 181, 192, 195, 202, 203, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 259, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 328, 329], "done": [1, 3, 40, 45, 329], "similarli": [1, 3], "requir": [1, 3, 11, 40, 45, 51, 52, 55, 64, 72, 75, 78, 152, 156], "mesh": [1, 32, 36, 325, 326, 339, 357, 358, 362, 372], "file": [1, 2, 10, 29, 30, 31, 32, 33, 34, 35, 36, 37, 65, 91, 109, 202, 203, 330, 331, 332, 334, 336, 337, 373, 377, 378], "start": [1, 3, 11, 20, 26, 114, 115, 129, 130, 178, 184, 319, 353], "map_freesurfer_destrieux_data": 1, "hemi": 1, "fsaverag": 1, "fetch_atlas_surf_destrieux": 1, "verbos": [1, 65], "fs_label": 1, "decod": [1, 40, 45, 51, 52, 212, 217, 227, 229, 230, 250, 251, 254, 256, 258], "utf": 1, "8": [1, 3, 5, 7, 9, 11, 32, 36, 40, 45, 51, 52, 84, 85, 160, 162, 165, 166, 168, 169, 229, 243, 251, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 378], "map_hemi": 1, "map_": 1, "vertex": [1, 175, 176, 177, 178, 183, 184, 188, 189, 229, 251, 339, 340, 346, 362, 363, 364, 370, 371, 372], "vertex_data": 1, "dtype": [1, 79, 81, 187, 193, 197, 310, 323], "float": [1, 3, 5, 9, 19, 21, 25, 27, 32, 36, 40, 45, 51, 52, 54, 55, 56, 64, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 192, 197, 208, 209, 214, 245, 249, 302, 303, 307, 308, 309, 312, 314, 374, 376], "roi_nam": 1, "surface_area": 1, "get_fs_roi_feature_nam": [1, 32, 36], "surface_area_mm": 1, "gray_matter_volume_mm": 1, "average_thickness_mm": 1, "integrated_rectified_mean_curvature_mm": 1, "get_fs_label": [1, 32, 36], "symmetr": [1, 32, 36, 72, 75, 82, 83, 164, 167], "fs_surfac": 1, "fs_volum": 1, "fs_thick": 1, "fs_curv": 1, "surface_vertex": 1, "volume_vertex": 1, "thickness_vertex": 1, "curv_vertex": 1, "prepar": [1, 3], "mm": [1, 165, 168], "gm": [1, 11, 32, 36], "mean": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 69, 84, 85, 145, 147, 149, 151, 153, 155, 160, 162, 164, 167, 214, 229, 245, 247, 251, 284, 295, 304, 326, 358], "fetch_surf_fsaverag": 1, "inflated_left": 1, "infl_left": 1, "sulc_left": 1, "fig": [1, 5, 6, 8, 11, 302, 303, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "ax": [1, 5, 6, 7, 8, 11, 150, 152, 154, 156, 287, 298, 302, 303, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "subplot": [1, 5, 6, 8, 11, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "figsiz": [1, 3, 5, 6, 7, 8, 11, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "12": [1, 5, 6, 11, 113, 118, 339, 362], "subplot_kw": [1, 5, 6, 8, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "3d": [1, 5, 6, 8, 11, 31, 32, 36, 37, 55, 60, 63, 64, 73, 77, 88, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 311, 316, 319, 322, 324, 325, 339, 340, 345, 350, 353, 356, 357, 362, 363, 369], "dat": 1, "plot_surf": 1, "surf_map": 1, "view": [1, 54, 55, 56, 64, 71, 73, 74, 77, 87, 344, 368], "later": [1, 304], "bg_map": 1, "figur": [1, 3, 7, 302, 303], "subplots_adjust": 1, "wspace": 1, "25": [1, 5, 9, 31, 37, 84, 85], "next": [1, 3, 6, 40, 45, 51, 52, 329], "more": [1, 3, 11, 17, 19, 23, 25, 29, 30, 31, 33, 34, 35, 37, 54, 55, 56, 64, 113, 118, 151, 155, 164, 167, 172, 202, 203, 377], "lh": [1, 32, 36], "curv": 1, "fold": [1, 17, 18, 19, 21, 23, 24, 25, 27], "pattern": [1, 3, 7, 29, 30, 33, 34, 35, 202, 203, 290], "arbitrari": [1, 149, 153], "unit": [1, 55, 64, 160, 162, 217, 229, 250, 251, 304, 322, 340, 356, 360, 363, 364], "neg": [1, 3], "sulci": 1, "posit": [1, 3, 40, 45, 72, 75, 87, 88], "gyri": 1, "sulc": 1, "sulcal": [1, 32, 36], "depth": [1, 8, 9, 32, 36, 115, 126, 130, 132, 136, 138, 140, 214, 217, 229, 245, 246, 249, 250, 251, 280, 282, 283, 284, 288, 291, 293, 294, 295, 299, 319, 338, 339, 342, 353, 361, 362, 366], "indic": [1, 3, 11, 32, 36, 40, 45, 55, 64, 82, 83, 150, 154, 175, 188, 247, 252, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 309, 317, 318, 319, 320, 326, 327, 339, 345, 351, 352, 353, 354, 358, 359, 362, 369, 371], "millimit": 1, "get_fs_xhemi_feature_nam": [1, 32, 36], "fs_sulc": 1, "9": [1, 3, 5, 6, 55, 64, 84, 85, 208, 209], "dark": 1, "now": [1, 3, 6, 9, 11, 114, 115, 129, 130, 159, 161, 259], "explor": [1, 3], "them": [1, 11, 20, 26, 55, 64, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 181, 195, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 304, 329, 372], "compar": [1, 3, 11], "three": [1, 149, 151, 153, 155, 320, 354], "represent": [1, 3, 32, 36, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 112, 116, 180, 186, 211, 215, 227, 228, 230, 242, 256, 257, 258, 304, 320, 346, 354, 370, 372], "sbm": [1, 11, 32, 36], "68": [1, 5, 11, 32, 36, 84, 85], "148": [1, 32, 36], "relev": [1, 11, 304], "modality_nam": 1, "dataset_train": 1, "split": [1, 3, 11, 29, 30, 32, 33, 34, 35, 36, 202, 203], "stream": [1, 32, 36], "dataset_v": 1, "extract_features_and_target": 1, "arrai": [1, 5, 6, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 55, 64, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 150, 154, 159, 160, 161, 162, 165, 168, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 196, 198, 201, 202, 203, 204, 205, 206, 247, 252, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 303, 304, 309, 310, 311, 313, 314, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 336, 337, 339, 340, 344, 345, 346, 350, 351, 352, 354, 355, 356, 357, 358, 359, 362, 363, 368, 369, 370, 371, 372, 375, 376], "x": [1, 3, 7, 8, 9, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 37, 54, 56, 58, 61, 72, 75, 87, 107, 112, 113, 114, 115, 116, 118, 127, 128, 129, 130, 150, 154, 159, 160, 161, 162, 205, 206, 210, 213, 214, 217, 218, 227, 228, 229, 230, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 307, 308, 310, 312, 313, 314, 317, 323, 326, 327, 339, 346, 351, 355, 358, 359, 362, 370, 374, 375, 376], "y_age": 1, "y_sex": 1, "m": [1, 72, 75, 175, 177, 178, 180, 183, 184, 186, 188, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 302, 303, 318, 325, 331, 332, 336, 337, 339, 344, 352, 357, 362, 368, 372], "append": [1, 9, 20, 26, 40, 45], "flatten": [1, 5, 7, 11, 54, 55, 56, 64, 214, 245, 290], "item": [1, 9, 11, 31, 37, 329], "x_train": 1, "y_train_ag": 1, "y_train_sex": 1, "x_test": 1, "y_test_ag": 1, "y_test_sex": 1, "rang": [1, 3, 5, 6, 9, 40, 45, 144, 145, 146, 147, 149, 151, 153, 155, 159, 161, 307, 308, 342, 366], "min": [1, 11, 149, 153, 159, 161], "max": [1, 3, 11, 149, 153, 159, 161, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 248, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 284, 294, 295], "distribut": [1, 3, 11, 40, 45, 54, 56, 145, 147, 149, 153, 213, 230, 255, 258], "n": [1, 9, 17, 18, 19, 21, 23, 24, 25, 27, 40, 45, 54, 56, 72, 73, 75, 77, 91, 109, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 196, 201, 204, 205, 206, 210, 214, 245, 280, 282, 285, 291, 293, 296, 302, 303, 309, 310, 311, 313, 314, 318, 319, 320, 323, 324, 325, 331, 332, 336, 337, 339, 340, 344, 346, 352, 353, 354, 357, 362, 363, 368, 370, 371, 372, 375, 376], "seri": [1, 31, 37, 182, 196], "value_count": 1, "r\u00b2": [1, 11, 18, 21, 24, 27], "score": [1, 17, 18, 19, 21, 23, 24, 25, 27, 82, 83, 84, 85], "v": [1, 11, 32, 36], "color": [1, 3, 8, 11, 12, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 171, 302, 303], "tab": 1, "blue": [1, 5, 6, 8, 311, 319, 324, 339, 340, 353, 362, 363], "green": [1, 5, 6, 8, 311, 324], "orang": [1, 8, 11], "15": [1, 5, 9, 11, 84, 85], "sharex": [1, 11], "sharei": [1, 11], "ridge_model": 1, "alpha": [1, 5, 6, 11, 18, 21, 24, 27, 165, 166, 168, 169, 302, 303, 307, 308, 311, 312, 324, 374], "y_pred_ag": 1, "scatterplot": 1, "edgecolor": [1, 5, 6, 302, 303, 311, 324], "none": [1, 3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 65, 68, 69, 73, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 108, 109, 114, 115, 127, 128, 129, 130, 150, 152, 154, 156, 159, 160, 161, 162, 165, 168, 170, 175, 177, 178, 180, 183, 184, 186, 188, 201, 202, 203, 204, 205, 206, 208, 209, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 249, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 287, 298, 302, 303, 304, 317, 318, 327, 329, 346, 348, 349, 351, 352, 359, 360, 370, 373], "add": [1, 40, 45, 51, 52, 67, 113, 118, 145, 147, 179, 185, 287, 298], "refer": [1, 6, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "line": [1, 302, 303], "lineplot": 1, "red": [1, 5, 8, 316, 319, 339, 340, 350, 353, 362, 363], "linestyl": 1, "set_titl": [1, 11], "nr\u00b2": 1, "2f": [1, 3, 11], "set_xlabel": [1, 7, 11], "set_ylabel": [1, 7, 11], "grid": [1, 11, 19, 25, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 310, 313, 322, 323, 340, 356, 363, 375], "suptitl": [1, 11], "fontsiz": [1, 11], "14": [1, 5, 11], "02": [1, 10, 11, 149, 153, 378], "tight_layout": [1, 5, 11], "accuraci": [1, 3, 9, 17, 19, 23, 25, 40, 45, 51, 52], "logreg_model": 1, "max_it": [1, 11, 19, 25], "1000": [1, 3, 40, 45], "y_pred_sex": 1, "acc": [1, 3, 40, 45], "barplot": 1, "palett": 1, "xlabel": 1, "ylabel": 1, "ylim": 1, "text": [1, 7, 8, 54, 56, 72, 73, 75, 77, 84, 85, 89, 97, 102, 103, 104, 159, 161], "abov": [1, 3], "bar": [1, 20, 26, 40, 45, 51, 52], "ha": [1, 3, 6, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 84, 85, 113, 114, 115, 118, 129, 130, 145, 147, 159, 160, 161, 162, 217, 229, 250, 251, 304], "center": [1, 32, 36, 172, 304, 319, 339, 340, 344, 353, 355, 362, 363, 368], "10": [1, 3, 5, 6, 8, 9, 10, 11, 17, 18, 19, 21, 23, 24, 25, 27, 32, 36, 55, 64, 71, 74, 84, 85, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 218, 229, 231, 251, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369, 378], "observ": [1, 3, 11], "give": [1, 3, 12, 40, 45, 165, 166, 168, 169], "best": [1, 13, 17, 18, 19, 21, 23, 24, 25, 27, 65, 165, 166, 168, 169, 311, 324], "highli": [1, 3], "nevertheless": 1, "would": [1, 3, 84, 85], "interest": [1, 11, 40, 45, 51, 52, 202, 203, 216, 241], "check": [1, 3, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 31, 34, 37, 40, 45, 65, 78, 79, 86, 87, 88, 105, 106, 107, 108, 150, 151, 154, 155, 165, 168, 170], "whether": [1, 3, 20, 26, 40, 45, 51, 52, 88, 91, 109], "thei": [1, 3, 6, 9, 11, 32, 36, 54, 56, 90, 92], "complementari": 1, "an": [1, 3, 7, 8, 9, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 37, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 65, 67, 68, 90, 91, 92, 105, 107, 108, 109, 114, 115, 129, 130, 149, 153, 177, 178, 183, 184, 187, 190, 191, 193, 197, 199, 216, 217, 229, 241, 250, 251, 280, 291, 304, 310, 313, 314, 318, 323, 325, 327, 338, 341, 342, 343, 346, 352, 357, 359, 360, 361, 365, 366, 367, 370, 375, 376], "exercis": 1, "reader": 1, "estim": [1, 3, 5, 6, 7, 8, 9, 11, 12, 20, 21, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 72, 75, 79, 80, 84, 85, 106, 108, 171, 304, 311, 324], "memori": [1, 3, 5, 6, 7, 8, 9, 11, 20, 26, 30, 35, 113, 118, 150, 154, 304, 329], "usag": [1, 3, 5, 6, 7, 8, 9, 11], "mb": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 378], "ipynb": [1, 3, 5, 6, 7, 8, 9, 11, 333, 335], "py": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 378], "00": [2, 10, 84, 85, 378], "000": [2, 3, 378], "total": [2, 5, 6, 7, 8, 9, 10, 113, 114, 115, 118, 129, 130, 378], "execut": [2, 10, 329, 378], "from": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 17, 18, 20, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 71, 72, 74, 75, 82, 83, 84, 85, 90, 92, 107, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 145, 147, 149, 151, 152, 153, 155, 156, 159, 161, 165, 168, 175, 178, 184, 188, 202, 203, 212, 216, 217, 218, 229, 230, 231, 241, 250, 251, 254, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 375, 376, 378], "auto_galleri": [2, 10], "mem": [2, 10, 378], "simclr_stl10": [2, 3, 378], "yaware_openbhb": [2, 11, 378], "uvadlc": 3, "readthedoc": 3, "io": [3, 12, 171, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337], "tutori": [3, 11, 13], "closer": [3, 11, 55, 64], "also": [3, 11, 12, 29, 30, 33, 34, 35, 51, 52, 55, 64, 84, 85, 105, 200, 202, 203, 329, 377], "sometim": [3, 90, 92], "call": [3, 16, 20, 22, 26, 29, 30, 33, 34, 35, 40, 45, 51, 52, 55, 64, 72, 75, 76, 79, 88, 108, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 150, 152, 154, 156, 202, 203, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 329, 346, 370], "unsupervis": [3, 31, 37], "describ": [3, 19, 25, 59, 60, 62, 63, 65, 377], "scenario": 3, "where": [3, 7, 11, 19, 20, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 54, 55, 56, 59, 60, 62, 63, 64, 65, 72, 73, 75, 77, 91, 109, 159, 160, 161, 162, 165, 168, 202, 203, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291, 302, 303, 305, 313, 372, 375], "given": [3, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 32, 36, 54, 55, 56, 64, 73, 77, 87, 91, 108, 109, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 210, 212, 254, 304, 329, 346, 370, 371, 372], "accompani": 3, "classic": [3, 229, 251, 252], "wai": [3, 11, 339, 362, 377], "howev": [3, 11, 165, 166, 168, 169], "lot": 3, "imag": [3, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51, 52, 54, 55, 56, 64, 150, 151, 152, 154, 155, 156, 159, 161, 165, 166, 168, 169, 173, 202, 203, 210, 313, 330, 375], "other": [3, 6, 40, 45, 51, 52, 54, 56, 65, 304, 314, 376], "what": [3, 55, 64, 65, 68], "descript": [3, 165, 166, 168, 169], "certain": [3, 319, 342, 353, 366], "cluster": [3, 40, 42, 45, 47, 55, 64], "To": [3, 6, 11, 20, 26, 29, 34, 40, 45, 51, 52, 79], "insight": 3, "question": 3, "implement": [3, 20, 26, 40, 45, 51, 52, 59, 60, 62, 63, 71, 72, 73, 74, 75, 77, 78, 87, 88, 105, 150, 154, 177, 183, 211, 214, 215, 230, 242, 245, 249, 258], "popular": [3, 12, 200], "method": [3, 12, 16, 20, 22, 26, 29, 32, 34, 36, 40, 45, 55, 64, 72, 73, 75, 77, 80, 88, 90, 91, 92, 106, 107, 109, 159, 161, 165, 166, 168, 169, 172, 200, 214, 216, 217, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 250, 251, 252, 253, 258, 260, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 304, 346, 370], "appli": [3, 6, 7, 11, 20, 26, 31, 32, 36, 37, 51, 52, 54, 55, 56, 58, 60, 61, 63, 64, 72, 75, 87, 88, 91, 109, 114, 115, 129, 130, 144, 146, 151, 152, 155, 156, 159, 160, 161, 162, 164, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 192, 193, 195, 196, 214, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 290, 311, 322, 324, 340, 356, 363], "stl10": 3, "some": [3, 8, 11, 12, 40, 45, 51, 52, 54, 55, 56, 64, 65, 67, 72, 75, 114, 115, 129, 130, 181, 182, 195, 196, 200, 304, 372], "packag": [3, 6, 11, 13], "besid": [3, 11], "our": [3, 6, 11, 51, 52], "librari": [3, 11], "below": [3, 11, 55, 64, 65], "o": [3, 6, 8, 306, 316, 319, 339, 340, 345, 350, 353, 362, 363, 369], "pytorch_lightn": [3, 20, 26], "pl": 3, "torch": [3, 7, 9, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 37, 40, 45, 54, 55, 56, 64, 71, 73, 74, 77, 87, 88, 91, 109, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 211, 218, 229, 230, 231, 249, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "nn": [3, 7, 9, 12, 40, 45, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 71, 73, 74, 76, 77, 91, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 171, 177, 183, 212, 213, 215, 227, 228, 242, 243, 244, 246, 247, 249, 252, 254, 255, 256, 257, 259, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "torchvis": [3, 11, 55, 64, 88, 149, 151, 153, 155], "collect": 3, "ordereddict": [3, 51, 52], "copi": [3, 29, 34, 304], "deepcopi": 3, "ssl": [3, 11, 12, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 171], "linear": [3, 11, 12, 20, 26, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 72, 73, 75, 77, 112, 116, 151, 155, 165, 166, 168, 169, 171, 214, 217, 229, 245, 250, 251, 252], "callback": [3, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 45, 51, 52, 55, 64, 171], "learningratemonitor": [3, 55, 64], "modelcheckpoint": [3, 40, 45], "transform": [3, 6, 11, 12, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 49, 65, 86, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 181, 182, 191, 192, 194, 195, 196, 199, 202, 203, 211, 212, 214, 245, 246, 254, 304, 305, 307, 308, 311, 312, 324, 345, 369, 374], "global": [3, 11, 17, 19, 23, 25, 65, 149, 153, 278], "paramet": [3, 9, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 91, 107, 108, 109, 112, 113, 114, 115, 116, 118, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "datadir": 3, "checkpointdir": 3, "saved_model": 3, "num_work": [3, 11], "cpu_count": 3, "num_imag": 3, "backend": 3, "cudnn": 3, "determinst": 3, "devic": [3, 40, 45, 51, 52, 54, 55, 56, 64], "gpu": [3, 40, 45, 51, 52, 54, 55, 56, 64], "cuda": 3, "is_avail": 3, "els": [3, 11, 31, 37], "cpu": [3, 40, 45], "As": [3, 9, 11], "mani": [3, 6, 17, 18, 19, 21, 23, 24, 25, 27, 32, 36, 40, 45, 55, 64, 113, 114, 115, 118, 129, 130], "befor": [3, 31, 37, 108, 151, 155, 217, 229, 250, 251, 287, 298, 304], "pre": [3, 11], "If": [3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 55, 64, 72, 73, 75, 77, 81, 84, 85, 87, 88, 91, 108, 109, 114, 115, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 304, 329, 346, 370], "you": [3, 6, 11, 13, 16, 20, 22, 26, 29, 31, 32, 34, 36, 37, 40, 45, 51, 52, 55, 64, 65, 66, 91, 109, 304], "make": [3, 11, 20, 26, 40, 45, 54, 56, 107, 149, 153, 278], "sure": 3, "suffici": 3, "disk": [3, 31, 32, 36, 37, 40, 45, 51, 52], "load_pretrain": [3, 91, 109], "makedir": 3, "exist_ok": 3, "hf": [3, 32, 36, 65, 91, 109], "hub": [3, 65, 91, 109], "neurospin": [3, 13, 91, 109], "resnet18": [3, 12, 55, 64, 111, 125, 135, 171], "data_dir": [3, 11, 91, 109], "filepath": [3, 91, 109], "pt": 3, "effici": [3, 113, 118], "load": [3, 9, 11, 12, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 45, 65, 68, 69, 91, 109, 200, 202, 203, 333, 335], "sampl": [3, 9, 11, 12, 19, 25, 31, 32, 36, 37, 40, 45, 54, 55, 56, 64, 72, 73, 75, 77, 79, 80, 82, 83, 84, 85, 144, 145, 146, 147, 149, 151, 153, 155, 171, 200, 201, 204, 205, 206, 210, 212, 213, 217, 218, 229, 230, 231, 247, 250, 251, 252, 254, 255, 258, 260, 269, 282, 283, 284, 288, 290, 293, 294, 295, 299, 313, 340, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375], "random": [3, 5, 11, 40, 45, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 165, 168, 174, 178, 184, 190, 191, 192, 193, 199, 201, 204, 205, 206], "batch": [3, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 73, 77, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "easiest": 3, "do": [3, 6, 20, 26, 40, 45, 51, 52, 54, 55, 56, 64, 304], "creat": [3, 11, 105, 159, 161, 165, 168, 187, 193, 194, 197, 200, 202, 203, 240, 278], "when": [3, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 79, 80, 81, 84, 85, 88, 91, 107, 109, 150, 152, 154, 156, 159, 161, 302, 303, 304, 309, 314, 329, 344, 368, 376], "twice": 3, "class": [3, 7, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 75, 76, 77, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 328], "contrastivetransform": 3, "framework": [3, 40, 45, 54, 55, 56, 59, 60, 62, 63, 64, 215, 242], "easili": [3, 6], "extend": [3, 80, 90, 92], "than": [3, 11, 40, 45, 54, 56], "most": [3, 302, 303], "usual": [3, 87], "obtain": 3, "__init__": [3, 20, 26, 40, 45, 51, 52, 107], "base_transform": 3, "n_view": [3, 11, 87], "__call__": 3, "specif": [3, 12, 175, 176, 188, 189, 217, 229, 250, 251, 278, 341, 365], "want": [3, 13, 91, 109], "choic": [3, 65, 151, 155, 165, 166, 168, 169], "crucial": 3, "hyperparamet": [3, 11, 40, 45], "sinc": [3, 6, 7, 11, 54, 55, 56, 64, 76, 82, 83, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 159, 161, 165, 166, 168, 169, 215, 242, 243, 244, 246, 249, 285, 286, 287, 290, 296, 297, 298], "directli": [3, 40, 45, 55, 64, 149, 153, 173], "affect": [3, 40, 45], "latent": [3, 54, 55, 56, 64, 212, 213, 214, 227, 228, 230, 245, 254, 255, 256, 257, 258], "might": [3, 40, 45, 51, 52, 55, 64, 150, 154], "overal": 3, "experi": [3, 12, 65, 66, 67, 68, 69, 171, 377], "horizont": [3, 7], "flip": [3, 150, 152, 154, 156], "crop": [3, 151, 155, 164, 167], "resiz": [3, 12, 88, 151, 155, 166, 169, 171], "distort": 3, "grayscal": 3, "gaussian": [3, 11, 55, 64, 72, 73, 75, 77, 144, 145, 146, 147, 151, 155, 165, 166, 168, 169, 177, 179, 183, 185, 201, 204, 205, 206], "blur": [3, 144, 146, 177, 183], "comparison": [3, 11, 165, 166, 168, 169], "effect": [3, 11, 114, 115, 129, 130, 165, 168, 304], "jitter": 3, "slightli": 3, "instead": [3, 11, 76, 79, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 304], "bright": 3, "satur": 3, "hue": 3, "better": [3, 54, 56], "wa": 3, "faster": [3, 11, 329], "stabl": 3, "instanc": [3, 6, 31, 37, 40, 45, 55, 64, 76, 81, 108, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 174, 192, 193, 194, 215, 240, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "vari": 3, "benefici": [3, 51, 52], "t": [3, 7, 11, 40, 45, 51, 52, 59, 60, 62, 63, 149, 151, 153, 155], "reli": 3, "anymor": 3, "distinguish": 3, "between": [3, 6, 11, 19, 25, 32, 36, 55, 64, 71, 72, 73, 74, 75, 77, 82, 83, 88, 149, 151, 153, 155, 165, 166, 168, 169, 175, 176, 188, 189, 302, 303, 309, 311, 324, 339, 348, 362, 372], "contrast_transform": [3, 11], "compos": [3, 11, 65, 214, 245, 305, 339, 362], "randomhorizontalflip": 3, "randomresizedcrop": [3, 12, 88, 148, 151, 155, 171], "size": [3, 7, 8, 9, 54, 55, 56, 64, 73, 77, 112, 113, 114, 115, 116, 118, 129, 130, 144, 146, 149, 151, 153, 155, 159, 161, 164, 165, 167, 168, 175, 176, 178, 184, 188, 189, 190, 202, 203, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 286, 287, 290, 296, 297, 298, 319, 322, 340, 345, 347, 353, 356, 363, 369], "96": [3, 5, 287, 298, 310, 323], "randomappli": 3, "colorjitt": 3, "p": [3, 72, 75, 86, 88, 170], "randomgrayscal": 3, "gaussianblur": 3, "kernel_s": [3, 7, 286, 287, 297, 298], "totensor": 3, "after": [3, 20, 26, 40, 45, 51, 52, 54, 55, 56, 64, 72, 75, 114, 115, 129, 130, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "discuss": 3, "techniqu": [3, 11, 151, 155, 165, 166, 168, 169, 372], "focu": [3, 11], "cifar10": 3, "airplan": 3, "bird": 3, "car": 3, "cat": [3, 31, 37], "deer": 3, "dog": [3, 31, 37], "hors": 3, "monkei": 3, "ship": 3, "truck": 3, "pixel": 3, "500": 3, "addition": 3, "larger": 3, "100": [3, 5, 8, 9, 19, 25, 159, 161, 316, 319, 339, 340, 345, 348, 350, 353, 362, 363, 369], "unlabel": 3, "similar": [3, 6, 11, 54, 55, 56, 60, 63, 64, 72, 73, 75, 77, 149, 153], "wider": 3, "anim": 3, "vehicl": 3, "ideal": [3, 11], "showcas": 3, "benefit": 3, "offer": [3, 151, 155, 165, 166, 168, 169], "luckili": 3, "through": [3, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 41, 42, 43, 44, 46, 47, 48, 49, 58, 61], "keep": [3, 32, 36, 202, 203], "mind": 3, "rel": [3, 19, 25, 29, 30, 31, 33, 34, 35, 37, 149, 151, 153, 155], "consider": 3, "3gb": 3, "bit": [3, 55, 64], "time": [3, 5, 6, 7, 8, 9, 11, 54, 55, 56, 64, 72, 75, 87, 149, 151, 153, 155, 346, 370], "initi": [3, 32, 36, 55, 58, 59, 60, 61, 62, 63, 64, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 246, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "loader": [3, 9, 38], "unlabeled_data": 3, "via": [3, 32, 36, 51, 52, 346, 370], "train_data_contrast": 3, "pair": [3, 40, 45, 54, 55, 56, 64, 73, 77, 152, 156, 202, 203], "img": [3, 31, 37], "stack": [3, 20, 26], "dim": [3, 9, 11, 55, 64, 76, 165, 168, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "img_grid": 3, "make_grid": 3, "nrow": 3, "pad_valu": 3, "permut": [3, 6, 176, 189, 309, 311, 324], "imshow": [3, 7, 313, 375], "axi": [3, 7, 9, 150, 152, 154, 156, 164, 167, 302, 303, 304, 309, 320, 326, 333, 335, 339, 346, 354, 355, 358, 362, 370], "off": [3, 7], "And": 3, "associ": [3, 8, 32, 36, 51, 52, 55, 64, 73, 77, 306, 314, 320, 346, 354, 370, 376], "dataload": [3, 9, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 64, 65], "batch_siz": [3, 9, 11, 40, 45, 71, 73, 74, 77, 213, 227, 228, 230, 255, 256, 257, 258], "256": [3, 58, 61, 93, 212, 213, 227, 228, 254, 255, 256, 257], "train_load": 3, "shuffl": [3, 9, 11, 40, 45], "drop_last": 3, "pin_memori": 3, "val_load": 3, "common": [3, 12, 15, 28, 39, 40, 45, 51, 52, 70, 110, 111, 173, 207, 211, 304], "resnet": [3, 12, 55, 64, 111, 114, 115, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 171], "18": [3, 5, 55, 64, 115, 125, 126, 130, 135, 136, 159, 161], "architectur": [3, 9, 12, 51, 52, 54, 55, 56, 64, 110, 111, 112, 113, 114, 115, 116, 118, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 211, 217, 218, 229, 230, 231, 249, 250, 251, 258, 260, 269], "paper": [3, 11, 113, 118], "g": [3, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 59, 62, 64, 73, 77, 114, 115, 129, 130, 149, 153, 165, 168, 304], "layer": [3, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 112, 113, 114, 115, 116, 118, 129, 130, 131, 132, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 249, 250, 251, 252, 254, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300], "mlp": [3, 11, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "relu": [3, 55, 58, 59, 60, 61, 62, 63, 64, 122, 217, 229, 247, 248, 249, 250, 251, 252, 253], "activ": [3, 55, 59, 62, 64, 212, 213, 217, 227, 228, 229, 230, 250, 251, 254, 255, 256, 257, 258], "hidden": [3, 55, 59, 60, 62, 63, 64, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "note": [3, 29, 30, 32, 33, 34, 35, 36, 40, 45, 51, 52, 55, 64, 65, 72, 75, 87, 105, 112, 116, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 329], "simclrv2": 3, "author": [3, 65], "mention": 3, "boost": 3, "why": [3, 6], "four": 3, "dimens": [3, 6, 11, 54, 55, 56, 64, 88, 144, 146, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 166, 167, 169, 214, 245, 259], "deeper": 3, "overfit": 3, "A": [3, 5, 6, 7, 8, 9, 29, 30, 32, 33, 34, 35, 36, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 91, 109, 173, 202, 203, 211, 215, 242, 305], "u": [3, 7, 144, 145, 146, 147, 159, 161, 202, 203, 217, 229, 249, 250, 251], "lead": [3, 40, 45], "smoother": 3, "loss": [3, 9, 12, 20, 26, 40, 45, 51, 52, 54, 55, 56, 60, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 171, 208, 209, 210], "gradient": [3, 11, 40, 45, 51, 52, 55, 64], "case": [3, 31, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 68, 69, 72, 75, 82, 83, 149, 150, 151, 152, 153, 154, 155, 156, 304], "experienc": 3, "good": [3, 151, 155, 165, 166, 168, 169], "hidden_dim": [3, 11, 54, 56, 59, 60, 62, 63, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "128": [3, 11, 55, 58, 59, 60, 61, 62, 63, 64, 112, 116, 165, 168, 212, 213, 227, 228, 254, 255, 256, 257], "encod": [3, 11, 40, 45, 51, 52, 54, 55, 56, 64, 207, 211, 213, 217, 227, 228, 229, 230, 250, 251, 255, 256, 257, 258], "num_class": [3, 51, 52, 231, 232, 233, 234, 235, 236, 237, 238, 239, 269, 270, 271, 272, 273, 274, 275, 276, 277], "latent_s": [3, 11, 51, 52, 54, 56], "fc": [3, 51, 52], "out_featur": [3, 58, 61], "ident": [3, 12, 14, 40, 45, 86, 114, 115, 129, 130, 150, 152, 154, 156, 165, 168, 171], "save_weights_onli": 3, "mode": [3, 13, 40, 45, 51, 52, 55, 64, 65, 72, 75, 164, 167, 247, 304], "monitor": [3, 40, 45, 55, 64], "val_acc_top5": 3, "logging_interv": 3, "epoch": [3, 9, 11, 20, 26, 40, 45, 51, 52, 55, 64], "trainer_param": [3, 40, 45], "default_root_dir": 3, "acceler": [3, 40, 45, 51, 52], "max_epoch": [3, 11, 40, 45, 51, 52, 54, 55, 56, 64], "lr": [3, 9, 51, 52, 54, 55, 56, 64, 150, 152, 154, 156], "5e": [3, 55, 64], "temperatur": [3, 11, 51, 52, 54, 55, 56, 64, 71, 73, 74, 77, 215, 242], "07": 3, "weight_decai": [3, 9, 51, 52, 54, 55, 56, 64], "1e": [3, 9, 11, 19, 25, 55, 64, 160, 162, 309, 314, 376], "random_st": [3, 11, 40, 45, 51, 52, 54, 56], "42": [3, 5, 7, 9, 11, 84, 85, 313, 314, 317, 326, 327, 346, 351, 358, 359, 370, 375, 376], "found": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 55, 64, 108], "pretrain": [3, 54, 56], "weight_fil": [3, 91, 109], "fitted_": 3, "fit": [3, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 55, 64, 72, 75, 108, 304], "deploi": [3, 51, 52], "downstream": [3, 11, 51, 52, 54, 56], "see": [3, 29, 30, 33, 34, 35, 51, 52, 55, 64, 65, 71, 73, 74, 77, 105, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 164, 165, 166, 167, 168, 169, 180, 186, 202, 203, 304, 333, 335], "well": [3, 40, 45, 51, 52, 150, 152, 154, 156], "littl": [3, 51, 52], "verifi": [3, 51, 52, 88, 108], "word": [3, 51, 52], "singl": [3, 29, 31, 32, 34, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 87, 377], "base": [3, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 71, 72, 73, 74, 75, 76, 77, 86, 87, 88, 90, 91, 92, 93, 105, 109, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 309, 328, 329, 339, 340, 345, 362, 363, 369], "network": [3, 55, 64, 149, 153, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 254, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "chang": [3, 31, 37, 55, 64, 88, 165, 168, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304], "dure": [3, 32, 36, 40, 45, 51, 52, 54, 56, 151, 155, 165, 166, 168, 169, 178, 184], "process": [3, 11, 13, 40, 45, 51, 52, 216, 241], "h": [3, 59, 62, 72, 73, 75, 77, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 210, 259], "necessari": 3, "further": [3, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "worri": 3, "too": [3, 32, 36, 304], "veri": [3, 6, 51, 52, 149, 153, 165, 166, 168, 169], "few": 3, "henc": 3, "expect": [3, 9, 29, 30, 32, 33, 34, 35, 36, 55, 64, 65, 151, 155, 164, 167, 202, 203], "even": [3, 91, 109], "assum": [3, 31, 37, 51, 52, 72, 75, 150, 152, 154, 156, 165, 168, 175, 176, 188, 189, 309], "alreadi": [3, 32, 36, 87, 88, 91, 109], "vector": [3, 11, 19, 25, 32, 36, 54, 55, 56, 64, 73, 77, 339, 362], "dynam": [3, 51, 52, 65, 67, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "so": [3, 6, 51, 52, 114, 115, 129, 130], "here": [3, 6, 11, 40, 45, 51, 52, 54, 55, 56, 64, 65, 72, 75, 87, 333, 335], "second": [3, 5, 6, 7, 8, 9, 55, 58, 61, 64, 71, 73, 74, 77, 82, 83], "did": [3, 6], "ani": [3, 11, 31, 32, 36, 37, 38, 40, 45, 51, 52, 54, 55, 56, 64, 81, 86, 87, 88, 145, 147, 149, 151, 153, 155, 159, 161, 202, 203, 325, 357], "signific": [3, 40, 45], "gain": 3, "test": [3, 6, 9, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 45], "800": 3, "64": [3, 5, 11, 40, 45, 84, 85, 113, 114, 115, 118, 127, 128, 129, 130, 152, 156, 159, 161, 165, 168, 212, 213, 214, 227, 228, 230, 243, 245, 254, 255, 256, 257, 258], "scale_transform": 3, "train_img_data": 3, "test_img_data": 3, "number": [3, 6, 17, 18, 19, 20, 23, 24, 25, 26, 32, 36, 40, 45, 51, 52, 55, 64, 72, 73, 75, 77, 82, 83, 84, 85, 87, 112, 113, 114, 115, 116, 118, 129, 130, 149, 153, 175, 178, 184, 187, 188, 193, 194, 197, 201, 204, 205, 206, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291, 302, 303, 313, 317, 318, 327, 338, 341, 342, 343, 345, 351, 352, 359, 361, 365, 366, 367, 369, 375], "len": [3, 5, 6, 7, 9, 11, 229, 230, 231, 251, 258, 269, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 319, 338, 343, 353, 361, 367], "froozen": 3, "e": [3, 7, 13, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 68, 72, 73, 75, 77, 82, 83, 87, 113, 114, 115, 118, 129, 130, 149, 153, 165, 168, 304, 313, 375], "output": [3, 20, 26, 40, 45, 51, 52, 55, 64, 65, 68, 79, 80, 82, 83, 84, 85, 86, 88, 90, 92, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 177, 178, 183, 184, 212, 214, 217, 229, 245, 247, 248, 249, 250, 251, 252, 253, 254, 259, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 328, 329], "new_model": 3, "normal_": 3, "std": [3, 11, 145, 147, 160, 162, 304], "01": [3, 10, 378], "zero_": 3, "requires_grad_": 3, "final": [3, 9, 11, 32, 36, 54, 55, 56, 60, 63, 64, 112, 116, 229, 251], "everi": [3, 40, 45, 55, 64, 76, 88, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 316, 350], "earli": [3, 40, 45], "stop": [3, 40, 45, 55, 64, 339, 362], "low": [3, 32, 36, 55, 64, 193], "frequenc": [3, 55, 64], "ensur": [3, 80, 198], "despit": 3, "smaller": [3, 19, 25], "20": [3, 5, 7, 8, 9, 159, 161, 175, 188], "50": [3, 5, 137, 138, 139, 140], "200": 3, "intuit": 3, "transfer": [3, 54, 56], "recognit": 3, "classif": [3, 7, 9, 11, 17, 19, 20, 23, 25, 26, 40, 45, 54, 55, 56, 60, 63, 64, 73, 77, 201, 204, 205, 206, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "test_load": 3, "val_acc": 3, "check_val_every_n_epoch": [3, 40, 45, 55, 64], "pred": [3, 9, 51, 52], "argmax": [3, 9], "_pretrained_filenam": 3, "path": [3, 29, 30, 31, 32, 34, 35, 36, 37, 38, 65, 91, 109, 177, 178, 183, 184, 217, 229, 250, 251, 329, 330, 334, 336, 337, 339, 348, 349, 362], "join": 3, "isfil": 3, "save": [3, 65, 336, 337], "state_dict": 3, "one": [3, 6, 11, 31, 37, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 76, 79, 80, 84, 85, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 144, 146, 149, 151, 153, 155, 165, 168, 178, 184, 191, 199, 212, 215, 242, 243, 244, 246, 249, 254, 285, 286, 287, 296, 297, 298, 314, 376], "classifi": [3, 17, 23, 41, 46], "60": [3, 5], "correctli": 3, "quit": 3, "impress": 3, "consid": [3, 6, 11, 29, 30, 31, 33, 34, 35, 37, 51, 52, 72, 75, 178, 184, 202, 203, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291], "dimension": [3, 11, 54, 55, 56, 64], "With": 3, "achiev": [3, 54, 56], "80": [3, 5, 84, 85], "increas": [3, 327, 359], "suggest": [3, 11], "exponenti": [3, 55, 64, 72, 73, 75, 77], "could": [3, 6, 55, 64, 150, 152, 154, 156], "finetun": 3, "adapt": [3, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 178, 184, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "advantag": 3, "straightforward": 3, "clear": [3, 20, 26], "its": [3, 11, 32, 36, 55, 64, 86, 88, 102, 103, 114, 115, 129, 130, 159, 161, 165, 168, 329, 339, 362], "count": 3, "fair": 3, "ones": [3, 55, 64], "becaus": [3, 6, 54, 56, 304], "notic": 3, "ad": [3, 11, 54, 55, 56, 64, 160, 162, 217, 229, 250, 251], "restrict": 3, "oper": [3, 40, 45, 51, 52, 249, 304], "125": 3, "1250": 3, "recogn": 3, "object": [3, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 65, 68, 90, 91, 92, 93, 105, 107, 109, 174, 187, 192, 193, 197, 208, 209, 302, 303, 304, 305, 328, 329], "patch": [3, 178, 184, 202, 203, 214, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 340, 345, 347, 363, 369], "belong": [3, 79], "chosen": [3, 19, 25, 40, 45], "weaker": 3, "almost": [3, 7, 160, 162], "strongli": 3, "iter": [3, 19, 25, 40, 45, 51, 52, 259], "train_transform": 3, "sigma": [3, 5, 11, 55, 59, 62, 64, 72, 73, 75, 77, 144, 145, 146, 147, 160, 162, 165, 166, 168, 169, 177, 178, 179, 183, 184, 185], "train_img_aug_data": 3, "2e": 3, "scratch": 3, "73": [3, 5], "7": [3, 5, 11, 32, 36, 84, 85, 114, 115, 129, 130, 339, 362], "less": 3, "leverag": [3, 11, 55, 64], "amount": 3, "generaliz": 3, "sole": [3, 40, 45], "par": 3, "tenth": 3, "experiment": [3, 65], "limit": [3, 11], "recent": 3, "work": [3, 6, 11, 29, 31, 34, 37, 55, 64, 65, 165, 168, 177, 178, 183, 184, 259, 304], "ting": [3, 54, 56, 215, 242], "chen": [3, 54, 56, 59, 60, 62, 63, 71, 74, 215, 242], "trend": 3, "imagenet": 3, "seem": [3, 6], "stronger": [3, 19, 25], "come": 3, "approach": [3, 11, 13], "beyond": 3, "khosla": 3, "moreov": 3, "last": [3, 32, 36, 114, 115, 129, 130, 212, 254], "year": [3, 32, 36], "great": 3, "distil": 3, "byol": 3, "redund": [3, 79], "reduct": [3, 11, 40, 45], "barlow": 3, "twin": 3, "There": 3, "domain": [3, 5, 32, 36], "ahead": 3, "credit": [5, 6, 7, 8, 9], "grigi": [5, 7, 8, 9, 32, 36], "c": [5, 6, 8, 11, 19, 25, 32, 36, 90, 92, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 210, 316, 319, 339, 340, 350, 353, 362, 363], "ambrois": [5, 6, 32, 36], "surfifi": [5, 6, 7, 8, 9, 10, 12, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378], "min_depth_to_get_n_neighbor": [5, 12, 171, 306, 338, 361], "plot": [5, 6, 7, 8, 9, 11, 12, 171, 302, 303, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "plot_trisurf": [5, 6, 7, 8, 9, 12, 171, 301, 302, 303, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 339, 340, 345, 346, 350, 351, 352, 353, 357, 358, 359, 362, 363, 369, 370, 375, 376], "interv": [5, 12, 55, 64, 171, 173, 187, 190, 193, 197], "triangl": [5, 6, 8, 177, 178, 180, 183, 184, 186, 229, 240, 251, 302, 303, 310, 311, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 331, 332, 336, 337, 339, 340, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 358, 359, 362, 363, 368, 369, 370, 371, 372, 376], "order": [5, 6, 7, 8, 9, 11, 40, 45, 55, 64, 65, 84, 85, 87, 150, 154, 165, 166, 168, 169, 177, 178, 183, 184, 202, 203, 212, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 251, 254, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 303, 305, 309, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 375, 376], "neigh": [5, 8, 177, 178, 183, 184, 285, 296, 319, 320, 339, 340, 346, 347, 353, 354, 362, 363, 370], "direct_neighbor": [5, 8, 280, 282, 283, 284, 288, 291, 293, 294, 295, 299, 319, 339, 345, 347, 353, 362, 369], "max_depth": 5, "ceil": 5, "displai": [5, 7, 8, 9, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 65, 84, 85, 97, 104, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 315], "aug": 5, "add_axi": 5, "arg": [5, 87, 88, 115, 130, 182, 196, 230, 258, 304], "kwarg": [5, 17, 18, 19, 21, 23, 24, 25, 27, 40, 45, 51, 52, 54, 55, 56, 64, 86, 87, 88, 90, 92, 115, 117, 123, 124, 125, 126, 130, 131, 132, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 182, 196, 230, 258, 304], "aspect": [5, 6, 8, 149, 151, 153, 155, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "auto": [5, 6, 8, 40, 45, 65, 69, 207, 211, 311, 316, 319, 324, 325, 339, 340, 345, 350, 353, 357, 362, 363, 369], "white": [5, 179, 185], "linewidth": [5, 8, 302, 303], "_textur": 5, "patch_siz": [5, 178, 184], "int": [5, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 32, 34, 36, 40, 45, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 75, 77, 84, 85, 87, 88, 112, 113, 114, 115, 116, 118, 126, 129, 130, 131, 132, 136, 138, 140, 149, 150, 151, 152, 153, 154, 155, 156, 164, 165, 166, 167, 168, 169, 175, 176, 177, 178, 183, 184, 187, 188, 189, 190, 197, 201, 202, 203, 204, 205, 206, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 309, 310, 313, 317, 318, 319, 322, 323, 325, 327, 338, 339, 340, 341, 342, 343, 345, 351, 352, 353, 356, 357, 359, 361, 362, 363, 365, 366, 367, 369, 371, 375], "n_patch": [5, 178, 184, 214, 245], "uniform": [5, 55, 64, 82, 83, 84, 85], "phi": [5, 180, 186], "180": 5, "theta": [5, 180, 186], "psi": [5, 180, 186], "controlateral_textur": 5, "prob": [5, 175, 176, 188, 189, 190], "n_vertic": [5, 7, 9, 175, 176, 188, 189, 190, 205, 206, 214, 227, 228, 230, 245, 256, 257, 258, 304, 317, 327, 338, 341, 342, 343, 346, 351, 359, 361, 365, 366, 367, 370], "controlateral_data": [5, 176, 189], "group_textur": 5, "group_data": [5, 175, 188], "n_sampl": [5, 7, 9, 17, 18, 19, 23, 24, 25, 72, 75, 79, 80, 82, 83, 84, 85, 175, 188, 201, 204, 205, 206, 214, 245, 313, 314, 316, 317, 326, 327, 346, 350, 351, 358, 359, 370, 375, 376], "neigh_ind": [5, 175, 188], "groupbi": [5, 175, 188], "n_neighbor": [5, 11, 17, 18, 23, 24, 175, 188], "n_compon": [5, 11, 175, 188], "30": [5, 9, 31, 37, 175, 188], "58": 5, "49": 5, "62": 5, "47": 5, "99": [5, 9, 10, 55, 64, 159, 161, 378], "92": [5, 84, 85], "54": 5, "65": [5, 7, 84, 85], "31": 5, "78": 5, "90": [5, 7, 84, 85, 152, 156], "76": 5, "93": [5, 32, 36], "21": [5, 84, 85], "70": 5, "22": [5, 10, 378], "46": 5, "89": [5, 10, 378], "82": 5, "11": [5, 6], "59": 5, "56": 5, "19": [5, 32, 36], "13": [5, 8], "23": 5, "28": 5, "51": 5, "79": 5, "16": [5, 11, 40, 45, 55, 64, 113, 118, 286, 287, 297, 298], "17": 5, "77": 5, "88": [5, 32, 36], "52": 5, "95": [5, 73, 77, 84, 85], "48": 5, "72": 5, "66": 5, "24": [5, 6, 113, 118], "69": 5, "86": [5, 159, 161], "26": [5, 84, 85], "27": [5, 84, 85], "29": [5, 6], "83": 5, "63": 5, "36": 5, "32": [5, 11, 40, 45, 113, 118, 217, 229, 230, 249, 250, 251, 258], "33": [5, 149, 151, 153, 155], "39": 5, "35": [5, 9], "37": 5, "38": [5, 32, 36], "45": [5, 346, 370], "71": 5, "40": [5, 7, 8, 9, 201, 204, 205, 206], "41": 5, "81": 5, "43": 5, "44": [5, 84, 85], "87": 5, "98": 5, "97": 5, "53": 5, "55": [5, 84, 85], "57": 5, "61": [5, 84, 85], "94": [5, 73, 77], "67": [5, 6, 10, 378], "75": [5, 84, 85, 151, 155], "84": 5, "85": [5, 84, 85], "91": 5, "aug1": 5, "aug2": 5, "aug3": 5, "tran": 5, "regist": [5, 32, 36, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 174, 181, 192, 195, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "probabl": [5, 32, 36, 72, 75, 88, 150, 152, 154, 156, 174, 175, 176, 188, 189, 190, 192, 194, 305], "script": [5, 6, 7, 8, 9], "minut": [5, 6, 7, 8, 9], "163": [5, 10, 378], "plot_augment": [5, 10, 378], "math": [6, 159, 161], "warn": [6, 32, 36, 40, 45, 55, 64, 65, 101], "scipi": [6, 72, 75, 304, 311, 324], "mpl_toolkit": 6, "mplot3d": 6, "axes3d": [6, 302, 303], "ico2ico": [6, 12, 171, 306, 311, 314, 324, 376], "build": [6, 8, 55, 64, 65, 84, 85, 177, 178, 183, 184, 187, 197, 216, 241, 304, 339, 340, 345, 347, 348, 349, 360, 362, 363, 369, 372], "vertices_norm": 6, "triangles_norm": 6, "standard_ico": [6, 7, 9, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 311, 314, 324, 325, 345, 357, 369, 376], "642": [6, 7, 9], "1280": [6, 7, 9], "Then": [6, 11], "fetch": [6, 12, 32, 36, 65, 200, 348, 349], "freesurf": [6, 32, 36, 216, 241, 331, 336, 345, 348, 369], "try": [6, 17, 18, 21, 23, 24, 27, 304], "find": [6, 17, 18, 19, 21, 23, 24, 25, 27, 65, 81, 309, 311, 316, 319, 324, 326, 350, 353, 358, 360], "optim": [6, 9, 19, 25, 40, 45, 51, 52, 54, 55, 56, 64, 65], "rotat": [6, 152, 156, 180, 186, 311, 320, 324, 346, 354, 370], "rmse": [6, 84, 85], "align_vector": 6, "54571598073452": 6, "okai": 6, "doe": [6, 20, 26, 78, 304], "suppos": 6, "equal": [6, 54, 55, 56, 64, 73, 77, 82, 83, 144, 146, 149, 153], "zero": [6, 7, 31, 37, 82, 83, 114, 115, 129, 130, 178, 184, 218, 229, 230, 231, 251, 252, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 310, 323], "issu": [6, 68], "matric": [6, 304], "That": 6, "previou": [6, 11], "algorithm": [6, 19, 25], "properli": 6, "row": [6, 11, 177, 178, 183, 184, 339, 362], "matrix": [6, 17, 18, 19, 23, 24, 25, 55, 64, 72, 73, 75, 77, 150, 152, 154, 156, 165, 168, 175, 188, 304], "52573111": 6, "85065081": 6, "96386126": 6, "2664047": 6, "91298249": 6, "39960705": 6, "08232358": 6, "8944": 6, "4472": 6, "2764": 6, "8507": 6, "1815": 6, "296": 6, "9378": 6, "0272": 6, "3462": 6, "0692": 6, "213": 6, "9746": 6, "sufac": [6, 12, 279, 306], "togeth": [6, 11, 305], "place": [6, 69], "subset": [6, 202, 203], "absolut": [6, 11, 18, 21, 24, 27, 65, 68, 84, 85], "sign": [6, 311, 324], "vertices_of_interest_norm": 6, "search": [6, 319, 339, 353, 362], "coords_of_interest": 6, "idx_of_interest": 6, "ab": [6, 55, 59, 60, 62, 63, 64, 73, 77, 114, 115, 129, 130, 149, 153], "sum": [6, 9], "vertices_of_interest": 6, "fs_row_idx": 6, "break": 6, "depend": [6, 32, 36, 55, 64, 88], "various": 6, "until": 6, "itertool": 6, "n_permut": 6, "factori": 6, "best_rms": 6, "best_rot": 6, "catch_warn": 6, "simplefilt": 6, "ignor": [6, 40, 45, 54, 55, 56, 64, 76, 84, 85, 86, 87, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 150, 152, 154, 156, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 304], "categori": 6, "userwarn": [6, 29, 30, 33, 34, 35], "format": [6, 9, 16, 22, 84, 85, 88, 150, 152, 154, 156, 165, 168, 315, 331, 332, 336, 337], "as_matrix": 6, "52575203": 6, "85063788": 6, "971395685383565e": 6, "05": [6, 10, 55, 64, 84, 85, 378], "simpli": [6, 55, 64], "solv": 6, "outlin": 6, "proper": [6, 29, 30, 31, 34, 35, 37], "anoth": [6, 11], "half": 6, "clearli": 6, "appear": [6, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "opt": 6, "hostedtoolcach": 6, "x64": 6, "lib": 6, "python3": 6, "coord": [6, 12, 171, 308, 309, 310, 311, 312, 313, 314], "246": 6, "closest": [6, 320, 354], "9190925817849288": 6, "576": [6, 10, 378], "plot_match_icosahedron": [6, 10, 378], "convert": [7, 80, 165, 168, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 250, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 310, 313, 323, 375], "spheric": [7, 10, 207, 208, 209, 211, 216, 217, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 248, 250, 251, 252, 253, 258, 260, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 286, 287, 290, 297, 298, 306, 307, 308, 310, 312, 313, 322, 323, 339, 356, 362, 374, 375, 378], "evenli": [7, 313, 375], "resampl": [7, 12, 88, 151, 155, 165, 166, 168, 169, 171, 313, 375], "respect": [7, 11, 151, 155, 165, 168, 290, 313, 375], "sin": [7, 313, 375], "elev": [7, 208, 209, 212, 213, 218, 230, 231, 254, 255, 258, 260, 269, 290, 307, 308, 312, 313, 374, 375], "azimuth": [7, 208, 209, 212, 213, 218, 230, 231, 254, 255, 258, 260, 269, 290, 307, 308, 312, 313, 374, 375], "vice": 7, "versa": 7, "ico_ord": [7, 9, 177, 178, 183, 184, 202, 203], "n_class": [7, 9, 201, 204, 205, 206, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 313, 314, 317, 326, 327, 346, 351, 358, 359, 370, 375, 376], "ico_vertic": [7, 9, 201, 204, 205, 206], "ico_triangl": [7, 9], "_": [7, 11, 31, 37, 283, 284, 294, 295, 305, 333, 335], "make_classif": [7, 9, 12, 171, 200, 205, 206, 313, 314, 317, 326, 327, 346, 351, 358, 359, 370, 375, 376], "seed": [7, 9, 51, 52, 54, 56, 201, 204, 205, 206, 313, 314, 317, 326, 327, 346, 351, 358, 359, 370, 375, 376], "proj_textur": 7, "text2grid": [7, 12, 171, 306, 307, 308, 310, 312, 313, 323, 374, 375], "proj": [7, 310, 313, 323, 375], "lower": [7, 11, 151, 155, 317, 348, 351], "nearest": [7, 17, 18, 23, 24, 151, 155, 165, 166, 168, 169, 175, 188, 229, 251, 252, 310, 313, 316, 323, 326, 350, 358, 375], "192": [7, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 250, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 310, 313, 323, 375], "grid2text": [7, 12, 171, 306, 307, 308, 310, 312, 313, 323, 374, 375], "is_label": [7, 9, 302, 303, 310, 314, 317, 323, 326, 327, 346, 351, 358, 359, 370, 376], "enabl": [7, 32, 36, 40, 45, 51, 52, 65, 90, 92], "scatter_dens": 7, "labelx": 7, "labe": 7, "scatter": [7, 8, 11, 316, 319, 339, 340, 345, 350, 353, 362, 363, 369], "width": [7, 114, 115, 129, 130, 302, 303], "bottom": 7, "height": [7, 259], "005": 7, "rect_scatt": 7, "rect_histx": 7, "rect_histi": 7, "ax_scatt": 7, "tick_param": 7, "direct": [7, 165, 168, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291, 313, 339, 362, 375], "top": [7, 17, 18, 19, 21, 23, 24, 25, 27], "ax_histx": 7, "ax_histi": 7, "bin": 7, "hist": 7, "orient": [7, 150, 152, 154, 156, 165, 168], "set_xlim": 7, "get_xlim": 7, "set_ylim": 7, "get_ylim": 7, "radiu": [7, 307, 308, 312, 374], "cart2sph": [7, 12, 171, 306, 307, 308, 312, 374], "sin_elev": 7, "circularli": [7, 290], "continu": [7, 11, 55, 60, 63, 64, 73, 77, 79, 80, 290], "circular": [7, 286, 287, 290, 297, 298], "pad": [7, 134, 164, 167, 229, 251, 252, 281, 286, 287, 290, 292, 297, 298], "boundari": [7, 290], "expand_dim": 7, "astyp": [7, 11, 165, 168], "float32": [7, 11, 165, 168], "from_numpi": [7, 165, 168], "pad_textur": 7, "circular_pad": [7, 12, 171, 279, 290], "padd": 7, "conv": [7, 114, 115, 122, 129, 130, 217, 229, 247, 248, 249, 250, 251, 252, 253, 280, 291], "conv2d": [7, 259], "in_channel": [7, 9, 11, 55, 64, 112, 113, 114, 115, 116, 118, 129, 130, 217, 229, 249, 250, 251], "out_channel": [7, 9, 217, 229, 249, 250, 251], "stride": [7, 114, 115, 127, 128, 129, 130, 133, 134, 286, 287, 297, 298], "conv_textur": 7, "194": [7, 8, 10, 218, 219, 220, 221, 222, 223, 224, 225, 226, 260, 261, 262, 263, 264, 265, 266, 267, 268, 286, 297, 378], "783": [7, 10, 378], "plot_project_textur": [7, 10, 378], "get_rectangular_project": [8, 12, 171, 306, 322, 356], "vidx": 8, "cnt": [8, 316, 319, 339, 340, 345, 350, 353, 362, 363, 369], "marker": [8, 316, 319, 339, 340, 345, 350, 353, 362, 363, 369], "str": [8, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 45, 51, 52, 54, 55, 56, 64, 65, 66, 68, 72, 73, 75, 77, 79, 84, 85, 91, 106, 108, 109, 131, 132, 149, 150, 151, 152, 153, 154, 155, 156, 164, 165, 166, 167, 168, 169, 175, 177, 178, 180, 183, 184, 186, 188, 202, 203, 212, 213, 214, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 251, 252, 254, 255, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 295, 304, 315, 320, 329, 330, 331, 332, 334, 336, 337, 346, 348, 349, 354, 370, 373], "3x3": [8, 114, 115, 129, 130, 134, 217, 229, 250, 251], "rectangular": [8, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 322, 340, 356, 363], "sphere": [8, 247, 252, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 322, 340, 344, 355, 356, 360, 363, 364, 368], "zoom": [8, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 296, 319, 322, 340, 353, 356, 363], "purpl": 8, "brown": 8, "pink": 8, "oliv": 8, "cyan": 8, "yellow": 8, "tan": 8, "salmon": 8, "violet": 8, "steelblu": [8, 11], "lime": 8, "navi": 8, "node": [8, 40, 45, 178, 184, 280, 291, 319, 322, 353, 356, 372], "node_rec_neigh": 8, "node_tplane_neigh": 8, "254": [8, 10, 32, 36, 378], "plot_spherical_neighbor": [8, 10, 378], "sphericalunet": [9, 12, 171, 211, 217, 229, 249, 250, 251], "genrat": 9, "n_epoch": 9, "surfac": [9, 11, 12, 32, 36, 171, 172, 173, 211, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 245, 250, 251, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 302, 303, 310, 313, 323, 330, 331, 332, 333, 336, 337, 339, 362, 375, 377], "crossentropi": 9, "sgd": [9, 55, 64], "obviou": 9, "classificationdataset": [9, 12, 171, 200, 201, 204], "in_ord": [9, 229, 251], "start_filt": [9, 217, 229, 250, 251], "conv_mod": [9, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "dine": [9, 177, 178, 183, 184, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291, 339, 362], "dine_s": [9, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "up_mod": [9, 229, 251, 252], "transpos": [9, 217, 229, 250, 251, 252, 282, 287, 288, 293, 298, 299], "loss_fn": 9, "crossentropyloss": 9, "momentum": [9, 55, 64], "n_batch": 9, "zero_grad": 9, "backward": [9, 55, 64, 79, 80], "current": [9, 32, 36, 40, 45, 51, 52, 54, 55, 56, 64, 66, 67, 69, 88, 150, 154], "7f": 9, "5d": 9, "eval": [9, 40, 45, 51, 52], "test_loss": 9, "y_pred": [9, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 79, 80, 82, 83, 84, 85], "no_grad": 9, "logit": [9, 71, 74], "softmax": 9, "type": [9, 16, 22, 31, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 64, 65, 66, 79, 80, 81, 86, 87, 88, 114, 115, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 180, 186, 187, 197, 229, 251, 252, 284, 295, 320, 339, 346, 354, 362, 370], "concaten": [9, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "error": [9, 11, 18, 21, 24, 27, 32, 36, 40, 45, 51, 52, 84, 85, 105, 108, 160, 162, 304, 328], "1f": 9, "avg": 9, "8f": 9, "137039": 9, "899477": 9, "778695": 9, "717829": 9, "624701": 9, "534001": 9, "474622": 9, "401533": 9, "004803": 9, "005989": 9, "006963": 9, "006808": 9, "005343": 9, "003321": 9, "001751": 9, "001147": 9, "000487": 9, "000419": 9, "000307": 9, "000201": 9, "000130": 9, "000094": 9, "000083": 9, "000087": 9, "000085": 9, "000067": 9, "000051": 9, "000039": 9, "000029": 9, "000021": 9, "000016": 9, "000012": 9, "000003": 9, "corresspond": 9, "exactli": 9, "ground": [9, 79, 80, 84, 85], "truth": [9, 79, 80, 84, 85], "330": [9, 10, 378], "565": [9, 10, 378], "plot_unet_segment": [9, 10, 378], "106": [10, 378], "weak": 11, "guid": [11, 17, 19, 23, 25, 304], "bring": 11, "push": [11, 54, 55, 56, 64], "apart": [11, 54, 55, 56, 64], "dissimilar": [11, 55, 64], "enhanc": 11, "qualiti": [11, 151, 155, 165, 166, 168, 169], "diseas": 11, "embed": [11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 55, 64, 71, 73, 74, 77, 112, 113, 114, 115, 116, 118, 129, 130, 214, 245], "md": 11, "regress": [11, 12, 18, 19, 20, 21, 24, 25, 26, 27, 40, 43, 45, 48, 51, 52, 54, 56, 79, 80, 83, 84, 85, 171], "knn": [11, 17, 18, 20, 23, 24, 26], "investig": 11, "voxel": [11, 32, 36, 88, 149, 150, 153, 154, 159, 160, 161, 162, 165, 168], "morphometri": [11, 32, 36], "vbm": [11, 32, 36], "templat": [11, 32, 36], "footprint": 11, "region": [11, 32, 36], "roi": 11, "whole": [11, 32, 36, 159, 160, 161, 162], "brain": [11, 32, 36, 159, 161, 377], "neuromorphometr": [11, 32, 36], "atla": [11, 32, 36], "284": [11, 32, 36], "individu": 11, "proxi": [11, 55, 60, 63, 64, 73, 77], "meta": [11, 55, 60, 63, 64, 73, 77, 175, 188, 304], "miccai": [11, 55, 60, 63, 64, 73, 77], "2021": [11, 54, 55, 56, 60, 63, 64, 73, 77, 112, 116, 159, 161, 230, 258], "linearregress": 11, "manifold": 11, "mean_absolute_error": 11, "kneighborsregressor": 11, "op": [11, 55, 64], "yawarecontrastivelearn": [11, 12, 53, 55, 64, 171], "multiviewstransform": [11, 12, 14, 87, 171], "throughout": 11, "tabular": [11, 29, 30, 33, 34, 35, 202, 203], "mask": [11, 29, 30, 33, 34, 35, 159, 160, 161, 162, 190, 202, 203, 208, 209, 304], "nois": [11, 145, 147, 179, 185], "mask_prob": 11, "noise_std": 11, "lambda": [11, 31, 37], "rand": [11, 165, 168], "randn": [11, 152, 156], "modal": [11, 32, 36], "dataloader_ssl_vbm": 11, "dataloader_ssl_vbm_test": 11, "sbm_channel": 11, "sbm_transform": 11, "vbm_transform": 11, "dataloader_ssl_sbm": 11, "dataloader_ssl_sbm_test": 11, "don": [11, 149, 151, 153, 155], "dataloader_vbm_train": 11, "dataloader_vbm_test": 11, "dataloader_sbm_train": 11, "dataloader_sbm_test": 11, "hack": 11, "avoid": [11, 160, 162, 304], "aim": 11, "instanti": [11, 55, 64, 165, 168], "impos": [11, 55, 64, 65], "compress": 11, "d": [11, 40, 45, 51, 52, 55, 64, 72, 75, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 250, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 286, 287, 290, 297, 298, 310, 313, 323, 375], "272": 11, "vbm_encod": 11, "hidden_channel": [11, 55, 64, 249], "sbm_encod": 11, "sake": 11, "bandwidth": [11, 55, 64, 72, 73, 75, 77], "kernel": [11, 55, 64, 72, 73, 75, 77, 114, 115, 129, 130, 144, 146, 165, 166, 168, 169, 177, 183, 286, 287, 297, 298, 339, 340, 362, 363], "varianc": [11, 18, 21, 24, 27, 82, 83, 84, 85, 160, 162, 304], "vbm_model": 11, "projection_head_kwarg": [11, 55, 64], "input_dim": [11, 55, 59, 60, 62, 63, 64, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "output_dim": [11, 55, 59, 60, 62, 63, 64, 259], "learning_r": [11, 55, 64], "enable_checkpoint": [11, 40, 45], "sbm_model": 11, "wide": 11, "pairwis": [11, 55, 64, 72, 73, 75, 77], "distanc": [11, 72, 75, 175, 188, 285, 296], "preserv": [11, 114, 115, 129, 130, 149, 153, 165, 166, 168, 169], "z_train_vbm": 11, "z_test_vbm": 11, "z_train_sbm": 11, "z_test_sbm": 11, "y_train_vbm": 11, "y_test_vbm": 11, "y_train_sbm": 11, "y_test_sbm": 11, "accord": [11, 19, 25, 32, 36, 114, 115, 129, 130, 159, 161, 339, 362], "plot_mds_side_by_sid": 11, "z_vbm": 11, "z_sbm": 11, "y_vbm": 11, "y_sbm": 11, "side": 11, "n_init": 11, "300": 11, "z_vbm_md": 11, "fit_transform": 11, "z_sbm_md": 11, "sc1": 11, "viridi": 11, "sc2": 11, "report": [11, 17, 19, 23, 25, 84, 85], "r": [11, 72, 75, 307, 308, 312, 374], "coeffici": [11, 18, 24, 82, 83, 84, 85, 320, 354], "evaluate_and_predict": 11, "z_train": 11, "z_test": 11, "y_train": 11, "y_test": 11, "mae": [11, 84, 85], "r2": [11, 18, 21, 24, 27, 36, 84, 85], "plot_comparison": 11, "dict": [11, 17, 18, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 66, 67, 68, 69, 84, 85, 86, 87, 88, 90, 92, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 177, 178, 183, 184, 202, 203, 216, 241, 278, 305, 319, 320, 339, 353, 354, 362], "n_model": 11, "n_modal": 11, "model_nam": 11, "col": 11, "lw": 11, "nmae": 11, "legend": 11, "k": [11, 17, 18, 23, 24, 54, 56, 72, 73, 75, 77, 113, 118, 175, 188, 280, 285, 291, 296, 314, 376], "organ": [11, 177, 178, 183, 184, 330, 339, 362], "mai": [11, 12, 40, 45, 304], "captur": 11, "relat": [11, 211, 216, 241], "context": [11, 17, 18, 19, 23, 24, 25, 328], "confirm": 11, "outperform": 11, "pleas": [12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "raw": [12, 32, 36, 330, 333, 335], "enough": 12, "guidelin": 12, "variou": [12, 89, 259], "help": [12, 40, 45, 89], "develop": [12, 13, 89], "definit": [12, 65, 72, 75, 110, 111, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 326, 358], "backbon": [12, 55, 64, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 171, 215, 242], "intens": [12, 88, 144, 145, 146, 147, 159, 160, 161, 162, 171], "link": 12, "plugin": 12, "helper": [12, 172], "integr": [12, 73, 77, 81, 172, 249], "pytorch": [12, 40, 45, 51, 52, 55, 64, 172, 212, 213, 227, 228, 254, 255, 256, 257, 315, 377], "artifici": [12, 149, 153, 200], "dedic": [12, 279], "content": [12, 29, 34], "fetch_experi": [12, 14, 65, 171], "filter_config": [12, 14, 66, 171], "get_env": [12, 14, 67, 171], "load_interfac": [12, 14, 68, 171], "update_param": [12, 14, 69, 171], "batchtypingcallback": [12, 15, 16, 22, 40, 45, 171], "kneighborsclassifiercvcallback": [12, 15, 17, 23, 171], "kneighborsregressorcvcallback": [12, 15, 18, 24, 171], "logisticregressioncvcallback": [12, 15, 19, 25, 171], "modelprob": [12, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 171], "ridgecvcallback": [12, 15, 21, 27, 171], "model_prob": [12, 23, 24, 25, 26, 27, 171], "check_typ": [12, 22, 171], "baseimagedataset": [12, 28, 29, 34, 171], "basenumpydataset": [12, 28, 30, 35, 171], "imagedataframedataset": [12, 28, 31, 37, 171], "basedataset": [12, 28, 29, 30, 33, 34, 35, 171], "pandas_dataset": [12, 31, 37, 38, 171], "default_image_load": [12, 28, 31, 37, 38, 171], "baseestim": [12, 20, 26, 39, 40, 45, 51, 52, 54, 55, 56, 64, 72, 75, 171], "classifiermixin": [12, 39, 41, 46, 51, 52, 171], "clustermixin": [12, 39, 42, 47, 171], "regressormixin": [12, 39, 43, 48, 171], "transformermixin": [12, 20, 26, 39, 44, 49, 54, 55, 56, 64, 171], "logistic_regress": [12, 52, 171], "yawar": [12, 60, 63, 64, 171], "projectionhead": [12, 57, 58, 59, 60, 61, 62, 63, 171], "simclrprojectionhead": [12, 57, 59, 62, 171], "yawareprojectionhead": [12, 55, 57, 60, 63, 64, 171], "projection_head": [12, 55, 58, 61, 62, 63, 64, 171], "infonc": [12, 51, 52, 54, 55, 56, 64, 71, 73, 74, 77, 171], "kernelmetr": [12, 55, 64, 70, 72, 73, 75, 77, 171], "yawareinfonc": [12, 55, 64, 70, 73, 77, 171], "yaware_infonc": [12, 55, 64, 75, 76, 77, 171], "pairwisecosinesimilar": [12, 70, 76, 171], "pearson_r": [12, 78, 82, 83, 171], "regression_report": [12, 78, 84, 85, 171], "_regress": [12, 79, 80, 81, 171], "_check_reg_target": [12, 78, 79, 80, 171], "_check_reg_targets_with_floating_dtyp": [12, 78, 79, 80, 171], "_find_matching_floating_dtyp": [12, 78, 79, 80, 81, 171], "bunch": [12, 65, 90, 92, 171], "print_multicolor": [12, 89, 97, 104, 171], "attr": [12, 89, 94, 106, 171], "fg": [12, 89, 95, 171], "hex": [12, 89, 96, 171], "print_result": [12, 89, 98, 171], "print_subtitl": [12, 89, 99, 171], "print_titl": [12, 89, 100, 171], "print_warn": [12, 89, 101, 171], "random_styl": [12, 89, 102, 171], "styliz": [12, 89, 103, 171], "_availableifdescriptor": [12, 89, 105, 171], "_estimator_i": [12, 89, 106, 171], "available_if": [12, 89, 107, 171], "check_is_fit": [12, 89, 108, 171], "alexnet": [12, 111, 112, 116, 171], "densenet": [12, 111, 113, 117, 118, 124, 171], "resnettrunc": [12, 111, 115, 130, 171], "densenet121": [12, 111, 117, 124, 171], "resnet18_trunc": [12, 111, 126, 136, 171], "resnet50": [12, 111, 114, 115, 129, 130, 137, 139, 171], "resnet50_trunc": [12, 111, 138, 140, 171], "densenet3d": [12, 118, 119, 120, 121, 122, 123, 124, 171], "_denseblock": [12, 111, 119, 171], "_denselay": [12, 111, 120, 171], "_transit": [12, 111, 121, 171], "_bn_function_factori": [12, 111, 122, 171], "_densenet": [12, 111, 123, 171], "alexnet3d": [12, 116, 171], "resnet3d": [12, 55, 64, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 171], "basicblock": [12, 111, 114, 115, 127, 129, 130, 171], "bottleneck": [12, 111, 113, 114, 115, 118, 128, 129, 130, 171], "_resnet": [12, 111, 131, 171], "_resnet_trunc": [12, 111, 132, 171], "conv1x1": [12, 111, 133, 171], "conv3x3": [12, 111, 134, 171], "volume_transform": [12, 170, 171], "volumetransform": [12, 141, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 167, 168, 170, 171], "randomgaussianblur": [12, 88, 143, 144, 146, 171], "randomgaussiannois": [12, 88, 143, 145, 147, 171], "random_blur": [12, 146, 171], "random_nois": [12, 147, 171], "randomeras": [12, 88, 148, 149, 153, 171], "randomflip": [12, 88, 148, 150, 154, 171], "randomrot": [12, 88, 148, 152, 156, 171], "random_rot": [12, 156, 171], "random_resized_crop": [12, 155, 171], "random_flip": [12, 154, 171], "random_eras": [12, 153, 171], "robustresc": [12, 88, 158, 159, 161, 171], "znormal": [12, 88, 158, 160, 162, 171], "z_normal": [12, 162, 171], "rescal": [12, 159, 161, 171, 348], "croporpad": [12, 88, 163, 164, 167, 171], "crop_or_pad": [12, 167, 171], "randomcompos": [12, 171, 172, 305], "basetransform": [12, 171, 173, 174, 181, 182, 192, 195, 196], "groupmixup": [12, 171, 173, 175, 188], "hemimixup": [12, 171, 173, 176, 189], "surfblur": [12, 171, 173, 177, 183], "surfcutout": [12, 171, 173, 178, 184], "surfnois": [12, 171, 173, 179, 185], "surfrot": [12, 171, 173, 180, 186], "apply_chained_transform": [12, 171, 173, 182, 196], "multichannel_augment": [12, 171, 173, 191, 199], "randomaugment": [12, 171, 173, 174, 177, 178, 179, 180, 183, 184, 185, 186, 190, 191, 192, 193, 199], "listifi": [12, 171, 173, 198], "mixup": [12, 171, 188, 189, 190], "mixupaugment": [12, 171, 173, 175, 176, 188, 189, 190], "genericsurfdataset": [12, 171, 200, 202, 203], "_samples_gener": [12, 171, 204, 205], "_gener": [12, 171, 203], "sphericalvaeloss": [12, 171, 207, 208, 209], "vae": [12, 171, 208, 209, 210, 230, 254, 255, 256, 257, 258, 259], "log_likelihood": [12, 171, 207, 210], "hemifusiondecod": [12, 171, 211, 212, 254], "hemifusionencod": [12, 171, 211, 213, 255], "sit": [12, 171, 214, 243, 244, 245, 246], "sphericalbas": [12, 171, 211, 216, 227, 228, 229, 231, 241, 251, 256, 257, 269], "sphericalgunet": [12, 171, 211, 217, 229, 249, 250, 251], "sphericalgvgg": [12, 171, 211, 218, 231, 260, 269], "sphericalgvgg11": [12, 171, 211, 218, 219, 260, 261], "sphericalgvgg11bn": [12, 171, 211, 220, 262], "sphericalgvgg13": [12, 171, 211, 221, 263], "sphericalgvgg13bn": [12, 171, 211, 222, 264], "sphericalgvgg16": [12, 171, 211, 223, 265], "sphericalgvgg16bn": [12, 171, 211, 224, 266], "sphericalgvgg19": [12, 171, 211, 225, 267], "sphericalgvgg19bn": [12, 171, 211, 226, 268], "sphericalhemifusiondecod": [12, 171, 211, 227, 256], "sphericalhemifusionencod": [12, 171, 211, 228, 257], "sphericalva": [12, 171, 211, 230, 258], "sphericalvgg": [12, 171, 211, 218, 231, 260, 269], "sphericalvgg11": [12, 171, 211, 231, 232, 269, 270], "sphericalvgg11bn": [12, 171, 211, 233, 271], "sphericalvgg13": [12, 171, 211, 234, 272], "sphericalvgg13bn": [12, 171, 211, 235, 273], "sphericalvgg16": [12, 171, 211, 236, 274], "sphericalvgg16bn": [12, 171, 211, 237, 275], "sphericalvgg19": [12, 171, 211, 238, 276], "sphericalvgg19bn": [12, 171, 211, 239, 277], "vgg": [12, 171, 218, 231, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "class_factori": [12, 171, 211, 278], "ico": [12, 171, 177, 178, 183, 184, 202, 203, 211, 216, 240, 241, 280, 291], "attent": [12, 171, 211, 214, 243, 245], "feedforward": [12, 171, 211, 244], "downblock": [12, 171, 211, 247], "downgblock": [12, 171, 211, 248], "graphicalunet": [12, 171, 211, 249], "upblock": [12, 171, 211, 252], "upgblock": [12, 171, 211, 253], "compute_output_dim": [12, 171, 211, 259], "icodineconv": [12, 171, 177, 183, 279, 280, 285, 286, 291, 296, 297], "icofixindexupsampl": [12, 171, 279, 281, 282, 283, 287, 288, 289, 292, 293, 294, 298, 299, 300], "icogenericupconv": [12, 171, 279, 281, 282, 283, 287, 288, 289, 292, 293, 294, 298, 299, 300], "icomaxindexupsampl": [12, 171, 279, 281, 282, 283, 287, 288, 289, 292, 293, 294, 298, 299, 300], "icopool": [12, 171, 279, 283, 284, 294, 295], "icorepaconv": [12, 171, 279, 280, 285, 286, 291, 296, 297], "icospmaconv": [12, 171, 259, 279, 280, 285, 286, 291, 296, 297], "icospmaconvtranspos": [12, 171, 279, 281, 282, 283, 287, 288, 289, 292, 293, 294, 298, 299, 300], "icoupconv": [12, 171, 279, 281, 282, 283, 288, 289, 292, 293, 294, 299, 300], "icoupsampl": [12, 171, 279, 281, 282, 283, 287, 288, 289, 292, 293, 294, 298, 299, 300], "debug_msg": [12, 171, 306, 315], "downsampl": [12, 127, 128, 171, 202, 203, 216, 241, 247, 248, 252, 282, 283, 284, 288, 293, 294, 295, 299, 306, 316, 317, 318, 326, 327, 348, 350, 351, 352, 358, 359], "downsample_data": [12, 171, 306, 316, 317, 318, 326, 327, 350, 351, 352, 358, 359], "downsample_ico": [12, 171, 306, 316, 317, 318, 326, 327, 350, 351, 352, 358, 359], "find_neighbor": [12, 171, 306, 319, 353], "find_rotation_interpol_coef": [12, 171, 306, 320, 344, 354, 368], "get_logg": [12, 171, 306, 321], "interpol": [12, 151, 155, 165, 166, 168, 169, 171, 180, 186, 229, 251, 252, 281, 289, 292, 300, 302, 303, 306, 310, 313, 316, 317, 318, 320, 323, 326, 327, 344, 346, 350, 351, 352, 354, 358, 359, 368, 370, 375], "interpolate_data": [12, 171, 306, 316, 317, 318, 326, 327, 350, 351, 352, 358, 359], "neighbors_rec": [12, 171, 285, 296, 306, 319, 339, 340, 353, 362, 363], "number_of_ico_vertic": [12, 171, 306, 341, 343, 365, 367], "number_of_neighbor": [12, 171, 306, 338, 342, 361, 366], "order_of_ico_from_vertic": [12, 171, 306, 341, 343, 365, 367], "order_triangl": [12, 171, 306, 344, 368], "patch_tri": [12, 171, 306, 345, 347, 369], "rotate_data": [12, 171, 180, 186, 306, 320, 346, 354, 370], "setup_log": [12, 171, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 373], "sph2cart": [12, 171, 306, 307, 308, 312, 374], "text2ico": [12, 171, 306, 311, 314, 324, 376], "hideprint": [12, 171, 306, 328], "compute_and_stor": [12, 171, 306, 329], "decompose_cifti": [12, 171, 306, 330], "read_freesurf": [12, 171, 306, 331], "read_gifti": [12, 171, 306, 332], "surf_data_from_cifti": [12, 171, 306, 333], "ungzip": [12, 171, 306, 334], "volume_from_cifti": [12, 171, 306, 335], "write_freesurf": [12, 171, 306, 336], "write_gifti": [12, 171, 306, 337], "_patch_tri_it": [12, 171, 306, 347], "build_freesurfer_ico": [12, 171, 306, 348], "build_fslr_ref": [12, 171, 306, 349], "get_angle_with_xaxi": [12, 171, 306, 355], "middle_point": [12, 171, 306, 360], "triangles_to_edg": [12, 171, 306, 371], "vertex_adjacency_graph": [12, 171, 306, 372], "find_corresponding_ord": [12, 171, 306, 309], "walk": 13, "intal": 13, "offici": [13, 81], "releas": 13, "user": [13, 17, 19, 23, 25, 40, 45, 66, 217, 229, 250, 251, 304, 346, 370], "who": 13, "latest": [13, 78, 81], "contribut": 13, "privileg": 13, "pip": 13, "git": 13, "repositori": [13, 32, 36, 91, 109], "github": [13, 211, 333, 335], "deepinsight": 13, "page": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "document": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "explain": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "signatur": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "big": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "pictur": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "rais": [16, 20, 22, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 87, 88, 105, 107, 108, 170, 304], "typeerror": [16, 22, 31, 37, 108], "annot": [16, 22], "traiterror": [16, 22], "incorrect": [16, 22, 31, 37], "notimplementederror": [16, 22], "handl": [16, 22, 54, 55, 56, 64, 87, 91, 109, 144, 146, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169], "on_predict_batch_start": [16, 22], "trainer": [16, 20, 22, 26, 40, 45, 51, 52, 54, 55, 56, 64], "pl_modul": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "batch_idx": [16, 22, 40, 45, 51, 52, 54, 55, 56, 64], "dataloader_idx": [16, 22, 40, 45, 51, 52, 54, 55, 56, 64], "begin": [16, 20, 22, 26], "on_test_batch_start": [16, 22], "on_train_batch_start": [16, 22], "on_validation_batch_start": [16, 22], "train_dataload": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 54, 55, 56, 64], "test_dataload": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 54, 55, 56, 64], "probe_nam": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "tupl": [17, 18, 20, 21, 23, 24, 26, 27, 32, 36, 51, 52, 54, 55, 56, 58, 61, 64, 65, 66, 91, 109, 113, 114, 118, 129, 131, 132, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 164, 165, 166, 167, 168, 169, 193, 194, 198, 240, 286, 287, 290, 297, 298], "cv": [17, 18, 19, 21, 23, 24, 25, 27, 65, 69], "n_job": [17, 18, 19, 23, 24, 25, 345, 369], "balanced_accuraci": [17, 19, 23, 25], "concret": [17, 18, 19, 21, 23, 24, 25, 27, 72, 75], "emb": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "log": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 51, 52, 54, 55, 56, 64, 73, 77, 208, 209, 210, 214, 216, 217, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 249, 250, 251, 258, 260, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 321, 373], "main": [17, 18, 19, 21, 23, 24, 25, 27, 84, 85], "support": [17, 19, 23, 25, 31, 32, 36, 37, 40, 45, 51, 52, 88], "unweight": [17, 19, 23, 25], "precis": [17, 19, 23, 25, 40, 45, 55, 64, 81], "recal": [17, 19, 23, 25], "f1": [17, 19, 23, 25], "yield": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "form": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 32, 36, 65, 91, 109, 175, 188], "probe": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 65], "default": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 45, 51, 52, 54, 55, 56, 64, 65, 68, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 91, 108, 109, 112, 113, 114, 115, 116, 118, 129, 130, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 165, 166, 168, 169, 174, 175, 177, 178, 180, 183, 184, 186, 187, 188, 191, 192, 197, 199, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 284, 286, 287, 291, 295, 297, 298, 302, 303, 304, 309, 313, 314, 317, 318, 320, 322, 325, 327, 328, 329, 330, 339, 340, 341, 344, 345, 346, 348, 349, 351, 352, 354, 356, 357, 359, 362, 363, 365, 368, 369, 370, 373, 375, 376], "metric_nam": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "hyper": [17, 18, 19, 21, 23, 24, 25, 27], "job": [17, 18, 19, 23, 24, 25, 345, 369], "parallel": [17, 18, 19, 23, 24, 25], "unless": [17, 18, 19, 23, 24, 25], "joblib": [17, 18, 19, 23, 24, 25], "parallel_backend": [17, 18, 19, 23, 24, 25], "processor": [17, 18, 19, 23, 24, 25], "complet": [17, 18, 19, 21, 23, 24, 25, 27, 328, 329], "list": [17, 18, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 54, 55, 56, 58, 61, 64, 65, 69, 72, 73, 75, 77, 79, 87, 175, 182, 188, 196, 198, 201, 202, 203, 204, 205, 206, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 317, 318, 319, 326, 327, 351, 352, 353, 358, 359, 371], "option": [17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 54, 55, 56, 58, 61, 64, 73, 77, 82, 83, 84, 85, 88, 177, 178, 183, 184, 208, 209, 212, 213, 216, 227, 228, 241, 254, 255, 256, 257, 302, 303, 304, 317, 318, 325, 327, 328, 344, 345, 351, 352, 357, 359, 368, 369], "scikit": [17, 18, 19, 21, 23, 24, 25, 27, 78], "org": [17, 18, 19, 21, 23, 24, 25, 27, 32, 36, 55, 59, 60, 62, 63, 64, 71, 73, 74, 77, 81, 105, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 149, 153, 333, 335], "model_evalu": [17, 18, 19, 21, 23, 24, 25, 27], "html": [17, 18, 19, 21, 23, 24, 25, 27, 81, 105], "keyword": [17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 54, 55, 56, 64, 79, 80, 86, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169], "argument": [17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 54, 55, 56, 64, 68, 79, 80, 86, 87, 88, 108, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 329, 346, 370], "pass": [17, 18, 19, 21, 23, 24, 25, 27, 31, 37, 40, 45, 55, 58, 61, 64, 76, 79, 107, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 304], "constructor": [17, 18, 19, 21, 23, 24, 25, 27], "every_n_train_epoch": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "every_n_val_epoch": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "prog_bar": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45], "spars": [17, 18, 19, 23, 24, 25, 304], "n_featur": [17, 18, 19, 23, 24, 25, 55, 64, 71, 72, 73, 74, 75, 77, 317, 327, 346, 351, 359, 370], "precomput": [17, 23], "n_output": [17, 18, 23, 24, 79, 80, 82, 83, 84, 85], "log_metr": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27], "y_true": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 79, 80, 82, 83, 84, 85], "new": [17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 40, 45, 72, 75, 91, 109, 150, 154, 165, 166, 168, 169, 174, 192, 193, 194, 240, 281, 292, 304], "regressor": [18, 21, 24, 27, 43, 48, 84, 85, 112, 116], "median": [18, 21, 24, 27, 84, 85, 164, 167], "squar": [18, 21, 24, 27, 84, 85, 212, 254, 259], "pearson": [18, 24, 82, 83, 84, 85], "correl": [18, 24, 82, 83, 84, 85, 286, 287, 297, 298], "regular": [18, 19, 21, 24, 25, 27, 55, 64, 149, 153, 326, 358], "ridg": [18, 20, 21, 24, 26, 27], "neg_mean_absolute_error": [18, 21, 24, 27], "neg_mean_squared_error": [18, 21, 24, 27], "linear_solv": [19, 25], "lbfg": [19, 25, 55, 64], "logist": [19, 20, 25, 26, 51, 52], "l2": [19, 21, 25, 27], "invers": [19, 25, 71, 74], "logarithm": [19, 25], "1e4": [19, 25], "machin": [19, 25, 65, 91, 109], "specifi": [19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 55, 64, 65, 68, 88, 91, 109, 150, 151, 154, 155, 165, 168, 174, 177, 178, 183, 184, 192, 202, 203, 302, 303, 317, 318, 327, 351, 352, 359], "strenght": [19, 25], "maximum": [19, 25, 164, 167, 302, 303, 345, 369], "taken": [19, 25, 159, 160, 161, 162], "solver": [19, 25], "converg": [19, 25], "liblinear": [19, 25], "newton": [19, 25], "cg": [19, 25], "choleski": [19, 25], "sag": [19, 25], "saga": [19, 25], "problem": [19, 25, 205, 206, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "on_test_epoch_start": [20, 26], "bool": [20, 26, 31, 32, 36, 37, 40, 45, 82, 83, 84, 85, 91, 106, 109, 113, 114, 115, 118, 129, 130, 149, 153, 174, 191, 192, 199, 202, 203, 208, 209, 212, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 248, 249, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 291, 302, 303, 304, 325, 328, 330, 339, 344, 345, 357, 362, 368, 369], "on_test_epoch_end": [20, 26], "abc": [20, 26, 88], "logic": [20, 26, 40, 45, 51, 52, 88], "transform_step": [20, 26, 40, 45, 54, 55, 56, 64], "abstract": [20, 26, 40, 45, 88], "should": [20, 26, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 76, 82, 83, 87, 88, 91, 107, 109, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 160, 162, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 304], "inherit": [20, 26, 40, 45, 65], "disabl": [20, 26, 40, 45, 51, 52], "progress": [20, 26, 40, 45, 51, 52, 55, 64], "extract_featur": [20, 26], "By": [20, 26, 31, 37, 40, 45, 51, 52, 55, 64], "linear_prob": [20, 26], "valueerror": [20, 26, 31, 37, 87, 88, 170], "on_train_epoch_end": [20, 26], "access": [20, 26, 31, 32, 36, 37, 90, 92, 278, 329], "cach": [20, 26, 51, 52, 91, 109, 177, 178, 180, 183, 184, 186, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 329], "attribut": [20, 26, 31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 69, 90, 92, 93, 94, 107, 108], "core": [20, 26, 31, 37, 40, 45, 51, 52], "lightningmodul": [20, 26, 40, 45, 55, 64], "hook": [20, 26, 40, 45, 55, 64, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "mylightningmodul": [20, 26], "l": [20, 26, 149, 153, 159, 161], "super": [20, 26, 40, 45, 51, 52], "training_step_output": [20, 26], "training_step": [20, 26, 40, 45, 51, 52, 54, 55, 56, 64], "mycallback": [20, 26], "someth": [20, 26], "epoch_mean": [20, 26], "training_epoch_mean": [20, 26], "free": [20, 26], "on_validation_epoch_end": [20, 26, 51, 52], "pearsonr": [21, 27, 84, 85], "multipl": [21, 27, 31, 32, 36, 37, 40, 45, 51, 52, 55, 64, 65, 66, 82, 83, 87, 113, 118, 149, 152, 153, 156, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "multivari": [21, 27, 72, 75], "subject_in_pattern": [29, 34, 202, 203], "target_map": [29, 30, 33, 34, 35, 202, 203], "withdraw_subject": [29, 30, 33, 34, 35, 202, 203], "scalabl": [29, 34, 40, 45, 202, 203], "locat": [29, 30, 33, 34, 35, 91, 109, 202, 203, 334], "store": [29, 30, 31, 32, 33, 34, 35, 36, 37, 54, 56, 202, 203, 329, 330, 331, 332, 346, 370], "folder": [29, 34, 180, 186, 202, 203, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "level": [29, 34, 202, 203, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 373], "identifi": [29, 34, 202, 203, 311, 324], "retriev": [29, 32, 34, 36, 91, 109, 202, 203], "optionali": [29, 30, 33, 34, 35, 51, 52, 54, 56, 202, 203, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "dictionari": [29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 55, 64, 84, 85, 90, 92, 93, 177, 178, 183, 184, 202, 203, 339, 362], "exist": [29, 30, 33, 34, 35, 91, 109, 202, 203, 304, 348, 349], "datafram": [29, 30, 31, 33, 34, 35, 37, 175, 188, 202, 203], "callabl": [29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 87, 107, 159, 160, 161, 162, 202, 203, 329], "optionnali": [29, 30, 33, 34, 35, 51, 52, 177, 178, 183, 184, 191, 199, 202, 203], "filenotfounderror": [29, 30, 33, 34, 35], "mandatorri": [29, 30, 33, 34, 35], "keyerror": [29, 30, 33, 34, 35], "mandatori": [29, 30, 33, 34, 35, 305], "kei": [29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 90, 92, 177, 178, 183, 184, 216, 241, 305, 339, 362], "miss": [29, 30, 32, 33, 34, 35, 36, 326, 358], "particip": [29, 30, 32, 33, 34, 35, 36, 202, 203], "tsv": [29, 30, 31, 32, 33, 34, 35, 36, 37, 202, 203], "request": [29, 30, 32, 33, 34, 35, 36, 150, 154, 202, 203, 211, 304], "conta": [29, 30, 33, 34, 35, 202, 203], "idea": [29, 34, 54, 56], "your": [29, 33, 34, 40, 45, 55, 64, 65, 91, 102, 103, 109, 377], "rather": [29, 34], "symlink": [29, 34], "aggreg": [29, 32, 34, 36, 82, 83], "enforc": [29, 34, 55, 64], "reproduc": [29, 34, 40, 45, 51, 52, 54, 56], "persist": [29, 34], "get_checksum": [29, 34], "hash": [29, 34, 91, 109], "get_data": [29, 30, 34, 35], "rootdir": [31, 37], "df": [31, 37], "frame": [31, 37], "image_col": [31, 37], "image_path": [31, 37], "label_col": [31, 37], "checksum_col": [31, 37], "target_transform": [31, 32, 36, 37], "return_none_if_no_label": [31, 37], "image_load": [31, 37], "is_valid_label": [31, 37], "read_csv_kwarg": [31, 37], "column": [31, 37], "checksum": [31, 37], "fly": [31, 32, 36, 37], "alongsid": [31, 37], "least": [31, 37, 40, 45], "csv": [31, 32, 36, 37], "string": [31, 32, 36, 37, 55, 64, 79, 80, 108, 302, 303], "version": [31, 32, 36, 37, 54, 56, 65, 68, 72, 75, 78, 304], "tensor": [31, 37, 40, 45, 51, 52, 54, 55, 56, 58, 61, 64, 71, 73, 74, 77, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 208, 209, 210, 212, 213, 214, 218, 227, 228, 230, 231, 245, 252, 254, 255, 256, 257, 258, 260, 269, 290, 315], "must": [31, 37, 40, 45, 51, 52, 54, 55, 56, 64, 65, 72, 73, 75, 77, 88, 108, 144, 146, 150, 154, 159, 160, 161, 162, 165, 166, 168, 169, 174, 192, 329, 334], "empti": [31, 37], "otherwis": [31, 32, 36, 37, 40, 45, 55, 64, 82, 83, 87, 107, 108, 150, 152, 154, 156, 304], "accept": [31, 37, 79, 80, 88], "extens": [31, 37, 149, 153, 334], "pil": [31, 37], "jpg": [31, 37], "png": [31, 37], "bmp": [31, 37], "etc": [31, 37, 55, 64], "npy": [31, 37], "npz": [31, 37], "medic": [31, 37, 159, 161, 165, 166, 168, 169], "nii": [31, 32, 36, 37], "gz": [31, 32, 36, 37, 334], "filter": [31, 37, 65, 66, 113, 118, 144, 146, 177, 183, 212, 213, 216, 217, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 284, 285, 288, 291, 293, 295, 296, 299], "out": [31, 32, 36, 37, 40, 45, 51, 52, 178, 184, 198, 218, 229, 230, 231, 251, 258, 260, 269], "invalid": [31, 37], "nan": [31, 37, 82, 83], "boolean": [31, 37, 40, 45, 159, 160, 161, 162], "read_csv": [31, 37], "separ": [31, 37, 65, 159, 160, 161, 162], "colomn": [31, 37], "vision": [31, 37, 211, 214, 245, 345, 369], "image1": [31, 37], "image2": [31, 37], "mypath": [31, 37], "mri1": [31, 37], "mri2": [31, 37], "diagnosi": [31, 37], "patient": [31, 37], "control": [31, 32, 36, 37, 40, 45, 51, 52, 54, 55, 56, 64, 174, 177, 183, 192, 201, 204, 205, 206, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 286, 287, 297, 298, 322, 340, 356, 363], "image_mri": [31, 37], "label_mri": [31, 37], "age_mri": [31, 37], "nifti1": [31, 37], "apply_target_transform": [31, 37], "apply_transform": [31, 37, 86, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169], "max_work": [32, 36], "r1": 32, "open": [32, 36, 334], "consist": [32, 36, 54, 55, 56, 60, 63, 64, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169], "t1w": [32, 36], "public": [32, 36], "ixi": [32, 36], "abid": [32, 36], "ii": [32, 36, 55, 64], "corr": [32, 36], "gsp": [32, 36], "mpi": [32, 36], "leipzig": [32, 36], "nar": [32, 36], "npc": [32, 36], "rbp": [32, 36], "were": [32, 36], "acquir": [32, 36], "worldwid": [32, 36], "north": [32, 36], "america": [32, 36], "europ": [32, 36], "china": [32, 36], "balanc": [32, 36], "male": [32, 36], "femal": [32, 36], "uniformli": [32, 36], "spm": [32, 36], "quasi": [32, 36], "hous": [32, 36], "minim": [32, 36, 54, 55, 56, 64, 338, 361], "entir": [32, 36], "350gb": [32, 36], "recommend": [32, 36], "intend": [32, 36], "portion": [32, 36, 151, 155], "directori": [32, 36, 329], "multimod": [32, 36], "__getitem__": [32, 36], "121": [32, 36, 117, 124], "145": [32, 36], "182": [32, 36], "218": [32, 36], "destrieux": [32, 36], "fsaverage7": [32, 36], "internal_v": [32, 36], "external_v": [32, 36], "union": [32, 36, 55, 64, 73, 77], "scanner": [32, 36], "lazili": [32, 36], "hug": [32, 36, 65, 91, 109], "face": [32, 36, 65, 91, 109, 302, 303], "demand": [32, 36], "concurr": [32, 36, 345, 369], "thread": [32, 36], "429": [32, 36], "1d": [32, 36, 55, 64, 73, 77], "exclus": [32, 36], "huggingfac": [32, 36], "either": [32, 36, 55, 64, 107, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304], "lazi": [32, 36], "immedi": [32, 36], "b": [32, 36, 55, 60, 63, 64, 72, 73, 75, 77, 90, 92, 144, 145, 146, 147, 159, 161, 165, 166, 168, 169], "victor": [32, 36], "j": [32, 36, 54, 56, 72, 73, 75, 77], "frouin": [32, 36], "duchesnai": [32, 36], "119121": [32, 36], "doi": [32, 36, 71, 74, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "1016": [32, 36], "119637": [32, 36], "download_dataset_split": [32, 36], "increment": [32, 36], "make_dataset": [32, 36], "eventu": [32, 36, 149, 152, 153, 156], "download_fil": [32, 36], "filenam": [32, 36], "get_cat12_templ": [32, 36], "nifti": [32, 36], "tpm": [32, 36], "mni152": [32, 36], "resourc": [32, 36], "cat12vbm_spac": [32, 36], "mni152_desc": [32, 36], "gm_tpm": [32, 36], "resp": [32, 36], "rh": [32, 36], "length": [32, 36, 339, 362], "divid": [32, 36, 114, 115, 129, 130], "json": [32, 36], "automat": [32, 36, 40, 45, 51, 52, 55, 64, 65, 72, 75, 80, 346, 370], "abbrevi": [32, 36], "integ": [32, 36, 40, 45], "under": [32, 36], "get_quasiraw_templ": [32, 36], "quasiraw_spac": [32, 36], "brain_t1w": [32, 36], "csf": [32, 36], "construct": [32, 36, 65], "unimod": [32, 36], "configur": [32, 36, 40, 45, 55, 64, 65, 66, 159, 161, 377], "metadata": [32, 36, 165, 168, 304], "im": 38, "val_check_interv": [40, 45], "min_epoch": [40, 45], "max_step": [40, 45, 55, 64], "min_step": [40, 45], "enable_progress_bar": [40, 45], "enable_model_summari": [40, 45], "strategi": [40, 45, 51, 52, 214, 245], "num_nod": [40, 45], "liter": [40, 45], "engin": [40, 45], "float16": [40, 45], "mix": [40, 45], "bf16": [40, 45], "sequenc": [40, 45, 51, 52, 54, 56, 87, 174, 181, 192, 195, 214, 245], "lightn": [40, 45, 55, 64, 377], "interfac": [40, 45, 65, 66, 68, 69, 72, 75, 377], "capabl": [40, 45], "basicali": [40, 45], "child": [40, 45, 65, 191, 199], "mixin": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "loop": [40, 45], "often": [40, 45, 55, 64], "fraction": [40, 45], "fix": [40, 45, 281, 292, 302, 303, 364], "onc": [40, 45, 54, 56], "reach": [40, 45], "infinit": [40, 45], "forc": [40, 45, 91, 109], "checkpoint": [40, 45, 113, 118], "summar": [40, 45], "tpu": [40, 45, 51, 52], "hpu": [40, 45], "mp": [40, 45], "custom": [40, 45, 55, 64, 79, 80, 108], "alias": [40, 45], "listof": [40, 45], "doubl": [40, 45, 217, 229, 250, 251], "16bit": [40, 45], "bfloat16": [40, 45], "extra": [40, 45, 54, 55, 56, 64], "tune": [40, 45], "debug": [40, 45, 202, 203, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 315], "hparam": [40, 45], "dictionarai": [40, 45, 65], "TO": [40, 45], "BE": [40, 45], "validation_step": [40, 45, 51, 52, 54, 55, 56, 64], "anyth": [40, 45, 51, 52], "predict_step": [40, 45, 51, 52], "log_dict": [40, 45], "val_dataload": [40, 45, 54, 55, 56, 64], "instruct": [40, 45], "logger": [40, 45, 51, 52, 321], "on_step": [40, 45], "on_epoch": [40, 45], "reduce_fx": [40, 45], "enable_graph": [40, 45], "sync_dist": [40, 45], "sync_dist_group": [40, 45], "add_dataloader_idx": [40, 45], "metric_attribut": [40, 45], "rank_zero_onli": [40, 45], "ddp": [40, 45], "determin": [40, 45, 175, 188], "accumul": [40, 45], "detach": [40, 45], "graph": [40, 45, 249, 372], "care": [40, 45, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298, 346, 370], "commun": [40, 45], "overhead": [40, 45], "group": [40, 45, 114, 115, 127, 128, 129, 130, 134, 175, 188, 304], "sync": [40, 45], "uniqu": [40, 45, 309], "infer": [40, 45, 51, 52, 54, 55, 56, 64], "explicitli": [40, 45], "restor": [40, 45, 328], "state": [40, 45, 58, 59, 60, 61, 62, 63, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 211, 212, 215, 230, 242, 243, 244, 246, 254, 258], "torchmetr": [40, 45], "tell": [40, 45], "rank": [40, 45], "won": [40, 45, 51, 52], "abl": [40, 45], "improp": [40, 45], "deadlock": [40, 45], "train_loss": [40, 45], "metriccollect": [40, 45], "test_step": [40, 45], "metric_n": [40, 45], "forward": [40, 45, 51, 52, 58, 61, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 212, 213, 214, 215, 217, 218, 227, 228, 229, 230, 231, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "overrid": [40, 45, 51, 52, 55, 64], "prevent": [40, 45, 51, 52], "oom": [40, 45, 51, 52], "basepredictionwrit": [40, 45, 51, 52], "write": [40, 45, 51, 52, 336, 337], "databas": [40, 45, 51, 52], "spawn": [40, 45, 51, 52], "happen": [40, 45, 51, 52], "ddp_spawn": [40, 45, 51, 52], "produc": [40, 45, 51, 52, 55, 64, 165, 166, 168, 169], "step_output": [40, 45, 51, 52], "skip": [40, 45, 51, 52, 247, 248, 249], "deepspe": [40, 45, 51, 52], "manual": [40, 45, 51, 52, 55, 64], "special": [40, 45, 51, 52, 65], "switch": [40, 45, 51, 52, 55, 64], "accumulate_grad_batch": [40, 45, 51, 52], "intern": [40, 45, 51, 52, 58, 59, 60, 61, 62, 63, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 165, 166, 168, 169, 215, 242, 243, 244, 246], "automatic_optim": [40, 45, 51, 52], "gan": [40, 45, 51, 52, 55, 64], "opt1": [40, 45, 51, 52], "opt2": [40, 45, 51, 52], "share": [40, 45, 58, 59, 60, 61, 62, 63, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 150, 154, 215, 242, 243, 244, 246], "api": [40, 45, 80, 81], "calcul": [40, 45, 51, 52, 55, 64, 72, 73, 75, 77], "put": [40, 45, 51, 52], "At": [40, 45, 51, 52, 229, 251], "goe": [40, 45, 51, 52], "back": [40, 45, 51, 52, 304], "estimator_typ": [41, 42, 43, 44, 46, 47, 48, 49], "tag": [41, 42, 43, 44, 46, 47, 48, 49, 91, 109], "setup": [51, 52, 321, 373], "freez": [51, 52], "freeze_encod": [51, 52], "rate": [51, 52, 54, 55, 56, 64, 201, 204, 205, 206, 214, 245], "adam": [51, 52, 54, 55, 56, 64], "decai": [51, 52, 54, 55, 56, 64], "multisteplr": [51, 52], "schedul": [51, 52, 54, 55, 56, 64, 65], "element": [51, 52, 150, 154], "variabl": [51, 52, 55, 64, 65, 73, 77, 78, 278], "validation_step_output": [51, 52], "dictionnari": [51, 52, 216, 241, 329], "respectivelli": [51, 52], "configure_optim": [51, 52, 54, 55, 56, 64], "declar": [51, 52, 54, 56, 66], "adamw": [51, 52, 54, 55, 56, 64], "cross_entropy_loss": [51, 52], "cross_entropi": [51, 52], "r3": 54, "reus": [54, 56, 65, 346, 370], "cnn": [54, 56, 173], "head": [54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 112, 116, 214, 243, 245, 246], "z_i": [54, 56], "z_j": [54, 56], "maxim": [54, 55, 56, 64], "r4": 54, "r5": 54, "ell_": [54, 56], "frac": [54, 56, 72, 73, 75, 77, 159, 160, 161, 162, 165, 168], "exp": [54, 56, 73, 77], "sim": [54, 56, 73, 77, 144, 145, 146, 147], "tau": [54, 56, 73, 77], "sum_": [54, 56, 73, 77], "neq": [54, 56], "2n": [54, 56], "z_k": [54, 56], "measur": [54, 56, 175, 176, 180, 186, 188, 189, 190], "cosin": [54, 55, 56, 64, 72, 73, 75, 77, 151, 155, 165, 166, 168, 169], "sharp": [54, 56], "r6": 54, "discard": [54, 56], "extractor": [54, 56], "those": [54, 56, 339, 362], "projector": [54, 56], "cosineannealinglr": [54, 56], "simon": [54, 56, 214, 215, 242, 245], "kornblith": [54, 56, 215, 242], "mohammad": [54, 56, 215, 242], "norouzi": [54, 56, 215, 242], "geoffrei": [54, 56, 215, 242], "hinton": [54, 56, 215, 242], "visual": [54, 55, 56, 59, 60, 62, 63, 64, 72, 75, 215, 242], "icml": [54, 56, 59, 60, 62, 63, 71, 74], "2020": [54, 56, 59, 60, 62, 63, 71, 74, 149, 153], "aaron": [54, 56], "van": [54, 56], "den": [54, 56], "oord": [54, 56], "yazh": [54, 56], "li": [54, 56, 149, 153], "oriol": [54, 56], "vinyal": [54, 56], "arxiv": [54, 55, 56, 59, 60, 62, 63, 64, 71, 73, 74, 77, 113, 114, 115, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 149, 153, 249], "2018": [54, 56, 113, 117, 118, 124], "sohn": [54, 56], "kihyuk": [54, 56], "nip": [54, 56], "2016": [54, 56], "feng": [54, 56], "wang": [54, 56], "huap": [54, 56], "liu": [54, 56], "understand": [54, 56], "behaviour": [54, 56], "cvpr": [54, 56], "all_gather_and_flatten": [54, 55, 56, 64], "gather": [54, 55, 56, 64], "edg": [54, 55, 56, 64, 164, 167, 302, 303, 371, 372], "all_gath": [54, 55, 56, 64], "v1": [54, 55, 56, 64], "v2": [54, 55, 56, 64], "importantli": [54, 55, 56, 64], "part": [54, 55, 56, 64], "encoder_kwarg": [55, 64], "ndarrai": [55, 64, 72, 73, 75, 77, 82, 83, 87, 88, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 205, 206, 304, 307, 308, 312, 374], "optimizer_kwarg": [55, 64], "0001": [55, 64, 309, 314, 376], "lr_schedul": [55, 64], "lrschedul": [55, 64], "reducelronplateau": [55, 64], "lr_scheduler_kwarg": [55, 64], "r7": 55, "auxiliari": [55, 64, 73, 77], "agreement": [55, 64], "encourag": [55, 64], "uninstanti": [55, 64], "although": [55, 64, 76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "n_embed": [55, 64, 112, 113, 114, 115, 116, 118, 129, 130], "2048": [55, 59, 60, 62, 63, 64], "impli": [55, 64], "wherea": [55, 64], "high": [55, 64, 165, 166, 168, 169, 193], "sensit": [55, 64], "epanechnikov": [55, 64, 72, 73, 75, 77], "scalar": [55, 64, 72, 73, 75, 77, 88, 151, 155, 165, 166, 168, 169], "diagnon": [55, 64, 73, 77], "diagon": [55, 64, 72, 73, 75, 77], "2d": [55, 64, 72, 73, 75, 77, 149, 151, 152, 153, 155, 156, 322, 356], "stochast": [55, 64, 87, 212, 230, 254, 258], "descent": [55, 64], "decoupl": [55, 64], "loshchilov": [55, 64], "hutter": [55, 64], "iclr": [55, 64], "2019": [55, 64, 217, 229, 249, 250, 251], "subclass": [55, 64, 76, 87, 88, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "beta": [55, 64, 208, 209, 307, 308, 312, 374], "moment": [55, 64, 65], "lrschedulerpltyp": [55, 64], "num_sanity_val_step": [55, 64], "2106": [55, 60, 63, 64, 73, 77], "08808": [55, 60, 63, 64, 73, 77], "neural": [55, 64, 149, 153], "choos": [55, 64], "But": [55, 64], "lr_scheduler_config": [55, 64], "whose": [55, 64], "shown": [55, 64], "updat": [55, 64, 67, 304], "val_loss": [55, 64], "thu": [55, 64], "strict": [55, 64], "condit": [55, 64, 105], "metric_to_track": [55, 64], "optimizer1": [55, 64], "optimizer2": [55, 64], "scheduler1": [55, 64], "scheduler2": [55, 64], "lambdalr": [55, 64], "made": [55, 64], "metric_v": [55, 64], "thing": [55, 64], "know": [55, 64, 88], "closur": [55, 64], "yourself": [55, 64], "optimizer_step": [55, 64], "parse_batch": [55, 64], "pars": [55, 64, 86, 87, 88], "r8": 56, "r9": 56, "r10": 56, "r11": 56, "block": [58, 61, 65, 113, 114, 115, 118, 129, 130, 131, 132, 214, 245, 247, 248, 252, 253], "denot": [58, 61], "read": [58, 61, 331, 332], "in_featur": [58, 61], "batch_norm_lay": [58, 61], "non_linearity_lay": [58, 61], "non": [58, 59, 60, 61, 62, 63, 160, 162], "norm": [58, 61, 122], "batchnorm1d": [58, 61], "scriptmodul": [58, 59, 60, 61, 62, 63, 71, 73, 74, 76, 77, 112, 113, 114, 115, 116, 118, 119, 120, 121, 127, 128, 129, 130, 215, 242, 243, 244, 246], "r12": 59, "multilay": [59, 60, 62, 63], "perceptron": [59, 60, 62, 63], "mathbf": [59, 62], "z": [59, 62, 149, 150, 153, 154, 160, 162, 212, 213, 230, 254, 255, 258, 307, 308, 310, 312, 313, 323, 374, 375], "w_2": [59, 62], "cdot": [59, 62, 72, 75], "w_1": [59, 62], "2002": [59, 60, 62, 63, 71, 74], "05709": [59, 60, 62, 63, 71, 74], "512": [60, 63, 113, 114, 115, 118, 129, 130, 218, 231, 260, 269], "z_": [60, 63], "theta_2": [60, 63], "r13": 60, "r14": 60, "typic": [60, 63, 150, 152, 154, 156, 165, 168], "r15": 62, "r16": 63, "r17": 63, "r18": 64, "expfil": 65, "selector": [65, 66], "logdir": 65, "useful": 65, "date": 65, "section": 65, "descipt": 65, "scaler": [65, 304], "dl": 65, "environ": [65, 66, 67, 69], "fullfil": 65, "constraint": 65, "interface_occurr": 65, "term": [65, 68, 72, 75, 89], "interface_vers": 65, "__version__": 65, "mismatch": 65, "detect": 65, "connot": 65, "previous": 65, "param": [65, 68, 69], "instanci": 65, "prefix": 65, "hierarch": 65, "properti": [65, 105], "parent": 65, "architecture_nam": [65, 91, 109], "revis": [65, 91, 109], "specifid": 65, "appropri": [65, 66, 108], "scheme": 65, "hyperparapet": 65, "defautl": 65, "coupl": 65, "config": 66, "env": [66, 67, 69], "filter_conf": 66, "updated_env": 67, "environemt": 67, "my_modul": 68, "my_class": 68, "exppect": 68, "module": 68, "cl": [68, 214, 245], "updated_param": 69, "param_set": 69, "entropi": [71, 74], "deriv": [71, 74], "48550": [71, 74, 113, 114, 115, 117, 118, 124, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "z1": [71, 73, 74, 77], "z2": [71, 73, 74, 77], "scott": [72, 75], "fast": [72, 75, 165, 166, 168, 169], "w": [72, 73, 75, 77, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 210, 259], "kde": [72, 75], "r19": 72, "r20": 72, "x_1": [72, 75], "x_n": [72, 75], "mathbb": [72, 75], "w_": [72, 73, 75, 77], "x_i": [72, 75, 159, 160, 161, 162], "x_j": [72, 75], "ge": [72, 75], "dx": [72, 75], "rule": [72, 75, 81], "r21": 72, "silverman": [72, 75], "r22": 72, "covari": [72, 75], "propto": [72, 75], "mathrm": [72, 75], "diag": [72, 75], "hat": [72, 75], "ldot": [72, 75], "univari": [72, 75], "decorrel": [72, 75], "numer": [72, 75, 79, 160, 162], "stabil": [72, 75, 160, 162], "thumb": [72, 75], "rosenblatt": [72, 75], "1956": [72, 75], "remark": [72, 75], "nonparametr": [72, 75], "annal": [72, 75], "mathemat": [72, 75], "parzen": [72, 75], "1962": [72, 75], "On": [72, 75, 328], "1992": [72, 75], "theori": [72, 75], "practic": [72, 75], "wilei": [72, 75], "1986": [72, 75], "monograph": [72, 75], "scotts_factor": [72, 75], "factor": [72, 75, 113, 118, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 322, 340, 356, 363], "set_bandwidth": [72, 75], "subsequ": [72, 75], "silverman_factor": [72, 75], "r23": 73, "mini": [73, 77], "z_1": [73, 77], "z_2": [73, 77], "ell": [73, 77], "y_i": [73, 77], "y_j": [73, 77], "phd": [73, 77], "thesi": [73, 77], "dot": [73, 77], "product": [73, 77, 377], "n_label": [73, 77], "r24": 75, "r25": 75, "r26": 75, "r27": 75, "x1": [76, 252, 253], "x2": [76, 252, 253], "overridden": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "recip": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "afterward": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "former": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "latter": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "silent": [76, 112, 113, 114, 115, 116, 118, 119, 120, 127, 128, 129, 130, 215, 242, 243, 244, 246, 249, 285, 286, 287, 296, 297, 298], "r28": 77, "re": 78, "sample_weight": [79, 80, 82, 83, 84, 85, 304], "multioutput": [79, 80, 82, 83], "raw_valu": [79, 80, 82, 83], "uniform_averag": [79, 80, 82, 83], "variance_weight": [79, 80], "due": [79, 80], "compat": [79, 80, 377], "check_arrai": 79, "type_tru": [79, 80], "multiclass": [79, 80], "type_of_target": [79, 80], "just": [79, 80], "suitabl": [80, 81], "privat": 80, "highest": 81, "promot": 81, "api_specif": 81, "type_promot": 81, "namespac": 81, "force_finit": [82, 83], "alwai": [82, 83, 88, 91, 109, 150, 154, 304], "perfect": [82, 83], "anti": [82, 83], "flag": [82, 83], "inf": [82, 83], "constant": [82, 83, 159, 160, 161, 162, 164, 167], "real": [82, 83], "target_nam": [84, 85], "digit": [84, 85], "output_dict": [84, 85], "round": [84, 85], "meda": [84, 85], "mse": [84, 85], "pcc": [84, 85], "evar": [84, 85], "arithmet": [84, 85], "data_pars": [86, 87, 88], "sever": [87, 305], "elsewher": 87, "parse_data": [87, 88, 170], "actual": 88, "compliant": 88, "conjonct": 88, "nd": [88, 149, 151, 153, 155], "gamma": 88, "todo": 88, "randombright": 88, "biasfield": 88, "typetransforminput": 88, "static": [88, 165, 168], "parse_prob": 88, "termin": 89, "expos": [90, 92], "value_kei": [90, 92], "avaiabl": [91, 109], "pathlib": [91, 109], "repo": [91, 109], "classmethod": [91, 109, 175, 188, 216, 241], "hf_download": [91, 109], "hf_id": [91, 109], "hf_revis": [91, 109], "force_download": [91, 109], "resum": [91, 109], "id": [91, 109], "commit": [91, 109], "hub_split": [91, 109], "hub_nam": [91, 109], "interpret": [91, 109, 165, 168], "hub_id": [91, 109], "hub_revis": [91, 109], "decalr": [91, 109, 172], "ns_download": [91, 109], "ns_id": [91, 109], "reset": [93, 102, 103], "background": 93, "foreground": [93, 95], "reverse_dict": 93, "revers": [93, 150, 154, 212, 254], "alia": [94, 95, 165, 166, 168, 169, 193, 194, 240, 304], "conveni": [102, 103], "style": [102, 103], "ansi": [102, 103], "fn": 105, "attribute_nam": 105, "descriptor": 105, "protocol": 105, "decor": [105, 107, 191, 199, 329, 346, 370], "attributeerror": [105, 107], "falsei": 105, "hasattr": [105, 107], "doc": 105, "howto": 105, "explan": 105, "deleg": 106, "underli": 106, "truthi": 107, "unavail": 107, "helloifeven": 107, "_x_is_even": 107, "say_hello": 107, "hello": 107, "obj": 107, "msg": [108, 315], "presenc": 108, "trail": 108, "underscor": 108, "except": [108, 304], "messag": [108, 214, 217, 218, 229, 230, 231, 245, 249, 250, 251, 258, 260, 269, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 315], "yet": 108, "substitut": 108, "eg": 108, "sparsifi": 108, "fitt": 108, "abrol": [112, 116], "5281": [112, 116], "zenodo": [112, 116], "4309677": [112, 116], "growth_rat": [113, 118, 119, 120, 123], "block_config": [113, 118, 123], "num_init_featur": [113, 118, 123], "bn_size": [113, 118, 119, 120], "memory_effici": [113, 118, 119, 120], "huang": [113, 117, 118, 124], "1608": [113, 117, 118, 124], "06993": [113, 117, 118, 124], "pool": [113, 118, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 284, 295], "convolut": [113, 114, 115, 118, 129, 130, 133, 134, 149, 153, 177, 183, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 285, 286, 287, 288, 291, 293, 296, 297, 298, 299], "slower": [113, 118, 165, 166, 168, 169], "pdf": [113, 118], "1707": [113, 118], "06990": [113, 118], "zero_init_residu": [114, 115, 129, 130], "width_per_group": [114, 115, 129, 130], "replace_stride_with_dil": [114, 115, 129, 130], "norm_lay": [114, 115, 127, 128, 129, 130], "initial_kernel_s": [114, 115, 129, 130], "he": [114, 115, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "2015": [114, 115, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "1512": [114, 115, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "03385": [114, 115, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140], "bn": [114, 115, 129, 130, 247, 248, 252, 253], "residu": [114, 115, 129, 130], "branch": [114, 115, 129, 130], "behav": [114, 115, 129, 130], "1706": [114, 115, 129, 130], "02677": [114, 115, 129, 130], "dilat": [114, 115, 127, 128, 129, 130, 134], "atrou": [114, 115, 129, 130], "dens": [114, 115, 129, 130, 212, 254, 304], "batchnorm3d": [114, 115, 129, 130], "truncat": [115, 126, 130, 136, 138, 140], "num_lay": 119, "num_input_featur": [119, 120, 121], "init_featur": 119, "prev_featur": 120, "num_output_featur": 121, "arch": [123, 131, 132], "inplan": [127, 128], "plane": [127, 128, 152, 156, 285, 296, 339, 355, 362], "base_width": [127, 128], "in_plan": [133, 134], "out_plan": [133, 134], "1x1": [133, 229, 251], "deviat": [144, 145, 146, 147, 160, 162, 177, 179, 183, 185, 304], "mathcal": [144, 145, 146, 147], "six": [144, 146], "a_1": [144, 146], "b_1": [144, 146], "a_2": [144, 146], "b_2": [144, 146], "a_3": [144, 146], "b_3": [144, 146], "sigma_i": [144, 146], "a_i": [144, 146], "b_i": [144, 146], "mu": [145, 147, 160, 162], "ratio": [149, 151, 153, 155, 249], "num_iter": [149, 153], "inplac": [149, 153, 304], "randomli": [149, 152, 153, 156, 175, 176, 188, 189], "eras": [149, 153], "box": [149, 153], "r29": 149, "cutout": [149, 153, 178, 184], "r30": 149, "proport": [149, 153], "against": [149, 153], "modifi": [149, 153, 166, 169], "geometr": [149, 151, 153, 155], "particular": [149, 151, 153, 155], "zhong": [149, 153], "zheng": [149, 153], "kang": [149, 153], "yang": [149, 153], "aaai": [149, 153], "confer": [149, 153], "intellig": [149, 153], "1708": [149, 153], "04896": [149, 153], "devri": [149, 153], "taylor": [149, 153], "2017": [149, 153], "04552": [149, 153], "flip_prob": [150, 154], "ap": [150, 152, 154, 156], "antero": [150, 152, 154, 156], "posterior": [150, 152, 154, 156], "inferior": [150, 152, 154, 156], "ra": [150, 152, 154, 156, 165, 168], "never": [150, 154, 166, 169], "get_index_from_anat_label": [150, 154], "anterior": [150, 154], "superior": [150, 154], "4x4": [150, 154], "target_shap": [151, 155, 164, 166, 167, 169], "08": [151, 155, 160, 162], "upper": [151, 155, 327, 359], "bound": [151, 155, 187, 197], "bspline": [151, 155, 165, 166, 168, 169], "cubic": [151, 155, 165, 166, 168, 169], "label_gaussian": [151, 155, 165, 166, 168, 169], "ham": [151, 155, 165, 166, 168, 169], "welch": [151, 155, 165, 166, 168, 169], "lanczo": [151, 155, 165, 166, 168, 169], "blackman": [151, 155, 165, 166, 168, 169], "itk": [151, 155, 165, 166, 168, 169], "compromis": [151, 155, 165, 166, 168, 169], "speed": [151, 155, 165, 166, 168, 169, 177, 183, 216, 241], "solid": [151, 155, 165, 166, 168, 169], "rotation_prob": [152, 156], "degre": [152, 156, 180, 186, 320, 346, 354, 370], "around": [152, 156], "r31": 153, "r32": 153, "out_min_max": [159, 161], "percentil": [159, 161], "masking_fn": [159, 160, 161, 162], "robust": [159, 161, 165, 166, 168, 169], "outlier": [159, 161], "clip": [159, 161], "inter": [159, 161], "quantil": [159, 161], "p_l": [159, 161], "p_u": [159, 161], "o_": [159, 161], "p_": [159, 161], "quad": [159, 161], "ext": [159, 161], "percentag": [159, 161], "synthseg": [159, 161], "r33": 159, "nnunet": [159, 161], "r34": 159, "insid": [159, 161, 304], "cutoff": [159, 161], "minimum": [159, 161, 164, 167, 302, 303], "convent": [159, 161], "billot": [159, 161], "2023": [159, 161], "retrain": [159, 161], "102789": [159, 161], "isense": [159, 161], "nnu": [159, 161], "net": [159, 161, 217, 229, 249, 250, 251], "biomed": [159, 161], "natur": [159, 161, 173], "203": [159, 161], "211": [159, 161], "loc": [159, 161], "ep": [160, 162], "epsilon": [160, 162], "determinist": [160, 162], "r35": 161, "r36": 161, "padding_mod": [164, 167], "constant_valu": [164, 167], "4d": [165, 168, 170], "coordin": [165, 168, 306, 307, 308, 310, 311, 312, 313, 323, 324, 348, 364, 374, 375], "simpleitk": [165, 166, 168, 169], "s_w": [165, 168], "s_h": [165, 168], "s_d": [165, 168], "offlin": [165, 166, 168, 169], "poorer": [165, 166, 168, 169], "categor": [165, 166, 168, 169], "r37": 165, "spline": [165, 166, 168, 169], "window": [165, 166, 168, 169], "meijer": [165, 166, 168, 169], "1999": [165, 166, 168, 169], "quantit": [165, 166, 168, 169], "approxim": [165, 166, 168, 169], "dummi": [165, 168], "1mm": [165, 168], "2mm": [165, 168], "isotrop": [165, 168], "image_torch": [165, 168], "resampled_torch": [165, 168], "as_sitk": [165, 168], "from_sitk": [165, 168], "get_sitk_metadata_from_ras_affin": [165, 168], "lp": [165, 168], "implicit": [166, 169], "r38": 166, "r39": 168, "r40": 169, "inspir": 173, "init": [174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 201, 204, 208, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 328], "randomize_per_channel": [174, 191, 192, 194, 199], "tranform": [174, 192, 311, 324], "bootstrap": [175, 188], "curupt": [175, 176, 188, 189, 190], "regroup": [175, 188], "pca": [175, 188], "compon": [175, 188, 307, 308, 312, 374], "extern": [175, 188], "popul": [175, 188], "bootstap": [175, 188], "arr": [175, 176, 178, 179, 180, 184, 185, 186, 188, 189], "bootsrap": [175, 188], "controlater": [176, 189], "cachedir": [177, 178, 180, 183, 184, 186, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 329], "recept": [177, 183], "icosahdron": [177, 178, 180, 183, 184, 186], "neighboor": [177, 178, 183, 184, 302, 303], "sufifi": [177, 178, 183, 184], "ie": [177, 178, 183, 184, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "ring": [177, 178, 183, 184, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 284, 288, 291, 293, 295, 299, 319, 339, 353, 362], "replacement_valu": [178, 184], "connex": [178, 184], "neighborhood": [178, 184, 247, 252, 280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 322, 338, 340, 356, 361, 363], "ablat": [178, 184], "cut": [178, 184], "barycentr": [180, 186, 320, 344, 346, 354, 368, 370], "angl": [180, 186, 307, 308, 312, 320, 339, 346, 354, 355, 362, 370, 374], "euler": [180, 186, 320, 346, 354, 370], "smart": [180, 186, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "speedup": [180, 186, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "accordingli": [180, 186], "n_channel": [182, 196, 214, 245], "_data": [182, 196], "uplet": [187, 197, 285, 296, 320, 346, 354, 370], "aplli": 190, "rand_mask": 190, "binari": [190, 208, 209], "corrupt": 190, "multichannel": [191, 199], "multichannelaugment": [191, 199], "applic": [191, 199, 217, 229, 250, 251, 305], "liftifi": 198, "synthet": 200, "gene": [201, 204, 205, 206], "n_max": [202, 203], "target_ico_ord": [202, 203], "regex": [202, 203], "triangular": [202, 203, 302, 303, 345, 347, 369], "purpos": [202, 203], "desir": [202, 203, 338, 361], "assocait": [205, 206], "variat": [207, 211, 230, 258], "svae": [207, 230, 258], "left_mask": [208, 209], "right_mask": [208, 209], "use_ms": [208, 209], "kl": [208, 209], "diverg": [208, 209], "likelihood": [208, 209, 210], "recon": 210, "reconstruct": [210, 212, 230, 254, 258], "gmvae": 211, "rest": [211, 230, 258], "fmri": [211, 230, 258], "autoencod": [211, 230, 258], "libilab": 211, "rsfmri": 211, "output_shap": [212, 254, 287, 298], "before_latent_dim": [212, 254], "latent_dim": [212, 213, 215, 227, 228, 230, 242, 254, 255, 256, 257, 258], "conv_flt": [212, 213, 227, 228, 230, 254, 255, 256, 257, 258], "fusion_level": [212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "leakyrelu": [212, 213, 227, 228, 230, 254, 255, 256, 257, 258], "batch_norm": [212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "output_channel": [212, 254], "convnet": [212, 254, 259], "left_recon_x": [212, 230, 254, 258], "input_channel": [212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "right_recon_x": [212, 230, 254, 258], "left_x": [213, 218, 227, 228, 230, 231, 255, 256, 257, 258, 260, 269], "right_x": [213, 218, 227, 228, 230, 231, 255, 256, 257, 258, 260, 269], "q": [213, 230, 255, 258], "mlp_dim": [214, 245, 246], "dim_head": [214, 243, 245, 246], "dropout": [214, 243, 244, 245, 246], "emb_dropout": [214, 245], "msit": [214, 245], "dahan": [214, 245], "midl": [214, 245], "n_verticesi": [214, 245], "trainabl": [214, 245], "msa": [214, 245], "mechan": [214, 245, 304], "feed": [214, 245], "ffn": [214, 245], "expand": [214, 245], "poll": [214, 245], "token": [214, 245], "hidden_lay": [215, 242], "return_logit": [215, 242], "y1": [215, 242], "y2": [215, 242], "input_ord": [216, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "n_layer": [216, 241], "repa_s": [216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "repa_zoom": [216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "dynamic_repa_zoom": [216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277], "repa": [216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 340, 363], "ico_info": [216, 241], "build_ico_info": [216, 241], "tangent": [216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 296, 322, 339, 355, 356, 362], "tessal": [216, 241, 325, 345, 357, 369], "tessel": [216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 251, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 345, 369], "icosehedron": [216, 241], "upsampl": [216, 229, 241, 251, 252, 281, 282, 283, 288, 289, 292, 293, 294, 299, 300, 327, 359], "onform": [216, 241], "gride": [217, 218, 248, 250, 253, 260, 310, 323], "built": [217, 229, 250, 251], "upon": [217, 229, 250, 251], "spma": [217, 250], "rectifi": [217, 229, 250, 251], "halv": [217, 229, 250, 251], "zhao": [217, 229, 250, 251], "ipmi": [217, 229, 250, 251], "cfg": [218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "4096": [218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "init_weight": [218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "stand": [218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 305], "wether": [218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "sphericalgvggbas": [219, 220, 221, 222, 223, 224, 225, 226, 261, 262, 263, 264, 265, 266, 267, 268], "interp": [229, 251, 252], "2x2": [229, 251], "maxpad": [229, 251, 252], "shift": [229, 251, 252], "zeropad": [229, 251, 252], "sphericalgva": [230, 258], "vert": [230, 231, 258, 269], "tri": [230, 231, 258, 269, 347], "reparameter": [230, 258], "reparametr": [230, 258], "trick": [230, 258], "sphericalvggbas": [232, 233, 234, 235, 236, 237, 238, 239, 270, 271, 272, 273, 274, 275, 276, 277], "neighbor_indic": [240, 280, 282, 283, 288, 291, 293, 294, 299], "down_indic": [240, 247, 252, 282, 283, 284, 288, 293, 294, 295, 299, 317, 318, 351, 352], "up_indic": [240, 281, 289, 292, 300, 326, 327, 358, 359], "conv_neighbor_indic": 240, "conv_lay": [247, 252], "in_ch": [247, 248, 252, 253], "out_ch": [247, 248, 252, 253], "conv_neigh_indic": [247, 252], "down_neigh_indic": [247, 283, 284, 294, 295], "pool_mod": 247, "discret": [247, 252, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "pool_ratio": 249, "sum_r": 249, "act": 249, "unpool": 249, "hongyang": 249, "gao": 249, "shuiwang": 249, "ji": 249, "connect": [249, 372], "summat": 249, "nonlinear": 249, "edge_index": 249, "neigh_indic": [252, 280, 285, 291, 296], "up_neigh_indic": [252, 281, 282, 283, 288, 289, 292, 293, 294, 299, 300], "upsamp": [252, 253], "upconv": [252, 253], "max_pool_indic": [252, 283, 294], "klass_nam": 278, "klass_param": 278, "destination_module_glob": 278, "publicli": 278, "assign": [278, 339, 362], "in_feat": [280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300], "out_feat": [280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300], "formul": [280, 291], "ico2_vertic": [280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300], "ico2_triangl": [280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300], "asarrai": [280, 281, 282, 283, 284, 288, 289, 291, 292, 293, 294, 295, 299, 300, 326, 358], "ico2_x": [280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300], "ico3_vertic": [281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 299, 300], "ico3_triangl": [281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 299, 300], "ico3_x": [281, 282, 283, 284, 288, 289, 292, 293, 294, 295, 299, 300], "slow": [282, 293], "pooling_typ": [283, 284, 294, 295], "rectagular": [285, 296], "neigh_weight": [285, 296], "proj_ico_x": [286, 287, 297, 298], "pad_azimuth": [286, 287, 290, 297, 298], "pad_elev": [286, 287, 290, 297, 298], "zero_pad": [287, 298], "icoconv": [287, 298], "vmin": [302, 303], "vmax": [302, 303], "black": [302, 303], "color_map": [302, 303], "linearsegmentedcolormap": [302, 303], "opac": [302, 303], "Not": [302, 303], "cm": [302, 303], "coolwarm": [302, 303], "sub": 304, "with_mean": 304, "with_std": 304, "scler": 304, "guarante": 304, "csr": 304, "attempt": 304, "entail": 304, "equival": 304, "n_subject": 304, "get_metadata_rout": 304, "rout": 304, "inverse_transform": 304, "x_tr": 304, "set_inverse_transform_request": 304, "unchang": 304, "enable_metadata_rout": 304, "set_config": 304, "metadata_rout": 304, "set_partial_fit_request": 304, "partial_fit": 304, "set_transform_request": 304, "system": 306, "tool": [306, 377], "cartesian": [307, 308, 312, 374], "array_lik": [307, 308, 312, 374], "radiant": [307, 308, 312, 374], "pi": [307, 308], "ref_arrai": 309, "atol": [309, 314, 376], "toler": [309, 314, 376], "new_ord": 309, "resx": [310, 313, 323, 375], "resi": [310, 313, 323, 375], "ico2_vert": [310, 311, 313, 314, 316, 317, 319, 323, 324, 326, 327, 339, 340, 345, 350, 351, 353, 358, 359, 362, 363, 369, 375, 376], "ico2_tri": [310, 311, 313, 314, 316, 317, 319, 323, 324, 326, 327, 339, 340, 345, 350, 351, 353, 358, 359, 362, 363, 369, 375, 376], "y_grid": [310, 313, 323, 375], "ref_vertic": [311, 314, 324, 376], "ico2_std_vert": [311, 314, 324, 376], "ico2_std_tri": [311, 314, 324, 376], "projecte": [313, 375], "y_std": [314, 376], "target_vertic": [316, 326, 350, 358], "n_dim": [316, 326, 350, 358], "n_queri": [316, 326, 350, 358], "nearest_idx": [316, 350], "ico3_vert": [316, 325, 326, 338, 341, 343, 345, 346, 350, 357, 358, 361, 365, 367, 369, 370], "ico3_tri": [316, 325, 326, 338, 341, 343, 345, 346, 350, 357, 358, 361, 365, 367, 369, 370], "down3to2": [316, 350], "ico3_down_vertic": [316, 350], "consecut": [317, 318, 327, 351, 352, 359], "downsampled_data": [317, 351], "new_n_vertic": [317, 327, 351, 359], "ico4_vert": [317, 318, 327, 351, 352, 359], "ico4_tri": [317, 318, 327, 351, 352, 359], "reshap": [317, 319, 326, 327, 346, 351, 353, 358, 359, 370], "y_down": [317, 351], "squeez": [317, 327, 346, 351, 359, 370], "new_vertic": [318, 352], "newli": [318, 352], "icosahedorn": [318, 352], "new_triangl": [318, 352], "ico2_down_vert": [318, 352], "ico2_down_tri": [318, 352], "start_nod": [319, 353], "recurs": [319, 353], "node_neigh": [319, 353], "asssoci": [320, 354], "euclidian": [320, 354], "grid_in_spher": [322, 340, 356, 363], "grid_in_tplan": [322, 356], "target_triangl": [326, 358], "interp_indic": [326, 358], "n_feat": [326, 358], "y_up": [326, 327, 358, 359], "upsampled_data": [327, 359], "hide_err": 328, "secur": 328, "redirect": 328, "manag": 328, "hide": 328, "func": 329, "wrap": 329, "receiv": 329, "transpar": 329, "overlap": 329, "cifti_fil": 330, "decompos": 330, "cifti": [330, 333, 335], "vol": 330, "surf_left": 330, "surf_right": 330, "surf_fil": [331, 332, 336, 337], "gifti": [332, 337], "surf_nam": 333, "nbviewer": [333, 335], "neurohackademi": [333, 335], "nh2020": [333, 335], "curriculum": [333, 335], "blob": [333, 335], "master": [333, 335], "markiewicz": [333, 335], "gnu": 334, "archiv": 334, "out_path": 334, "n_neigh": [338, 342, 361, 366], "remain": [339, 362], "n_vert": [341, 365], "min_order_to_get_n_neighbor": [342, 366], "hi": [343, 367], "clockwise_from_cent": [344, 368], "clockwis": [344, 368], "counter": [344, 368], "reordered_triangl": [344, 368], "reorder": [344, 368], "ico0_vert": [344, 368], "ico0_tri": [344, 368], "clockwise_ico0_tri": [344, 368], "counter_clockwise_ico0_tri": [344, 368], "euclidean": [346, 370], "rotated_data": [346, 370], "y_rot": [346, 370], "lower_vertic": 347, "ico_fil": 348, "topologi": [348, 349], "ref_fil": 349, "fslr": 349, "point_1": 360, "point_2": 360, "middle_point_cach": 360, "middl": 360, "return_index": 371, "triangles_index": 371, "networkx": 372, "nearbi": 372, "logfil": 373, "unifi": 377, "analyz": 377, "advanc": 377, "availbl": 377, "hydra": 377}, "objects": {"nidl.callbacks": [[16, 0, 1, "", "BatchTypingCallback"], [17, 0, 1, "", "KNeighborsClassifierCVCallback"], [18, 0, 1, "", "KNeighborsRegressorCVCallback"], [19, 0, 1, "", "LogisticRegressionCVCallback"], [20, 0, 1, "", "ModelProbing"], [21, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[16, 1, 1, "", "on_predict_batch_start"], [16, 1, 1, "", "on_test_batch_start"], [16, 1, 1, "", "on_train_batch_start"], [16, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[18, 1, 1, "", "fit"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[20, 1, 1, "", "extract_features"], [20, 1, 1, "", "fit"], [20, 1, 1, "", "linear_probing"], [20, 1, 1, "", "log_metrics"], [20, 1, 1, "", "on_test_epoch_end"], [20, 1, 1, "", "on_test_epoch_start"], [20, 1, 1, "", "on_train_epoch_end"], [20, 1, 1, "", "on_validation_epoch_end"], [20, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[22, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[22, 1, 1, "", "on_predict_batch_start"], [22, 1, 1, "", "on_test_batch_start"], [22, 1, 1, "", "on_train_batch_start"], [22, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[23, 0, 1, "", "KNeighborsClassifierCVCallback"], [24, 0, 1, "", "KNeighborsRegressorCVCallback"], [25, 0, 1, "", "LogisticRegressionCVCallback"], [26, 0, 1, "", "ModelProbing"], [27, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[24, 1, 1, "", "fit"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[26, 1, 1, "", "extract_features"], [26, 1, 1, "", "fit"], [26, 1, 1, "", "linear_probing"], [26, 1, 1, "", "log_metrics"], [26, 1, 1, "", "on_test_epoch_end"], [26, 1, 1, "", "on_test_epoch_start"], [26, 1, 1, "", "on_train_epoch_end"], [26, 1, 1, "", "on_validation_epoch_end"], [26, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[27, 1, 1, "", "fit"], [27, 1, 1, "", "log_metrics"], [27, 1, 1, "", "predict"]], "nidl.datasets": [[29, 0, 1, "", "BaseImageDataset"], [30, 0, 1, "", "BaseNumpyDataset"], [31, 0, 1, "", "ImageDataFrameDataset"], [32, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[29, 1, 1, "", "get_checksum"], [29, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[30, 1, 1, "", "get_data"]], "nidl.datasets.ImageDataFrameDataset": [[31, 1, 1, "", "apply_target_transform"], [31, 1, 1, "", "apply_transform"]], "nidl.datasets.OpenBHB": [[32, 1, 1, "", "download_dataset_split"], [32, 1, 1, "", "download_file"], [32, 1, 1, "", "get_cat12_template"], [32, 1, 1, "", "get_fs_labels"], [32, 1, 1, "", "get_fs_roi_feature_names"], [32, 1, 1, "", "get_fs_xhemi_feature_names"], [32, 1, 1, "", "get_neuromorphometrics_atlas"], [32, 1, 1, "", "get_quasiraw_template"], [32, 1, 1, "", "get_vbm_roi_labels"], [32, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[33, 0, 1, "", "BaseDataset"], [34, 0, 1, "", "BaseImageDataset"], [35, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[34, 1, 1, "", "get_checksum"], [34, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[35, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[36, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[36, 1, 1, "", "download_dataset_split"], [36, 1, 1, "", "download_file"], [36, 1, 1, "", "get_cat12_template"], [36, 1, 1, "", "get_fs_labels"], [36, 1, 1, "", "get_fs_roi_feature_names"], [36, 1, 1, "", "get_fs_xhemi_feature_names"], [36, 1, 1, "", "get_neuromorphometrics_atlas"], [36, 1, 1, "", "get_quasiraw_template"], [36, 1, 1, "", "get_vbm_roi_labels"], [36, 1, 1, "", "make_dataset"]], "nidl.datasets.pandas_dataset": [[37, 0, 1, "", "ImageDataFrameDataset"], [38, 2, 1, "", "default_image_loader"]], "nidl.datasets.pandas_dataset.ImageDataFrameDataset": [[37, 1, 1, "", "apply_target_transform"], [37, 1, 1, "", "apply_transform"]], "nidl.estimators": [[40, 0, 1, "", "BaseEstimator"], [41, 0, 1, "", "ClassifierMixin"], [42, 0, 1, "", "ClusterMixin"], [43, 0, 1, "", "RegressorMixin"], [44, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[40, 1, 1, "", "fit"], [40, 1, 1, "", "log"], [40, 1, 1, "", "log_dict"], [40, 1, 1, "", "predict"], [40, 1, 1, "", "predict_step"], [40, 1, 1, "", "training_step"], [40, 1, 1, "", "transform"], [40, 1, 1, "", "transform_step"], [40, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[45, 0, 1, "", "BaseEstimator"], [46, 0, 1, "", "ClassifierMixin"], [47, 0, 1, "", "ClusterMixin"], [48, 0, 1, "", "RegressorMixin"], [49, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[45, 1, 1, "", "fit"], [45, 1, 1, "", "log"], [45, 1, 1, "", "log_dict"], [45, 1, 1, "", "predict"], [45, 1, 1, "", "predict_step"], [45, 1, 1, "", "training_step"], [45, 1, 1, "", "transform"], [45, 1, 1, "", "transform_step"], [45, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[51, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[51, 1, 1, "", "configure_optimizers"], [51, 1, 1, "", "cross_entropy_loss"], [51, 1, 1, "", "freeze_encoder"], [51, 1, 1, "", "on_validation_epoch_end"], [51, 1, 1, "", "predict_step"], [51, 1, 1, "", "training_step"], [51, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[52, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[52, 1, 1, "", "configure_optimizers"], [52, 1, 1, "", "cross_entropy_loss"], [52, 1, 1, "", "freeze_encoder"], [52, 1, 1, "", "on_validation_epoch_end"], [52, 1, 1, "", "predict_step"], [52, 1, 1, "", "training_step"], [52, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[54, 0, 1, "", "SimCLR"], [55, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[54, 1, 1, "", "all_gather_and_flatten"], [54, 1, 1, "", "configure_optimizers"], [54, 1, 1, "", "training_step"], [54, 1, 1, "", "transform_step"], [54, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[55, 1, 1, "", "all_gather_and_flatten"], [55, 1, 1, "", "configure_optimizers"], [55, 1, 1, "", "parse_batch"], [55, 1, 1, "", "training_step"], [55, 1, 1, "", "transform_step"], [55, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[56, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[56, 1, 1, "", "all_gather_and_flatten"], [56, 1, 1, "", "configure_optimizers"], [56, 1, 1, "", "training_step"], [56, 1, 1, "", "transform_step"], [56, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[58, 0, 1, "", "ProjectionHead"], [59, 0, 1, "", "SimCLRProjectionHead"], [60, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[58, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[61, 0, 1, "", "ProjectionHead"], [62, 0, 1, "", "SimCLRProjectionHead"], [63, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[61, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[64, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[64, 1, 1, "", "all_gather_and_flatten"], [64, 1, 1, "", "configure_optimizers"], [64, 1, 1, "", "parse_batch"], [64, 1, 1, "", "training_step"], [64, 1, 1, "", "transform_step"], [64, 1, 1, "", "validation_step"]], "nidl.experiment": [[65, 2, 1, "", "fetch_experiment"], [66, 2, 1, "", "filter_config"], [67, 2, 1, "", "get_env"], [68, 2, 1, "", "load_interface"], [69, 2, 1, "", "update_params"]], "nidl.losses": [[71, 0, 1, "", "InfoNCE"], [72, 0, 1, "", "KernelMetric"], [73, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[71, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[72, 1, 1, "", "fit"], [72, 1, 1, "", "pairwise"], [72, 1, 1, "", "scotts_factor"], [72, 1, 1, "", "set_bandwidth"], [72, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[73, 1, 1, "", "forward"]], "nidl.losses.infonce": [[74, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[74, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[75, 0, 1, "", "KernelMetric"], [76, 0, 1, "", "PairwiseCosineSimilarity"], [77, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[75, 1, 1, "", "fit"], [75, 1, 1, "", "pairwise"], [75, 1, 1, "", "scotts_factor"], [75, 1, 1, "", "set_bandwidth"], [75, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[76, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[77, 1, 1, "", "forward"]], "nidl.metrics._regression": [[79, 2, 1, "", "_check_reg_targets"], [80, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [81, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[82, 2, 1, "", "pearson_r"], [85, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[83, 2, 1, "", "pearson_r"], [84, 2, 1, "", "regression_report"]], "nidl.transforms": [[86, 0, 1, "", "Identity"], [87, 0, 1, "", "MultiViewsTransform"], [88, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[86, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[87, 1, 1, "", "apply_transform"], [87, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[88, 1, 1, "", "apply_transform"], [88, 1, 1, "", "parse_data"], [88, 1, 1, "", "parse_probability"]], "nidl.utils": [[90, 0, 1, "", "Bunch"], [91, 0, 1, "", "Weights"], [104, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[91, 1, 1, "", "hf_download"], [91, 1, 1, "", "hub_split"], [91, 1, 1, "", "load_pretrained"], [91, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[92, 0, 1, "", "Bunch"]], "nidl.utils.color": [[93, 0, 1, "", "Colored"], [94, 2, 1, "", "attr"], [95, 2, 1, "", "fg"], [96, 2, 1, "", "hex"], [97, 2, 1, "", "print_multicolor"], [98, 2, 1, "", "print_result"], [99, 2, 1, "", "print_subtitle"], [100, 2, 1, "", "print_title"], [101, 2, 1, "", "print_warning"], [102, 2, 1, "", "random_stylize"], [103, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[93, 1, 1, "", "attribute"], [93, 1, 1, "", "background"], [93, 1, 1, "", "foreground"], [93, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[105, 0, 1, "", "_AvailableIfDescriptor"], [106, 2, 1, "", "_estimator_is"], [107, 2, 1, "", "available_if"], [108, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[109, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[109, 1, 1, "", "hf_download"], [109, 1, 1, "", "hub_split"], [109, 1, 1, "", "load_pretrained"], [109, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[112, 0, 1, "", "AlexNet"], [113, 0, 1, "", "DenseNet"], [114, 0, 1, "", "ResNet"], [115, 0, 1, "", "ResNetTruncated"], [117, 2, 1, "", "densenet121"], [125, 2, 1, "", "resnet18"], [126, 2, 1, "", "resnet18_trunc"], [139, 2, 1, "", "resnet50"], [140, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[112, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[114, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[115, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[116, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[116, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[118, 0, 1, "", "DenseNet"], [119, 0, 1, "", "_DenseBlock"], [120, 0, 1, "", "_DenseLayer"], [121, 0, 1, "", "_Transition"], [122, 2, 1, "", "_bn_function_factory"], [123, 2, 1, "", "_densenet"], [124, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[118, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[119, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[120, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[127, 0, 1, "", "BasicBlock"], [128, 0, 1, "", "Bottleneck"], [129, 0, 1, "", "ResNet"], [130, 0, 1, "", "ResNetTruncated"], [131, 2, 1, "", "_resnet"], [132, 2, 1, "", "_resnet_trunc"], [133, 2, 1, "", "conv1x1"], [134, 2, 1, "", "conv3x3"], [135, 2, 1, "", "resnet18"], [136, 2, 1, "", "resnet18_trunc"], [137, 2, 1, "", "resnet50"], [138, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[127, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[128, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[129, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[130, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[144, 0, 1, "", "RandomGaussianBlur"], [145, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[144, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[145, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[146, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[146, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[147, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[147, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[149, 0, 1, "", "RandomErasing"], [150, 0, 1, "", "RandomFlip"], [151, 0, 1, "", "RandomResizedCrop"], [152, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[149, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[150, 1, 1, "", "apply_transform"], [150, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[151, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[152, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[153, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[153, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[154, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[154, 1, 1, "", "apply_transform"], [154, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[155, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[155, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[156, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[156, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[159, 0, 1, "", "RobustRescaling"], [160, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[159, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[160, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[161, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[161, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[162, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[162, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[164, 0, 1, "", "CropOrPad"], [165, 0, 1, "", "Resample"], [166, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[164, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[165, 1, 1, "", "apply_transform"], [165, 1, 1, "", "as_sitk"], [165, 1, 1, "", "from_sitk"], [165, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[166, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[167, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[167, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[168, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[168, 1, 1, "", "apply_transform"], [168, 1, 1, "", "as_sitk"], [168, 1, 1, "", "from_sitk"], [168, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[169, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[169, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[170, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[170, 1, 1, "", "parse_data"]], "surfify.augmentation": [[174, 0, 1, "", "BaseTransformer"], [175, 0, 1, "", "GroupMixUp"], [176, 0, 1, "", "HemiMixUp"], [177, 0, 1, "", "SurfBlur"], [178, 0, 1, "", "SurfCutOut"], [179, 0, 1, "", "SurfNoise"], [180, 0, 1, "", "SurfRotation"], [181, 0, 1, "", "Transformer"], [182, 2, 1, "", "apply_chained_transforms"], [187, 2, 1, "", "interval"], [191, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[174, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[175, 1, 1, "", "groupby"], [175, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[176, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[177, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[178, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[179, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[180, 1, 1, "", "run"]], "surfify.augmentation.base": [[183, 0, 1, "", "SurfBlur"], [184, 0, 1, "", "SurfCutOut"], [185, 0, 1, "", "SurfNoise"], [186, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[183, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[184, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[185, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[186, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[188, 0, 1, "", "GroupMixUp"], [189, 0, 1, "", "HemiMixUp"], [190, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[188, 1, 1, "", "groupby"], [188, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[189, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[190, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[192, 0, 1, "", "BaseTransformer"], [193, 0, 1, "", "RandomAugmentation"], [194, 0, 1, "", "Transform"], [195, 0, 1, "", "Transformer"], [196, 2, 1, "", "apply_chained_transforms"], [197, 2, 1, "", "interval"], [198, 2, 1, "", "listify"], [199, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[192, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[193, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[193, 3, 1, "", "dtype"], [193, 3, 1, "", "high"], [193, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[194, 3, 1, "", "probability"], [194, 3, 1, "", "randomize_per_channel"], [194, 3, 1, "", "transform"]], "surfify.datasets": [[201, 0, 1, "", "ClassificationDataset"], [202, 0, 1, "", "GenericSurfDataset"], [206, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[203, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[204, 0, 1, "", "ClassificationDataset"], [205, 2, 1, "", "make_classification"]], "surfify.losses": [[208, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[209, 0, 1, "", "SphericalVAELoss"], [210, 2, 1, "", "log_likelihood"]], "surfify.models": [[212, 0, 1, "", "HemiFusionDecoder"], [213, 0, 1, "", "HemiFusionEncoder"], [214, 0, 1, "", "SiT"], [215, 0, 1, "", "SimCLR"], [216, 0, 1, "", "SphericalBase"], [217, 0, 1, "", "SphericalGUNet"], [218, 0, 1, "", "SphericalGVGG"], [219, 0, 1, "", "SphericalGVGG11"], [220, 0, 1, "", "SphericalGVGG11BN"], [221, 0, 1, "", "SphericalGVGG13"], [222, 0, 1, "", "SphericalGVGG13BN"], [223, 0, 1, "", "SphericalGVGG16"], [224, 0, 1, "", "SphericalGVGG16BN"], [225, 0, 1, "", "SphericalGVGG19"], [226, 0, 1, "", "SphericalGVGG19BN"], [227, 0, 1, "", "SphericalHemiFusionDecoder"], [228, 0, 1, "", "SphericalHemiFusionEncoder"], [229, 0, 1, "", "SphericalUNet"], [230, 0, 1, "", "SphericalVAE"], [231, 0, 1, "", "SphericalVGG"], [232, 0, 1, "", "SphericalVGG11"], [233, 0, 1, "", "SphericalVGG11BN"], [234, 0, 1, "", "SphericalVGG13"], [235, 0, 1, "", "SphericalVGG13BN"], [236, 0, 1, "", "SphericalVGG16"], [237, 0, 1, "", "SphericalVGG16BN"], [238, 0, 1, "", "SphericalVGG19"], [239, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[212, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[213, 1, 1, "", "forward"]], "surfify.models.SiT": [[214, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[215, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[216, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[217, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[218, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[227, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[228, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[229, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[230, 1, 1, "", "decode"], [230, 1, 1, "", "encode"], [230, 1, 1, "", "forward"], [230, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[231, 1, 1, "", "forward"]], "surfify.models.base": [[240, 0, 1, "", "Ico"], [241, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[240, 3, 1, "", "conv_neighbor_indices"], [240, 3, 1, "", "down_indices"], [240, 3, 1, "", "neighbor_indices"], [240, 3, 1, "", "order"], [240, 3, 1, "", "triangles"], [240, 3, 1, "", "up_indices"], [240, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[241, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[242, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[242, 1, 1, "", "forward"]], "surfify.models.sit": [[243, 0, 1, "", "Attention"], [244, 0, 1, "", "FeedForward"], [245, 0, 1, "", "SiT"], [246, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[243, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[244, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[245, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[246, 1, 1, "", "forward"]], "surfify.models.unet": [[247, 0, 1, "", "DownBlock"], [248, 0, 1, "", "DownGBlock"], [249, 0, 1, "", "GraphicalUNet"], [250, 0, 1, "", "SphericalGUNet"], [251, 0, 1, "", "SphericalUNet"], [252, 0, 1, "", "UpBlock"], [253, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[247, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[248, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[249, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[250, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[251, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[252, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[253, 1, 1, "", "forward"]], "surfify.models.vae": [[254, 0, 1, "", "HemiFusionDecoder"], [255, 0, 1, "", "HemiFusionEncoder"], [256, 0, 1, "", "SphericalHemiFusionDecoder"], [257, 0, 1, "", "SphericalHemiFusionEncoder"], [258, 0, 1, "", "SphericalVAE"], [259, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[254, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[255, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[256, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[257, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[258, 1, 1, "", "decode"], [258, 1, 1, "", "encode"], [258, 1, 1, "", "forward"], [258, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[260, 0, 1, "", "SphericalGVGG"], [261, 0, 1, "", "SphericalGVGG11"], [262, 0, 1, "", "SphericalGVGG11BN"], [263, 0, 1, "", "SphericalGVGG13"], [264, 0, 1, "", "SphericalGVGG13BN"], [265, 0, 1, "", "SphericalGVGG16"], [266, 0, 1, "", "SphericalGVGG16BN"], [267, 0, 1, "", "SphericalGVGG19"], [268, 0, 1, "", "SphericalGVGG19BN"], [269, 0, 1, "", "SphericalVGG"], [270, 0, 1, "", "SphericalVGG11"], [271, 0, 1, "", "SphericalVGG11BN"], [272, 0, 1, "", "SphericalVGG13"], [273, 0, 1, "", "SphericalVGG13BN"], [274, 0, 1, "", "SphericalVGG16"], [275, 0, 1, "", "SphericalVGG16BN"], [276, 0, 1, "", "SphericalVGG19"], [277, 0, 1, "", "SphericalVGG19BN"], [278, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[260, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[269, 1, 1, "", "forward"]], "surfify.nn": [[280, 0, 1, "", "IcoDiNeConv"], [281, 0, 1, "", "IcoFixIndexUpSample"], [282, 0, 1, "", "IcoGenericUpConv"], [283, 0, 1, "", "IcoMaxIndexUpSample"], [284, 0, 1, "", "IcoPool"], [285, 0, 1, "", "IcoRePaConv"], [286, 0, 1, "", "IcoSpMaConv"], [287, 0, 1, "", "IcoSpMaConvTranspose"], [288, 0, 1, "", "IcoUpConv"], [289, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[280, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[281, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[282, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[283, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[284, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[285, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[286, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[287, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[288, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[289, 1, 1, "", "forward"]], "surfify.nn.functional": [[290, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[291, 0, 1, "", "IcoDiNeConv"], [292, 0, 1, "", "IcoFixIndexUpSample"], [293, 0, 1, "", "IcoGenericUpConv"], [294, 0, 1, "", "IcoMaxIndexUpSample"], [295, 0, 1, "", "IcoPool"], [296, 0, 1, "", "IcoRePaConv"], [297, 0, 1, "", "IcoSpMaConv"], [298, 0, 1, "", "IcoSpMaConvTranspose"], [299, 0, 1, "", "IcoUpConv"], [300, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[291, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[292, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[293, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[294, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[295, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[296, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[297, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[298, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[299, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[300, 1, 1, "", "forward"]], "surfify.plotting": [[302, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[303, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[304, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[304, 1, 1, "", "fit"], [304, 1, 1, "", "get_metadata_routing"], [304, 1, 1, "", "inverse_transform"], [304, 1, 1, "", "set_inverse_transform_request"], [304, 1, 1, "", "set_partial_fit_request"], [304, 1, 1, "", "set_transform_request"], [304, 1, 1, "", "transform"]], "surfify.transforms": [[305, 0, 1, "", "RandomCompose"]], "surfify.utils": [[307, 2, 1, "", "cart2sph"], [315, 2, 1, "", "debug_msg"], [316, 2, 1, "", "downsample"], [317, 2, 1, "", "downsample_data"], [318, 2, 1, "", "downsample_ico"], [319, 2, 1, "", "find_neighbors"], [320, 2, 1, "", "find_rotation_interpol_coefs"], [321, 2, 1, "", "get_logger"], [322, 2, 1, "", "get_rectangular_projection"], [323, 2, 1, "", "grid2text"], [324, 2, 1, "", "ico2ico"], [325, 2, 1, "", "icosahedron"], [326, 2, 1, "", "interpolate"], [327, 2, 1, "", "interpolate_data"], [338, 2, 1, "", "min_depth_to_get_n_neighbors"], [339, 2, 1, "", "neighbors"], [340, 2, 1, "", "neighbors_rec"], [341, 2, 1, "", "number_of_ico_vertices"], [342, 2, 1, "", "number_of_neighbors"], [343, 2, 1, "", "order_of_ico_from_vertices"], [344, 2, 1, "", "order_triangles"], [345, 2, 1, "", "patch_tri"], [346, 2, 1, "", "rotate_data"], [373, 2, 1, "", "setup_logging"], [374, 2, 1, "", "sph2cart"], [375, 2, 1, "", "text2grid"], [376, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[308, 2, 1, "", "cart2sph"], [309, 2, 1, "", "find_corresponding_order"], [310, 2, 1, "", "grid2text"], [311, 2, 1, "", "ico2ico"], [312, 2, 1, "", "sph2cart"], [313, 2, 1, "", "text2grid"], [314, 2, 1, "", "text2ico"]], "surfify.utils.io": [[328, 0, 1, "", "HidePrints"], [329, 2, 1, "", "compute_and_store"], [330, 2, 1, "", "decompose_cifti"], [331, 2, 1, "", "read_freesurfer"], [332, 2, 1, "", "read_gifti"], [333, 2, 1, "", "surf_data_from_cifti"], [334, 2, 1, "", "ungzip"], [335, 2, 1, "", "volume_from_cifti"], [336, 2, 1, "", "write_freesurfer"], [337, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[347, 2, 1, "", "_patch_tri_iter"], [348, 2, 1, "", "build_freesurfer_ico"], [349, 2, 1, "", "build_fslr_ref"], [350, 2, 1, "", "downsample"], [351, 2, 1, "", "downsample_data"], [352, 2, 1, "", "downsample_ico"], [353, 2, 1, "", "find_neighbors"], [354, 2, 1, "", "find_rotation_interpol_coefs"], [355, 2, 1, "", "get_angle_with_xaxis"], [356, 2, 1, "", "get_rectangular_projection"], [357, 2, 1, "", "icosahedron"], [358, 2, 1, "", "interpolate"], [359, 2, 1, "", "interpolate_data"], [360, 2, 1, "", "middle_point"], [361, 2, 1, "", "min_depth_to_get_n_neighbors"], [362, 2, 1, "", "neighbors"], [363, 2, 1, "", "neighbors_rec"], [364, 2, 1, "", "normalize"], [365, 2, 1, "", "number_of_ico_vertices"], [366, 2, 1, "", "number_of_neighbors"], [367, 2, 1, "", "order_of_ico_from_vertices"], [368, 2, 1, "", "order_triangles"], [369, 2, 1, "", "patch_tri"], [370, 2, 1, "", "rotate_data"], [371, 2, 1, "", "triangles_to_edges"], [372, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 4], "case": [0, 4], "spheric": [0, 4, 5, 8], "modul": [0, 4, 279], "present": 1, "openbhb": [1, 11, 28], "dataset": [1, 3, 9, 11, 28, 200], "baselin": [1, 3], "model": [1, 9, 11, 211], "ag": 1, "sex": 1, "predict": [1, 9], "load": [1, 7], "packag": 1, "plot": [1, 301], "modal": 1, "whole": 1, "brain": 1, "voxel": 1, "base": [1, 28, 39, 173, 211], "morphometri": 1, "vbm": 1, "quasi": 1, "raw": 1, "imag": 1, "roi": 1, "neuromorphometr": 1, "atla": 1, "surfac": [1, 7, 301], "measur": 1, "from": 1, "freesurf": 1, "visual": [1, 11], "region": 1, "destrieux": 1, "fine": 1, "grain": 1, "fsaverage7": 1, "templat": 1, "fit": 1, "machin": 1, "learn": [1, 3, 11], "ridg": 1, "regress": [1, 3, 78], "classif": [1, 78], "logist": [1, 3], "comput": [2, 10, 378], "time": [2, 10, 378], "self": 3, "supervis": [3, 11], "contrast": [3, 11], "simclr": [3, 53, 211], "setup": [3, 11], "data": [3, 7, 11], "augment": [3, 5, 11, 142, 143, 148, 173], "train": [3, 9, 11], "conclus": 3, "surfcutout": 5, "surfnois": 5, "surfblur": 5, "surfrot": 5, "hemimixup": 5, "groupmixup": 5, "group": 5, "transform": [5, 14, 141, 142, 143, 148, 157, 158, 163, 172], "icosahedron": 6, "match": 6, "project": 7, "textur": 7, "3": 7, "d": 7, "2": 7, "grid": 7, "uniformli": 7, "distribut": 7, "locat": 7, "integr": 7, "deep": 7, "neural": 7, "network": 7, "neighbor": 8, "direct": 8, "rectagular": 8, "tangent": 8, "plane": 8, "unet": [9, 211], "segment": 9, "inspect": 9, "label": 9, "weakli": 11, "y": 11, "awar": 11, "evalu": 11, "represent": 11, "api": [12, 14, 15, 28, 39, 50, 53, 57, 70, 78, 89, 110, 111, 141, 142, 143, 148, 157, 158, 163, 171, 172, 173, 200, 207, 211, 279, 301, 306], "document": [12, 14, 15, 28, 39, 50, 53, 57, 70, 78, 89, 110, 111, 141, 142, 143, 148, 157, 158, 163, 171, 172, 173, 200, 207, 211, 279, 301, 306], "nidl": [12, 13, 14, 15, 28, 39, 50, 53, 57, 70, 78, 89, 110, 111, 141, 142, 143, 148, 157, 158, 163, 171], "instal": 13, "stabl": 13, "version": 13, "current": 13, "experi": 14, "callback": 15, "model_prob": 15, "check_typ": 15, "pandas_dataset": 28, "exampl": [32, 36, 51, 52, 54, 55, 56, 64, 87, 91, 109], "estim": [39, 50, 53, 57], "linear": 50, "logistic_regress": 50, "ssl": [53, 57], "yawar": 53, "util": [57, 89, 173, 306], "projection_head": 57, "loss": [70, 207], "infonc": 70, "yaware_infonc": 70, "metric": 78, "_regress": 78, "color": 89, "bunch": 89, "valid": 89, "weight": 89, "volum": [110, 111, 141, 142, 143, 148, 157, 158, 163], "backbon": 111, "densenet3d": 111, "alexnet3d": 111, "resnet3d": 111, "volume_transform": 141, "intens": [143, 158], "random_blur": 143, "random_nois": 143, "spatial": [148, 163], "random_rot": 148, "random_resized_crop": 148, "random_flip": 148, "random_eras": 148, "preprocess": [157, 158, 163, 172], "z_normal": 158, "rescal": 158, "resiz": 163, "resampl": 163, "crop_or_pad": 163, "search": 171, "surfifi": [172, 173, 200, 207, 211, 279, 301, 306], "mixup": 173, "_samples_gener": 200, "_gener": 200, "vae": [207, 211], "vgg": 211, "sit": 211, "nn": 279, "function": 279, "io": 306, "sampl": 306, "coord": 306}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [4, "spherical-modules-use-cases"]], "Presentation of the OpenBHB dataset and baseline models for age and sex predictions": [[1, "presentation-of-the-openbhb-dataset-and-baseline-models-for-age-and-sex-predictions"]], "Load the packages": [[1, "load-the-packages"]], "Load the OpenBHB dataset and plot the modalities": [[1, "load-the-openbhb-dataset-and-plot-the-modalities"]], "Plot whole-brain Voxel-Based Morphometry (VBM) and Quasi-Raw images": [[1, "plot-whole-brain-voxel-based-morphometry-vbm-and-quasi-raw-images"]], "Plot VBM-ROI on the Neuromorphometrics atlas": [[1, "plot-vbm-roi-on-the-neuromorphometrics-atlas"]], "Plot Surface-Based Measures from FreeSurfer": [[1, "plot-surface-based-measures-from-freesurfer"]], "Visualize regional measures on the Destrieux atlas": [[1, "visualize-regional-measures-on-the-destrieux-atlas"]], "Visualize fine-grained measures on the fsaverage7 template": [[1, "visualize-fine-grained-measures-on-the-fsaverage7-template"]], "Fit machine learning models for age and sex prediction": [[1, "fit-machine-learning-models-for-age-and-sex-prediction"]], "Age prediction with Ridge regression": [[1, "age-prediction-with-ridge-regression"]], "Sex classification with logistic regression": [[1, "sex-classification-with-logistic-regression"]], "Computation times": [[2, "computation-times"], [10, "computation-times"], [378, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[3, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[3, "setup"], [11, "setup"]], "Data Augmentation for Contrastive Learning": [[3, "data-augmentation-for-contrastive-learning"]], "Dataset": [[3, "dataset"]], "Training": [[3, "training"]], "Logistic Regression": [[3, "logistic-regression"]], "Baseline": [[3, "baseline"]], "Conclusion": [[3, "conclusion"]], "Spherical augmentations": [[5, "spherical-augmentations"]], "SurfCutOut": [[5, "surfcutout"]], "SurfNoise": [[5, "surfnoise"]], "SurfBlur": [[5, "surfblur"]], "SurfRotation": [[5, "surfrotation"]], "HemiMixUp": [[5, "hemimixup"]], "GroupMixUp": [[5, "groupmixup"]], "GroupMixUp group": [[5, "groupmixup-group"]], "Transformer": [[5, "transformer"]], "Icosahedron matching": [[6, "icosahedron-matching"]], "Project texture": [[7, "project-texture"]], "Load data": [[7, "load-data"]], "3-D surface to 2-D grid projection": [[7, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[7, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[7, "uniformly-distributed-locations"]], "Integration in deep neural network": [[7, "integration-in-deep-neural-network"]], "Spherical neighbors": [[8, "spherical-neighbors"]], "Direct Neighbor": [[8, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[8, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[9, "unet-segmentation"]], "Inspect dataset": [[9, "inspect-dataset"]], "Train the model": [[9, "train-the-model"]], "Inspect the predicted labels": [[9, "inspect-the-predicted-labels"]], "Weakly Supervised Contrastive Learning with y-Aware": [[11, "weakly-supervised-contrastive-learning-with-y-aware"]], "OpenBHB datasets and data augmentations for Contrastive Learning": [[11, "openbhb-datasets-and-data-augmentations-for-contrastive-learning"]], "Training of y-Aware Contrastive Learning models": [[11, "training-of-y-aware-contrastive-learning-models"]], "Visualization and evaluation of the learned representations": [[11, "visualization-and-evaluation-of-the-learned-representations"]], "API documentation of nidl": [[12, "api-documentation-of-nidl"], [14, "api-documentation-of-nidl"]], "Installing nidl": [[13, "installing-nidl"]], "Installing a stable version": [[13, "installing-a-stable-version"]], "Installing the current version": [[13, "installing-the-current-version"]], "nidl": [[14, "nidl"]], "nidl.experiment": [[14, "nidl-experiment"]], "nidl.transforms": [[14, "nidl-transforms"]], "API documentation of nidl.callbacks": [[15, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[15, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[15, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[15, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[28, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[28, "nidl-datasets"]], "nidl.datasets.base": [[28, "nidl-datasets-base"]], "nidl.datasets.pandas_dataset": [[28, "nidl-datasets-pandas-dataset"]], "nidl.datasets.openbhb": [[28, "id1"]], "Examples": [[32, "examples"], [36, "examples"], [51, "examples"], [52, "examples"], [54, "examples"], [55, "examples"], [56, "examples"], [64, "examples"], [87, "examples"], [91, "examples"], [109, "examples"]], "API documentation of nidl.estimators": [[39, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[39, "nidl-estimators"]], "nidl.estimators.base": [[39, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[50, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[50, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[50, "nidl-estimators-linear-logistic-regression"]], "API documentation of nidl.estimators.ssl": [[53, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[53, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[53, "id1"]], "nidl.estimators.ssl.yaware": [[53, "nidl-estimators-ssl-yaware"]], "API documentation of nidl.estimators.ssl.utils": [[57, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[57, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[57, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[70, "api-documentation-of-nidl-losses"]], "nidl.losses": [[70, "nidl-losses"]], "nidl.losses.infonce": [[70, "id1"]], "nidl.losses.yaware_infonce": [[70, "nidl-losses-yaware-infonce"]], "API documentation of nidl.metrics": [[78, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[78, "nidl-metrics"]], "nidl.metrics.classification": [[78, "nidl-metrics-classification"]], "nidl.metrics._regression": [[78, "nidl-metrics-regression"]], "nidl.metrics.regression": [[78, "id1"]], "API documentation of nidl.utils": [[89, "api-documentation-of-nidl-utils"]], "nidl.utils": [[89, "nidl-utils"]], "nidl.utils.color": [[89, "nidl-utils-color"]], "nidl.utils.bunch": [[89, "id1"]], "nidl.utils.validation": [[89, "nidl-utils-validation"]], "nidl.utils.weights": [[89, "id2"]], "API documentation of nidl.volume": [[110, "api-documentation-of-nidl-volume"]], "nidl.volume": [[110, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[111, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[111, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[111, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[111, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[111, "nidl-volume-backbones-resnet3d"]], "API documentation of nidl.volume.transforms": [[141, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[141, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[141, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[142, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[142, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[143, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[143, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[143, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[143, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[148, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[148, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[148, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[148, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[148, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[148, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "API documentation of nidl.volume.transforms.preprocessing": [[157, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[157, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[158, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[158, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[158, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[158, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[163, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[163, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[163, "id1"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[163, "id2"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[163, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "Search in API documentation of nidl": [[171, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[172, "api-documentation-of-surfify"]], "surfify": [[172, "surfify"]], "surfify.transforms": [[172, "surfify-transforms"]], "surfify.preprocessing": [[172, "surfify-preprocessing"]], "API documentation of surfify.augmentation": [[173, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[173, "surfify-augmentation"]], "surfify.augmentation.base": [[173, "surfify-augmentation-base"]], "surfify.augmentation.utils": [[173, "surfify-augmentation-utils"]], "surfify.augmentation.mixup": [[173, "surfify-augmentation-mixup"]], "API documentation of surfify.datasets": [[200, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[200, "surfify-datasets"]], "surfify.datasets._samples_generator": [[200, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[200, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[207, "api-documentation-of-surfify-losses"]], "surfify.losses": [[207, "surfify-losses"]], "surfify.losses.vae": [[207, "surfify-losses-vae"]], "API documentation of surfify.models": [[211, "api-documentation-of-surfify-models"]], "surfify.models": [[211, "surfify-models"]], "surfify.models.vgg": [[211, "surfify-models-vgg"]], "surfify.models.base": [[211, "surfify-models-base"]], "surfify.models.simclr": [[211, "id1"]], "surfify.models.sit": [[211, "id2"]], "surfify.models.unet": [[211, "surfify-models-unet"]], "surfify.models.vae": [[211, "surfify-models-vae"]], "API documentation of surfify.nn": [[279, "api-documentation-of-surfify-nn"]], "surfify.nn": [[279, "surfify-nn"]], "surfify.nn.functional": [[279, "surfify-nn-functional"]], "surfify.nn.modules": [[279, "surfify-nn-modules"]], "API documentation of surfify.plotting": [[301, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[301, "surfify-plotting"]], "surfify.plotting.surface": [[301, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[306, "api-documentation-of-surfify-utils"]], "surfify.utils": [[306, "surfify-utils"]], "surfify.utils.io": [[306, "surfify-utils-io"]], "surfify.utils.sampling": [[306, "surfify-utils-sampling"]], "surfify.utils.coord": [[306, "surfify-utils-coord"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[16, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[16, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[16, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[16, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[17, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[17, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[17, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[18, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[18, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[18, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[18, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[19, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[19, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[19, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[19, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[20, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[20, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[21, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[21, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[21, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[21, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[22, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[22, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[22, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[22, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[22, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[24, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[24, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[24, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[25, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[25, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[25, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[26, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[26, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[27, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[27, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[27, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[27, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[29, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[29, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[29, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[30, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[30, "nidl.datasets.BaseNumpyDataset.get_data"]], "imagedataframedataset (class in nidl.datasets)": [[31, "nidl.datasets.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.imagedataframedataset method)": [[31, "nidl.datasets.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.imagedataframedataset method)": [[31, "nidl.datasets.ImageDataFrameDataset.apply_transform"]], "openbhb (class in nidl.datasets)": [[32, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[32, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[33, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[34, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[34, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[34, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[35, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[35, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[36, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[36, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "imagedataframedataset (class in nidl.datasets.pandas_dataset)": [[37, "nidl.datasets.pandas_dataset.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[37, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[37, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_transform"]], "default_image_loader() (in module nidl.datasets.pandas_dataset)": [[38, "nidl.datasets.pandas_dataset.default_image_loader"]], "baseestimator (class in nidl.estimators)": [[40, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[40, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[41, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[42, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[43, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[44, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[45, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[45, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[46, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[47, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[48, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[49, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[51, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[51, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[52, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[54, "nidl.estimators.ssl.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr method)": [[54, "nidl.estimators.ssl.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[54, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr method)": [[54, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[54, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[54, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[55, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[56, "nidl.estimators.ssl.simclr.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr.simclr method)": [[56, "nidl.estimators.ssl.simclr.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[56, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[56, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[56, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[56, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[58, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[58, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[59, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[60, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[61, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[61, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[62, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[63, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[64, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[65, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[66, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[67, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[68, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[69, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[71, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[71, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[72, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[72, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[72, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[72, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[72, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[72, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[73, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[73, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[74, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[74, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[75, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[75, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[75, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[75, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[75, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[75, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[76, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[76, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[77, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[77, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[79, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[80, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[81, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[82, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[83, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[84, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[85, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[86, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[86, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[87, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[87, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[87, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[88, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[88, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[88, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[88, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[90, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[91, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[91, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[91, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[91, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[91, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[92, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[93, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[93, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[93, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[93, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[93, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[94, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[95, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[96, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[97, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[98, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[99, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[100, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[101, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[102, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[103, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[104, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[105, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[106, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[107, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[108, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[109, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[109, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[109, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[109, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[109, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[112, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[112, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[113, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[113, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[114, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[114, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[115, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[115, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[116, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[116, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[117, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[118, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[118, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[119, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[119, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[120, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[120, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[121, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[122, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[123, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[124, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[125, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[126, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[127, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[127, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[128, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[129, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[130, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[132, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[134, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[135, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[136, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[137, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[138, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[139, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[140, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[144, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[144, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[145, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[145, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[146, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[146, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[147, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[147, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[152, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[152, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[153, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[153, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[154, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[154, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[154, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[155, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[155, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[156, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[156, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[159, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[159, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[160, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[160, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[161, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[161, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[162, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[162, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[164, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[164, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[167, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[167, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[168, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[168, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[168, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[168, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[168, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[169, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[169, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[170, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[170, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[174, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[174, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[175, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[175, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[175, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[176, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[176, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[177, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[177, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[178, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[178, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[179, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[179, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[180, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[180, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[181, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[182, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[183, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[183, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[184, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[184, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[185, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[185, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[186, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[186, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[187, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[188, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[188, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[188, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[189, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[189, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[190, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[190, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[191, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[192, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[192, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[193, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[193, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[193, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[194, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[194, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[194, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[195, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[196, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[197, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[198, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[199, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[201, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[202, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[203, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[204, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[205, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[206, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[208, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[209, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[210, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[212, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[212, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[213, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[213, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[214, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[214, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[215, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[215, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[216, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[216, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[217, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[217, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[218, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[218, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[219, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[220, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[221, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[222, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[223, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[224, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[225, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[226, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[227, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[227, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[228, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[228, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[229, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[229, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[230, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[230, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[230, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[230, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[230, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[231, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[231, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[232, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[233, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[234, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[235, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[236, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[237, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[238, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[239, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[240, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[240, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[241, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[241, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[242, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[242, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[243, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[243, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[244, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[244, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[245, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[245, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[246, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[246, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[247, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[247, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[248, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[248, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[249, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[249, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[250, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[250, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[251, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[251, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[252, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[252, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[253, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[253, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[254, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[254, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[255, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[255, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[256, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[256, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[257, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[257, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[258, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[258, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[258, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[258, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[258, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[259, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[260, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[260, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[261, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[262, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[263, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[264, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[265, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[269, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[273, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[274, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[275, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[276, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[277, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[278, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[280, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[280, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[281, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[281, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[282, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[282, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[283, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[283, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[284, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[284, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[285, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[285, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[286, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[286, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[287, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[287, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[288, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[288, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[289, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[289, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[290, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[291, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[291, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[292, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[292, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[293, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[293, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[294, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[294, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[295, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[295, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[296, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[296, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[297, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[297, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[298, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[298, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[299, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[299, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[300, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[300, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[302, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[303, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[304, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[304, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[305, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[307, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[308, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[309, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[310, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[311, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[312, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[313, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[314, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[315, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[316, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[317, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[318, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[319, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[320, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[321, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[322, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[323, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[324, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[325, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[326, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[327, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[328, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[329, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[330, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[331, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[332, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[333, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[334, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[335, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[336, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[337, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[338, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[339, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[340, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[341, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[342, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[343, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[344, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[345, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[346, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[347, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[348, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[349, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[350, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[351, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[352, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[368, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[369, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[370, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[371, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[372, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[373, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[374, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[375, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[376, "surfify.utils.text2ico"]]}})
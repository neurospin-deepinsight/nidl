Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.transforms", "generated/nidl.transforms.ContrastiveTransforms", "generated/nidl.transforms.ssl.ContrastiveTransforms", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.transforms.rst", "generated/nidl.transforms.ContrastiveTransforms.rst", "generated/nidl.transforms.ssl.ContrastiveTransforms.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of NIDL", "Installing <cite>nidl</cite>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.transforms</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of NIDL", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 33, 34, 35, 36, 37, 46, 47, 48, 51, 65, 67, 69, 297], "supervis": [0, 1, 10, 33, 34, 35, 36, 37, 46, 47, 48, 51, 69, 297], "contrast": [0, 1, 33, 34, 36, 37, 51, 69, 131, 132, 297], "learn": [0, 1, 33, 34, 36, 37, 46, 47, 48, 51, 69, 72, 73, 76, 78, 140, 157, 179, 201, 212, 296, 297], "simclr": [0, 1, 10, 33, 34, 36, 37, 51, 69, 101, 297], "neighbor": [0, 3, 4, 9, 10, 101, 105, 107, 108, 113, 114, 118, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 173, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 209, 212, 214, 215, 216, 217, 220, 225, 229, 232, 235, 238, 239, 242, 245, 257, 258, 259, 261, 265, 269, 272, 273, 277, 280, 281, 282, 285, 289, 291, 294, 297], "unet": [0, 3, 9, 10, 101, 144, 156, 168, 169, 170, 171, 172, 173, 174, 297], "segment": [0, 3, 9, 74, 75, 89, 90, 297], "project": [0, 3, 4, 5, 7, 9, 11, 16, 19, 36, 37, 38, 110, 116, 230, 233, 235, 238, 241, 243, 244, 258, 259, 264, 269, 272, 274, 275, 276, 279, 281, 282, 288, 295, 297], "textur": [0, 3, 4, 9, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 141, 142, 145, 154, 155, 157, 158, 175, 176, 177, 178, 179, 181, 190, 223, 224, 229, 232, 233, 236, 242, 245, 246, 265, 270, 277, 278, 289, 294, 295, 297], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 101, 107, 108, 110, 113, 114, 116, 130, 133, 134, 135, 140, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 229, 230, 232, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 294, 295, 297], "match": [0, 3, 9, 17, 20, 228, 233, 295, 297], "augment": [0, 3, 9, 10, 16, 17, 18, 19, 20, 36, 37, 38, 47, 48, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 297], "download": [0, 2, 4, 5, 6, 7, 8, 49, 51, 69], "all": [0, 2, 5, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 144, 156, 170, 171, 172, 206, 207, 208, 217, 218, 219, 297], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 47, 48, 50, 52, 67, 143, 145, 156, 157, 158, 167, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 294, 295, 297], "python": [0, 2, 4, 5, 6, 7, 8, 65], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 154, 155, 156, 157, 158, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 190, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "code": [0, 2, 4, 5, 6, 7, 8, 14, 38, 41, 62, 63], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 253], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 19, 33, 34, 36, 37, 120, 129, 130, 133, 134, 135, 140, 232, 238, 253, 255, 256, 267, 268, 272, 294], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 297], "000": [1, 2, 297], "total": [1, 4, 5, 6, 7, 8, 9, 73, 74, 75, 78, 89, 90, 297], "execut": [1, 9, 248, 297], "1": [1, 2, 4, 5, 6, 7, 8, 9, 33, 34, 36, 37, 38, 44, 45, 50, 52, 67, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 93, 94, 104, 105, 108, 114, 118, 122, 123, 130, 133, 134, 135, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 218, 219, 220, 223, 224, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 267, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 291, 294, 295, 297], "file": [1, 9, 16, 17, 18, 19, 20, 38, 51, 69, 131, 132, 249, 250, 251, 253, 255, 256, 292, 296, 297], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 44, 45, 50, 52, 67, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 105, 108, 114, 118, 131, 132, 141, 143, 144, 145, 156, 157, 158, 167, 171, 172, 175, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 294, 295, 297], "auto_galleri": [1, 9], "mem": [1, 9, 297], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 297], "simclr_stl10": [1, 2, 297], "py": [1, 2, 4, 5, 6, 7, 8, 9, 297], "0": [1, 2, 4, 5, 6, 7, 8, 9, 14, 33, 34, 36, 37, 38, 44, 45, 67, 74, 75, 89, 90, 104, 108, 110, 114, 116, 122, 123, 143, 157, 167, 170, 179, 202, 207, 208, 213, 218, 219, 223, 224, 228, 230, 233, 235, 238, 243, 258, 259, 263, 264, 265, 269, 272, 281, 282, 287, 288, 289, 291, 295, 297], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 33, 34, 36, 37, 62, 63, 68], "full": [2, 4, 5, 6, 7, 8, 10, 237, 271], "http": [2, 11, 44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 140, 252, 254], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 101, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "In": [2, 33, 34, 36, 37, 42, 47, 48, 144, 156, 171, 172, 199], "thi": [2, 5, 10, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "tutori": [2, 11], "we": [2, 5, 6, 8, 33, 34, 36, 37, 47, 48, 66, 199, 211, 252, 254], "take": [2, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 180, 206, 207, 208, 217, 218, 219], "closer": [2, 36, 37], "look": [2, 36, 37, 238, 272], "also": [2, 10, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 65, 129, 131, 132, 248, 296], "sometim": [2, 50, 52], "call": [2, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 47, 48, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 131, 132, 170, 206, 207, 208, 217, 218, 219, 248, 265, 289], "unsupervis": 2, "describ": [2, 36, 37, 38, 296], "scenario": 2, "where": [2, 6, 16, 17, 18, 19, 20, 36, 37, 38, 51, 69, 131, 132, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212, 223, 224, 232, 291, 294], "have": [2, 5, 6, 14, 33, 34, 36, 37, 248, 258, 281], "given": [2, 51, 68, 69, 139, 141, 175, 248, 265, 289, 290, 291], "input": [2, 8, 14, 16, 17, 18, 19, 20, 22, 27, 38, 40, 47, 48, 51, 69, 72, 73, 74, 75, 76, 78, 89, 90, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 125, 127, 131, 132, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 228, 229, 232, 233, 242, 248, 250, 251, 266, 294, 295], "accompani": 2, "label": [2, 6, 33, 34, 134, 135, 223, 224], "classic": [2, 156, 172, 173], "wai": [2, 22, 27, 47, 48, 258, 281, 296], "howev": 2, "still": 2, "contain": [2, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 50, 52, 131, 132, 143, 167, 180, 223, 224, 248, 264, 288], "lot": 2, "inform": [2, 16, 17, 18, 19, 20, 38, 131, 132, 140, 143, 167], "which": [2, 22, 27, 33, 34, 36, 37, 68, 74, 75, 89, 90, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 228, 238, 265, 272, 289], "can": [2, 5, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 66, 104, 111, 122, 124, 131, 132, 144, 145, 156, 157, 158, 170, 171, 172, 179, 180, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 247, 248], "how": [2, 4, 5, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "ar": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 39, 50, 52, 103, 131, 132, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 211, 228, 232, 245, 258, 265, 267, 277, 281, 289, 291, 294], "imag": [2, 6, 16, 17, 18, 19, 20, 33, 34, 36, 37, 47, 48, 103, 131, 132, 139, 232, 249, 294], "differ": [2, 5, 16, 17, 18, 19, 20, 36, 37, 38, 47, 48, 108, 114, 131, 132, 143, 144, 156, 167, 171, 172], "each": [2, 5, 16, 19, 22, 27, 33, 34, 36, 37, 38, 47, 48, 73, 74, 75, 78, 89, 90, 105, 107, 108, 113, 114, 118, 121, 128, 130, 133, 134, 135, 139, 141, 142, 143, 144, 154, 155, 156, 167, 170, 171, 172, 175, 176, 177, 178, 238, 239, 258, 259, 265, 272, 273, 281, 282, 289], "other": [2, 5, 36, 37, 38, 233, 295], "what": [2, 33, 34, 36, 37, 38, 41], "pattern": [2, 6, 16, 17, 18, 19, 20, 131, 132, 211], "descript": 2, "certain": [2, 238, 261, 272, 285], "cluster": [2, 24, 29], "To": [2, 5, 16, 19, 33, 34, 36, 37], "get": [2, 36, 37, 257, 260, 261, 262, 280, 284, 285, 286, 291], "an": [2, 6, 7, 8, 11, 22, 27, 33, 34, 36, 37, 38, 40, 41, 47, 48, 50, 51, 52, 65, 67, 68, 69, 74, 75, 89, 90, 107, 108, 113, 114, 117, 120, 121, 123, 126, 128, 143, 144, 156, 167, 171, 172, 201, 212, 229, 232, 233, 237, 242, 244, 246, 257, 260, 261, 262, 265, 271, 276, 278, 279, 280, 284, 285, 286, 289, 294, 295], "insight": 2, "question": 2, "implement": [2, 33, 34, 36, 37, 44, 45, 65, 107, 113, 140, 157, 170, 179], "popular": [2, 10, 129], "simpl": [2, 4, 5, 7, 8, 36, 37, 72, 76, 230, 243, 291], "method": [2, 10, 14, 16, 19, 22, 27, 33, 34, 36, 37, 50, 51, 52, 66, 67, 69, 129, 143, 144, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 179, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 265, 289], "appli": [2, 5, 6, 36, 37, 47, 48, 51, 69, 74, 75, 89, 90, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 211, 230, 241, 243, 259, 275, 282], "stl10": 2, "requir": [2, 22, 27, 33, 34, 36, 37], "some": [2, 7, 10, 33, 34, 36, 37, 38, 40, 74, 75, 89, 90, 111, 112, 124, 125, 129, 291], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 296], "let": [2, 36, 37], "": [2, 5, 7, 33, 34, 36, 37, 68, 106, 107, 108, 110, 113, 114, 116, 119, 130, 133, 134, 135, 141, 142, 144, 154, 155, 156, 168, 171, 172, 173, 175, 176, 177, 178, 201, 212, 235, 238, 248, 258, 259, 263, 264, 269, 272, 281, 282, 287, 288], "first": [2, 5, 6, 8, 33, 34, 36, 37, 44, 45, 73, 74, 75, 78, 89, 90, 141, 144, 156, 168, 169, 171, 172, 175, 265, 289], "start": [2, 74, 75, 89, 90, 108, 114, 238, 272], "import": [2, 4, 5, 6, 7, 8, 36, 37, 38, 40, 41, 50, 52, 67, 129, 143, 145, 156, 157, 158, 167, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 294, 295], "our": [2, 5], "standard": [2, 107, 109, 113, 115, 143, 144, 156, 167, 171, 172, 244, 247, 264, 276, 288], "librari": 2, "below": [2, 33, 34, 36, 37, 38], "o": [2, 5, 7, 225, 235, 238, 258, 259, 264, 269, 272, 281, 282, 288], "matplotlib": [2, 4, 5, 6, 7, 8, 223, 224, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "pyplot": [2, 4, 5, 6, 7, 8, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "plt": [2, 4, 5, 6, 7, 8, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "pytorch_lightn": 2, "pl": 2, "torch": [2, 6, 8, 33, 34, 36, 37, 44, 45, 51, 69, 140, 145, 156, 157, 158, 170, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "nn": [2, 6, 8, 10, 22, 27, 33, 34, 36, 37, 44, 45, 51, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 101, 107, 113, 141, 142, 154, 155, 168, 170, 173, 175, 176, 177, 178, 180, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "util": [2, 4, 5, 6, 7, 8, 10, 33, 34, 36, 37, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 101, 107, 108, 110, 113, 114, 116, 122, 123, 124, 125, 126, 127, 128, 129, 156, 157, 158, 172, 179, 190, 200, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "torchvis": [2, 33, 34, 36, 37], "collect": 2, "ordereddict": 2, "copi": [2, 16, 19], "deepcopi": 2, "weight": [2, 10, 33, 34, 36, 37, 38, 51, 69, 101, 105, 118, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 245, 259, 265, 273, 277, 282, 289], "estim": [2, 4, 5, 6, 7, 8, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 66, 68, 101, 230, 243], "ssl": [2, 10, 36, 37, 48, 101], "linear": [2, 10, 33, 34, 72, 76, 101, 144, 156, 171, 172, 173], "logisticregress": [2, 10, 32, 33, 34, 101], "callback": [2, 10, 14, 22, 27, 33, 34, 36, 37, 101], "learningratemonitor": [2, 33, 34, 36, 37], "modelcheckpoint": 2, "transform": [2, 5, 10, 16, 17, 18, 19, 20, 22, 26, 27, 31, 38, 47, 48, 101, 103, 104, 111, 112, 121, 122, 124, 125, 128, 131, 132, 141, 175, 226, 227, 230, 231, 243, 264, 288, 293], "defin": [2, 10, 13, 16, 17, 18, 19, 20, 21, 22, 27, 36, 37, 38, 39, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 118, 120, 123, 131, 132, 144, 156, 170, 171, 172, 173, 174, 199, 206, 207, 208, 217, 218, 219, 223, 224, 241, 244, 250, 251, 255, 256, 275, 276], "global": [2, 38, 199], "paramet": [2, 8, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 67, 68, 69, 72, 73, 74, 75, 76, 78, 89, 90, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 33, 34, 36, 37, 50, 52, 143, 157, 158, 167, 179, 190, 258, 264, 281, 288, 297], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 33, 34, 36, 37, 51, 57, 62, 63, 64, 67, 69, 73, 78, 104, 121, 122, 128, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 209, 212, 214, 215, 216, 220, 223, 224, 229, 230, 233, 236, 238, 242, 243, 258, 263, 270, 272, 281, 287, 295], "benchmark": 2, "fals": [2, 4, 6, 7, 22, 27, 33, 34, 36, 37, 51, 65, 67, 69, 73, 74, 75, 78, 79, 80, 89, 90, 131, 132, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 223, 224, 230, 235, 237, 238, 243, 244, 245, 246, 247, 249, 252, 254, 258, 259, 263, 264, 265, 269, 271, 272, 276, 277, 278, 281, 282, 287, 288, 289, 290], "devic": [2, 33, 34, 36, 37], "gpu": [2, 33, 34, 36, 37], "cuda": 2, "is_avail": 2, "els": 2, "cpu": 2, "As": [2, 8, 36, 37], "mani": [2, 5, 33, 34, 36, 37, 73, 74, 75, 78, 89, 90], "befor": [2, 36, 37, 68, 144, 156, 171, 172, 208, 219], "provid": [2, 16, 17, 18, 19, 20, 22, 27, 110, 116, 131, 132, 200, 239, 265, 273, 289, 296], "pre": 2, "model": [2, 10, 33, 34, 36, 37, 38, 49, 51, 69, 74, 75, 77, 84, 89, 90, 101, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], "If": [2, 14, 16, 17, 18, 19, 20, 33, 34, 36, 37, 51, 68, 69, 74, 75, 89, 90, 248, 265, 289], "you": [2, 5, 11, 14, 16, 19, 33, 34, 36, 37, 38, 39, 51, 69], "run": [2, 4, 5, 6, 7, 8, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 170, 206, 207, 208, 217, 218, 219, 264, 288], "local": [2, 38, 42, 51, 69], "make": [2, 67, 199], "sure": 2, "suffici": 2, "disk": [2, 33, 34, 36, 37], "space": [2, 6, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 141, 142, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 175, 176, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 241, 275], "avail": [2, 33, 34, 36, 37, 38, 51, 67, 69], "load_pretrain": [2, 51, 69], "makedir": 2, "exist_ok": 2, "name": [2, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 41, 51, 68, 69, 141, 142, 154, 155, 175, 176, 177, 178, 199, 223, 224, 234, 248], "hf": [2, 38, 51, 69], "hub": [2, 38, 51, 69], "neurospin": [2, 11, 51, 69], "resnet18": [2, 10, 71, 85, 95, 101], "data_dir": [2, 51, 69], "filepath": [2, 51, 69], "pt": 2, "allow": [2, 5, 14, 17, 20, 36, 37, 38, 39, 47, 48, 248, 265, 289], "effici": [2, 47, 48, 73, 78], "need": [2, 5, 6, 33, 34, 36, 37, 38, 47, 48, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 211, 217, 218, 219], "prepar": [2, 47, 48], "load": [2, 8, 10, 16, 17, 19, 20, 38, 41, 42, 47, 48, 51, 69, 129, 131, 132, 252, 254], "sampl": [2, 8, 10, 47, 48, 101, 129, 130, 133, 134, 135, 139, 141, 142, 144, 145, 156, 157, 158, 168, 171, 172, 173, 175, 176, 179, 181, 190, 203, 204, 205, 209, 211, 214, 215, 216, 220, 232, 259, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294], "two": [2, 5, 33, 34, 36, 37, 47, 48, 228, 230, 243, 258, 281], "random": [2, 4, 22, 27, 47, 48, 104, 108, 114, 120, 121, 122, 123, 128, 130, 133, 134, 135], "batch": [2, 8, 14, 22, 27, 33, 34, 36, 37, 47, 48, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "The": [2, 5, 16, 19, 33, 34, 36, 37, 38, 44, 45, 47, 48, 68, 107, 109, 110, 113, 115, 116, 140, 141, 142, 144, 154, 155, 156, 157, 170, 171, 172, 175, 176, 177, 178, 179, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 226, 227, 247, 248], "easiest": [2, 47, 48], "do": [2, 5, 33, 34, 36, 37, 47, 48], "i": [2, 5, 8, 10, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "creat": [2, 47, 48, 65, 104, 117, 122, 123, 126, 129, 131, 132, 143, 167, 199], "when": [2, 14, 22, 27, 33, 34, 36, 37, 47, 48, 51, 67, 69, 223, 224, 228, 233, 248, 263, 287, 295], "being": [2, 47, 48], "set": [2, 5, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 42, 47, 48, 53, 108, 110, 114, 116, 129, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 235, 245, 249, 269, 277], "twice": [2, 47, 48], "class": [2, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 247], "contrastivetransform": [2, 10, 46, 47, 48, 101], "framework": 2, "easili": [2, 5], "extend": [2, 50, 52], "more": [2, 16, 17, 18, 19, 20, 47, 48, 73, 78, 131, 132, 296], "posit": [2, 47, 48], "than": [2, 36, 37], "same": [2, 5, 36, 37, 38, 39, 228, 230, 243, 248, 253, 258, 281], "most": [2, 223, 224], "usual": [2, 36, 37], "obtain": [2, 36, 37], "us": [2, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "onli": [2, 5, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "def": [2, 4, 6, 33, 34, 36, 37, 67], "__init__": [2, 33, 34, 36, 37, 67], "base_transform": 2, "n_view": [2, 47, 48], "2": [2, 4, 5, 7, 8, 33, 34, 36, 37, 38, 47, 48, 50, 52, 67, 74, 75, 89, 90, 104, 117, 122, 123, 126, 130, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 229, 230, 232, 233, 235, 236, 237, 238, 241, 242, 243, 245, 246, 257, 258, 259, 264, 269, 270, 271, 272, 275, 277, 278, 280, 281, 282, 288, 290, 294, 295], "__call__": 2, "x": [2, 6, 7, 8, 33, 34, 36, 37, 67, 72, 73, 74, 75, 76, 78, 87, 88, 89, 90, 134, 135, 139, 142, 144, 145, 154, 155, 156, 157, 158, 168, 169, 170, 171, 172, 176, 177, 178, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 229, 231, 232, 233, 236, 242, 245, 246, 258, 265, 270, 274, 277, 278, 281, 289, 293, 294, 295], "return": [2, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 51, 65, 67, 69, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 125, 126, 127, 128, 131, 132, 134, 135, 139, 141, 142, 143, 145, 154, 155, 157, 158, 167, 175, 176, 177, 178, 179, 180, 181, 190, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295], "rang": [2, 4, 5, 8, 226, 227, 261, 285], "next": [2, 5, 33, 34, 36, 37, 248], "specif": [2, 10, 33, 34, 36, 37, 105, 106, 118, 119, 144, 156, 171, 172, 199, 260, 284], "want": [2, 11, 36, 37, 51, 69], "choic": [2, 38], "crucial": 2, "hyperparamet": [2, 36, 37], "sinc": [2, 5, 6, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 211, 217, 218, 219], "directli": [2, 103], "affect": [2, 22, 27], "latent": [2, 36, 37, 141, 142, 154, 155, 157, 175, 176, 177, 178, 179], "structur": [2, 5], "might": [2, 33, 34, 36, 37], "overal": 2, "experi": [2, 10, 33, 34, 36, 37, 38, 39, 40, 41, 42, 101, 296], "5": [2, 4, 6, 7, 8, 9, 110, 116, 143, 144, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 206, 217, 241, 258, 259, 275, 281, 282], "follow": [2, 36, 37, 38], "origin": [2, 6, 36, 37, 103, 139], "horizont": [2, 6], "flip": 2, "crop": 2, "resiz": 2, "color": [2, 7, 10, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 101, 223, 224], "distort": 2, "grayscal": 2, "gaussian": [2, 107, 109, 113, 115, 130, 133, 134, 135], "blur": [2, 107, 113], "comparison": 2, "reduc": [2, 74, 75, 89, 90, 105, 118, 236, 237, 239, 270, 271, 273], "effect": [2, 74, 75, 89, 90], "jitter": 2, "slightli": 2, "instead": [2, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "8": [2, 4, 6, 8, 9, 33, 34, 36, 37, 156, 172, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 297], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 36, 37, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 105, 118, 170, 205, 206, 207, 208, 216, 217, 218, 219], "wa": [2, 36, 37], "faster": [2, 248], "stabl": 2, "instanc": [2, 5, 22, 27, 33, 34, 36, 37, 68, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 104, 122, 123, 143, 167, 170, 206, 207, 208, 217, 218, 219], "scale": [2, 6, 8, 33, 34, 36, 37, 44, 45, 130, 133, 134, 135, 232, 233, 236, 241, 245, 246, 259, 265, 270, 275, 277, 278, 282, 289, 294, 295], "highli": 2, "vari": 2, "benefici": 2, "t": [2, 6, 33, 34, 36, 37], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 33, 34, 36, 37, 44, 45, 105, 106, 118, 119, 223, 224, 228, 230, 243, 258, 267, 281, 291], "contrast_transform": 2, "compos": [2, 38, 47, 48, 258, 281], "randomhorizontalflip": 2, "randomresizedcrop": 2, "size": [2, 6, 7, 8, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 105, 106, 108, 114, 118, 119, 120, 131, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 206, 207, 208, 211, 217, 218, 219, 238, 241, 259, 264, 266, 272, 275, 282, 288], "96": [2, 4, 208, 219, 229, 242], "randomappli": 2, "colorjitt": 2, "p": 2, "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 207, 208, 218, 219], "9": [2, 4, 5, 137, 138], "totensor": 2, "normal": [2, 10, 33, 34, 36, 37, 44, 45, 74, 75, 89, 90, 101, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 225, 274, 283], "after": [2, 33, 34, 36, 37, 74, 75, 89, 90, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "discuss": 2, "techniqu": [2, 291], "now": [2, 5, 8, 36, 37, 74, 75, 89, 90, 180], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 9, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 145, 156, 158, 172, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288, 297], "airplan": 2, "bird": 2, "car": 2, "cat": 2, "deer": 2, "dog": 2, "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": 2, "resolut": [2, 74, 75, 89, 90, 131, 132, 144, 156, 171, 172], "pixel": 2, "500": 2, "per": [2, 16, 19, 74, 75, 89, 90], "addition": 2, "much": [2, 73, 78], "larger": [2, 36, 37], "100": [2, 4, 7, 8, 235, 238, 258, 259, 264, 267, 269, 272, 281, 282, 288], "unlabel": 2, "similar": [2, 5, 33, 34, 36, 37], "wider": [2, 36, 37], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": 2, "luckili": 2, "through": [2, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "keep": [2, 131, 132], "mind": 2, "rel": [2, 16, 17, 18, 19, 20], "larg": 2, "ha": [2, 5, 33, 34, 36, 37, 73, 74, 75, 78, 89, 90, 144, 156, 171, 172], "consider": [2, 36, 37], "3gb": 2, "bit": [2, 33, 34, 36, 37], "time": [2, 4, 5, 6, 7, 8, 265, 289], "For": [2, 33, 34, 36, 37, 68, 180, 258, 281], "initi": [2, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "loader": [2, 8], "abov": 2, "unlabeled_data": 2, "via": [2, 265, 289], "train_data_contrast": 2, "valid": [2, 10, 14, 22, 27, 33, 34, 36, 37, 38, 42, 65, 66, 67, 68, 101], "root": [2, 11, 16, 17, 18, 19, 20, 131, 132], "split": [2, 16, 17, 18, 19, 20, 36, 37, 131, 132], "pair": [2, 131, 132], "img": 2, "stack": 2, "idx": [2, 4, 7, 16, 17, 19, 20, 238, 258, 264, 272, 281, 288], "dim": [2, 8, 33, 34, 36, 37, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "img_grid": 2, "make_grid": [2, 33, 34, 36, 37], "nrow": 2, "pad_valu": 2, "permut": [2, 5, 106, 119, 228, 230, 243], "figur": [2, 6, 223, 224], "figsiz": [2, 4, 5, 6, 7, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "titl": [2, 6, 59, 60], "imshow": [2, 6, 232, 294], "axi": [2, 6, 8, 223, 224, 228, 239, 245, 252, 254, 258, 265, 273, 274, 277, 281, 289], "off": [2, 6], "And": 2, "associ": [2, 7, 33, 34, 36, 37, 225, 233, 239, 265, 273, 289, 295], "dataload": [2, 8, 33, 34, 36, 37, 38], "batch_siz": [2, 8, 44, 45, 142, 154, 155, 157, 176, 177, 178, 179], "256": [2, 53, 141, 142, 154, 155, 175, 176, 177, 178], "train_load": 2, "shuffl": [2, 8, 22, 27], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 15, 21, 43, 46, 70, 71, 103, 136, 140], "resnet": [2, 10, 71, 74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 101], "18": [2, 4, 75, 85, 86, 90, 95, 96], "architectur": [2, 8, 10, 33, 34, 36, 37, 70, 71, 72, 73, 74, 75, 76, 78, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 140, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190], "f": [2, 6, 33, 34, 36, 37, 144, 156, 171, 172], "paper": [2, 36, 37, 73, 78], "g": [2, 33, 34, 36, 37, 74, 75, 89, 90], "layer": [2, 36, 37, 72, 73, 74, 75, 76, 78, 89, 90, 91, 92, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221], "mlp": [2, 36, 37, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "relu": [2, 36, 37, 82, 144, 156, 168, 169, 170, 171, 172, 173, 174], "activ": [2, 36, 37, 141, 142, 144, 154, 155, 156, 157, 171, 172, 175, 176, 177, 178, 179], "hidden": [2, 36, 37, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "note": [2, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 65, 72, 76, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 248], "up": [2, 36, 37, 143, 144, 156, 167, 171, 172, 228, 230, 238, 243, 261, 272, 285], "simclrv2": [2, 36, 37], "author": [2, 36, 37, 38], "mention": [2, 36, 37], "boost": [2, 36, 37], "why": [2, 5], "four": 2, "dimens": [2, 5, 36, 37, 180], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 33, 34, 36, 37, 51, 69, 103, 131, 132, 140], "observ": 2, "u": [2, 6, 36, 37, 131, 132, 144, 156, 170, 171, 172], "compar": [2, 36, 37], "neg": 2, "lead": 2, "smoother": 2, "loss": [2, 8, 10, 33, 34, 36, 37, 38, 44, 45, 101, 137, 138, 139], "gradient": [2, 33, 34, 36, 37], "case": [2, 33, 34, 36, 37, 38, 41, 42], "experienc": 2, "good": 2, "result": [2, 58, 65, 199, 247], "hidden_dim": [2, 36, 37, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "128": [2, 72, 76, 141, 142, 154, 155, 175, 176, 177, 178], "encod": [2, 33, 34, 36, 37, 136, 140, 142, 144, 154, 155, 156, 157, 171, 172, 176, 177, 178, 179], "none": [2, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 41, 42, 51, 68, 69, 74, 75, 87, 88, 89, 90, 105, 107, 108, 110, 113, 114, 116, 118, 130, 131, 132, 133, 134, 135, 137, 138, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 208, 219, 223, 224, 236, 237, 246, 248, 265, 267, 268, 270, 271, 278, 279, 289, 292], "num_class": [2, 33, 34, 158, 159, 160, 161, 162, 163, 164, 165, 166, 190, 191, 192, 193, 194, 195, 196, 197, 198], "4": [2, 4, 5, 7, 8, 9, 73, 74, 75, 78, 89, 90, 143, 156, 167, 172, 202, 203, 204, 205, 208, 209, 210, 213, 214, 215, 216, 219, 220, 221, 228, 230, 233, 236, 237, 243, 246, 261, 270, 271, 278, 285, 291, 295, 297], "latent_s": [2, 36, 37], "fc": 2, "out_featur": 2, "ident": [2, 74, 75, 89, 90], "save_weights_onli": 2, "mode": [2, 11, 33, 34, 36, 37, 38, 168], "max": [2, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 215, 216], "monitor": [2, 33, 34, 36, 37], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 33, 34, 36, 37], "trainer_param": 2, "default_root_dir": 2, "acceler": [2, 33, 34, 36, 37], "max_epoch": [2, 33, 34, 36, 37], "lr": [2, 8, 33, 34, 36, 37], "5e": 2, "temperatur": [2, 33, 34, 36, 37, 44, 45], "07": 2, "weight_decai": [2, 8, 33, 34, 36, 37], "1e": [2, 8, 228, 233, 295], "random_st": [2, 22, 27, 33, 34, 36, 37], "42": [2, 4, 6, 8, 232, 233, 236, 245, 246, 265, 270, 277, 278, 289, 294, 295], "print": [2, 4, 5, 6, 8, 49, 53, 67, 143, 145, 157, 158, 167, 179, 181, 190, 244, 257, 260, 261, 262, 263, 276, 280, 284, 285, 286, 287], "found": [2, 5, 16, 17, 18, 19, 20, 33, 34, 36, 37, 68], "pretrain": [2, 36, 37], "weight_fil": [2, 51, 69], "fitted_": 2, "fit": [2, 22, 27, 33, 34, 36, 37, 68], "deploi": 2, "downstream": [2, 36, 37], "task": [2, 36, 37, 74, 75, 89, 90], "see": [2, 16, 17, 18, 19, 20, 36, 37, 38, 44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 110, 116, 131, 132, 252, 254], "well": [2, 36, 37], "littl": 2, "verifi": [2, 68], "whether": [2, 51, 69], "represent": [2, 36, 37, 72, 76, 110, 116, 140, 154, 155, 157, 177, 178, 179, 239, 265, 273, 289, 291], "featur": [2, 10, 36, 37, 73, 74, 75, 78, 89, 90, 129, 144, 156, 168, 169, 170, 171, 172, 173, 174, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221], "word": 2, "singl": [2, 16, 19, 33, 34, 36, 37, 296], "map": [2, 5, 6, 17, 20, 36, 37, 74, 75, 89, 90, 207, 208, 211, 218, 219, 223, 224, 230, 243, 264, 288], "predict": [2, 14, 22, 27, 33, 34, 36, 37, 145, 158, 181, 190], "base": [2, 10, 14, 18, 19, 20, 22, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 101, 105, 113, 114, 115, 116, 118, 143, 167, 201, 212, 228, 248, 258, 259, 264, 281, 282, 288], "network": [2, 36, 37, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "chang": [2, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "dure": [2, 33, 34, 36, 37, 108, 114], "process": [2, 11, 33, 34, 36, 37, 143, 167], "h": [2, 36, 37, 139, 180], "necessari": 2, "further": [2, 10], "worri": 2, "too": 2, "about": [2, 38, 265, 289], "veri": [2, 5, 33, 34, 36, 37], "few": 2, "henc": 2, "expect": [2, 8, 16, 17, 18, 19, 20, 38, 131, 132], "even": [2, 51, 69], "assum": [2, 105, 106, 118, 119, 228], "alreadi": [2, 51, 69], "been": [2, 33, 34, 36, 37], "vector": [2, 36, 37, 258, 281], "dynam": [2, 38, 40, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], "so": [2, 5, 33, 34, 36, 37, 74, 75, 89, 90], "here": [2, 5, 33, 34, 36, 37, 38, 252, 254], "within": [2, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "second": [2, 4, 5, 6, 7, 8, 33, 34, 36, 37, 44, 45], "did": [2, 5], "ani": [2, 33, 34, 36, 37, 131, 132, 244, 276], "signific": 2, "gain": 2, "test": [2, 5, 8, 14], "while": [2, 5, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "800": 2, "64": [2, 4, 73, 74, 75, 78, 87, 88, 89, 90, 141, 142, 154, 155, 157, 175, 176, 177, 178, 179], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 33, 34, 47, 48, 72, 73, 74, 75, 76, 78, 89, 90, 104, 105, 108, 114, 117, 118, 122, 123, 126, 130, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212, 223, 224, 232, 236, 237, 246, 257, 260, 261, 262, 264, 270, 271, 278, 280, 284, 285, 286, 288, 294], "len": [2, 4, 5, 6, 8, 33, 34, 36, 37, 156, 157, 158, 172, 179, 190, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 238, 257, 262, 272, 280, 286], "froozen": 2, "e": [2, 6, 11, 33, 34, 36, 37, 38, 41, 73, 74, 75, 78, 89, 90, 232, 294], "output": [2, 22, 27, 33, 34, 36, 37, 38, 41, 50, 52, 107, 108, 113, 114, 141, 144, 156, 168, 169, 170, 171, 172, 173, 174, 175, 180, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 247, 248], "new_model": 2, "sequenti": [2, 258, 281], "normal_": 2, "mean": [2, 33, 34, 36, 37, 42, 156, 168, 172, 205, 216, 245, 277], "std": 2, "01": [2, 9, 297], "bia": [2, 201, 212], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 72, 76, 156, 172], "evalu": [2, 6, 211], "everi": [2, 33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219, 235, 269], "earli": 2, "stop": [2, 33, 34, 36, 37, 258, 281], "low": [2, 123], "frequenc": [2, 33, 34, 36, 37], "ensur": [2, 127], "despit": 2, "thei": [2, 5, 8, 50, 52], "smaller": 2, "20": [2, 4, 6, 7, 8, 105, 118], "50": [2, 4, 97, 98, 99, 100], "200": 2, "give": [2, 10], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 33, 34, 36, 37, 38, 74, 75, 89, 90, 170], "classif": [2, 6, 8, 130, 133, 134, 135, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "test_load": 2, "val_acc": [2, 33, 34, 36, 37], "check_val_every_n_epoch": [2, 33, 34, 36, 37], "3": [2, 4, 5, 7, 8, 38, 50, 52, 65, 73, 74, 75, 78, 89, 90, 107, 108, 110, 113, 114, 116, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167, 171, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 229, 230, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 294, 295], "pred": [2, 8, 33, 34], "shape": [2, 5, 6, 8, 44, 45, 145, 156, 157, 158, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 244, 245, 260, 276, 277, 284], "acc": [2, 33, 34, 36, 37], "argmax": [2, 8, 33, 34, 36, 37], "float": [2, 4, 8, 33, 34, 36, 37, 44, 45, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 126, 137, 138, 170, 223, 224, 226, 227, 228, 231, 233, 293, 295], "accuraci": [2, 8, 33, 34, 36, 37], "2f": 2, "_pretrained_filenam": 2, "path": [2, 16, 17, 19, 20, 38, 51, 69, 107, 108, 113, 114, 144, 156, 171, 172, 248, 249, 253, 255, 256, 258, 267, 268, 281], "join": 2, "isfil": 2, "save": [2, 38, 255, 256], "state_dict": 2, "one": [2, 5, 33, 34, 36, 37, 38, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 108, 114, 121, 128, 141, 170, 175, 206, 207, 208, 217, 218, 219, 233, 295], "would": [2, 36, 37], "improv": [2, 74, 75, 89, 90], "classifi": [2, 23, 28], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 16, 17, 18, 19, 20, 108, 114, 131, 132, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212], "dimension": [2, 36, 37], "With": 2, "achiev": 2, "80": [2, 4, 5], "increas": [2, 246, 278], "suggest": 2, "exponenti": 2, "could": [2, 5, 33, 34, 36, 37], "finetun": [2, 36, 37], "adapt": [2, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 108, 114, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "indic": [2, 22, 27, 33, 34, 36, 37, 105, 118, 168, 173, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 228, 236, 237, 238, 239, 245, 246, 258, 264, 270, 271, 272, 273, 277, 278, 281, 288, 290], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "clear": 2, "its": [2, 33, 34, 36, 37, 62, 63, 74, 75, 89, 90, 248, 258, 281], "count": 2, "1000": 2, "fair": 2, "ones": 2, "becaus": [2, 5, 36, 37], "distribut": [2, 36, 37, 142, 157, 176, 179], "notic": 2, "ad": [2, 144, 156, 171, 172], "restrict": 2, "oper": [2, 33, 34, 36, 37, 170], "125": 2, "1250": 2, "done": [2, 248], "recogn": 2, "object": [2, 38, 41, 50, 52, 67, 117, 126, 223, 224, 247, 248], "check": [2, 14, 16, 19, 22, 27, 38, 65, 66, 67, 68], "patch": [2, 36, 37, 108, 114, 131, 132, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 259, 264, 266, 282, 288], "belong": 2, "chosen": 2, "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 39, 40, 41, 42, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 110, 112, 113, 114, 116, 117, 121, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 139, 140, 141, 142, 144, 154, 155, 156, 170, 171, 172, 175, 176, 177, 178, 180, 199, 206, 207, 208, 211, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "almost": [2, 6], "strongli": 2, "iter": [2, 33, 34, 36, 37, 180], "train_transform": 2, "sigma": [2, 4, 107, 108, 109, 113, 114, 115], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 74, 75, 89, 90, 258, 281], "less": 2, "leverag": 2, "amount": 2, "generaliz": 2, "sole": 2, "par": 2, "tenth": 2, "experiment": [2, 38], "limit": 2, "recent": 2, "work": [2, 5, 16, 19, 33, 34, 36, 37, 38, 180], "ting": 2, "chen": [2, 44, 45], "et": [2, 36, 37, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 144, 156, 171, 172], "al": [2, 36, 37, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 144, 156, 171, 172], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": 2, "come": [2, 36, 37], "close": [2, 5], "approach": [2, 11], "combin": [2, 105, 118], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 74, 75, 89, 90, 141, 175], "year": 2, "great": [2, 36, 37], "includ": [2, 10, 16, 17, 18, 19, 20, 33, 34, 36, 37, 129, 131, 132], "distil": 2, "byol": 2, "redund": 2, "reduct": 2, "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4], "step": [2, 8, 33, 34, 36, 37, 144, 156, 171, 172], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 17, 20, 73, 78, 248], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 252, 254], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8], "c": [4, 5, 7, 50, 52, 139, 235, 238, 258, 259, 269, 272, 281, 282], "ambrois": [4, 5], "numpi": [4, 5, 6, 8, 16, 17, 18, 19, 20, 226, 227, 231, 293], "np": [4, 5, 6, 8, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 229, 242, 245, 277], "surfifi": [4, 5, 6, 7, 8, 9, 10, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297], "min_depth_to_get_n_neighbor": [4, 10, 101, 225, 257, 280], "plot": [4, 5, 6, 7, 8, 10, 101, 223, 224, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "plot_trisurf": [4, 5, 6, 7, 8, 10, 101, 222, 223, 224, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 258, 259, 264, 265, 269, 270, 271, 272, 276, 277, 278, 281, 282, 288, 289, 294, 295], "interv": [4, 10, 33, 34, 36, 37, 101, 103, 117, 120, 123, 126], "vertic": [4, 5, 7, 105, 106, 107, 108, 110, 113, 114, 116, 118, 119, 130, 133, 134, 135, 143, 156, 167, 172, 201, 202, 212, 213, 223, 224, 229, 230, 232, 233, 235, 236, 237, 239, 242, 243, 244, 245, 246, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 294, 295], "triangl": [4, 5, 7, 107, 108, 110, 113, 114, 116, 143, 156, 167, 172, 223, 224, 229, 230, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 250, 251, 255, 256, 258, 259, 263, 264, 265, 266, 269, 270, 271, 272, 273, 276, 277, 278, 281, 282, 287, 288, 289, 290, 291, 295], "order": [4, 5, 6, 7, 8, 22, 27, 38, 131, 132, 141, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 175, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 223, 224, 228, 229, 230, 232, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 294, 295], "neigh": [4, 7, 107, 108, 113, 114, 206, 217, 238, 239, 258, 259, 265, 266, 272, 273, 281, 282, 289], "direct_neighbor": [4, 7, 201, 203, 204, 205, 209, 212, 214, 215, 216, 220, 238, 258, 264, 266, 272, 281, 288], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 38, 57, 64, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 234], "aug": 4, "add_axi": 4, "alpha": [4, 5, 223, 224, 226, 227, 230, 231, 243, 293], "arg": [4, 33, 34, 36, 37, 75, 90, 112, 125, 157, 179], "kwarg": [4, 22, 27, 33, 34, 36, 37, 50, 52, 75, 77, 83, 84, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 112, 125, 157, 179], "data": [4, 8, 10, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 47, 48, 51, 69, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 127, 128, 129, 131, 132, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 229, 232, 235, 236, 242, 245, 246, 248, 249, 252, 254, 265, 267, 268, 269, 270, 277, 278, 289, 294], "fig": [4, 5, 7, 223, 224, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "ax": [4, 5, 6, 7, 208, 219, 223, 224, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "subplot": [4, 5, 7, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "subplot_kw": [4, 5, 7, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "3d": [4, 5, 7, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 230, 235, 238, 241, 243, 244, 258, 259, 264, 269, 272, 275, 276, 281, 282, 288], "aspect": [4, 5, 7, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "auto": [4, 5, 7, 38, 42, 136, 140, 230, 235, 238, 243, 244, 258, 259, 264, 269, 272, 276, 281, 282, 288], "flatten": [4, 6, 211], "colorbar": [4, 7, 223, 224, 230, 235, 237, 238, 243, 244, 258, 259, 264, 269, 271, 272, 276, 281, 282, 288], "edgecolor": [4, 5, 223, 224, 230, 243], "white": [4, 109, 115], "linewidth": [4, 7, 223, 224], "red": [4, 7, 235, 238, 258, 259, 269, 272, 281, 282], "blue": [4, 5, 7, 230, 238, 243, 258, 259, 272, 281, 282], "green": [4, 5, 7, 230, 243], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 16, 17, 18, 19, 20, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 125, 127, 130, 131, 132, 133, 134, 135, 168, 173, 201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 223, 224, 228, 229, 230, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 255, 256, 258, 259, 263, 264, 265, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 287, 288, 289, 290, 291, 294, 295], "patch_siz": [4, 108, 114], "int": [4, 16, 19, 22, 27, 33, 34, 36, 37, 38, 47, 48, 72, 73, 74, 75, 76, 78, 86, 89, 90, 91, 92, 96, 98, 100, 105, 106, 108, 114, 117, 118, 119, 120, 126, 130, 131, 132, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 228, 229, 232, 236, 237, 238, 241, 242, 244, 246, 257, 258, 259, 260, 261, 262, 264, 270, 271, 272, 275, 276, 278, 280, 281, 282, 284, 285, 286, 288, 290, 294], "n_patch": [4, 108, 114], "uniform": 4, "phi": [4, 110, 116], "180": 4, "theta": [4, 110, 116], "psi": [4, 110, 116], "controlateral_textur": 4, "prob": [4, 105, 106, 118, 119, 120], "n_vertic": [4, 6, 8, 105, 106, 118, 119, 120, 134, 135, 154, 155, 157, 177, 178, 179, 236, 246, 257, 260, 261, 262, 265, 270, 278, 280, 284, 285, 286, 289], "controlateral_data": [4, 106, 119], "group_textur": 4, "group_data": [4, 105, 118], "n_sampl": [4, 6, 8, 105, 118, 130, 133, 134, 135, 232, 233, 235, 236, 245, 246, 265, 269, 270, 277, 278, 289, 294, 295], "neigh_ind": [4, 105, 118], "groupbi": [4, 105, 118], "n_neighbor": [4, 105, 118], "n_compon": [4, 105, 118], "30": [4, 8, 105, 118], "58": 4, "74": 4, "49": 4, "62": 4, "47": 4, "15": [4, 8], "99": [4, 8], "92": 4, "54": 4, "65": [4, 6], "31": 4, "14": 4, "78": 4, "90": [4, 6, 9, 297], "76": 4, "93": 4, "21": [4, 9, 297], "70": 4, "22": 4, "46": 4, "89": 4, "25": [4, 8], "82": 4, "11": [4, 5], "59": 4, "56": 4, "12": [4, 5, 73, 78, 258, 281], "19": 4, "13": [4, 7], "23": 4, "28": 4, "51": 4, "79": [4, 9, 297], "16": [4, 33, 34, 36, 37, 73, 78, 207, 208, 218, 219], "17": 4, "77": 4, "88": 4, "52": 4, "95": 4, "48": 4, "72": 4, "66": 4, "24": [4, 5, 73, 78], "69": 4, "86": 4, "26": 4, "27": 4, "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 73, 78, 144, 156, 157, 170, 171, 172, 179], "33": 4, "34": 4, "39": 4, "35": [4, 8], "37": 4, "38": 4, "45": [4, 265, 289], "71": 4, "40": [4, 6, 7, 8, 130, 133, 134, 135], "41": 4, "81": 4, "43": 4, "44": 4, "87": 4, "98": 4, "97": 4, "53": 4, "68": 4, "55": 4, "57": 4, "61": 4, "94": 4, "67": 4, "75": 4, "84": 4, "85": 4, "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 104, 111, 122, 124, 170, 206, 207, 208, 217, 218, 219], "probabl": [4, 104, 105, 106, 118, 119, 120, 122], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "214": [4, 9, 297], "110": [4, 9, 297], "plot_augment": [4, 9, 297], "math": 5, "warn": [5, 33, 34, 36, 37, 38, 61], "scipi": [5, 230, 243], "spatial": [5, 74, 75, 89, 90, 230, 243], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 223, 224], "ico2ico": [5, 10, 101, 225, 230, 233, 243, 295], "build": [5, 7, 38, 107, 108, 113, 114, 117, 126, 143, 167, 258, 259, 264, 266, 267, 268, 279, 281, 282, 288, 291], "refer": [5, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 230, 233, 243, 244, 264, 276, 288, 295], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 38, 129, 267, 268], "freesurf": [5, 143, 167, 250, 255, 264, 267, 288], "try": 5, "find": [5, 38, 228, 230, 235, 238, 243, 245, 269, 272, 277, 279], "optim": [5, 8, 33, 34, 36, 37, 38], "rotat": [5, 110, 116, 230, 239, 243, 265, 273, 289], "modul": [5, 10, 13, 21, 22, 27, 33, 34, 36, 37, 38, 40, 44, 45, 51, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 91, 92, 101, 102, 103, 107, 113, 141, 142, 144, 154, 155, 156, 168, 170, 171, 172, 173, 175, 176, 177, 178, 180, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "rmse": 5, "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 36, 37], "suppos": 5, "equal": 5, "zero": [5, 6, 36, 37, 74, 75, 89, 90, 108, 114, 145, 156, 157, 158, 172, 173, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 242], "issu": [5, 41], "matric": 5, "That": 5, "previou": 5, "algorithm": 5, "properli": 5, "correspond": [5, 33, 34, 36, 37, 105, 106, 118, 119, 228, 233, 260, 284, 295], "row": [5, 107, 108, 113, 114, 258, 281], "matrix": [5, 105, 118], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": 5, "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 200, 225], "togeth": 5, "place": [5, 42], "comput": [5, 33, 34, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 139, 170, 180, 206, 207, 208, 217, 218, 219, 239, 248, 265, 273, 274, 289], "small": [5, 36, 37, 72, 76], "subset": [5, 131, 132], "point": [5, 7, 235, 238, 241, 245, 258, 259, 264, 269, 272, 274, 275, 277, 279, 281, 282, 288], "both": [5, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 208, 219, 258, 281], "absolut": [5, 38, 41], "valu": [5, 14, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 50, 52, 65, 67, 107, 108, 113, 114, 131, 132, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 223, 224, 226, 227, 228, 245, 258, 277, 281], "sign": [5, 230, 243], "vertices_of_interest_norm": 5, "search": [5, 238, 258, 272, 281], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 74, 75, 89, 90], "sum": [5, 8, 33, 34, 36, 37], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 33, 34, 36, 37, 51, 69], "depend": 5, "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 22, 27, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "categori": 5, "userwarn": [5, 16, 17, 18, 19, 20], "format": [5, 8, 14, 234, 250, 251, 255, 256], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 297], "simpli": [5, 33, 34, 36, 37], "solv": 5, "outlin": 5, "proper": [5, 16, 17, 19, 20], "anoth": 5, "half": 5, "clearli": 5, "appear": 5, "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": 5, "coord": [5, 10, 101, 227, 228, 229, 230, 231, 232, 233], "246": 5, "closest": [5, 239, 273], "9190925817849288": 5, "398": [5, 9, 297], "plot_match_icosahedron": [5, 9, 297], "convert": [6, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 171, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 229, 232, 242, 294], "onto": [6, 232, 233, 294, 295], "spheric": [6, 9, 136, 137, 138, 140, 143, 144, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 179, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 207, 208, 211, 218, 219, 225, 226, 227, 229, 231, 232, 241, 242, 258, 275, 281, 293, 294, 297], "evenli": [6, 232, 294], "resampl": [6, 232, 294], "respect": [6, 211, 232, 294], "sin": [6, 232, 294], "elev": [6, 137, 138, 141, 142, 145, 157, 158, 175, 176, 179, 181, 190, 211, 226, 227, 231, 232, 293, 294], "azimuth": [6, 137, 138, 141, 142, 145, 157, 158, 175, 176, 179, 181, 190, 211, 226, 227, 231, 232, 293, 294], "vice": 6, "versa": 6, "dataset": [6, 10, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 101, 130, 131, 132, 133, 134, 135, 222, 232, 233, 236, 245, 246, 265, 270, 277, 278, 289, 294, 295], "ico_ord": [6, 8, 131, 132], "n_class": [6, 8, 130, 133, 134, 135, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 232, 233, 236, 245, 246, 265, 270, 277, 278, 289, 294, 295], "ico_vertic": [6, 8, 130, 133, 134, 135], "ico_triangl": [6, 8], "_": [6, 36, 37, 204, 205, 215, 216, 252, 254], "make_classif": [6, 8, 10, 101, 129, 134, 135, 232, 233, 236, 245, 246, 265, 270, 277, 278, 289, 294, 295], "seed": [6, 8, 33, 34, 36, 37, 130, 133, 134, 135, 232, 233, 236, 245, 246, 265, 270, 277, 278, 289, 294, 295], "proj_textur": 6, "text2grid": [6, 10, 101, 225, 226, 227, 229, 231, 232, 242, 293, 294], "proj": [6, 229, 232, 242, 294], "lower": [6, 236, 267, 270], "nearest": [6, 105, 118, 156, 172, 173, 229, 232, 235, 242, 245, 269, 277, 294], "192": [6, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 171, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 229, 232, 242, 294], "text": [6, 7, 33, 34, 36, 37, 49, 57, 62, 63, 64], "grid2text": [6, 10, 101, 225, 226, 227, 229, 231, 232, 242, 293, 294], "is_label": [6, 8, 223, 224, 229, 233, 236, 242, 245, 246, 265, 270, 277, 278, 289, 295], "enabl": [6, 33, 34, 36, 37, 38, 50, 52], "scatter_dens": 6, "y": [6, 8, 33, 34, 36, 37, 134, 135, 226, 227, 229, 231, 232, 233, 236, 242, 245, 246, 265, 270, 277, 278, 289, 293, 294, 295], "labelx": 6, "labe": 6, "scatter": [6, 7, 235, 238, 258, 259, 264, 269, 272, 281, 282, 288], "densiti": [6, 241, 259, 275, 282], "left": [6, 137, 138, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 249], "width": [6, 74, 75, 89, 90, 223, 224], "bottom": 6, "height": [6, 180], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 36, 37, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212, 232, 258, 281, 294], "top": [6, 36, 37], "right": [6, 36, 37, 137, 138, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 249], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": 6, "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 226, 227, 231, 293], "cart2sph": [6, 10, 101, 225, 226, 227, 231, 293], "sin_elev": 6, "circularli": [6, 211], "continu": [6, 211], "circular": [6, 207, 208, 211, 218, 219], "pad": [6, 94, 156, 172, 173, 202, 207, 208, 211, 213, 218, 219], "boundari": [6, 211], "expand_dim": 6, "astyp": 6, "float32": 6, "from_numpi": 6, "pad_textur": 6, "circular_pad": [6, 10, 101, 200, 211], "padd": 6, "conv": [6, 74, 75, 82, 89, 90, 144, 156, 168, 169, 170, 171, 172, 173, 174, 201, 212], "conv2d": [6, 180], "in_channel": [6, 8, 73, 74, 75, 78, 89, 90, 144, 156, 170, 171, 172], "out_channel": [6, 8, 144, 156, 170, 171, 172], "stride": [6, 74, 75, 87, 88, 89, 90, 93, 94, 207, 208, 218, 219], "conv_textur": 6, "194": [6, 145, 146, 147, 148, 149, 150, 151, 152, 153, 181, 182, 183, 184, 185, 186, 187, 188, 189, 207, 218], "666": [6, 9, 297], "plot_project_textur": [6, 9, 297], "get_rectangular_project": [7, 10, 101, 225, 241, 275], "depth": [7, 8, 75, 86, 90, 92, 96, 98, 100, 144, 156, 170, 171, 172, 201, 203, 204, 205, 209, 212, 214, 215, 216, 220, 238, 257, 258, 261, 272, 280, 281, 285], "vidx": 7, "cnt": [7, 235, 238, 258, 259, 264, 269, 272, 281, 282, 288], "enumer": [7, 8, 235, 238, 258, 259, 264, 269, 272, 281, 282, 288], "marker": [7, 235, 238, 258, 259, 264, 269, 272, 281, 282, 288], "str": [7, 16, 17, 18, 19, 20, 22, 27, 36, 37, 38, 39, 41, 51, 66, 68, 69, 91, 92, 105, 107, 108, 110, 113, 114, 116, 118, 131, 132, 141, 142, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 175, 176, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 205, 216, 234, 239, 248, 249, 250, 251, 253, 255, 256, 265, 267, 268, 273, 289, 292], "3x3": [7, 74, 75, 89, 90, 94, 144, 156, 171, 172], "rectangular": [7, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 241, 259, 275, 282], "sphere": [7, 168, 173, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 241, 259, 263, 274, 275, 279, 282, 283, 287], "zoom": [7, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 206, 217, 238, 241, 259, 272, 275, 282], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": 7, "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 108, 114, 201, 212, 238, 241, 272, 275, 291], "node_rec_neigh": 7, "node_tplane_neigh": 7, "232": [7, 9, 297], "196": [7, 9, 297], "plot_spherical_neighbor": [7, 9, 297], "sphericalunet": [8, 10, 101, 140, 144, 156, 170, 171, 172], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 101, 102, 103, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 171, 172, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 223, 224, 229, 232, 242, 249, 250, 251, 252, 255, 256, 258, 281, 294, 296], "crossentropi": 8, "sgd": [8, 33, 34, 36, 37], "obviou": 8, "classificationdataset": [8, 10, 101, 129, 130, 133], "in_ord": [8, 156, 172], "start_filt": [8, 144, 156, 171, 172], "conv_mod": [8, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "dine": [8, 107, 108, 113, 114, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212, 258, 281], "dine_s": [8, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "up_mod": [8, 156, 172, 173], "transpos": [8, 144, 156, 171, 172, 173, 203, 208, 209, 214, 219, 220], "loss_fn": 8, "crossentropyloss": 8, "momentum": 8, "n_batch": 8, "zero_grad": 8, "backward": [8, 33, 34, 36, 37], "current": [8, 39, 40, 42], "item": [8, 33, 34, 36, 37, 248], "7f": 8, "5d": 8, "eval": [8, 33, 34, 36, 37], "test_loss": 8, "correct": 8, "y_pred": 8, "no_grad": 8, "logit": [8, 44, 45], "softmax": [8, 36, 37], "type": [8, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 74, 75, 89, 90, 110, 116, 117, 126, 156, 172, 173, 205, 216, 239, 258, 265, 273, 281, 289], "append": 8, "concaten": [8, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "error": [8, 33, 34, 36, 37, 65, 68, 247], "n": [8, 51, 69, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 125, 130, 133, 134, 135, 139, 201, 203, 206, 212, 214, 217, 223, 224, 228, 229, 230, 232, 233, 237, 238, 239, 242, 243, 244, 250, 251, 255, 256, 258, 259, 263, 265, 271, 272, 273, 276, 281, 282, 287, 289, 290, 291, 294, 295], "1f": 8, "avg": 8, "8f": 8, "243465": 8, "943075": 8, "801535": 8, "664682": 8, "542593": 8, "418234": 8, "305366": 8, "213539": 8, "002771": 8, "002084": 8, "001427": 8, "000953": 8, "000611": 8, "000368": 8, "000220": 8, "000162": 8, "000124": 8, "000061": 8, "000028": 8, "000013": 8, "000006": 8, "000003": 8, "000002": 8, "000001": 8, "000000": 8, "corresspond": 8, "exactli": 8, "ground": 8, "truth": 8, "148": [8, 9, 297], "295": [8, 9, 297], "plot_unet_segment": [8, 9, 297], "658": [9, 297], "02": [9, 297], "pleas": [10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "detail": [10, 44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "raw": [10, 249, 252, 254], "mai": 10, "enough": 10, "guidelin": 10, "definit": [10, 38, 43, 70, 71, 136, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 245, 277], "variou": [10, 49, 180], "help": [10, 49], "develop": [10, 11, 49], "volum": [10, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 249, 254, 296], "backbon": [10, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "helper": [10, 102], "integr": [10, 102, 170], "pytorch": [10, 33, 34, 36, 37, 102, 141, 142, 154, 155, 175, 176, 177, 178, 234, 296], "artifici": [10, 129], "dedic": [10, 200], "content": [10, 16, 19], "fetch_experi": [10, 12, 38, 101], "filter_config": [10, 12, 39, 101], "get_env": [10, 12, 40, 101], "load_interfac": [10, 12, 41, 101], "update_param": [10, 12, 42, 101], "check_typ": [10, 14, 101], "batchtypingcallback": [10, 13, 14, 22, 27, 101], "baseimagedataset": [10, 15, 16, 19, 101], "basenumpydataset": [10, 15, 17, 20, 101], "basedataset": [10, 15, 18, 101], "baseestim": [10, 21, 22, 27, 101], "classifiermixin": [10, 21, 23, 28, 101], "clustermixin": [10, 21, 24, 29, 101], "regressormixin": [10, 21, 25, 30, 101], "transformermixin": [10, 21, 26, 31, 101], "logistic_regress": [10, 34, 101], "infonc": [10, 36, 37, 44, 45, 101], "bunch": [10, 38, 50, 52, 101], "print_multicolor": [10, 49, 57, 64, 101], "attr": [10, 49, 54, 66, 101], "fg": [10, 49, 55, 101], "hex": [10, 49, 56, 101], "print_result": [10, 49, 58, 101], "print_subtitl": [10, 49, 59, 101], "print_titl": [10, 49, 60, 101], "print_warn": [10, 49, 61, 101], "random_styl": [10, 49, 62, 101], "styliz": [10, 49, 63, 101], "_availableifdescriptor": [10, 49, 65, 101], "_estimator_i": [10, 49, 66, 101], "available_if": [10, 49, 67, 101], "check_is_fit": [10, 49, 68, 101], "alexnet": [10, 71, 72, 76, 101], "densenet": [10, 71, 73, 77, 78, 84, 101], "resnettrunc": [10, 71, 75, 90, 101], "densenet121": [10, 71, 77, 84, 101], "resnet18_trunc": [10, 71, 86, 96, 101], "resnet50": [10, 71, 74, 75, 89, 90, 97, 99, 101], "resnet50_trunc": [10, 71, 98, 100, 101], "alexnet3d": [10, 76, 101], "resnet3d": [10, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101], "basicblock": [10, 71, 74, 75, 87, 89, 90, 101], "bottleneck": [10, 71, 73, 74, 75, 78, 88, 89, 90, 101], "_resnet": [10, 71, 91, 101], "_resnet_trunc": [10, 71, 92, 101], "conv1x1": [10, 71, 93, 101], "conv3x3": [10, 71, 94, 101], "densenet3d": [10, 78, 79, 80, 81, 82, 83, 84, 101], "_denseblock": [10, 71, 79, 101], "_denselay": [10, 71, 80, 101], "_transit": [10, 71, 81, 101], "_bn_function_factori": [10, 71, 82, 101], "_densenet": [10, 71, 83, 101], "basetransform": [10, 101, 103, 104, 112, 122, 125], "groupmixup": [10, 101, 103, 105, 118], "hemimixup": [10, 101, 103, 106, 119], "surfblur": [10, 101, 103, 107, 113], "surfcutout": [10, 101, 103, 108, 114], "surfnois": [10, 101, 103, 109, 115], "surfrot": [10, 101, 103, 110, 116], "apply_chained_transform": [10, 101, 103, 112, 125], "multichannel_augment": [10, 101, 103, 121, 128], "mixup": [10, 101, 118, 119, 120], "mixupaugment": [10, 101, 103, 120], "randomaugment": [10, 101, 103, 104, 121, 122, 123, 128], "listifi": [10, 101, 103, 127], "genericsurfdataset": [10, 101, 129, 131, 132], "_samples_gener": [10, 101, 133, 134], "_gener": [10, 101, 132], "sphericalvaeloss": [10, 101, 136, 137, 138], "vae": [10, 101, 137, 138, 139, 157, 175, 176, 177, 178, 179, 180], "log_likelihood": [10, 101, 136, 139], "hemifusiondecod": [10, 101, 140, 141, 175], "hemifusionencod": [10, 101, 140, 142, 176], "sphericalbas": [10, 101, 140, 143, 167], "sphericalgunet": [10, 101, 140, 144, 156, 170, 171, 172], "sphericalgvgg": [10, 101, 140, 145, 158, 181, 190], "sphericalgvgg11": [10, 101, 140, 145, 146, 181, 182], "sphericalgvgg11bn": [10, 101, 140, 147, 183], "sphericalgvgg13": [10, 101, 140, 148, 184], "sphericalgvgg13bn": [10, 101, 140, 149, 185], "sphericalgvgg16": [10, 101, 140, 150, 186], "sphericalgvgg16bn": [10, 101, 140, 151, 187], "sphericalgvgg19": [10, 101, 140, 152, 188], "sphericalgvgg19bn": [10, 101, 140, 153, 189], "sphericalhemifusiondecod": [10, 101, 140, 154, 177], "sphericalhemifusionencod": [10, 101, 140, 155, 178], "sphericalva": [10, 101, 140, 157, 179], "sphericalvgg": [10, 101, 140, 145, 158, 181, 190], "sphericalvgg11": [10, 101, 140, 158, 159, 190, 191], "sphericalvgg11bn": [10, 101, 140, 160, 192], "sphericalvgg13": [10, 101, 140, 161, 193], "sphericalvgg13bn": [10, 101, 140, 162, 194], "sphericalvgg16": [10, 101, 140, 163, 195], "sphericalvgg16bn": [10, 101, 140, 164, 196], "sphericalvgg19": [10, 101, 140, 165, 197], "sphericalvgg19bn": [10, 101, 140, 166, 198], "compute_output_dim": [10, 101, 140, 180], "vgg": [10, 101, 145, 158, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], "class_factori": [10, 101, 140, 199], "downblock": [10, 101, 140, 168], "downgblock": [10, 101, 140, 169], "graphicalunet": [10, 101, 140, 170], "upblock": [10, 101, 140, 173], "upgblock": [10, 101, 140, 174], "icodineconv": [10, 101, 107, 113, 200, 201, 206, 207, 212, 217, 218], "icofixindexupsampl": [10, 101, 200, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 221], "icogenericupconv": [10, 101, 200, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 221], "icomaxindexupsampl": [10, 101, 200, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 221], "icopool": [10, 101, 200, 204, 205, 215, 216], "icorepaconv": [10, 101, 200, 201, 206, 207, 212, 217, 218], "icospmaconv": [10, 101, 180, 200, 201, 206, 207, 212, 217, 218], "icospmaconvtranspos": [10, 101, 200, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 221], "icoupconv": [10, 101, 200, 202, 203, 204, 209, 210, 213, 214, 215, 220, 221], "icoupsampl": [10, 101, 200, 202, 203, 204, 208, 209, 210, 213, 214, 215, 219, 220, 221], "debug_msg": [10, 101, 225, 234], "downsampl": [10, 87, 88, 101, 131, 132, 143, 167, 168, 169, 173, 203, 204, 205, 209, 214, 215, 216, 220, 225, 235, 236, 237, 245, 246, 267, 269, 270, 271, 277, 278], "downsample_data": [10, 101, 225, 235, 236, 237, 245, 246, 269, 270, 271, 277, 278], "downsample_ico": [10, 101, 225, 235, 236, 237, 245, 246, 269, 270, 271, 277, 278], "find_neighbor": [10, 101, 225, 238, 272], "find_rotation_interpol_coef": [10, 101, 225, 239, 263, 273, 287], "get_logg": [10, 101, 225, 240], "interpol": [10, 101, 110, 116, 156, 172, 173, 202, 210, 213, 221, 223, 224, 225, 229, 232, 235, 236, 237, 239, 242, 245, 246, 263, 265, 269, 270, 271, 273, 277, 278, 287, 289, 294], "interpolate_data": [10, 101, 225, 235, 236, 237, 245, 246, 269, 270, 271, 277, 278], "neighbors_rec": [10, 101, 206, 217, 225, 238, 258, 259, 272, 281, 282], "number_of_ico_vertic": [10, 101, 225, 260, 262, 284, 286], "number_of_neighbor": [10, 101, 225, 257, 261, 280, 285], "order_of_ico_from_vertic": [10, 101, 225, 260, 262, 284, 286], "order_triangl": [10, 101, 225, 263, 287], "patch_tri": [10, 101, 225, 264, 266, 288], "rotate_data": [10, 101, 110, 116, 225, 239, 265, 273, 289], "setup_log": [10, 101, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 292], "sph2cart": [10, 101, 225, 226, 227, 231, 293], "text2ico": [10, 101, 225, 230, 233, 243, 295], "find_corresponding_ord": [10, 101, 225, 228], "hideprint": [10, 101, 225, 247], "compute_and_stor": [10, 101, 225, 248], "decompose_cifti": [10, 101, 225, 249], "read_freesurf": [10, 101, 225, 250], "read_gifti": [10, 101, 225, 251], "surf_data_from_cifti": [10, 101, 225, 252], "ungzip": [10, 101, 225, 253], "volume_from_cifti": [10, 101, 225, 254], "write_freesurf": [10, 101, 225, 255], "write_gifti": [10, 101, 225, 256], "_patch_tri_it": [10, 101, 225, 266], "build_freesurfer_ico": [10, 101, 225, 267], "build_fslr_ref": [10, 101, 225, 268], "get_angle_with_xaxi": [10, 101, 225, 274], "middle_point": [10, 101, 225, 279], "triangles_to_edg": [10, 101, 225, 290], "vertex_adjacency_graph": [10, 101, 225, 291], "walk": 11, "intal": 11, "offici": 11, "releas": 11, "best": [11, 38, 230, 243], "user": [11, 39, 144, 156, 171, 172, 265, 289], "who": 11, "latest": 11, "contribut": 11, "without": [11, 33, 34, 36, 37, 253], "privileg": 11, "pip": 11, "sudo": 11, "git": 11, "repositori": [11, 51, 69], "github": [11, 140, 252, 254], "com": [11, 140], "deepinsight": 11, "page": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "document": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "explain": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "signatur": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "big": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "pictur": [14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "rais": [14, 16, 17, 18, 19, 20, 65, 67, 68], "typeerror": [14, 68], "annot": 14, "traiterror": 14, "incorrect": 14, "notimplementederror": 14, "handl": [14, 33, 34, 36, 37, 51, 69], "on_predict_batch_start": 14, "trainer": [14, 22, 27, 33, 34, 36, 37], "pl_modul": 14, "batch_idx": [14, 33, 34, 36, 37], "dataloader_idx": [14, 33, 34, 36, 37], "begin": 14, "on_test_batch_start": 14, "on_train_batch_start": 14, "train": [14, 16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 47, 48, 103, 131, 132], "on_validation_batch_start": 14, "channel": [16, 17, 18, 19, 20, 72, 73, 74, 75, 76, 78, 89, 90, 104, 121, 122, 128, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221], "subject_in_pattern": [16, 19, 131, 132], "target": [16, 17, 18, 19, 20, 131, 132, 230, 233, 243, 295], "target_map": [16, 17, 18, 19, 20, 131, 132], "mask": [16, 17, 18, 19, 20, 120, 131, 132, 137, 138], "withdraw_subject": [16, 17, 18, 19, 20, 131, 132], "scalabl": [16, 19, 131, 132], "neuroimag": [16, 17, 18, 19, 20, 131, 132, 157, 179], "locat": [16, 17, 18, 19, 20, 51, 69, 131, 132, 253], "store": [16, 17, 18, 19, 20, 36, 37, 131, 132, 248, 249, 250, 251, 265, 289], "list": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 42, 105, 112, 118, 125, 127, 130, 131, 132, 133, 134, 135, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 236, 237, 238, 245, 246, 270, 271, 272, 277, 278, 290], "default": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 41, 44, 45, 47, 48, 51, 68, 69, 72, 73, 74, 75, 76, 78, 89, 90, 104, 105, 107, 108, 110, 113, 114, 116, 117, 118, 121, 122, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 205, 207, 208, 212, 216, 218, 219, 223, 224, 228, 232, 233, 236, 237, 239, 241, 244, 246, 247, 248, 249, 258, 259, 260, 263, 264, 265, 267, 268, 270, 271, 273, 275, 276, 278, 281, 282, 284, 287, 288, 289, 292, 294, 295], "folder": [16, 19, 110, 116, 131, 132, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "level": [16, 19, 131, 132, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 292], "subject": [16, 17, 18, 19, 20, 105, 106, 118, 119, 131, 132], "identifi": [16, 19, 131, 132, 230, 243], "retriev": [16, 19, 51, 69, 131, 132], "tabular": [16, 17, 18, 19, 20, 131, 132], "dict": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 39, 40, 41, 42, 107, 108, 113, 114, 131, 132, 143, 167, 199, 238, 239, 258, 272, 273, 281], "optionali": [16, 17, 18, 19, 20, 33, 34, 36, 37, 131, 132, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "dictionari": [16, 17, 18, 19, 20, 33, 34, 36, 37, 50, 52, 53, 107, 108, 113, 114, 131, 132, 258, 281], "specifi": [16, 17, 18, 19, 20, 22, 27, 33, 34, 36, 37, 38, 41, 51, 69, 104, 107, 108, 113, 114, 122, 131, 132, 223, 224, 236, 237, 246, 270, 271, 278], "replac": [16, 17, 18, 19, 20, 42, 72, 74, 75, 76, 89, 90, 108, 114, 131, 132, 144, 156, 171, 172], "exist": [16, 17, 18, 19, 20, 51, 69, 131, 132, 267, 268], "panda": [16, 17, 18, 19, 20, 105, 118, 131, 132], "datafram": [16, 17, 18, 19, 20, 105, 118, 131, 132], "callabl": [16, 17, 18, 19, 20, 67, 131, 132, 248], "optionnali": [16, 17, 18, 19, 20, 107, 108, 113, 114, 121, 128, 131, 132], "remov": [16, 17, 18, 19, 20, 36, 37, 131, 132], "filenotfounderror": [16, 17, 18, 19, 20], "mandatorri": [16, 17, 18, 19, 20], "keyerror": [16, 17, 18, 19, 20], "mandatori": [16, 17, 18, 19, 20], "kei": [16, 17, 18, 19, 20, 33, 34, 36, 37, 38, 50, 52, 107, 108, 113, 114, 143, 167, 258, 281], "miss": [16, 17, 18, 19, 20, 245, 277], "particip": [16, 17, 18, 19, 20, 131, 132], "tsv": [16, 17, 18, 19, 20, 131, 132], "request": [16, 17, 18, 19, 20, 131, 132, 140], "conta": [16, 17, 18, 19, 20, 131, 132], "idea": [16, 19], "your": [16, 18, 19, 33, 34, 36, 37, 38, 51, 62, 63, 69, 296], "rather": [16, 19], "symlink": [16, 19], "aggreg": [16, 19], "enforc": [16, 19, 33, 34, 36, 37], "reproduc": [16, 19, 22, 27, 33, 34, 36, 37], "persist": [16, 19], "get_checksum": [16, 19], "hash": [16, 19, 51, 69], "get_data": [16, 17, 19, 20], "index": [16, 17, 19, 20, 33, 34, 36, 37, 107, 108, 113, 114, 235, 238, 258, 269, 272, 281, 290], "sequenc": [22, 27, 33, 34, 36, 37, 104, 111, 122, 124], "hints_batch": [22, 27], "bool": [22, 27, 51, 66, 69, 73, 74, 75, 78, 89, 90, 104, 121, 122, 128, 131, 132, 137, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 212, 223, 224, 244, 247, 249, 258, 263, 264, 276, 281, 287, 288], "basicali": [22, 27], "lightningmodul": [22, 27, 33, 34, 36, 37], "embed": [22, 27, 44, 45, 72, 73, 74, 75, 76, 78, 89, 90], "child": [22, 27, 38, 121, 128], "inherit": [22, 27, 38], "mixin": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "init": [22, 27, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 130, 133, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 247], "control": [22, 27, 33, 34, 36, 37, 104, 107, 113, 122, 130, 133, 134, 135, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 207, 208, 218, 219, 241, 259, 275, 282], "pass": [22, 27, 33, 34, 36, 37, 67, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "across": [22, 27, 105, 106, 118, 119], "multipl": [22, 27, 33, 34, 36, 37, 38, 39, 73, 78, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "attribut": [22, 27, 33, 34, 36, 37, 42, 50, 52, 53, 54, 67, 68], "hint": [22, 27], "runtim": [22, 27], "mechan": [22, 27], "estimator_typ": [23, 24, 25, 26, 28, 29, 30, 31], "tag": [23, 24, 25, 26, 28, 29, 30, 31, 51, 69], "regress": [25, 30], "regressor": [25, 30, 72, 76], "rate": [33, 34, 36, 37, 130, 133, 134, 135], "adam": [33, 34, 36, 37], "decai": [33, 34, 36, 37], "multisteplr": [33, 34], "schedul": [33, 34, 36, 37, 38], "must": [33, 34, 36, 37, 38, 68, 104, 122, 248, 253], "element": [33, 34, 36, 37], "tensor": [33, 34, 36, 37, 44, 45, 137, 138, 139, 141, 142, 145, 154, 155, 157, 158, 173, 175, 176, 177, 178, 179, 181, 190, 211, 234], "variabl": [33, 34, 36, 37, 38, 199], "validation_step_output": [33, 34, 36, 37], "respectivelli": [33, 34, 36, 37], "configure_optim": [33, 34, 36, 37], "choos": [33, 34, 36, 37], "d": [33, 34, 36, 37, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 171, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 207, 208, 211, 218, 219, 229, 232, 242, 294], "But": [33, 34, 36, 37], "gan": [33, 34, 36, 37], "manual": [33, 34, 36, 37], "option": [33, 34, 36, 37, 107, 108, 113, 114, 137, 138, 141, 142, 143, 154, 155, 167, 175, 176, 177, 178, 223, 224, 236, 237, 244, 246, 247, 263, 264, 270, 271, 276, 278, 287, 288], "tupl": [33, 34, 36, 37, 38, 39, 51, 69, 73, 74, 78, 89, 91, 92, 127, 207, 208, 211, 218, 219], "lr_scheduler_config": [33, 34, 36, 37], "lr_schedul": [33, 34, 36, 37], "whose": [33, 34, 36, 37], "configur": [33, 34, 36, 37, 38, 39, 296], "shown": [33, 34, 36, 37], "unit": [33, 34, 36, 37, 144, 156, 171, 172, 241, 259, 275, 279, 282, 283], "updat": [33, 34, 36, 37, 40], "wherea": [33, 34, 36, 37], "should": [33, 34, 36, 37, 51, 67, 69, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "metric": [33, 34, 36, 37, 105, 118], "reducelronplateau": [33, 34, 36, 37], "val_loss": [33, 34, 36, 37], "thu": [33, 34, 36, 37], "produc": [33, 34, 36, 37], "strict": [33, 34, 36, 37], "progress": [33, 34, 36, 37], "keyword": [33, 34, 36, 37], "custom": [33, 34, 36, 37, 68], "log": [33, 34, 36, 37, 137, 138, 139, 143, 144, 145, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 179, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 240, 292], "condit": [33, 34, 36, 37, 65], "lightn": [33, 34, 36, 37, 296], "metric_to_track": [33, 34, 36, 37], "often": [33, 34, 36, 37], "optimizer1": [33, 34, 36, 37], "optimizer2": [33, 34, 36, 37], "scheduler1": [33, 34, 36, 37], "scheduler2": [33, 34, 36, 37], "lambdalr": [33, 34, 36, 37], "made": [33, 34, 36, 37], "metric_v": [33, 34, 36, 37], "thing": [33, 34, 36, 37], "know": [33, 34, 36, 37], "automat": [33, 34, 36, 37, 38, 265, 289], "precis": [33, 34, 36, 37], "lbfg": [33, 34, 36, 37], "closur": [33, 34, 36, 37], "switch": [33, 34, 36, 37], "them": [33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 111, 124, 170, 206, 207, 208, 217, 218, 219, 248, 291], "yourself": [33, 34, 36, 37], "overrid": [33, 34, 36, 37], "optimizer_step": [33, 34, 36, 37], "hook": [33, 34, 36, 37, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "on_validation_epoch_end": [33, 34, 36, 37], "loop": [33, 34, 36, 37], "predict_step": [33, 34, 36, 37], "By": [33, 34, 36, 37], "forward": [33, 34, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 141, 142, 144, 145, 154, 155, 156, 157, 158, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "add": [33, 34, 36, 37, 40, 73, 78, 109, 115, 208, 219], "logic": [33, 34, 36, 37], "infer": [33, 34, 36, 37], "multi": [33, 34, 36, 37, 121, 128], "prevent": [33, 34, 36, 37], "oom": [33, 34, 36, 37], "basepredictionwrit": [33, 34, 36, 37], "write": [33, 34, 36, 37, 255, 256], "databas": [33, 34, 36, 37], "spawn": [33, 34, 36, 37], "happen": [33, 34, 36, 37], "strategi": [33, 34, 36, 37], "ddp_spawn": [33, 34, 36, 37], "tpu": [33, 34, 36, 37], "core": [33, 34, 36, 37], "won": [33, 34, 36, 37], "mymodel": [33, 34, 36, 37], "dm": [33, 34, 36, 37], "training_step": [33, 34, 36, 37], "addit": [33, 34, 36, 37, 144, 156, 171, 172, 201, 212], "bar": [33, 34, 36, 37], "logger": [33, 34, 36, 37, 240], "skip": [33, 34, 36, 37, 168, 169, 170], "support": [33, 34, 36, 37], "deepspe": [33, 34, 36, 37], "special": [33, 34, 36, 37, 38], "calcul": [33, 34, 36, 37], "fancier": [33, 34, 36, 37], "someth": [33, 34, 36, 37], "z": [33, 34, 36, 37, 141, 142, 157, 175, 176, 179, 226, 227, 229, 231, 232, 242, 293, 294], "out": [33, 34, 36, 37, 108, 114, 127, 145, 156, 157, 158, 172, 179, 181, 190], "super": [33, 34, 36, 37], "automatic_optim": [33, 34, 36, 37], "opt1": [33, 34, 36, 37], "opt2": [33, 34, 36, 37], "decod": [33, 34, 36, 37, 141, 144, 154, 156, 157, 171, 172, 175, 177, 179], "accumulate_grad_batch": [33, 34, 36, 37], "intern": [33, 34, 36, 37, 44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90], "validation_step": [33, 34, 36, 37], "anyth": [33, 34, 36, 37], "interest": [33, 34, 36, 37, 131, 132, 143, 167], "val": [33, 34, 36, 37], "own": [33, 34, 36, 37], "whatev": [33, 34, 36, 37], "sample_img": [33, 34, 36, 37], "grid": [33, 34, 36, 37, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 229, 232, 241, 242, 259, 275, 282, 294], "add_imag": [33, 34, 36, 37], "example_imag": [33, 34, 36, 37], "labels_hat": [33, 34, 36, 37], "log_dict": [33, 34, 36, 37], "argument": [33, 34, 36, 37, 41, 68, 248, 265, 289], "recommend": [33, 34, 36, 37], "quickli": [33, 34, 36, 37], "tell": [33, 34, 36, 37], "don": [33, 34, 36, 37], "put": [33, 34, 36, 37], "disabl": [33, 34, 36, 37], "At": [33, 34, 36, 37, 156, 172], "goe": [33, 34, 36, 37], "back": [33, 34, 36, 37], "version": [36, 37, 38, 41], "x_i": [36, 37], "x_j": [36, 37], "maxim": [36, 37], "minim": [36, 37, 257, 280], "part": [36, 37], "head": [36, 37, 72, 76], "deep": [36, 37, 296], "cnn": [36, 37, 103], "scnn": [36, 37], "respons": [36, 37], "extract": [36, 37, 253], "denot": [36, 37], "finish": [36, 37], "extractor": [36, 37], "wors": [36, 37], "those": [36, 37, 258, 281], "new": [36, 37, 51, 69, 104, 122, 123, 143, 167, 202, 213], "becom": [36, 37], "invari": [36, 37], "stage": [36, 37], "z_i": [36, 37], "z_j": [36, 37], "therebi": [36, 37], "propos": [36, 37], "aaron": [36, 37], "van": [36, 37], "den": [36, 37], "oord": [36, 37], "short": [36, 37], "over": [36, 37], "formal": [36, 37], "written": [36, 37], "ell_": [36, 37], "j": [36, 37], "frac": [36, 37], "exp": [36, 37], "sim": [36, 37], "tau": [36, 37], "sum_": [36, 37], "k": [36, 37, 73, 78, 105, 118, 201, 206, 212, 217, 233, 295], "2n": [36, 37], "mathbb": [36, 37], "kneq": [36, 37], "z_k": [36, 37], "logleft": [36, 37], "determin": [36, 37, 105, 118], "peak": [36, 37], "bound": [36, 37, 117, 126], "balanc": [36, 37], "influenc": [36, 37], "dissimilar": [36, 37], "versu": [36, 37], "cosin": [36, 37], "cdot": [36, 37], "maximum": [36, 37, 223, 224, 264, 288], "minimum": [36, 37, 223, 224], "converg": [36, 37], "around": [36, 37], "exact": [36, 37], "opposit": [36, 37], "flexibl": [36, 37], "altern": [36, 37], "track": [36, 37], "projector": [36, 37], "cosineannealinglr": [36, 37], "auxiliari": [36, 37], "aux": [36, 37], "expfil": 38, "selector": [38, 39], "cv": [38, 42], "logdir": 38, "verbos": 38, "useful": 38, "date": 38, "reus": [38, 265, 289], "section": 38, "descipt": 38, "scaler": 38, "dl": 38, "interfac": [38, 39, 41, 42, 296], "probe": 38, "environ": [38, 39, 40, 42], "fullfil": 38, "constraint": 38, "impos": 38, "interface_occurr": 38, "term": [38, 41, 49], "interface_vers": 38, "__version__": 38, "mismatch": 38, "detect": 38, "connot": 38, "previous": 38, "param": [38, 41, 42], "cross": [38, 42, 44, 45, 207, 208, 218, 219], "instanci": 38, "prefix": 38, "filter": [38, 39, 73, 78, 107, 113, 141, 142, 143, 144, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 205, 206, 209, 212, 214, 216, 217, 220], "block": [38, 73, 74, 75, 78, 89, 90, 91, 92, 168, 169, 173, 174], "construct": 38, "hierarch": 38, "properti": [38, 65], "parent": 38, "separ": 38, "form": [38, 51, 69, 105, 118], "architecture_nam": [38, 51, 69], "revis": [38, 51, 69], "hug": [38, 51, 69], "face": [38, 51, 69, 223, 224], "specifid": 38, "machin": [38, 51, 69], "design": 38, "select": [38, 39], "appropri": [38, 39, 68], "scheme": 38, "hyperparapet": 38, "defautl": 38, "coupl": 38, "moment": 38, "dictionarai": 38, "config": 39, "env": [39, 40, 42], "declar": 39, "filter_conf": 39, "updated_env": 40, "environemt": 40, "my_modul": 41, "my_class": 41, "exppect": 41, "module": 41, "cl": 41, "updated_param": 42, "param_set": 42, "entropi": [44, 45], "deriv": [44, 45], "icml": [44, 45], "2020": [44, 45], "doi": [44, 45, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "org": [44, 45, 65, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 252, 254], "48550": [44, 45, 73, 74, 75, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "arxiv": [44, 45, 73, 74, 75, 77, 78, 84, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100, 170], "2002": [44, 45], "05709": [44, 45], "invers": [44, 45], "state": [44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90, 140, 141, 157, 175, 179], "share": [44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90], "scriptmodul": [44, 45, 72, 73, 74, 75, 76, 78, 79, 80, 81, 87, 88, 89, 90], "z1": [44, 45], "z2": [44, 45], "n_featur": [44, 45, 236, 246, 265, 270, 278, 289], "view": [44, 45, 263, 287], "equival": [47, 48], "termin": 49, "expos": [50, 52], "access": [50, 52, 199, 248], "value_kei": [50, 52], "b": [50, 52], "avaiabl": [51, 69], "pathlib": [51, 69], "repo": [51, 69], "classmethod": [51, 69, 105, 118, 143, 167], "hf_download": [51, 69], "hf_id": [51, 69], "hf_revis": [51, 69], "force_download": [51, 69], "present": [51, 68, 69], "alwai": [51, 69], "resum": [51, 69], "forc": [51, 69], "id": [51, 69], "commit": [51, 69], "cach": [51, 69, 107, 108, 110, 113, 114, 116, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 248], "hub_split": [51, 69], "hub_nam": [51, 69], "interpret": [51, 69], "hub_id": [51, 69], "hub_revis": [51, 69], "decalr": [51, 69], "ns_download": [51, 69], "ns_id": [51, 69], "reset": [53, 62, 63], "background": 53, "foreground": [53, 55], "reverse_dict": 53, "revers": [53, 141, 175], "alia": [54, 55, 104, 122, 123, 143, 167], "conveni": [62, 63], "style": [62, 63], "ansi": [62, 63], "fn": 65, "attribute_nam": 65, "descriptor": 65, "protocol": 65, "decor": [65, 67, 121, 128, 248, 265, 289], "attributeerror": [65, 67], "falsei": 65, "hasattr": [65, 67], "doc": 65, "howto": 65, "html": 65, "explan": 65, "deleg": 66, "underli": 66, "truthi": 67, "either": [67, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "otherwis": [67, 68], "unavail": 67, "helloifeven": 67, "_x_is_even": 67, "say_hello": 67, "hello": 67, "obj": 67, "msg": [68, 234], "presenc": 68, "trail": 68, "underscor": 68, "except": 68, "messag": [68, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 234], "yet": 68, "string": [68, 223, 224], "substitut": 68, "eg": 68, "sparsifi": 68, "fitt": 68, "n_embed": [72, 73, 74, 75, 76, 78, 89, 90], "n_channel": [72, 76, 112, 125], "abrol": [72, 76], "2021": [72, 76, 157, 179], "5281": [72, 76], "zenodo": [72, 76], "4309677": [72, 76], "overridden": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "subclass": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "although": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "recip": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "afterward": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "former": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "care": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219, 265, 289], "latter": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "silent": [72, 73, 74, 75, 76, 78, 79, 80, 87, 88, 89, 90, 170, 206, 207, 208, 217, 218, 219], "growth_rat": [73, 78, 79, 80, 83], "block_config": [73, 78, 83], "num_init_featur": [73, 78, 83], "bn_size": [73, 78, 79, 80], "512": [73, 74, 75, 78, 89, 90, 145, 158, 181, 190], "memory_effici": [73, 78, 79, 80], "huang": [73, 77, 78, 84], "2018": [73, 77, 78, 84], "1608": [73, 77, 78, 84], "06993": [73, 77, 78, 84], "pool": [73, 78, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 205, 216], "convolut": [73, 74, 75, 78, 89, 90, 93, 94, 107, 113, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 206, 207, 208, 209, 212, 214, 217, 218, 219, 220], "factor": [73, 78, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 241, 259, 275, 282], "checkpoint": [73, 78], "slower": [73, 78], "pdf": [73, 78], "1707": [73, 78], "06990": [73, 78], "zero_init_residu": [74, 75, 89, 90], "group": [74, 75, 87, 88, 89, 90, 94, 105, 118], "width_per_group": [74, 75, 89, 90], "replace_stride_with_dil": [74, 75, 89, 90], "norm_lay": [74, 75, 87, 88, 89, 90], "initial_kernel_s": [74, 75, 89, 90], "he": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "2015": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "1512": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "03385": [74, 75, 85, 86, 89, 90, 95, 96, 97, 98, 99, 100], "bn": [74, 75, 89, 90, 168, 169, 173, 174], "residu": [74, 75, 89, 90], "branch": [74, 75, 89, 90], "behav": [74, 75, 89, 90], "accord": [74, 75, 89, 90, 258, 281], "1706": [74, 75, 89, 90], "02677": [74, 75, 89, 90], "divid": [74, 75, 89, 90], "dilat": [74, 75, 87, 88, 89, 90, 94], "atrou": [74, 75, 89, 90], "preserv": [74, 75, 89, 90], "dens": [74, 75, 89, 90, 141, 175], "batchnorm3d": [74, 75, 89, 90], "kernel": [74, 75, 89, 90, 107, 113, 207, 208, 218, 219, 258, 259, 281, 282], "truncat": [75, 86, 90, 96, 98, 100], "121": [77, 84], "num_lay": 79, "num_input_featur": [79, 80, 81], "init_featur": 79, "prev_featur": 80, "num_output_featur": 81, "norm": 82, "arch": [83, 91, 92], "inplan": [87, 88], "plane": [87, 88, 206, 217, 258, 274, 281], "base_width": [87, 88], "in_plan": [93, 94], "out_plan": [93, 94], "1x1": [93, 156, 172], "inspir": 103, "natur": 103, "randomize_per_channel": [104, 121, 122, 128], "field": [104, 107, 113, 122, 123, 143, 167], "tranform": [104, 122, 230, 243], "wise": [104, 122, 156, 172], "randomli": [105, 106, 118, 119], "bootstrap": [105, 118], "measur": [105, 106, 110, 116, 118, 119, 120], "vertex": [105, 106, 107, 108, 113, 114, 118, 119, 156, 172, 258, 259, 265, 281, 282, 283, 289, 290, 291], "hemispher": [105, 106, 118, 119, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "curupt": [105, 106, 118, 119, 120], "cortic": [105, 106, 110, 116, 118, 119, 120, 129, 136, 137, 138, 140, 141, 142, 144, 145, 154, 155, 156, 157, 158, 171, 172, 175, 176, 177, 178, 179, 181, 190], "meta": [105, 118], "regroup": [105, 118], "m": [105, 107, 108, 110, 113, 114, 116, 118, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 223, 224, 237, 244, 250, 251, 255, 256, 258, 263, 271, 276, 281, 287, 291], "pca": [105, 118], "compon": [105, 118, 226, 227, 231, 293], "extern": [105, 118], "distanc": [105, 118, 206, 217], "popul": [105, 118], "bootstap": [105, 118], "arr": [105, 106, 108, 109, 110, 114, 115, 116, 118, 119], "bootsrap": [105, 118], "controlater": [106, 119], "cachedir": [107, 108, 110, 113, 114, 116, 143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 248], "speed": [107, 113, 143, 167], "recept": [107, 113], "deviat": [107, 109, 113, 115], "icosahdron": [107, 108, 110, 113, 114, 116], "neighboor": [107, 108, 113, 114, 223, 224], "sufifi": [107, 108, 113, 114], "ie": [107, 108, 113, 114, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "organ": [107, 108, 113, 114, 249, 258, 281], "ring": [107, 108, 113, 114, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 205, 209, 212, 214, 216, 220, 238, 258, 272, 281], "replacement_valu": [108, 114], "connex": [108, 114], "neighborhood": [108, 114, 168, 173, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 241, 257, 259, 275, 280, 282], "ablat": [108, 114], "cutout": [108, 114], "cut": [108, 114], "nois": [109, 115], "barycentr": [110, 116, 239, 263, 265, 273, 287, 289], "angl": [110, 116, 226, 227, 231, 239, 258, 265, 273, 274, 281, 289, 293], "degre": [110, 116, 239, 265, 273, 289], "euler": [110, 116, 239, 265, 273, 289], "smart": [110, 116, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "speedup": [110, 116, 143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "accordingli": [110, 116], "seri": [112, 125], "_data": [112, 125], "dtype": [117, 123, 126, 229, 242], "uplet": [117, 126, 206, 217, 239, 265, 273, 289], "aplli": 120, "rand_mask": 120, "binari": [120, 137, 138], "corrupt": 120, "multichannel": [121, 128], "multichannelaugment": [121, 128], "applic": [121, 128, 144, 156, 171, 172], "high": 123, "liftifi": 127, "synthet": 129, "gene": [130, 133, 134, 135], "n_max": [131, 132], "target_ico_ord": [131, 132], "regex": [131, 132], "nibabel": [131, 132, 252, 254], "ico": [131, 132, 143, 167, 201, 212], "triangular": [131, 132, 223, 224, 264, 266, 288], "debug": [131, 132, 144, 145, 156, 157, 158, 170, 171, 172, 179, 181, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 234], "purpos": [131, 132], "desir": [131, 132, 257, 280], "problem": [134, 135, 145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "ndarrai": [134, 135, 226, 227, 231, 293], "assocait": [134, 135], "variat": [136, 140, 157, 179], "svae": [136, 157, 179], "beta": [137, 138, 226, 227, 231, 293], "left_mask": [137, 138], "right_mask": [137, 138], "use_ms": [137, 138], "kl": [137, 138], "diverg": [137, 138], "likelihood": [137, 138, 139], "recon": 139, "reconstruct": [139, 141, 157, 175, 179], "w": [139, 180], "relat": [140, 143, 167], "gmvae": 140, "rest": [140, 157, 179], "fmri": [140, 157, 179], "autoencod": [140, 157, 179], "libilab": 140, "rsfmri": 140, "vision": [140, 264, 288], "output_shap": [141, 175, 208, 219], "before_latent_dim": [141, 175], "latent_dim": [141, 142, 154, 155, 157, 175, 176, 177, 178, 179], "conv_flt": [141, 142, 154, 155, 157, 175, 176, 177, 178, 179], "fusion_level": [141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "leakyrelu": [141, 142, 154, 155, 157, 175, 176, 177, 178, 179], "batch_norm": [141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "output_channel": [141, 175], "input_dim": [141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "squar": [141, 175, 180], "convnet": [141, 175, 180], "stochast": [141, 157, 175, 179], "left_recon_x": [141, 157, 175, 179], "input_channel": [141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "right_recon_x": [141, 157, 175, 179], "left_x": [142, 145, 154, 155, 157, 158, 176, 177, 178, 179, 181, 190], "right_x": [142, 145, 154, 155, 157, 158, 176, 177, 178, 179, 181, 190], "q": [142, 157, 176, 179], "input_ord": [143, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "n_layer": [143, 167], "repa_s": [143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "repa_zoom": [143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "dynamic_repa_zoom": [143, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198], "repa": [143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 259, 282], "ico_info": [143, 167], "build_ico_info": [143, 167], "tangent": [143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 206, 217, 241, 258, 274, 275, 281], "tessal": [143, 167, 244, 264, 276, 288], "tessel": [143, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 264, 288], "neighbor_indic": [143, 167, 201, 203, 204, 209, 212, 214, 215, 220], "down_indic": [143, 167, 168, 173, 203, 204, 205, 209, 214, 215, 216, 220, 236, 237, 270, 271], "up_indic": [143, 167, 202, 210, 213, 221, 245, 246, 277, 278], "conv_neighbor_indic": [143, 167], "dictionnari": [143, 167, 248], "icosehedron": [143, 167], "upsampl": [143, 156, 167, 172, 173, 202, 203, 204, 209, 210, 213, 214, 215, 220, 221, 246, 278], "onform": [143, 167], "gride": [144, 145, 169, 171, 174, 181, 229, 242], "net": [144, 156, 170, 171, 172], "built": [144, 156, 171, 172], "upon": [144, 156, 171, 172], "spma": [144, 171], "rectifi": [144, 156, 171, 172], "doubl": [144, 156, 171, 172], "halv": [144, 156, 171, 172], "zhao": [144, 156, 171, 172], "ipmi": [144, 156, 171, 172], "2019": [144, 156, 170, 171, 172], "cfg": [145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "4096": [145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "init_weight": [145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "stand": [145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "wether": [145, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "interp": [156, 172, 173], "2x2": [156, 172], "maxpad": [156, 172, 173], "shift": [156, 172, 173], "zeropad": [156, 172, 173], "sphericalgva": [157, 179], "vert": [157, 158, 179, 190], "tri": [157, 158, 179, 190, 266], "reparameter": [157, 179], "reparametr": [157, 179], "trick": [157, 179], "conv_lay": [168, 173], "in_ch": [168, 169, 173, 174], "out_ch": [168, 169, 173, 174], "conv_neigh_indic": [168, 173], "down_neigh_indic": [168, 204, 205, 215, 216], "pool_mod": 168, "discret": [168, 173, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "hidden_channel": 170, "pool_ratio": 170, "sum_r": 170, "act": 170, "graph": [170, 291], "unpool": 170, "hongyang": 170, "gao": 170, "shuiwang": 170, "ji": 170, "ratio": 170, "connect": [170, 291], "summat": 170, "nonlinear": 170, "edge_index": 170, "neigh_indic": [173, 201, 206, 212, 217], "up_neigh_indic": [173, 202, 203, 204, 209, 210, 213, 214, 215, 220, 221], "upsamp": [173, 174], "upconv": [173, 174], "x1": [173, 174], "x2": [173, 174], "max_pool_indic": [173, 204, 215], "output_dim": 180, "klass_nam": 199, "klass_param": 199, "destination_module_glob": 199, "publicli": 199, "assign": [199, 258, 281], "in_feat": [201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221], "out_feat": [201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221], "formul": [201, 212], "ico2_vertic": [201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221], "ico2_triangl": [201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221], "asarrai": [201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 216, 220, 221, 245, 277], "ico2_x": [201, 202, 203, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221], "fix": [202, 213, 223, 224, 283], "ico3_vertic": [202, 203, 204, 205, 209, 210, 213, 214, 215, 216, 220, 221], "ico3_triangl": [202, 203, 204, 205, 209, 210, 213, 214, 215, 216, 220, 221], "ico3_x": [202, 203, 204, 205, 209, 210, 213, 214, 215, 216, 220, 221], "slow": [203, 214], "pooling_typ": [204, 205, 215, 216], "rectagular": [206, 217], "neigh_weight": [206, 217], "proj_ico_x": [207, 208, 218, 219], "correl": [207, 208, 218, 219], "pad_azimuth": [207, 208, 211, 218, 219], "pad_elev": [207, 208, 211, 218, 219], "zero_pad": [208, 219], "icoconv": [208, 219], "vmin": [223, 224], "vmax": [223, 224], "black": [223, 224], "color_map": [223, 224], "linearsegmentedcolormap": [223, 224], "repres": [223, 224, 290, 291], "opac": [223, 224], "Not": [223, 224], "edg": [223, 224, 290, 291], "line": [223, 224], "cm": [223, 224], "coolwarm": [223, 224], "colormap": [223, 224], "coordin": [225, 226, 227, 229, 230, 231, 232, 242, 243, 267, 283, 293, 294], "system": 225, "tool": [225, 296], "cartesian": [226, 227, 231, 293], "array_lik": [226, 227, 231, 293], "radiant": [226, 227, 231, 293], "pi": [226, 227], "r": [226, 227, 231, 293], "ref_arrai": 228, "atol": [228, 233, 295], "0001": [228, 233, 295], "uniqu": 228, "toler": [228, 233, 295], "along": 228, "new_ord": 228, "resx": [229, 232, 242, 294], "resi": [229, 232, 242, 294], "ico2_vert": [229, 230, 232, 233, 235, 236, 238, 242, 243, 245, 246, 258, 259, 264, 269, 270, 272, 277, 278, 281, 282, 288, 294, 295], "ico2_tri": [229, 230, 232, 233, 235, 236, 238, 242, 243, 245, 246, 258, 259, 264, 269, 270, 272, 277, 278, 281, 282, 288, 294, 295], "y_grid": [229, 232, 242, 294], "ref_vertic": [230, 233, 243, 295], "ico2_std_vert": [230, 233, 243, 295], "ico2_std_tri": [230, 233, 243, 295], "projecte": [232, 294], "y_std": [233, 295], "target_vertic": [235, 245, 269, 277], "n_dim": [235, 245, 269, 277], "n_queri": [235, 245, 269, 277], "nearest_idx": [235, 269], "ico3_vert": [235, 244, 245, 257, 260, 262, 264, 265, 269, 276, 277, 280, 284, 286, 288, 289], "ico3_tri": [235, 244, 245, 257, 260, 262, 264, 265, 269, 276, 277, 280, 284, 286, 288, 289], "down3to2": [235, 269], "ico3_down_vertic": [235, 269], "consecut": [236, 237, 246, 270, 271, 278], "downsampled_data": [236, 270], "new_n_vertic": [236, 246, 270, 278], "ico4_vert": [236, 237, 246, 270, 271, 278], "ico4_tri": [236, 237, 246, 270, 271, 278], "reshap": [236, 238, 245, 246, 265, 270, 272, 277, 278, 289], "y_down": [236, 270], "squeez": [236, 246, 265, 270, 278, 289], "geometri": [237, 245, 250, 251, 255, 256, 271, 277, 279], "new_vertic": [237, 271], "newli": [237, 271], "icosahedorn": [237, 271], "new_triangl": [237, 271], "ico2_down_vert": [237, 271], "ico2_down_tri": [237, 271], "start_nod": [238, 272], "recurs": [238, 272], "node_neigh": [238, 272], "center": [238, 258, 259, 263, 272, 274, 281, 282, 287], "coeffici": [239, 273], "asssoci": [239, 273], "euclidian": [239, 273], "three": [239, 273], "setup": [240, 292], "2d": [241, 275], "grid_in_spher": [241, 259, 275, 282], "grid_in_tplan": [241, 275], "mesh": [244, 245, 258, 276, 277, 281, 291], "target_triangl": [245, 277], "regular": [245, 277], "interp_indic": [245, 277], "n_feat": [245, 277], "y_up": [245, 246, 277, 278], "upper": [246, 278], "upsampled_data": [246, 278], "hide_err": 247, "secur": 247, "redirect": 247, "context": 247, "manag": 247, "On": 247, "complet": [247, 248], "restor": 247, "hide": 247, "func": 248, "wrap": 248, "receiv": 248, "directori": 248, "transpar": 248, "overlap": 248, "cifti_fil": 249, "decompos": 249, "cifti": [249, 252, 254], "vol": 249, "surf_left": 249, "surf_right": 249, "surf_fil": [250, 251, 255, 256], "read": [250, 251], "gifti": [251, 256], "surf_nam": 252, "nbviewer": [252, 254], "neurohackademi": [252, 254], "nh2020": [252, 254], "curriculum": [252, 254], "blob": [252, 254], "master": [252, 254], "markiewicz": [252, 254], "gnu": 253, "archiv": 253, "open": 253, "gz": 253, "out_path": 253, "extens": 253, "n_neigh": [257, 261, 280, 285], "length": [258, 281], "remain": [258, 281], "n_vert": [260, 284], "min_order_to_get_n_neighbor": [261, 285], "hi": [262, 286], "clockwise_from_cent": [263, 287], "clockwis": [263, 287], "counter": [263, 287], "reordered_triangl": [263, 287], "reorder": [263, 287], "ico0_vert": [263, 287], "ico0_tri": [263, 287], "clockwise_ico0_tri": [263, 287], "counter_clockwise_ico0_tri": [263, 287], "n_job": [264, 288], "concurr": [264, 288], "job": [264, 288], "euclidean": [265, 289], "rotated_data": [265, 289], "y_rot": [265, 289], "lower_vertic": 266, "ico_fil": 267, "rescal": 267, "topologi": [267, 268], "ref_fil": 268, "fslr": 268, "point_1": 279, "point_2": 279, "middle_point_cach": 279, "middl": 279, "return_index": 290, "triangles_index": 290, "networkx": 291, "nearbi": 291, "potenti": 291, "smooth": 291, "info": 292, "logfil": 292, "unifi": 296, "compat": 296, "analyz": 296, "brain": 296, "product": 296, "advanc": 296, "availbl": 296, "hydra": 296}, "objects": {"nidl.callbacks.check_typing": [[14, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.datasets": [[16, 0, 1, "", "BaseImageDataset"], [17, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.BaseImageDataset": [[16, 1, 1, "", "get_checksum"], [16, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[17, 1, 1, "", "get_data"]], "nidl.datasets.base": [[18, 0, 1, "", "BaseDataset"], [19, 0, 1, "", "BaseImageDataset"], [20, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[19, 1, 1, "", "get_checksum"], [19, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[20, 1, 1, "", "get_data"]], "nidl.estimators": [[22, 0, 1, "", "BaseEstimator"], [23, 0, 1, "", "ClassifierMixin"], [24, 0, 1, "", "ClusterMixin"], [25, 0, 1, "", "RegressorMixin"], [26, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base": [[27, 0, 1, "", "BaseEstimator"], [28, 0, 1, "", "ClassifierMixin"], [29, 0, 1, "", "ClusterMixin"], [30, 0, 1, "", "RegressorMixin"], [31, 0, 1, "", "TransformerMixin"]], "nidl.estimators.linear": [[33, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[33, 1, 1, "", "configure_optimizers"], [33, 1, 1, "", "on_validation_epoch_end"], [33, 1, 1, "", "predict_step"], [33, 1, 1, "", "training_step"], [33, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[34, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[34, 1, 1, "", "configure_optimizers"], [34, 1, 1, "", "on_validation_epoch_end"], [34, 1, 1, "", "predict_step"], [34, 1, 1, "", "training_step"], [34, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[36, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.SimCLR": [[36, 1, 1, "", "configure_optimizers"], [36, 1, 1, "", "on_validation_epoch_end"], [36, 1, 1, "", "predict_step"], [36, 1, 1, "", "training_step"], [36, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[37, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[37, 1, 1, "", "configure_optimizers"], [37, 1, 1, "", "on_validation_epoch_end"], [37, 1, 1, "", "predict_step"], [37, 1, 1, "", "training_step"], [37, 1, 1, "", "validation_step"]], "nidl.experiment": [[38, 2, 1, "", "fetch_experiment"], [39, 2, 1, "", "filter_config"], [40, 2, 1, "", "get_env"], [41, 2, 1, "", "load_interface"], [42, 2, 1, "", "update_params"]], "nidl.losses": [[44, 0, 1, "", "InfoNCE"]], "nidl.losses.InfoNCE": [[44, 1, 1, "", "forward"]], "nidl.losses.infonce": [[45, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[45, 1, 1, "", "forward"]], "nidl.transforms": [[47, 0, 1, "", "ContrastiveTransforms"]], "nidl.transforms.ssl": [[48, 0, 1, "", "ContrastiveTransforms"]], "nidl.utils": [[50, 0, 1, "", "Bunch"], [51, 0, 1, "", "Weights"], [64, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[51, 1, 1, "", "hf_download"], [51, 1, 1, "", "hub_split"], [51, 1, 1, "", "load_pretrained"], [51, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[52, 0, 1, "", "Bunch"]], "nidl.utils.color": [[53, 0, 1, "", "Colored"], [54, 2, 1, "", "attr"], [55, 2, 1, "", "fg"], [56, 2, 1, "", "hex"], [57, 2, 1, "", "print_multicolor"], [58, 2, 1, "", "print_result"], [59, 2, 1, "", "print_subtitle"], [60, 2, 1, "", "print_title"], [61, 2, 1, "", "print_warning"], [62, 2, 1, "", "random_stylize"], [63, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[53, 1, 1, "", "attribute"], [53, 1, 1, "", "background"], [53, 1, 1, "", "foreground"], [53, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[65, 0, 1, "", "_AvailableIfDescriptor"], [66, 2, 1, "", "_estimator_is"], [67, 2, 1, "", "available_if"], [68, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[69, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[69, 1, 1, "", "hf_download"], [69, 1, 1, "", "hub_split"], [69, 1, 1, "", "load_pretrained"], [69, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[72, 0, 1, "", "AlexNet"], [73, 0, 1, "", "DenseNet"], [74, 0, 1, "", "ResNet"], [75, 0, 1, "", "ResNetTruncated"], [77, 2, 1, "", "densenet121"], [85, 2, 1, "", "resnet18"], [86, 2, 1, "", "resnet18_trunc"], [99, 2, 1, "", "resnet50"], [100, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[72, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[73, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[74, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[75, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[76, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[76, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[78, 0, 1, "", "DenseNet"], [79, 0, 1, "", "_DenseBlock"], [80, 0, 1, "", "_DenseLayer"], [81, 0, 1, "", "_Transition"], [82, 2, 1, "", "_bn_function_factory"], [83, 2, 1, "", "_densenet"], [84, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[78, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[79, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[80, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[87, 0, 1, "", "BasicBlock"], [88, 0, 1, "", "Bottleneck"], [89, 0, 1, "", "ResNet"], [90, 0, 1, "", "ResNetTruncated"], [91, 2, 1, "", "_resnet"], [92, 2, 1, "", "_resnet_trunc"], [93, 2, 1, "", "conv1x1"], [94, 2, 1, "", "conv3x3"], [95, 2, 1, "", "resnet18"], [96, 2, 1, "", "resnet18_trunc"], [97, 2, 1, "", "resnet50"], [98, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[87, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[88, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[89, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[90, 1, 1, "", "forward"]], "surfify.augmentation": [[104, 0, 1, "", "BaseTransformer"], [105, 0, 1, "", "GroupMixUp"], [106, 0, 1, "", "HemiMixUp"], [107, 0, 1, "", "SurfBlur"], [108, 0, 1, "", "SurfCutOut"], [109, 0, 1, "", "SurfNoise"], [110, 0, 1, "", "SurfRotation"], [111, 0, 1, "", "Transformer"], [112, 2, 1, "", "apply_chained_transforms"], [117, 2, 1, "", "interval"], [121, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[104, 0, 1, "", "Transform"], [104, 1, 1, "", "register"]], "surfify.augmentation.BaseTransformer.Transform": [[104, 3, 1, "", "probability"], [104, 3, 1, "", "randomize_per_channel"], [104, 3, 1, "", "transform"]], "surfify.augmentation.GroupMixUp": [[105, 1, 1, "", "groupby"], [105, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[106, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[107, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[108, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[109, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[110, 1, 1, "", "run"]], "surfify.augmentation.base": [[113, 0, 1, "", "SurfBlur"], [114, 0, 1, "", "SurfCutOut"], [115, 0, 1, "", "SurfNoise"], [116, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[113, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[114, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[115, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[116, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[118, 0, 1, "", "GroupMixUp"], [119, 0, 1, "", "HemiMixUp"], [120, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[118, 1, 1, "", "groupby"], [118, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[119, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[120, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[122, 0, 1, "", "BaseTransformer"], [123, 0, 1, "", "RandomAugmentation"], [124, 0, 1, "", "Transformer"], [125, 2, 1, "", "apply_chained_transforms"], [126, 2, 1, "", "interval"], [127, 2, 1, "", "listify"], [128, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[122, 0, 1, "", "Transform"], [122, 1, 1, "", "register"]], "surfify.augmentation.utils.BaseTransformer.Transform": [[122, 3, 1, "", "probability"], [122, 3, 1, "", "randomize_per_channel"], [122, 3, 1, "", "transform"]], "surfify.augmentation.utils.RandomAugmentation": [[123, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[123, 3, 1, "", "dtype"], [123, 3, 1, "", "high"], [123, 3, 1, "", "low"]], "surfify.datasets": [[130, 0, 1, "", "ClassificationDataset"], [131, 0, 1, "", "GenericSurfDataset"], [135, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[132, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[133, 0, 1, "", "ClassificationDataset"], [134, 2, 1, "", "make_classification"]], "surfify.losses": [[137, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[138, 0, 1, "", "SphericalVAELoss"], [139, 2, 1, "", "log_likelihood"]], "surfify.models": [[141, 0, 1, "", "HemiFusionDecoder"], [142, 0, 1, "", "HemiFusionEncoder"], [143, 0, 1, "", "SphericalBase"], [144, 0, 1, "", "SphericalGUNet"], [145, 0, 1, "", "SphericalGVGG"], [146, 0, 1, "", "SphericalGVGG11"], [147, 0, 1, "", "SphericalGVGG11BN"], [148, 0, 1, "", "SphericalGVGG13"], [149, 0, 1, "", "SphericalGVGG13BN"], [150, 0, 1, "", "SphericalGVGG16"], [151, 0, 1, "", "SphericalGVGG16BN"], [152, 0, 1, "", "SphericalGVGG19"], [153, 0, 1, "", "SphericalGVGG19BN"], [154, 0, 1, "", "SphericalHemiFusionDecoder"], [155, 0, 1, "", "SphericalHemiFusionEncoder"], [156, 0, 1, "", "SphericalUNet"], [157, 0, 1, "", "SphericalVAE"], [158, 0, 1, "", "SphericalVGG"], [159, 0, 1, "", "SphericalVGG11"], [160, 0, 1, "", "SphericalVGG11BN"], [161, 0, 1, "", "SphericalVGG13"], [162, 0, 1, "", "SphericalVGG13BN"], [163, 0, 1, "", "SphericalVGG16"], [164, 0, 1, "", "SphericalVGG16BN"], [165, 0, 1, "", "SphericalVGG19"], [166, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[141, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[142, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[143, 0, 1, "", "Ico"], [143, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalBase.Ico": [[143, 3, 1, "", "conv_neighbor_indices"], [143, 3, 1, "", "down_indices"], [143, 3, 1, "", "neighbor_indices"], [143, 3, 1, "", "order"], [143, 3, 1, "", "triangles"], [143, 3, 1, "", "up_indices"], [143, 3, 1, "", "vertices"]], "surfify.models.SphericalGUNet": [[144, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[145, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[154, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[155, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[156, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[157, 1, 1, "", "decode"], [157, 1, 1, "", "encode"], [157, 1, 1, "", "forward"], [157, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[158, 1, 1, "", "forward"]], "surfify.models.base": [[167, 0, 1, "", "SphericalBase"]], "surfify.models.base.SphericalBase": [[167, 0, 1, "", "Ico"], [167, 1, 1, "", "build_ico_info"]], "surfify.models.base.SphericalBase.Ico": [[167, 3, 1, "", "conv_neighbor_indices"], [167, 3, 1, "", "down_indices"], [167, 3, 1, "", "neighbor_indices"], [167, 3, 1, "", "order"], [167, 3, 1, "", "triangles"], [167, 3, 1, "", "up_indices"], [167, 3, 1, "", "vertices"]], "surfify.models.unet": [[168, 0, 1, "", "DownBlock"], [169, 0, 1, "", "DownGBlock"], [170, 0, 1, "", "GraphicalUNet"], [171, 0, 1, "", "SphericalGUNet"], [172, 0, 1, "", "SphericalUNet"], [173, 0, 1, "", "UpBlock"], [174, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[168, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[169, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[170, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[171, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[172, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[173, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[174, 1, 1, "", "forward"]], "surfify.models.vae": [[175, 0, 1, "", "HemiFusionDecoder"], [176, 0, 1, "", "HemiFusionEncoder"], [177, 0, 1, "", "SphericalHemiFusionDecoder"], [178, 0, 1, "", "SphericalHemiFusionEncoder"], [179, 0, 1, "", "SphericalVAE"], [180, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[175, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[176, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[177, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[178, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[179, 1, 1, "", "decode"], [179, 1, 1, "", "encode"], [179, 1, 1, "", "forward"], [179, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[181, 0, 1, "", "SphericalGVGG"], [182, 0, 1, "", "SphericalGVGG11"], [183, 0, 1, "", "SphericalGVGG11BN"], [184, 0, 1, "", "SphericalGVGG13"], [185, 0, 1, "", "SphericalGVGG13BN"], [186, 0, 1, "", "SphericalGVGG16"], [187, 0, 1, "", "SphericalGVGG16BN"], [188, 0, 1, "", "SphericalGVGG19"], [189, 0, 1, "", "SphericalGVGG19BN"], [190, 0, 1, "", "SphericalVGG"], [191, 0, 1, "", "SphericalVGG11"], [192, 0, 1, "", "SphericalVGG11BN"], [193, 0, 1, "", "SphericalVGG13"], [194, 0, 1, "", "SphericalVGG13BN"], [195, 0, 1, "", "SphericalVGG16"], [196, 0, 1, "", "SphericalVGG16BN"], [197, 0, 1, "", "SphericalVGG19"], [198, 0, 1, "", "SphericalVGG19BN"], [199, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[181, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[190, 1, 1, "", "forward"]], "surfify.nn": [[201, 0, 1, "", "IcoDiNeConv"], [202, 0, 1, "", "IcoFixIndexUpSample"], [203, 0, 1, "", "IcoGenericUpConv"], [204, 0, 1, "", "IcoMaxIndexUpSample"], [205, 0, 1, "", "IcoPool"], [206, 0, 1, "", "IcoRePaConv"], [207, 0, 1, "", "IcoSpMaConv"], [208, 0, 1, "", "IcoSpMaConvTranspose"], [209, 0, 1, "", "IcoUpConv"], [210, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[201, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[202, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[203, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[204, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[205, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[206, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[207, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[208, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[209, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[210, 1, 1, "", "forward"]], "surfify.nn.functional": [[211, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[212, 0, 1, "", "IcoDiNeConv"], [213, 0, 1, "", "IcoFixIndexUpSample"], [214, 0, 1, "", "IcoGenericUpConv"], [215, 0, 1, "", "IcoMaxIndexUpSample"], [216, 0, 1, "", "IcoPool"], [217, 0, 1, "", "IcoRePaConv"], [218, 0, 1, "", "IcoSpMaConv"], [219, 0, 1, "", "IcoSpMaConvTranspose"], [220, 0, 1, "", "IcoUpConv"], [221, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[212, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[213, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[214, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[215, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[216, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[217, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[218, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[219, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[220, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[221, 1, 1, "", "forward"]], "surfify.plotting": [[223, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[224, 2, 1, "", "plot_trisurf"]], "surfify.utils": [[226, 2, 1, "", "cart2sph"], [234, 2, 1, "", "debug_msg"], [235, 2, 1, "", "downsample"], [236, 2, 1, "", "downsample_data"], [237, 2, 1, "", "downsample_ico"], [238, 2, 1, "", "find_neighbors"], [239, 2, 1, "", "find_rotation_interpol_coefs"], [240, 2, 1, "", "get_logger"], [241, 2, 1, "", "get_rectangular_projection"], [242, 2, 1, "", "grid2text"], [243, 2, 1, "", "ico2ico"], [244, 2, 1, "", "icosahedron"], [245, 2, 1, "", "interpolate"], [246, 2, 1, "", "interpolate_data"], [257, 2, 1, "", "min_depth_to_get_n_neighbors"], [258, 2, 1, "", "neighbors"], [259, 2, 1, "", "neighbors_rec"], [260, 2, 1, "", "number_of_ico_vertices"], [261, 2, 1, "", "number_of_neighbors"], [262, 2, 1, "", "order_of_ico_from_vertices"], [263, 2, 1, "", "order_triangles"], [264, 2, 1, "", "patch_tri"], [265, 2, 1, "", "rotate_data"], [292, 2, 1, "", "setup_logging"], [293, 2, 1, "", "sph2cart"], [294, 2, 1, "", "text2grid"], [295, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[227, 2, 1, "", "cart2sph"], [228, 2, 1, "", "find_corresponding_order"], [229, 2, 1, "", "grid2text"], [230, 2, 1, "", "ico2ico"], [231, 2, 1, "", "sph2cart"], [232, 2, 1, "", "text2grid"], [233, 2, 1, "", "text2ico"]], "surfify.utils.io": [[247, 0, 1, "", "HidePrints"], [248, 2, 1, "", "compute_and_store"], [249, 2, 1, "", "decompose_cifti"], [250, 2, 1, "", "read_freesurfer"], [251, 2, 1, "", "read_gifti"], [252, 2, 1, "", "surf_data_from_cifti"], [253, 2, 1, "", "ungzip"], [254, 2, 1, "", "volume_from_cifti"], [255, 2, 1, "", "write_freesurfer"], [256, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[266, 2, 1, "", "_patch_tri_iter"], [267, 2, 1, "", "build_freesurfer_ico"], [268, 2, 1, "", "build_fslr_ref"], [269, 2, 1, "", "downsample"], [270, 2, 1, "", "downsample_data"], [271, 2, 1, "", "downsample_ico"], [272, 2, 1, "", "find_neighbors"], [273, 2, 1, "", "find_rotation_interpol_coefs"], [274, 2, 1, "", "get_angle_with_xaxis"], [275, 2, 1, "", "get_rectangular_projection"], [276, 2, 1, "", "icosahedron"], [277, 2, 1, "", "interpolate"], [278, 2, 1, "", "interpolate_data"], [279, 2, 1, "", "middle_point"], [280, 2, 1, "", "min_depth_to_get_n_neighbors"], [281, 2, 1, "", "neighbors"], [282, 2, 1, "", "neighbors_rec"], [283, 2, 1, "", "normalize"], [284, 2, 1, "", "number_of_ico_vertices"], [285, 2, 1, "", "number_of_neighbors"], [286, 2, 1, "", "order_of_ico_from_vertices"], [287, 2, 1, "", "order_triangles"], [288, 2, 1, "", "patch_tri"], [289, 2, 1, "", "rotate_data"], [290, 2, 1, "", "triangles_to_edges"], [291, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 200], "comput": [1, 9, 297], "time": [1, 9, 297], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 35], "setup": 2, "data": [2, 6], "augment": [2, 4, 103], "dataset": [2, 8, 15, 129], "train": [2, 8], "logist": 2, "regress": 2, "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 46], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 222], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 140], "segment": 8, "inspect": 8, "model": [8, 140], "predict": 8, "label": 8, "api": [10, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101, 102, 103, 129, 136, 140, 200, 222, 225], "document": [10, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101, 102, 103, 129, 136, 140, 200, 222, 225], "nidl": [10, 11, 12, 13, 15, 21, 32, 35, 43, 46, 49, 70, 71, 101], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "check_typ": 13, "base": [15, 21, 103, 140], "estim": [21, 32, 35], "linear": 32, "logistic_regress": 32, "exampl": [33, 34, 36, 37, 51, 69], "ssl": [35, 46], "loss": [43, 136], "infonc": 43, "util": [49, 103, 225], "bunch": 49, "color": 49, "valid": 49, "weight": 49, "volum": [70, 71], "backbon": 71, "alexnet3d": 71, "resnet3d": 71, "densenet3d": 71, "search": 101, "surfifi": [102, 103, 129, 136, 140, 200, 222, 225], "mixup": 103, "_samples_gener": 129, "_gener": 129, "vae": [136, 140], "vgg": 140, "nn": 200, "function": 200, "plot": 222, "coord": 225, "io": 225, "sampl": 225}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [297, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of NIDL": [[10, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "API documentation of nidl": [[12, "api-documentation-of-nidl"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[15, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[15, "nidl-datasets"]], "nidl.datasets.base": [[15, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[21, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[21, "nidl-estimators"]], "nidl.estimators.base": [[21, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[32, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[32, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[32, "nidl-estimators-linear-logistic-regression"]], "Examples": [[33, "examples"], [34, "examples"], [36, "examples"], [37, "examples"], [51, "examples"], [69, "examples"]], "API documentation of nidl.estimators.ssl": [[35, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[35, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[35, "id1"]], "API documentation of nidl.losses": [[43, "api-documentation-of-nidl-losses"]], "nidl.losses": [[43, "nidl-losses"]], "nidl.losses.infonce": [[43, "id1"]], "API documentation of nidl.transforms": [[46, "api-documentation-of-nidl-transforms"]], "nidl.transforms": [[46, "nidl-transforms"]], "nidl.transforms.ssl": [[46, "nidl-transforms-ssl"]], "API documentation of nidl.utils": [[49, "api-documentation-of-nidl-utils"]], "nidl.utils": [[49, "nidl-utils"]], "nidl.utils.bunch": [[49, "id1"]], "nidl.utils.color": [[49, "nidl-utils-color"]], "nidl.utils.validation": [[49, "nidl-utils-validation"]], "nidl.utils.weights": [[49, "id2"]], "API documentation of nidl.volume": [[70, "api-documentation-of-nidl-volume"]], "nidl.volume": [[70, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[71, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[71, "nidl-volume-backbones"]], "nidl.volume.backbones.alexnet3d": [[71, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[71, "nidl-volume-backbones-resnet3d"]], "nidl.volume.backbones.densenet3d": [[71, "nidl-volume-backbones-densenet3d"]], "Search in API documentation of NIDL": [[101, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[102, "api-documentation-of-surfify"]], "surfify": [[102, "surfify"]], "API documentation of surfify.augmentation": [[103, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[103, "surfify-augmentation"]], "surfify.augmentation.base": [[103, "surfify-augmentation-base"]], "surfify.augmentation.mixup": [[103, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[103, "surfify-augmentation-utils"]], "API documentation of surfify.datasets": [[129, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[129, "surfify-datasets"]], "surfify.datasets._samples_generator": [[129, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[129, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[136, "api-documentation-of-surfify-losses"]], "surfify.losses": [[136, "surfify-losses"]], "surfify.losses.vae": [[136, "surfify-losses-vae"]], "API documentation of surfify.models": [[140, "api-documentation-of-surfify-models"]], "surfify.models": [[140, "surfify-models"]], "surfify.models.base": [[140, "surfify-models-base"]], "surfify.models.vae": [[140, "surfify-models-vae"]], "surfify.models.vgg": [[140, "surfify-models-vgg"]], "surfify.models.unet": [[140, "surfify-models-unet"]], "API documentation of surfify.nn": [[200, "api-documentation-of-surfify-nn"]], "surfify.nn": [[200, "surfify-nn"]], "surfify.nn.functional": [[200, "surfify-nn-functional"]], "surfify.nn.modules": [[200, "surfify-nn-modules"]], "API documentation of surfify.plotting": [[222, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[222, "surfify-plotting"]], "surfify.plotting.surface": [[222, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[225, "api-documentation-of-surfify-utils"]], "surfify.utils": [[225, "surfify-utils"]], "surfify.utils.coord": [[225, "surfify-utils-coord"]], "surfify.utils.io": [[225, "surfify-utils-io"]], "surfify.utils.sampling": [[225, "surfify-utils-sampling"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks.check_typing)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[14, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "baseimagedataset (class in nidl.datasets)": [[16, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[16, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[16, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[17, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[17, "nidl.datasets.BaseNumpyDataset.get_data"]], "basedataset (class in nidl.datasets.base)": [[18, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[19, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[19, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[19, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[20, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[20, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "baseestimator (class in nidl.estimators)": [[22, "nidl.estimators.BaseEstimator"]], "classifiermixin (class in nidl.estimators)": [[23, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[24, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[25, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[26, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[27, "nidl.estimators.base.BaseEstimator"]], "classifiermixin (class in nidl.estimators.base)": [[28, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[29, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[30, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[31, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[33, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[33, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[34, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[36, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "on_validation_epoch_end() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.on_validation_epoch_end"]], "predict_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.predict_step"]], "training_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.training_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[36, "nidl.estimators.ssl.SimCLR.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[37, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "on_validation_epoch_end() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.on_validation_epoch_end"]], "predict_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.predict_step"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[37, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[38, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[39, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[40, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[41, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[42, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[44, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[44, "nidl.losses.InfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[45, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[45, "nidl.losses.infonce.InfoNCE.forward"]], "contrastivetransforms (class in nidl.transforms)": [[47, "nidl.transforms.ContrastiveTransforms"]], "contrastivetransforms (class in nidl.transforms.ssl)": [[48, "nidl.transforms.ssl.ContrastiveTransforms"]], "bunch (class in nidl.utils)": [[50, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[51, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[51, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[51, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[52, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[53, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[53, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[54, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[55, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[56, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[57, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[58, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[59, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[60, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[61, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[62, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[63, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[64, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[65, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[66, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[67, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[68, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[69, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[69, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[69, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[72, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[72, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[73, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[73, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[74, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[74, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[75, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[75, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[76, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[76, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[77, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[78, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[78, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[79, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[79, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[80, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[80, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[81, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[82, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[83, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[84, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[85, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[86, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[87, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[87, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[88, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[88, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[89, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[89, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[90, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[90, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[91, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[92, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[93, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[94, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[95, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[96, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[97, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[98, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[99, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[100, "nidl.volume.backbones.resnet50_trunc"]], "basetransformer (class in surfify.augmentation)": [[104, "surfify.augmentation.BaseTransformer"]], "basetransformer.transform (class in surfify.augmentation)": [[104, "surfify.augmentation.BaseTransformer.Transform"]], "probability (surfify.augmentation.basetransformer.transform attribute)": [[104, "surfify.augmentation.BaseTransformer.Transform.probability"]], "randomize_per_channel (surfify.augmentation.basetransformer.transform attribute)": [[104, "surfify.augmentation.BaseTransformer.Transform.randomize_per_channel"]], "register() (surfify.augmentation.basetransformer method)": [[104, "surfify.augmentation.BaseTransformer.register"]], "transform (surfify.augmentation.basetransformer.transform attribute)": [[104, "surfify.augmentation.BaseTransformer.Transform.transform"]], "groupmixup (class in surfify.augmentation)": [[105, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[105, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[105, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[106, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[106, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[107, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[107, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[108, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[108, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[109, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[109, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[110, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[110, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[111, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[112, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[113, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[113, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[114, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[114, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[115, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[115, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[116, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[116, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[117, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[118, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[118, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[118, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[119, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[119, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[120, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[120, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[121, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[122, "surfify.augmentation.utils.BaseTransformer"]], "basetransformer.transform (class in surfify.augmentation.utils)": [[122, "surfify.augmentation.utils.BaseTransformer.Transform"]], "probability (surfify.augmentation.utils.basetransformer.transform attribute)": [[122, "surfify.augmentation.utils.BaseTransformer.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.basetransformer.transform attribute)": [[122, "surfify.augmentation.utils.BaseTransformer.Transform.randomize_per_channel"]], "register() (surfify.augmentation.utils.basetransformer method)": [[122, "surfify.augmentation.utils.BaseTransformer.register"]], "transform (surfify.augmentation.utils.basetransformer.transform attribute)": [[122, "surfify.augmentation.utils.BaseTransformer.Transform.transform"]], "randomaugmentation (class in surfify.augmentation.utils)": [[123, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[123, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transformer (class in surfify.augmentation.utils)": [[124, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[125, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[126, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[127, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[128, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[130, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[131, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[132, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[133, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[134, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[135, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[137, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[138, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[139, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[141, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[141, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[142, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[142, "surfify.models.HemiFusionEncoder.forward"]], "sphericalbase (class in surfify.models)": [[143, "surfify.models.SphericalBase"]], "sphericalbase.ico (class in surfify.models)": [[143, "surfify.models.SphericalBase.Ico"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[143, "surfify.models.SphericalBase.build_ico_info"]], "conv_neighbor_indices (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.down_indices"]], "neighbor_indices (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.neighbor_indices"]], "order (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.order"]], "triangles (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.triangles"]], "up_indices (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.up_indices"]], "vertices (surfify.models.sphericalbase.ico attribute)": [[143, "surfify.models.SphericalBase.Ico.vertices"]], "sphericalgunet (class in surfify.models)": [[144, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[144, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[145, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[145, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[146, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[147, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[148, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[149, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[150, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[151, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[152, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[153, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[154, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[154, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[155, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[155, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[156, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[156, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[157, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[157, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[157, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[157, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[157, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[158, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[158, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[159, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[160, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[161, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[162, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[163, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[164, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[165, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[166, "surfify.models.SphericalVGG19BN"]], "sphericalbase (class in surfify.models.base)": [[167, "surfify.models.base.SphericalBase"]], "sphericalbase.ico (class in surfify.models.base)": [[167, "surfify.models.base.SphericalBase.Ico"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[167, "surfify.models.base.SphericalBase.build_ico_info"]], "conv_neighbor_indices (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.down_indices"]], "neighbor_indices (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.neighbor_indices"]], "order (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.order"]], "triangles (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.triangles"]], "up_indices (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.up_indices"]], "vertices (surfify.models.base.sphericalbase.ico attribute)": [[167, "surfify.models.base.SphericalBase.Ico.vertices"]], "downblock (class in surfify.models.unet)": [[168, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[168, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[169, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[169, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[170, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[170, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[171, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[171, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[172, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[172, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[173, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[173, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[174, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[174, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[175, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[175, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[176, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[176, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[177, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[177, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[178, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[178, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[179, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[179, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[179, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[179, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[179, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[180, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[181, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[181, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[182, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[183, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[184, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[185, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[186, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[187, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[188, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[189, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[190, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[190, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[191, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[192, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[193, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[194, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[195, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[196, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[197, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[198, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[199, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[201, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[201, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[202, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[202, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[203, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[203, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[204, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[204, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[205, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[205, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[206, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[206, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[207, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[207, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[208, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[208, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[209, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[209, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[210, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[210, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[211, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[212, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[212, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[213, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[213, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[214, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[214, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[215, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[215, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[216, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[216, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[217, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[217, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[218, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[218, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[219, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[219, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[220, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[220, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[221, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[221, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[223, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[224, "surfify.plotting.surface.plot_trisurf"]], "cart2sph() (in module surfify.utils)": [[226, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[227, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[228, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[229, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[230, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[231, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[232, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[233, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[234, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[235, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[236, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[237, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[238, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[239, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[240, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[241, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[242, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[243, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[244, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[245, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[246, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[247, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[248, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[249, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[250, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[251, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[252, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[253, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[254, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[255, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[256, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[257, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[258, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[259, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[260, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[261, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[262, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[263, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[264, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[265, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[266, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[267, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[268, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[269, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[270, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[271, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[272, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[273, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[274, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[275, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[276, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[277, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[278, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[279, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[280, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[281, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[282, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[283, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[284, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[285, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[286, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[287, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[288, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[289, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[290, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[291, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[292, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[293, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[294, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[295, "surfify.utils.text2ico"]]}})
Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.ImageDataFrameDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset", "generated/nidl.datasets.pandas_dataset.default_image_loader", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.ImageDataFrameDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset.rst", "generated/nidl.datasets.pandas_dataset.default_image_loader.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 18, 24, 38, 43, 49, 50, 51, 52, 53, 54, 56, 59, 62, 70, 73, 89, 103, 105, 107, 157, 159, 212, 243, 302, 376], "supervis": [0, 1, 10, 29, 35, 49, 50, 51, 52, 53, 54, 56, 59, 62, 89, 107, 376], "contrast": [0, 1, 49, 50, 52, 53, 54, 62, 71, 75, 89, 107, 157, 159, 200, 201, 213, 240, 376], "learn": [0, 1, 10, 12, 15, 16, 17, 19, 21, 22, 23, 25, 49, 50, 52, 53, 54, 62, 71, 75, 76, 89, 107, 110, 111, 114, 116, 157, 159, 209, 213, 228, 240, 256, 278, 289, 375, 376], "simclr": [0, 1, 10, 49, 50, 52, 54, 57, 58, 60, 61, 89, 107, 169, 213, 240, 376], "neighbor": [0, 3, 4, 9, 10, 15, 16, 21, 22, 163, 164, 166, 167, 169, 173, 175, 176, 181, 182, 186, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 250, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 283, 286, 289, 291, 292, 293, 294, 297, 304, 308, 311, 314, 317, 318, 321, 324, 336, 337, 338, 340, 344, 348, 351, 352, 356, 359, 360, 361, 364, 368, 370, 373, 376], "unet": [0, 3, 9, 10, 169, 215, 227, 245, 246, 247, 248, 249, 250, 251, 376], "segment": [0, 3, 9, 112, 113, 127, 128, 157, 159, 376], "project": [0, 3, 4, 5, 7, 9, 11, 27, 32, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 178, 184, 212, 243, 309, 312, 314, 317, 320, 322, 323, 337, 338, 343, 348, 351, 353, 354, 355, 358, 360, 361, 367, 374, 376], "textur": [0, 3, 4, 9, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 210, 211, 216, 225, 226, 228, 229, 252, 253, 254, 255, 256, 258, 267, 300, 301, 308, 311, 312, 315, 321, 324, 325, 344, 349, 356, 357, 368, 373, 374, 376], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 169, 175, 176, 178, 181, 182, 184, 199, 202, 203, 204, 209, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 249, 250, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 304, 308, 309, 311, 312, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 374, 376], "match": [0, 3, 9, 28, 33, 162, 164, 165, 167, 307, 312, 374, 376], "augment": [0, 3, 9, 10, 27, 28, 31, 32, 33, 49, 50, 52, 53, 54, 62, 63, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 163, 164, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 376], "download": [0, 2, 4, 5, 6, 7, 8, 30, 34, 87, 89, 107], "all": [0, 2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 27, 29, 30, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 54, 56, 59, 74, 79, 80, 81, 82, 83, 85, 86, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 149, 153, 162, 165, 213, 215, 227, 240, 241, 242, 244, 247, 248, 249, 283, 284, 285, 294, 295, 296, 376], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 18, 24, 29, 30, 34, 35, 38, 43, 53, 56, 59, 62, 82, 83, 88, 90, 105, 150, 154, 157, 159, 163, 166, 214, 216, 227, 228, 229, 239, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 374, 376], "python": [0, 2, 4, 5, 6, 7, 8, 10, 12, 103], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 267, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "code": [0, 2, 4, 5, 6, 7, 8, 14, 20, 63, 66, 100, 101], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 332], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 30, 32, 34, 38, 43, 49, 50, 52, 53, 54, 62, 85, 86, 147, 149, 151, 153, 188, 198, 199, 202, 203, 204, 209, 311, 317, 332, 334, 335, 346, 347, 351, 373], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 82, 83, 376], "000": [1, 2, 376], "total": [1, 4, 5, 6, 7, 8, 9, 111, 112, 113, 116, 127, 128, 376], "execut": [1, 9, 327, 376], "1": [1, 2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 85, 86, 88, 90, 105, 110, 111, 112, 113, 114, 116, 125, 126, 127, 128, 131, 132, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 163, 164, 166, 167, 172, 173, 176, 182, 186, 190, 191, 192, 199, 202, 203, 204, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 245, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 284, 285, 286, 289, 291, 292, 293, 295, 296, 297, 300, 301, 302, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 346, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 370, 373, 374], "file": [1, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 63, 89, 107, 200, 201, 328, 329, 330, 332, 334, 335, 371, 375, 376], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 15, 16, 18, 21, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 69, 70, 72, 73, 80, 81, 82, 83, 88, 90, 105, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 143, 145, 147, 149, 150, 151, 153, 154, 157, 159, 163, 166, 173, 176, 182, 186, 200, 201, 210, 214, 215, 216, 227, 228, 229, 239, 248, 249, 252, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 374, 376], "auto_galleri": [1, 9], "mem": [1, 9, 376], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 376], "simclr_stl10": [1, 2, 376], "py": [1, 2, 4, 5, 6, 7, 8, 9, 376], "0": [1, 2, 4, 5, 6, 7, 8, 14, 19, 20, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 69, 70, 71, 72, 73, 75, 76, 80, 81, 82, 83, 86, 105, 112, 113, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 162, 163, 164, 165, 166, 167, 176, 178, 182, 184, 191, 192, 212, 228, 238, 241, 242, 243, 244, 247, 256, 279, 284, 285, 290, 295, 296, 300, 301, 307, 309, 312, 314, 317, 322, 337, 338, 342, 343, 344, 348, 351, 360, 361, 366, 367, 368, 370, 374, 376], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 100, 101, 106], "full": [2, 4, 5, 6, 7, 8, 10, 38, 43, 80, 81, 163, 164, 166, 167, 316, 350], "http": [2, 11, 15, 16, 17, 19, 21, 22, 23, 25, 30, 34, 57, 58, 60, 61, 69, 72, 79, 103, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 147, 151, 209, 331, 333], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 169, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "In": [2, 29, 35, 38, 43, 49, 50, 52, 53, 54, 62, 67, 70, 73, 86, 147, 148, 149, 150, 151, 152, 153, 154, 215, 227, 248, 249, 276], "thi": [2, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "tutori": [2, 11], "we": [2, 5, 6, 8, 30, 34, 49, 50, 52, 54, 57, 60, 104, 147, 149, 151, 153, 276, 288, 331, 333], "take": [2, 29, 30, 34, 35, 52, 54, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 257, 283, 284, 285, 294, 295, 296], "closer": [2, 52, 53, 54, 62], "look": [2, 52, 54, 317, 351], "also": [2, 10, 27, 28, 31, 32, 33, 49, 50, 52, 53, 54, 62, 82, 83, 103, 198, 200, 201, 327, 375], "sometim": [2, 88, 90], "call": [2, 14, 18, 20, 24, 27, 28, 31, 32, 33, 38, 43, 49, 50, 52, 53, 54, 62, 70, 73, 74, 77, 86, 106, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 148, 150, 152, 154, 200, 201, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 327, 344, 368], "unsupervis": [2, 29, 35], "describ": [2, 17, 23, 52, 54, 63, 375], "scenario": 2, "where": [2, 6, 17, 18, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 52, 53, 54, 57, 60, 62, 63, 71, 75, 89, 107, 157, 158, 159, 160, 163, 166, 200, 201, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289, 300, 301, 303, 311, 370, 373], "have": [2, 5, 6, 14, 20, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 143, 145, 158, 160, 327, 337, 360], "given": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 30, 34, 71, 75, 85, 89, 106, 107, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 208, 210, 252, 302, 327, 344, 368, 369, 370], "input": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 53, 62, 63, 65, 70, 71, 73, 75, 78, 79, 80, 81, 84, 85, 86, 89, 107, 110, 111, 112, 113, 114, 116, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 194, 196, 200, 201, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 302, 307, 308, 311, 312, 321, 327, 329, 330, 345, 373, 374], "accompani": 2, "label": [2, 6, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 34, 35, 49, 50, 53, 62, 71, 75, 148, 150, 152, 154, 163, 164, 166, 167, 203, 204, 300, 301], "classic": [2, 227, 249, 250], "wai": [2, 337, 360, 375], "howev": [2, 163, 164, 166, 167], "still": [2, 302], "contain": [2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 88, 90, 200, 201, 214, 239, 257, 300, 301, 327, 343, 367], "lot": 2, "inform": [2, 27, 28, 31, 32, 33, 63, 71, 75, 200, 201, 209, 214, 239], "which": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 30, 34, 38, 43, 49, 50, 52, 53, 54, 62, 71, 75, 106, 112, 113, 127, 128, 143, 145, 148, 152, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 302, 307, 317, 344, 351, 368], "can": [2, 5, 18, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 70, 73, 86, 104, 143, 145, 147, 151, 158, 160, 172, 179, 190, 193, 200, 201, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 257, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 326, 327], "how": [2, 4, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "ar": [2, 5, 6, 8, 14, 17, 19, 20, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 79, 80, 81, 85, 86, 88, 90, 142, 143, 144, 145, 147, 148, 150, 151, 152, 154, 157, 159, 163, 164, 166, 167, 171, 200, 201, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 288, 302, 307, 311, 324, 337, 344, 346, 356, 360, 368, 370, 373], "imag": [2, 6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 49, 50, 52, 53, 54, 62, 148, 149, 150, 152, 153, 154, 157, 159, 163, 164, 166, 167, 171, 200, 201, 208, 311, 328, 373], "differ": [2, 5, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 52, 53, 54, 62, 63, 163, 166, 176, 182, 200, 201, 214, 215, 227, 239, 248, 249], "each": [2, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 32, 34, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 63, 82, 83, 111, 112, 113, 116, 127, 128, 147, 149, 150, 151, 153, 154, 157, 158, 159, 160, 162, 165, 173, 175, 176, 181, 182, 186, 189, 197, 199, 202, 203, 204, 208, 210, 211, 212, 214, 215, 225, 226, 227, 239, 243, 247, 248, 249, 252, 253, 254, 255, 302, 317, 318, 337, 338, 344, 351, 352, 360, 361, 368], "other": [2, 5, 38, 43, 49, 50, 52, 54, 63, 302, 312, 374], "what": [2, 53, 62, 63, 66], "pattern": [2, 6, 27, 28, 31, 32, 33, 200, 201, 288], "descript": [2, 163, 164, 166, 167], "certain": [2, 317, 340, 351, 364], "cluster": [2, 38, 40, 43, 45, 53, 62], "To": [2, 5, 18, 24, 27, 32, 38, 43, 49, 50, 52, 54, 71, 75, 77], "get": [2, 18, 24, 29, 30, 34, 35, 52, 54, 163, 166, 302, 336, 339, 340, 341, 359, 363, 364, 365, 370], "an": [2, 6, 7, 8, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 35, 38, 43, 49, 50, 53, 56, 59, 62, 63, 65, 66, 88, 89, 90, 103, 105, 106, 107, 112, 113, 127, 128, 147, 151, 175, 176, 181, 182, 185, 188, 189, 191, 195, 197, 214, 215, 227, 239, 248, 249, 278, 289, 302, 308, 311, 312, 316, 321, 323, 325, 336, 339, 340, 341, 344, 350, 355, 357, 358, 359, 363, 364, 365, 368, 373, 374], "insight": 2, "question": 2, "implement": [2, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 69, 70, 71, 72, 73, 75, 76, 85, 86, 103, 148, 152, 175, 181, 209, 212, 213, 228, 240, 243, 247, 256], "popular": [2, 10, 198], "simpl": [2, 4, 5, 7, 8, 52, 54, 56, 59, 110, 114, 147, 149, 151, 153, 213, 240, 309, 322, 370], "method": [2, 10, 14, 18, 20, 24, 27, 30, 32, 34, 38, 43, 53, 62, 70, 71, 73, 75, 78, 86, 88, 89, 90, 104, 105, 107, 157, 159, 163, 164, 166, 167, 170, 198, 212, 214, 215, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 248, 249, 250, 251, 256, 258, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 302, 344, 368], "appli": [2, 5, 6, 18, 24, 29, 30, 34, 35, 49, 50, 52, 54, 56, 59, 70, 73, 85, 86, 89, 107, 112, 113, 127, 128, 142, 144, 149, 150, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 168, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 186, 187, 190, 191, 193, 194, 212, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 288, 309, 320, 322, 338, 354, 361], "stl10": 2, "requir": [2, 38, 43, 49, 50, 52, 53, 54, 62, 70, 73, 76, 150, 154], "some": [2, 7, 10, 38, 43, 49, 50, 52, 53, 54, 62, 63, 65, 70, 73, 112, 113, 127, 128, 179, 180, 193, 194, 198, 302, 370], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 375], "let": [2, 52, 54], "": [2, 5, 7, 18, 24, 29, 30, 34, 35, 38, 43, 52, 53, 54, 62, 70, 73, 80, 81, 106, 147, 151, 163, 166, 174, 175, 176, 178, 181, 182, 184, 187, 199, 202, 203, 204, 210, 211, 215, 225, 226, 227, 245, 248, 249, 250, 252, 253, 254, 255, 278, 289, 314, 317, 327, 337, 338, 342, 343, 348, 351, 360, 361, 366, 367], "first": [2, 5, 6, 8, 30, 34, 53, 56, 59, 62, 69, 71, 72, 75, 80, 81, 111, 112, 113, 116, 127, 128, 210, 212, 215, 227, 243, 245, 246, 248, 249, 252, 344, 368], "start": [2, 18, 24, 112, 113, 127, 128, 176, 182, 317, 351], "import": [2, 4, 5, 6, 7, 8, 29, 35, 52, 54, 63, 65, 66, 82, 83, 88, 90, 105, 150, 154, 157, 159, 163, 166, 198, 214, 216, 227, 228, 229, 239, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 374], "our": [2, 5, 49, 50], "standard": [2, 71, 75, 142, 143, 144, 145, 158, 160, 175, 177, 181, 183, 214, 215, 227, 239, 248, 249, 302, 323, 326, 343, 355, 367], "librari": 2, "below": [2, 52, 53, 54, 62, 63], "o": [2, 5, 7, 304, 314, 317, 337, 338, 343, 348, 351, 360, 361, 367], "matplotlib": [2, 4, 5, 6, 7, 8, 300, 301, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "pyplot": [2, 4, 5, 6, 7, 8, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "plt": [2, 4, 5, 6, 7, 8, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "pytorch_lightn": [2, 18, 24], "pl": 2, "torch": [2, 6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 35, 38, 43, 53, 62, 69, 71, 72, 75, 85, 86, 89, 107, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 209, 216, 227, 228, 229, 247, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "nn": [2, 6, 8, 10, 38, 43, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 69, 71, 72, 74, 75, 89, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 169, 175, 181, 210, 211, 213, 225, 226, 240, 241, 242, 244, 245, 247, 250, 252, 253, 254, 255, 257, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "util": [2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 53, 56, 57, 58, 59, 60, 61, 62, 77, 78, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 169, 175, 176, 178, 181, 182, 184, 190, 191, 192, 193, 194, 195, 196, 197, 198, 227, 228, 229, 249, 256, 267, 277, 278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "torchvis": [2, 53, 62, 86, 147, 149, 151, 153], "collect": 2, "ordereddict": [2, 49, 50], "copi": [2, 27, 32, 302], "deepcopi": 2, "weight": [2, 10, 15, 17, 21, 23, 30, 34, 49, 50, 52, 53, 54, 62, 63, 70, 71, 73, 75, 77, 78, 80, 81, 82, 83, 89, 107, 169, 173, 186, 206, 207, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 318, 324, 338, 344, 352, 356, 361, 368], "estim": [2, 4, 5, 6, 7, 8, 10, 18, 19, 24, 25, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 70, 73, 77, 78, 82, 83, 104, 106, 169, 302, 309, 322], "ssl": [2, 10, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 169], "linear": [2, 10, 18, 24, 49, 50, 53, 56, 57, 59, 60, 62, 70, 71, 73, 75, 110, 114, 149, 153, 163, 164, 166, 167, 169, 212, 215, 227, 243, 248, 249, 250], "logisticregress": [2, 10, 17, 23, 48, 49, 50, 169], "callback": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 43, 49, 50, 53, 62, 169], "learningratemonitor": [2, 53, 62], "modelcheckpoint": [2, 38, 43], "transform": [2, 5, 10, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 43, 47, 52, 53, 54, 62, 63, 84, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 179, 180, 189, 190, 192, 193, 194, 197, 200, 201, 209, 210, 212, 243, 244, 252, 302, 303, 305, 306, 309, 310, 322, 343, 367, 372], "defin": [2, 27, 28, 29, 31, 32, 33, 35, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 63, 64, 74, 80, 81, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 163, 166, 173, 186, 188, 191, 200, 201, 213, 215, 227, 240, 241, 242, 244, 247, 248, 249, 250, 251, 276, 283, 284, 285, 294, 295, 296, 300, 301, 303, 320, 323, 329, 330, 334, 335, 354, 355], "global": [2, 15, 17, 21, 23, 63, 147, 151, 276], "paramet": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 105, 106, 107, 110, 111, 112, 113, 114, 116, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 9, 30, 34, 53, 62, 82, 83, 88, 90, 228, 229, 238, 256, 267, 337, 343, 360, 367, 376], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 53, 62, 77, 78, 82, 83, 89, 95, 100, 101, 102, 105, 107, 111, 116, 147, 151, 172, 189, 190, 197, 206, 207, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 286, 289, 291, 292, 293, 297, 300, 301, 302, 308, 309, 312, 315, 317, 321, 322, 337, 342, 349, 351, 360, 366, 374], "benchmark": 2, "fals": [2, 4, 6, 7, 18, 24, 30, 34, 38, 43, 49, 50, 52, 53, 54, 62, 80, 81, 82, 83, 89, 103, 105, 107, 111, 112, 113, 116, 117, 118, 127, 128, 147, 151, 200, 201, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 245, 246, 247, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 300, 301, 302, 309, 314, 316, 317, 322, 323, 324, 325, 326, 328, 331, 333, 337, 338, 342, 343, 344, 348, 350, 351, 355, 356, 357, 360, 361, 366, 367, 368, 369], "devic": [2, 38, 43, 49, 50], "gpu": [2, 38, 43, 49, 50, 52, 54], "cuda": 2, "is_avail": 2, "els": [2, 29, 35], "cpu": [2, 38, 43], "As": [2, 8, 52, 54], "mani": [2, 5, 15, 16, 17, 19, 21, 22, 23, 25, 30, 34, 38, 43, 52, 53, 54, 62, 111, 112, 113, 116, 127, 128], "befor": [2, 29, 35, 52, 54, 106, 149, 153, 215, 227, 248, 249, 285, 296, 302], "provid": [2, 27, 28, 29, 31, 32, 33, 35, 38, 43, 142, 144, 148, 150, 152, 154, 163, 166, 178, 184, 200, 201, 277, 302, 318, 344, 352, 368, 375], "pre": 2, "model": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 62, 63, 87, 89, 107, 112, 113, 115, 122, 127, 128, 169, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "If": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 53, 62, 70, 71, 73, 75, 79, 82, 83, 85, 86, 89, 106, 107, 112, 113, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 302, 327, 344, 368], "you": [2, 5, 11, 14, 18, 20, 24, 27, 29, 30, 32, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 89, 107, 302], "run": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 21, 22, 23, 24, 53, 62, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 343, 367], "local": [2, 30, 34, 63, 67, 89, 107], "make": [2, 18, 24, 38, 43, 105, 147, 151, 276], "sure": 2, "suffici": 2, "disk": [2, 29, 30, 34, 35, 38, 43, 49, 50], "space": [2, 6, 30, 34, 52, 53, 54, 62, 110, 111, 112, 113, 114, 116, 127, 128, 148, 152, 163, 164, 166, 167, 210, 211, 212, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 249, 252, 253, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 320, 354], "avail": [2, 30, 34, 38, 43, 49, 50, 53, 62, 63, 82, 83, 89, 105, 107, 149, 153, 163, 164, 166, 167], "load_pretrain": [2, 89, 107], "makedir": 2, "exist_ok": 2, "name": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 53, 62, 63, 66, 82, 83, 89, 106, 107, 210, 211, 225, 226, 252, 253, 254, 255, 276, 300, 301, 302, 313, 327], "hf": [2, 30, 34, 63, 89, 107], "hub": [2, 63, 89, 107], "neurospin": [2, 11, 89, 107], "resnet18": [2, 10, 53, 62, 109, 123, 133, 169], "data_dir": [2, 89, 107], "filepath": [2, 89, 107], "pt": 2, "allow": [2, 5, 14, 20, 28, 33, 52, 54, 63, 64, 302, 327, 344, 368], "effici": [2, 111, 116], "need": [2, 5, 6, 38, 43, 52, 53, 54, 62, 63, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 288, 294, 295, 296], "prepar": 2, "load": [2, 8, 10, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 43, 63, 66, 67, 89, 107, 198, 200, 201, 331, 333], "sampl": [2, 8, 10, 17, 23, 29, 30, 34, 35, 38, 43, 53, 62, 70, 71, 73, 75, 77, 78, 80, 81, 82, 83, 142, 143, 144, 145, 147, 149, 151, 153, 169, 198, 199, 202, 203, 204, 208, 210, 211, 215, 216, 227, 228, 229, 245, 248, 249, 250, 252, 253, 256, 258, 267, 280, 281, 282, 286, 288, 291, 292, 293, 297, 311, 338, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373], "two": [2, 5, 30, 34, 49, 50, 52, 53, 54, 56, 59, 62, 71, 75, 142, 143, 144, 145, 307, 309, 322, 337, 360], "random": [2, 4, 38, 43, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 163, 166, 172, 176, 182, 188, 189, 190, 191, 197, 199, 202, 203, 204], "batch": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 71, 75, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 248, 249, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "The": [2, 5, 18, 24, 27, 29, 30, 32, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 106, 143, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 175, 177, 178, 181, 183, 184, 209, 210, 211, 212, 215, 225, 226, 227, 228, 243, 247, 248, 249, 252, 253, 254, 255, 256, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 302, 305, 306, 326, 327], "easiest": 2, "do": [2, 5, 18, 24, 38, 43, 49, 50, 52, 54, 302], "i": [2, 5, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "creat": [2, 103, 157, 159, 163, 166, 185, 191, 192, 195, 198, 200, 201, 238, 276], "when": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 77, 78, 79, 82, 83, 86, 89, 105, 107, 148, 150, 152, 154, 157, 159, 300, 301, 302, 307, 312, 327, 342, 366, 374], "being": 2, "set": [2, 5, 15, 16, 21, 22, 30, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 62, 63, 67, 70, 71, 73, 75, 80, 81, 85, 91, 157, 159, 162, 164, 165, 167, 176, 178, 182, 184, 198, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 246, 247, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 303, 314, 324, 328, 348, 356], "twice": 2, "class": [2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 103, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 326], "contrastivetransform": 2, "framework": [2, 38, 43, 53, 62, 213, 240], "easili": [2, 5], "extend": [2, 78, 88, 90], "more": [2, 15, 17, 21, 23, 27, 28, 29, 31, 32, 33, 35, 53, 62, 111, 116, 149, 153, 162, 165, 170, 200, 201, 375], "posit": [2, 38, 43, 70, 73, 85, 86], "than": [2, 38, 43, 52, 54], "same": [2, 5, 30, 34, 38, 43, 52, 53, 54, 62, 63, 64, 71, 75, 77, 78, 82, 83, 84, 85, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 307, 309, 322, 327, 332, 337, 360], "most": [2, 300, 301], "usual": [2, 52, 54, 85], "obtain": [2, 52, 54, 57, 60], "us": [2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "onli": [2, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "def": [2, 4, 6, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 105], "__init__": [2, 18, 24, 38, 43, 49, 50, 52, 54, 105], "base_transform": 2, "n_view": [2, 85], "2": [2, 4, 5, 7, 8, 9, 15, 16, 18, 21, 22, 24, 53, 62, 63, 70, 71, 73, 75, 76, 80, 81, 82, 83, 88, 90, 105, 112, 113, 127, 128, 142, 144, 148, 152, 163, 166, 185, 191, 192, 195, 199, 202, 203, 204, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 305, 306, 308, 309, 311, 312, 314, 315, 316, 317, 320, 321, 322, 324, 325, 336, 337, 338, 343, 348, 349, 350, 351, 354, 356, 357, 359, 360, 361, 367, 369, 373, 374, 376], "__call__": 2, "x": [2, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 35, 52, 54, 56, 59, 70, 73, 85, 105, 110, 111, 112, 113, 114, 116, 125, 126, 127, 128, 148, 152, 157, 158, 159, 160, 203, 204, 208, 211, 212, 215, 216, 225, 226, 227, 228, 229, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 305, 306, 308, 310, 311, 312, 315, 321, 324, 325, 337, 344, 349, 353, 356, 357, 360, 368, 372, 373, 374], "return": [2, 18, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 103, 105, 107, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 194, 195, 196, 197, 200, 201, 203, 204, 208, 210, 211, 212, 214, 216, 225, 226, 228, 229, 239, 243, 252, 253, 254, 255, 256, 257, 258, 267, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374], "rang": [2, 4, 5, 8, 38, 43, 70, 73, 142, 143, 144, 145, 147, 149, 151, 153, 157, 159, 305, 306, 340, 364], "next": [2, 5, 38, 43, 49, 50, 52, 54, 327], "specif": [2, 10, 173, 174, 186, 187, 215, 227, 248, 249, 276, 339, 363], "want": [2, 11, 52, 54, 89, 107], "choic": [2, 63, 149, 153, 163, 164, 166, 167], "crucial": 2, "hyperparamet": [2, 38, 43, 52, 54], "sinc": [2, 5, 6, 52, 54, 74, 80, 81, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 157, 159, 163, 164, 166, 167, 213, 240, 241, 242, 244, 247, 283, 284, 285, 288, 294, 295, 296], "directli": [2, 38, 43, 53, 62, 147, 151, 171], "affect": [2, 38, 43], "latent": [2, 53, 62, 210, 211, 212, 225, 226, 228, 243, 252, 253, 254, 255, 256], "structur": [2, 5, 38, 43, 82, 83], "might": [2, 38, 43, 49, 50, 52, 53, 54, 62, 148, 152], "overal": 2, "experi": [2, 10, 63, 64, 65, 66, 67, 169, 375], "5": [2, 4, 6, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 82, 83, 150, 154, 157, 159, 178, 184, 214, 215, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 248, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 294, 320, 337, 338, 354, 360, 361], "follow": [2, 18, 24, 29, 30, 34, 35, 52, 54, 56, 59, 63, 70, 73, 79, 82, 83, 157, 158, 159, 160], "origin": [2, 6, 52, 54, 149, 153, 157, 158, 159, 160, 163, 166, 171, 208, 302], "horizont": [2, 6], "flip": [2, 148, 150, 152, 154], "crop": [2, 149, 153, 162, 165], "resiz": [2, 10, 86, 149, 153, 164, 167, 169], "color": [2, 7, 10, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 169, 300, 301], "distort": 2, "grayscal": 2, "gaussian": [2, 53, 62, 70, 71, 73, 75, 142, 143, 144, 145, 149, 153, 163, 164, 166, 167, 175, 177, 181, 183, 199, 202, 203, 204], "blur": [2, 142, 144, 175, 181], "comparison": [2, 163, 164, 166, 167], "reduc": [2, 38, 43, 77, 112, 113, 127, 128, 173, 186, 212, 243, 315, 316, 318, 349, 350, 352], "effect": [2, 112, 113, 127, 128, 163, 166, 302], "jitter": 2, "slightli": 2, "instead": [2, 74, 77, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 302], "8": [2, 4, 6, 8, 9, 30, 34, 38, 43, 49, 50, 82, 83, 158, 160, 163, 164, 166, 167, 227, 241, 249, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 376], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 62, 74, 106, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 173, 186, 213, 240, 241, 242, 244, 247, 282, 283, 284, 285, 293, 294, 295, 296, 302], "wa": [2, 52, 54], "faster": [2, 327], "stabl": 2, "instanc": [2, 5, 29, 35, 38, 43, 53, 62, 74, 79, 106, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 172, 190, 191, 192, 213, 238, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "scale": [2, 6, 8, 17, 23, 30, 34, 38, 43, 49, 50, 69, 70, 71, 72, 73, 75, 147, 149, 151, 153, 157, 158, 159, 160, 170, 199, 202, 203, 204, 302, 311, 312, 315, 320, 324, 325, 338, 344, 349, 354, 356, 357, 361, 368, 373, 374], "highli": 2, "vari": 2, "benefici": [2, 49, 50], "t": [2, 6, 38, 43, 49, 50, 147, 149, 151, 153], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 17, 23, 30, 34, 52, 53, 54, 62, 69, 70, 71, 72, 73, 75, 80, 81, 86, 147, 149, 151, 153, 163, 164, 166, 167, 173, 174, 186, 187, 300, 301, 307, 309, 322, 337, 346, 360, 370], "contrast_transform": 2, "compos": [2, 63, 212, 243, 303, 337, 360], "randomhorizontalflip": 2, "randomresizedcrop": [2, 10, 86, 146, 149, 153, 169], "size": [2, 6, 7, 8, 52, 53, 54, 62, 71, 75, 110, 111, 112, 113, 114, 116, 127, 128, 142, 144, 147, 149, 151, 153, 157, 159, 162, 163, 165, 166, 173, 174, 176, 182, 186, 187, 188, 200, 201, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 284, 285, 288, 294, 295, 296, 317, 320, 338, 343, 345, 351, 354, 361, 367], "96": [2, 4, 285, 296, 308, 321], "randomappli": 2, "colorjitt": 2, "p": [2, 70, 73, 84, 86, 168], "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 284, 285, 295, 296], "9": [2, 4, 5, 9, 53, 62, 82, 83, 206, 207, 376], "totensor": 2, "normal": [2, 10, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 69, 72, 112, 113, 127, 128, 147, 151, 157, 158, 159, 160, 169, 170, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 302, 304, 353, 362], "after": [2, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 70, 73, 112, 113, 127, 128, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "discuss": 2, "techniqu": [2, 149, 153, 163, 164, 166, 167, 370], "now": [2, 5, 8, 52, 54, 112, 113, 127, 128, 157, 159, 257], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 15, 16, 17, 19, 21, 22, 23, 25, 30, 34, 53, 62, 69, 72, 82, 83, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 216, 227, 229, 249, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "airplan": 2, "bird": 2, "car": 2, "cat": [2, 29, 35], "deer": 2, "dog": [2, 29, 35], "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": [2, 38, 43], "resolut": [2, 112, 113, 127, 128, 157, 159, 200, 201, 215, 227, 248, 249], "pixel": 2, "500": 2, "per": [2, 19, 25, 27, 29, 30, 32, 34, 35, 112, 113, 127, 128, 142, 144, 148, 152, 157, 158, 159, 160], "addition": 2, "much": [2, 111, 116], "larger": [2, 52, 54], "100": [2, 4, 7, 8, 17, 23, 157, 159, 314, 317, 337, 338, 343, 346, 348, 351, 360, 361, 367], "unlabel": 2, "similar": [2, 5, 52, 53, 54, 62, 70, 71, 73, 75, 147, 151], "wider": [2, 52, 54], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": [2, 149, 153, 163, 164, 166, 167], "luckili": 2, "through": [2, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 39, 40, 41, 42, 44, 45, 46, 47, 56, 59], "keep": [2, 30, 34, 200, 201], "mind": 2, "rel": [2, 17, 23, 27, 28, 29, 31, 32, 33, 35, 147, 149, 151, 153], "larg": [2, 30, 34, 302], "ha": [2, 5, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 82, 83, 111, 112, 113, 116, 127, 128, 143, 145, 157, 158, 159, 160, 215, 227, 248, 249, 302], "consider": [2, 52, 54], "3gb": 2, "bit": [2, 53, 62], "time": [2, 4, 5, 6, 7, 8, 85, 147, 149, 151, 153, 344, 368], "For": [2, 15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 38, 43, 49, 50, 52, 54, 106, 157, 159, 163, 164, 166, 167, 257, 337, 360], "initi": [2, 30, 34, 53, 56, 57, 58, 59, 60, 61, 62, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "loader": [2, 8, 36], "abov": 2, "unlabeled_data": 2, "via": [2, 30, 34, 49, 50, 344, 368], "train_data_contrast": 2, "valid": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 67, 86, 103, 104, 105, 106, 169], "root": [2, 11, 16, 19, 22, 25, 27, 28, 30, 31, 32, 33, 34, 82, 83, 200, 201], "split": [2, 27, 28, 30, 31, 32, 33, 34, 52, 54, 200, 201], "pair": [2, 38, 43, 53, 62, 71, 75, 150, 154, 200, 201], "img": [2, 29, 35], "stack": [2, 18, 24], "idx": [2, 4, 7, 27, 28, 32, 33, 317, 337, 343, 351, 360, 367], "dim": [2, 8, 53, 62, 74, 163, 166, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 244, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "img_grid": 2, "make_grid": 2, "nrow": 2, "pad_valu": 2, "permut": [2, 5, 174, 187, 307, 309, 322], "figur": [2, 6, 300, 301], "figsiz": [2, 4, 5, 6, 7, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "titl": [2, 6, 97, 98], "imshow": [2, 6, 311, 373], "axi": [2, 6, 8, 148, 150, 152, 154, 162, 165, 300, 301, 302, 307, 318, 324, 331, 333, 337, 344, 352, 353, 356, 360, 368], "off": [2, 6], "And": 2, "associ": [2, 7, 30, 34, 49, 50, 53, 62, 71, 75, 304, 312, 318, 344, 352, 368, 374], "dataload": [2, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 54, 63], "batch_siz": [2, 8, 38, 43, 69, 71, 72, 75, 211, 225, 226, 228, 253, 254, 255, 256], "256": [2, 56, 59, 91, 210, 211, 225, 226, 252, 253, 254, 255], "train_load": 2, "shuffl": [2, 8, 38, 43], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 26, 37, 38, 43, 49, 50, 68, 108, 109, 171, 205, 209, 302], "resnet": [2, 10, 53, 62, 109, 112, 113, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 169], "18": [2, 4, 53, 62, 113, 123, 124, 128, 133, 134, 157, 159], "architectur": [2, 8, 10, 49, 50, 52, 53, 54, 62, 108, 109, 110, 111, 112, 113, 114, 116, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 209, 215, 216, 227, 228, 229, 247, 248, 249, 256, 258, 267], "f": [2, 6, 49, 50, 52, 54, 157, 159, 215, 227, 248, 249], "paper": [2, 52, 54, 111, 116], "g": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 57, 60, 62, 71, 75, 112, 113, 127, 128, 147, 151, 163, 166, 302], "layer": [2, 49, 50, 52, 53, 54, 56, 57, 59, 60, 62, 110, 111, 112, 113, 114, 116, 127, 128, 129, 130, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 247, 248, 249, 250, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298], "mlp": [2, 49, 50, 52, 53, 54, 56, 57, 59, 60, 62, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "relu": [2, 52, 53, 54, 56, 57, 59, 60, 62, 120, 215, 227, 245, 246, 247, 248, 249, 250, 251], "activ": [2, 52, 53, 54, 62, 210, 211, 215, 225, 226, 227, 228, 248, 249, 252, 253, 254, 255, 256], "hidden": [2, 52, 53, 54, 57, 60, 62, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "note": [2, 27, 28, 30, 31, 32, 33, 34, 38, 43, 49, 50, 52, 53, 54, 62, 63, 85, 103, 110, 114, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 327], "up": [2, 18, 24, 52, 54, 214, 215, 227, 239, 248, 249, 307, 309, 317, 322, 340, 351, 364], "simclrv2": [2, 52, 54], "author": [2, 52, 54, 63], "mention": [2, 52, 54], "boost": [2, 52, 54], "why": [2, 5], "four": 2, "dimens": [2, 5, 52, 53, 54, 62, 86, 142, 144, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 164, 165, 167, 212, 243, 257], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 82, 83, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 27, 28, 30, 31, 32, 33, 34, 49, 50, 52, 53, 54, 62, 89, 107, 171, 200, 201, 209, 213, 240, 303], "observ": 2, "u": [2, 6, 52, 54, 142, 143, 144, 145, 157, 159, 200, 201, 215, 227, 247, 248, 249], "compar": [2, 52, 54], "neg": 2, "lead": [2, 38, 43], "smoother": 2, "loss": [2, 8, 10, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 63, 69, 70, 71, 72, 73, 74, 75, 169, 206, 207, 208], "gradient": [2, 38, 43, 49, 50, 52, 53, 54, 62], "case": [2, 29, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 66, 67, 70, 73, 80, 81, 147, 148, 149, 150, 151, 152, 153, 154, 302], "experienc": 2, "good": [2, 149, 153, 163, 164, 166, 167], "result": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 80, 81, 82, 83, 96, 103, 163, 164, 166, 167, 276, 326], "hidden_dim": [2, 52, 54, 57, 58, 60, 61, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "128": [2, 53, 56, 57, 58, 59, 60, 61, 62, 110, 114, 163, 166, 210, 211, 225, 226, 252, 253, 254, 255], "encod": [2, 38, 43, 49, 50, 52, 53, 54, 62, 205, 209, 211, 215, 225, 226, 227, 228, 248, 249, 253, 254, 255, 256], "none": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 63, 66, 67, 71, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 106, 107, 112, 113, 125, 126, 127, 128, 148, 150, 152, 154, 157, 158, 159, 160, 163, 166, 168, 173, 175, 176, 178, 181, 182, 184, 186, 199, 200, 201, 202, 203, 204, 206, 207, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 247, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 285, 296, 300, 301, 302, 315, 316, 325, 327, 344, 346, 347, 349, 350, 357, 358, 368, 371], "num_class": [2, 49, 50, 229, 230, 231, 232, 233, 234, 235, 236, 237, 267, 268, 269, 270, 271, 272, 273, 274, 275], "4": [2, 4, 5, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 53, 62, 82, 83, 111, 112, 113, 116, 127, 128, 148, 150, 152, 154, 163, 164, 166, 167, 227, 238, 249, 279, 280, 281, 282, 285, 286, 287, 290, 291, 292, 293, 296, 297, 298, 307, 309, 312, 315, 316, 322, 325, 340, 349, 350, 357, 364, 370, 374], "latent_s": [2, 49, 50, 52, 54], "fc": [2, 49, 50], "out_featur": [2, 56, 59], "ident": [2, 10, 12, 38, 43, 84, 112, 113, 127, 128, 148, 150, 152, 154, 163, 166, 169], "save_weights_onli": 2, "mode": [2, 11, 38, 43, 49, 50, 52, 53, 54, 62, 63, 70, 73, 162, 165, 245, 302], "max": [2, 147, 151, 157, 159, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 245, 246, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 282, 292, 293], "monitor": [2, 38, 43, 53, 62], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 18, 24, 38, 43, 49, 50, 53, 62], "trainer_param": [2, 38, 43], "default_root_dir": 2, "acceler": [2, 38, 43, 49, 50], "max_epoch": [2, 38, 43, 49, 50, 52, 53, 54, 62], "lr": [2, 8, 49, 50, 52, 53, 54, 62, 148, 150, 152, 154], "5e": [2, 53, 62], "temperatur": [2, 49, 50, 52, 53, 54, 62, 69, 71, 72, 75, 213, 240], "07": 2, "weight_decai": [2, 8, 49, 50, 52, 53, 54, 62], "1e": [2, 8, 17, 23, 53, 62, 158, 160, 307, 312, 374], "random_st": [2, 38, 43, 49, 50, 52, 54], "42": [2, 4, 6, 8, 82, 83, 311, 312, 315, 324, 325, 344, 349, 356, 357, 368, 373, 374], "print": [2, 4, 5, 6, 8, 29, 30, 34, 35, 82, 83, 87, 91, 105, 163, 166, 214, 216, 228, 229, 239, 256, 258, 267, 323, 336, 339, 340, 341, 342, 355, 359, 363, 364, 365, 366], "found": [2, 5, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 53, 62, 106], "pretrain": [2, 52, 54], "weight_fil": [2, 89, 107], "fitted_": 2, "fit": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 53, 62, 70, 73, 106, 302], "deploi": [2, 49, 50], "downstream": [2, 49, 50, 52, 54], "task": [2, 29, 35, 49, 50, 52, 54, 77, 78, 112, 113, 127, 128], "see": [2, 27, 28, 31, 32, 33, 49, 50, 52, 53, 54, 62, 63, 69, 71, 72, 75, 103, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 162, 163, 164, 165, 166, 167, 178, 184, 200, 201, 302, 331, 333], "well": [2, 38, 43, 49, 50, 52, 54, 71, 75, 148, 150, 152, 154], "littl": [2, 49, 50], "verifi": [2, 49, 50, 86, 106], "whether": [2, 18, 24, 38, 43, 49, 50, 86, 89, 107], "represent": [2, 30, 34, 49, 50, 52, 53, 54, 62, 110, 114, 178, 184, 209, 213, 225, 226, 228, 240, 254, 255, 256, 302, 318, 344, 352, 368, 370], "featur": [2, 10, 17, 18, 23, 24, 30, 34, 49, 50, 52, 53, 54, 62, 71, 75, 111, 112, 113, 116, 127, 128, 198, 215, 227, 245, 246, 247, 248, 249, 250, 251, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 302], "word": [2, 49, 50], "singl": [2, 27, 29, 30, 32, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 85, 375], "map": [2, 5, 6, 28, 30, 33, 34, 38, 43, 49, 50, 52, 53, 54, 62, 112, 113, 127, 128, 163, 164, 166, 167, 284, 285, 288, 295, 296, 300, 301, 309, 322, 343, 367], "predict": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 34, 38, 43, 49, 50, 56, 59, 80, 81, 212, 216, 229, 243, 258, 267], "base": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 88, 89, 90, 91, 103, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 307, 326, 327, 337, 338, 343, 360, 361, 367], "network": [2, 52, 53, 54, 62, 147, 151, 209, 210, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "chang": [2, 29, 35, 53, 62, 86, 163, 166, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302], "dure": [2, 30, 34, 38, 43, 49, 50, 149, 153, 163, 164, 166, 167, 176, 182], "process": [2, 11, 38, 43, 49, 50, 214, 239], "h": [2, 52, 54, 57, 60, 70, 71, 73, 75, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 208, 257], "necessari": 2, "further": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "worri": 2, "too": [2, 30, 34, 302], "about": [2, 63, 344, 368], "veri": [2, 5, 49, 50, 147, 151, 163, 164, 166, 167], "few": 2, "henc": 2, "expect": [2, 8, 27, 28, 30, 31, 32, 33, 34, 53, 62, 63, 149, 153, 162, 165, 200, 201], "even": [2, 89, 107], "assum": [2, 29, 35, 49, 50, 148, 150, 152, 154, 163, 166, 173, 174, 186, 187, 307], "alreadi": [2, 30, 34, 85, 86, 89, 107], "been": [2, 30, 34, 38, 43, 49, 50, 52, 53, 54, 62], "vector": [2, 17, 23, 30, 34, 52, 53, 54, 62, 71, 75, 337, 360], "dynam": [2, 49, 50, 63, 65, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "so": [2, 5, 49, 50, 112, 113, 127, 128], "here": [2, 5, 38, 43, 49, 50, 52, 54, 63, 85, 331, 333], "within": [2, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "second": [2, 4, 5, 6, 7, 8, 53, 56, 59, 62, 69, 71, 72, 75, 80, 81], "did": [2, 5], "ani": [2, 29, 30, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 62, 79, 84, 85, 86, 143, 145, 147, 149, 151, 153, 157, 159, 200, 201, 323, 355], "signific": [2, 38, 43], "gain": 2, "test": [2, 5, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 38, 43], "while": [2, 5, 38, 43, 49, 50, 52, 53, 54, 62, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 157, 159, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "800": 2, "64": [2, 4, 38, 43, 82, 83, 111, 112, 113, 116, 125, 126, 127, 128, 150, 154, 157, 159, 163, 166, 210, 211, 212, 225, 226, 228, 241, 243, 252, 253, 254, 255, 256], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 30, 34, 38, 43, 49, 50, 53, 62, 71, 75, 80, 81, 82, 83, 85, 110, 111, 112, 113, 114, 116, 127, 128, 147, 151, 173, 176, 182, 185, 186, 191, 192, 195, 199, 202, 203, 204, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289, 300, 301, 311, 315, 316, 325, 336, 339, 340, 341, 343, 349, 350, 357, 359, 363, 364, 365, 367, 373], "len": [2, 4, 5, 6, 8, 227, 228, 229, 249, 256, 267, 278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 317, 336, 341, 351, 359, 365], "froozen": 2, "e": [2, 6, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 66, 70, 71, 73, 75, 80, 81, 85, 111, 112, 113, 116, 127, 128, 147, 151, 163, 166, 302, 311, 373], "output": [2, 18, 24, 38, 43, 49, 50, 53, 62, 63, 66, 77, 78, 80, 81, 82, 83, 84, 86, 88, 90, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 175, 176, 181, 182, 210, 212, 215, 227, 243, 245, 246, 247, 248, 249, 250, 251, 252, 257, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 326, 327], "new_model": 2, "sequenti": [2, 49, 50, 56, 59, 118, 119, 337, 360], "normal_": 2, "mean": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 54, 67, 82, 83, 143, 145, 147, 149, 151, 153, 158, 160, 162, 165, 212, 227, 243, 245, 249, 282, 293, 302, 324, 356], "std": [2, 143, 145, 158, 160, 302], "01": 2, "bia": [2, 56, 59, 278, 289], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 30, 34, 110, 114, 227, 249], "evalu": [2, 6, 70, 73, 288], "everi": [2, 38, 43, 52, 53, 54, 62, 74, 86, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 314, 348], "earli": [2, 38, 43], "stop": [2, 38, 43, 53, 62, 337, 360], "low": [2, 30, 34, 53, 62, 191], "frequenc": [2, 53, 62], "ensur": [2, 78, 196], "despit": 2, "thei": [2, 5, 8, 30, 34, 88, 90], "smaller": [2, 17, 23], "20": [2, 4, 6, 7, 8, 157, 159, 173, 186], "50": [2, 4, 135, 136, 137, 138], "200": 2, "give": [2, 10, 38, 43, 163, 164, 166, 167], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 15, 16, 17, 21, 22, 23, 38, 43, 49, 50, 52, 53, 54, 62, 63, 77, 78, 80, 81, 82, 83, 112, 113, 127, 128, 247, 302, 303], "classif": [2, 6, 8, 15, 17, 18, 21, 23, 24, 38, 43, 53, 62, 71, 75, 199, 202, 203, 204, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "test_load": 2, "val_acc": 2, "check_val_every_n_epoch": [2, 38, 43, 53, 62], "3": [2, 4, 5, 7, 8, 9, 18, 24, 53, 62, 63, 82, 83, 88, 90, 103, 111, 112, 113, 116, 127, 128, 142, 144, 147, 151, 163, 164, 166, 167, 175, 176, 178, 181, 182, 184, 199, 200, 201, 202, 203, 204, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 238, 239, 248, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 329, 330, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 373, 374, 376], "pred": [2, 8, 49, 50], "shape": [2, 5, 6, 8, 15, 16, 17, 21, 22, 23, 30, 34, 53, 62, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 216, 227, 228, 229, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 323, 324, 339, 355, 356, 363], "acc": [2, 38, 43], "argmax": [2, 8], "float": [2, 4, 8, 17, 19, 23, 25, 30, 34, 38, 43, 49, 50, 52, 53, 54, 62, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 168, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 190, 195, 206, 207, 212, 243, 247, 300, 301, 305, 306, 307, 310, 312, 372, 374], "accuraci": [2, 8, 15, 17, 21, 23, 38, 43, 49, 50, 52, 54], "2f": 2, "_pretrained_filenam": 2, "path": [2, 27, 28, 29, 30, 32, 33, 34, 35, 36, 63, 89, 107, 175, 176, 181, 182, 215, 227, 248, 249, 327, 328, 332, 334, 335, 337, 346, 347, 360], "join": 2, "isfil": 2, "save": [2, 63, 334, 335], "state_dict": 2, "one": [2, 5, 29, 35, 52, 53, 54, 56, 57, 59, 60, 62, 63, 74, 77, 78, 82, 83, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 142, 144, 147, 149, 151, 153, 163, 166, 176, 182, 189, 197, 210, 213, 240, 241, 242, 244, 247, 252, 283, 284, 285, 294, 295, 296, 312, 374], "would": [2, 52, 54, 82, 83], "improv": [2, 112, 113, 127, 128, 147, 151], "classifi": [2, 15, 21, 39, 44], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 27, 28, 29, 31, 32, 33, 35, 49, 50, 176, 182, 200, 201, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289], "dimension": [2, 52, 53, 54, 62], "With": 2, "achiev": 2, "80": [2, 4, 82, 83], "increas": [2, 325, 357], "suggest": 2, "exponenti": [2, 53, 62, 70, 71, 73, 75], "could": [2, 5, 52, 53, 54, 62, 148, 150, 152, 154], "finetun": [2, 52, 54], "adapt": [2, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 176, 182, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "indic": [2, 30, 34, 38, 43, 53, 62, 80, 81, 148, 152, 173, 186, 245, 250, 278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 307, 315, 316, 317, 318, 324, 325, 337, 343, 349, 350, 351, 352, 356, 357, 360, 367, 369], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "clear": [2, 18, 24], "its": [2, 30, 34, 53, 62, 84, 86, 100, 101, 112, 113, 127, 128, 157, 159, 163, 166, 327, 337, 360], "count": 2, "1000": [2, 38, 43], "fair": 2, "ones": [2, 53, 62], "becaus": [2, 5, 52, 54, 302], "distribut": [2, 38, 43, 52, 54, 143, 145, 147, 151, 211, 228, 253, 256], "notic": 2, "ad": [2, 158, 160, 215, 227, 248, 249], "restrict": 2, "oper": [2, 38, 43, 49, 50, 52, 54, 247, 302], "125": 2, "1250": 2, "done": [2, 38, 43, 327], "recogn": 2, "object": [2, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 63, 66, 88, 89, 90, 91, 103, 105, 107, 172, 185, 190, 191, 195, 206, 207, 300, 301, 302, 303, 326, 327], "check": [2, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 29, 32, 35, 38, 43, 63, 76, 77, 84, 85, 86, 103, 104, 105, 106, 148, 149, 152, 153, 163, 166, 168], "patch": [2, 52, 54, 176, 182, 200, 201, 212, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 338, 343, 345, 361, 367], "belong": [2, 77], "chosen": [2, 17, 23, 38, 43], "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 65, 66, 67, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 157, 158, 159, 160, 169, 171, 175, 176, 178, 180, 181, 182, 184, 185, 189, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 208, 209, 210, 211, 213, 215, 225, 226, 227, 240, 241, 242, 244, 247, 248, 249, 252, 253, 254, 255, 257, 276, 283, 284, 285, 288, 294, 295, 296, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "almost": [2, 6, 158, 160], "strongli": 2, "iter": [2, 17, 23, 38, 43, 49, 50, 52, 54, 257], "train_transform": 2, "sigma": [2, 4, 53, 57, 60, 62, 71, 75, 142, 143, 144, 145, 158, 160, 163, 164, 166, 167, 175, 176, 177, 181, 182, 183], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 30, 34, 82, 83, 112, 113, 127, 128, 337, 360], "less": 2, "leverag": [2, 53, 62], "amount": 2, "generaliz": 2, "sole": [2, 38, 43], "par": 2, "tenth": 2, "experiment": [2, 63], "limit": 2, "recent": 2, "work": [2, 5, 27, 29, 32, 35, 53, 62, 63, 163, 166, 175, 176, 181, 182, 257, 302], "ting": [2, 213, 240], "chen": [2, 69, 72, 213, 240], "et": [2, 52, 53, 54, 62, 69, 72, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 157, 159, 163, 164, 166, 167, 212, 215, 227, 243, 248, 249], "al": [2, 52, 53, 54, 62, 69, 72, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 157, 159, 163, 164, 166, 167, 212, 215, 227, 243, 248, 249], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": [2, 17, 23], "come": [2, 52, 54], "close": [2, 5, 53, 62], "approach": [2, 11], "combin": [2, 173, 186], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 30, 34, 112, 113, 127, 128, 210, 252], "year": [2, 30, 34], "great": [2, 52, 54], "includ": [2, 10, 16, 19, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 54, 86, 198, 200, 201], "distil": 2, "byol": 2, "redund": [2, 77], "reduct": [2, 38, 43], "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4, 30, 34], "step": [2, 8, 18, 24, 38, 43, 49, 50, 52, 53, 54, 62, 215, 227, 248, 249], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 18, 24, 28, 33, 111, 116, 148, 152, 302, 327], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 331, 333], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8, 30, 34], "c": [4, 5, 7, 17, 23, 30, 34, 88, 90, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 208, 314, 317, 337, 338, 348, 351, 360, 361], "ambrois": [4, 5, 30, 34], "numpi": [4, 5, 6, 8, 18, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 53, 62, 76, 86, 157, 159, 162, 163, 165, 166, 168, 302, 305, 306, 310, 372], "np": [4, 5, 6, 8, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 308, 321, 324, 356], "surfifi": [4, 5, 6, 7, 8, 9, 10, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376], "min_depth_to_get_n_neighbor": [4, 10, 169, 304, 336, 359], "plot": [4, 5, 6, 7, 8, 10, 169, 300, 301, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "plot_trisurf": [4, 5, 6, 7, 8, 10, 169, 299, 300, 301, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 337, 338, 343, 344, 348, 349, 350, 351, 355, 356, 357, 360, 361, 367, 368, 373, 374], "interv": [4, 10, 53, 62, 169, 171, 185, 188, 191, 195], "vertic": [4, 5, 7, 30, 34, 173, 174, 175, 176, 178, 181, 182, 184, 186, 187, 199, 202, 203, 204, 212, 227, 238, 243, 249, 278, 279, 289, 290, 300, 301, 302, 308, 309, 311, 312, 314, 315, 316, 318, 321, 322, 323, 324, 325, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 373, 374], "triangl": [4, 5, 7, 175, 176, 178, 181, 182, 184, 227, 238, 249, 300, 301, 308, 309, 312, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 329, 330, 334, 335, 337, 338, 342, 343, 344, 345, 348, 349, 350, 351, 352, 355, 356, 357, 360, 361, 366, 367, 368, 369, 370, 374], "order": [4, 5, 6, 7, 8, 38, 43, 53, 62, 63, 82, 83, 85, 148, 152, 163, 164, 166, 167, 175, 176, 181, 182, 200, 201, 210, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 252, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 300, 301, 303, 307, 308, 309, 311, 312, 314, 315, 316, 317, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 374], "neigh": [4, 7, 175, 176, 181, 182, 283, 294, 317, 318, 337, 338, 344, 345, 351, 352, 360, 361, 368], "direct_neighbor": [4, 7, 278, 280, 281, 282, 286, 289, 291, 292, 293, 297, 317, 337, 343, 345, 351, 360, 367], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 63, 82, 83, 95, 102, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 313], "aug": 4, "add_axi": 4, "alpha": [4, 5, 16, 19, 22, 25, 163, 164, 166, 167, 300, 301, 305, 306, 309, 310, 322, 372], "arg": [4, 85, 86, 113, 128, 180, 194, 228, 256, 302], "kwarg": [4, 15, 16, 17, 19, 21, 22, 23, 25, 38, 43, 49, 50, 52, 53, 54, 62, 84, 85, 86, 88, 90, 113, 115, 121, 122, 123, 124, 128, 129, 130, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 180, 194, 228, 256, 302], "data": [4, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 70, 71, 73, 75, 77, 78, 79, 80, 81, 84, 85, 86, 89, 107, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 193, 194, 195, 196, 197, 198, 200, 201, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 302, 308, 311, 314, 315, 321, 324, 325, 327, 328, 331, 333, 344, 346, 347, 348, 349, 356, 357, 368, 373], "fig": [4, 5, 7, 300, 301, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "ax": [4, 5, 6, 7, 148, 150, 152, 154, 285, 296, 300, 301, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "subplot": [4, 5, 7, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "subplot_kw": [4, 5, 7, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "3d": [4, 5, 7, 29, 30, 34, 35, 53, 62, 71, 75, 86, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 309, 314, 317, 320, 322, 323, 337, 338, 343, 348, 351, 354, 355, 360, 361, 367], "aspect": [4, 5, 7, 147, 149, 151, 153, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "auto": [4, 5, 7, 38, 43, 63, 67, 205, 209, 309, 314, 317, 322, 323, 337, 338, 343, 348, 351, 355, 360, 361, 367], "flatten": [4, 6, 212, 243, 288], "colorbar": [4, 7, 300, 301, 309, 314, 316, 317, 322, 323, 337, 338, 343, 348, 350, 351, 355, 360, 361, 367], "edgecolor": [4, 5, 300, 301, 309, 322], "white": [4, 177, 183], "linewidth": [4, 7, 300, 301], "red": [4, 7, 314, 317, 337, 338, 348, 351, 360, 361], "blue": [4, 5, 7, 309, 317, 322, 337, 338, 351, 360, 361], "green": [4, 5, 7, 309, 322], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 53, 62, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 148, 152, 157, 158, 159, 160, 163, 166, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 194, 196, 199, 200, 201, 202, 203, 204, 245, 250, 278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298, 300, 301, 302, 307, 308, 309, 311, 312, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 334, 335, 337, 338, 342, 343, 344, 348, 349, 350, 352, 353, 354, 355, 356, 357, 360, 361, 366, 367, 368, 369, 370, 373, 374], "patch_siz": [4, 176, 182], "int": [4, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 32, 34, 38, 43, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 73, 75, 82, 83, 85, 86, 110, 111, 112, 113, 114, 116, 124, 127, 128, 129, 130, 134, 136, 138, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 181, 182, 185, 186, 187, 188, 195, 199, 200, 201, 202, 203, 204, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 307, 308, 311, 315, 316, 317, 320, 321, 323, 325, 336, 337, 338, 339, 340, 341, 343, 349, 350, 351, 354, 355, 357, 359, 360, 361, 363, 364, 365, 367, 369, 373], "n_patch": [4, 176, 182, 212, 243], "uniform": [4, 53, 62, 80, 81, 82, 83], "phi": [4, 178, 184], "180": 4, "theta": [4, 178, 184], "psi": [4, 178, 184], "controlateral_textur": 4, "prob": [4, 173, 174, 186, 187, 188], "n_vertic": [4, 6, 8, 173, 174, 186, 187, 188, 203, 204, 212, 225, 226, 228, 243, 254, 255, 256, 302, 315, 325, 336, 339, 340, 341, 344, 349, 357, 359, 363, 364, 365, 368], "controlateral_data": [4, 174, 187], "group_textur": 4, "group_data": [4, 173, 186], "n_sampl": [4, 6, 8, 15, 16, 17, 21, 22, 23, 70, 73, 77, 78, 80, 81, 82, 83, 173, 186, 199, 202, 203, 204, 212, 243, 311, 312, 314, 315, 324, 325, 344, 348, 349, 356, 357, 368, 373, 374], "neigh_ind": [4, 173, 186], "groupbi": [4, 173, 186], "n_neighbor": [4, 15, 16, 21, 22, 173, 186], "n_compon": [4, 173, 186], "30": [4, 8, 29, 35, 173, 186], "58": 4, "74": [4, 30, 34, 82, 83], "49": 4, "62": 4, "47": 4, "15": [4, 8, 82, 83], "99": [4, 8, 53, 62, 157, 159], "92": [4, 82, 83], "54": 4, "65": [4, 6, 82, 83], "31": 4, "14": 4, "78": 4, "90": [4, 6, 82, 83, 150, 154], "76": 4, "93": [4, 30, 34], "21": [4, 82, 83], "70": 4, "22": 4, "46": 4, "89": [4, 9, 376], "25": [4, 8, 29, 35, 82, 83], "82": 4, "11": [4, 5, 9, 376], "59": 4, "56": 4, "12": [4, 5, 111, 116, 337, 360], "19": [4, 30, 34], "13": [4, 7], "23": 4, "28": 4, "51": 4, "79": 4, "16": [4, 38, 43, 53, 62, 111, 116, 284, 285, 295, 296], "17": 4, "77": 4, "88": [4, 30, 34], "52": 4, "95": [4, 71, 75, 82, 83], "48": 4, "72": 4, "66": 4, "24": [4, 5, 9, 111, 116, 376], "69": 4, "86": [4, 157, 159], "26": [4, 82, 83], "27": [4, 82, 83], "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 38, 43, 111, 116, 215, 227, 228, 247, 248, 249, 256], "33": [4, 147, 149, 151, 153], "34": [4, 30, 34, 82, 83], "39": 4, "35": [4, 8], "37": 4, "38": [4, 30, 34], "45": [4, 344, 368], "71": 4, "40": [4, 6, 7, 8, 199, 202, 203, 204], "41": 4, "81": 4, "43": 4, "44": [4, 82, 83], "87": 4, "98": 4, "97": 4, "53": 4, "68": [4, 30, 34, 82, 83], "55": [4, 82, 83], "57": 4, "61": [4, 82, 83], "94": [4, 71, 75], "67": [4, 5, 9, 376], "75": [4, 82, 83, 149, 153], "84": 4, "85": [4, 82, 83], "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 30, 34, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 172, 179, 190, 193, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "probabl": [4, 30, 34, 70, 73, 86, 148, 150, 152, 154, 172, 173, 174, 186, 187, 188, 190, 192, 303], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "091": [4, 9, 376], "109": [4, 9, 376], "plot_augment": [4, 9, 376], "math": [5, 57, 60, 70, 73, 157, 159], "warn": [5, 30, 34, 38, 43, 53, 62, 63, 99], "scipi": [5, 70, 73, 302, 309, 322], "spatial": [5, 10, 86, 112, 113, 127, 128, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 309, 322], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 300, 301], "ico2ico": [5, 10, 169, 304, 309, 312, 322, 374], "build": [5, 7, 53, 62, 63, 82, 83, 175, 176, 181, 182, 185, 195, 214, 239, 302, 337, 338, 343, 345, 346, 347, 358, 360, 361, 367, 370], "refer": [5, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 309, 312, 322, 323, 343, 355, 367, 374], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 30, 34, 63, 198, 346, 347], "freesurf": [5, 30, 34, 214, 239, 329, 334, 343, 346, 367], "try": [5, 15, 16, 19, 21, 22, 25, 302], "find": [5, 15, 16, 17, 19, 21, 22, 23, 25, 63, 79, 307, 309, 314, 317, 322, 324, 348, 351, 356, 358], "optim": [5, 8, 17, 23, 38, 43, 49, 50, 52, 53, 54, 62, 63], "rotat": [5, 150, 154, 178, 184, 309, 318, 322, 344, 352, 368], "modul": [5, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 71, 72, 74, 75, 86, 89, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 129, 130, 169, 170, 171, 175, 181, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "rmse": [5, 82, 83], "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 18, 24, 52, 54, 76, 302], "suppos": 5, "equal": [5, 53, 62, 70, 71, 73, 75, 80, 81, 142, 144, 147, 151], "zero": [5, 6, 29, 35, 52, 54, 80, 81, 112, 113, 127, 128, 176, 182, 216, 227, 228, 229, 249, 250, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 308, 321], "issu": [5, 66], "matric": [5, 302], "That": 5, "previou": 5, "algorithm": [5, 17, 23], "properli": 5, "correspond": [5, 15, 16, 18, 19, 21, 22, 24, 25, 30, 34, 53, 62, 77, 78, 148, 152, 173, 174, 186, 187, 307, 312, 339, 363, 374], "row": [5, 175, 176, 181, 182, 337, 360], "matrix": [5, 15, 16, 17, 21, 22, 23, 53, 62, 70, 71, 73, 75, 148, 150, 152, 154, 163, 166, 173, 186, 302], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": 5, "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 277, 304], "togeth": [5, 303], "place": [5, 67], "comput": [5, 18, 19, 24, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 69, 70, 71, 72, 73, 74, 75, 79, 82, 83, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 157, 158, 159, 160, 208, 213, 240, 241, 242, 244, 247, 257, 283, 284, 285, 294, 295, 296, 302, 318, 327, 344, 352, 353, 368], "small": [5, 30, 34, 52, 53, 54, 62, 110, 114, 158, 160], "subset": [5, 200, 201], "point": [5, 7, 78, 79, 82, 83, 314, 317, 320, 324, 337, 338, 343, 348, 351, 353, 354, 356, 358, 360, 361, 367], "both": [5, 30, 34, 38, 43, 52, 54, 56, 57, 58, 59, 60, 61, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 213, 240, 241, 242, 244, 285, 296, 337, 360], "absolut": [5, 16, 19, 22, 25, 63, 66, 82, 83], "valu": [5, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 52, 53, 54, 62, 63, 71, 75, 77, 78, 82, 83, 86, 88, 90, 103, 105, 142, 143, 144, 145, 147, 151, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 175, 176, 181, 182, 200, 201, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 300, 301, 305, 306, 307, 324, 337, 356, 360], "sign": [5, 309, 322], "vertices_of_interest_norm": 5, "search": [5, 317, 337, 351, 360], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 57, 58, 60, 61, 112, 113, 127, 128, 147, 151], "sum": [5, 8], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 38, 43, 49, 50, 52, 54, 89, 107, 162, 165], "depend": [5, 30, 34, 53, 62, 86], "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 38, 43, 53, 62, 74, 82, 83, 84, 85, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 148, 150, 152, 154, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 302], "categori": 5, "userwarn": [5, 27, 28, 31, 32, 33], "format": [5, 8, 14, 20, 82, 83, 86, 148, 150, 152, 154, 163, 166, 313, 329, 330, 334, 335], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 53, 62, 82, 83, 376], "simpli": [5, 53, 62], "solv": 5, "outlin": 5, "proper": [5, 27, 28, 29, 32, 33, 35], "anoth": 5, "half": 5, "clearli": 5, "appear": [5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": [5, 30, 34], "coord": [5, 10, 169, 306, 307, 308, 309, 310, 311, 312], "246": 5, "closest": [5, 318, 352], "9190925817849288": 5, "129": [5, 9, 376], "plot_match_icosahedron": [5, 9, 376], "convert": [6, 78, 163, 166, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 248, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 308, 311, 321, 373], "onto": [6, 212, 243, 311, 312, 373, 374], "spheric": [6, 9, 205, 206, 207, 209, 214, 215, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 246, 248, 249, 250, 251, 256, 258, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 284, 285, 288, 295, 296, 304, 305, 306, 308, 310, 311, 320, 321, 337, 354, 360, 372, 373, 376], "evenli": [6, 311, 373], "resampl": [6, 10, 86, 149, 153, 163, 164, 166, 167, 169, 311, 373], "respect": [6, 149, 153, 163, 166, 288, 311, 373], "sin": [6, 311, 373], "elev": [6, 206, 207, 210, 211, 216, 228, 229, 252, 253, 256, 258, 267, 288, 305, 306, 310, 311, 372, 373], "azimuth": [6, 206, 207, 210, 211, 216, 228, 229, 252, 253, 256, 258, 267, 288, 305, 306, 310, 311, 372, 373], "vice": 6, "versa": 6, "dataset": [6, 10, 15, 16, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 63, 169, 199, 200, 201, 202, 203, 204, 299, 311, 312, 315, 324, 325, 344, 349, 356, 357, 368, 373, 374], "ico_ord": [6, 8, 175, 176, 181, 182, 200, 201], "n_class": [6, 8, 199, 202, 203, 204, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 311, 312, 315, 324, 325, 344, 349, 356, 357, 368, 373, 374], "ico_vertic": [6, 8, 199, 202, 203, 204], "ico_triangl": [6, 8], "_": [6, 29, 35, 52, 54, 70, 73, 281, 282, 292, 293, 303, 331, 333], "make_classif": [6, 8, 10, 169, 198, 203, 204, 311, 312, 315, 324, 325, 344, 349, 356, 357, 368, 373, 374], "seed": [6, 8, 49, 50, 52, 54, 199, 202, 203, 204, 311, 312, 315, 324, 325, 344, 349, 356, 357, 368, 373, 374], "proj_textur": 6, "text2grid": [6, 10, 169, 304, 305, 306, 308, 310, 311, 321, 372, 373], "proj": [6, 308, 311, 321, 373], "lower": [6, 149, 153, 315, 346, 349], "nearest": [6, 15, 16, 21, 22, 149, 153, 163, 164, 166, 167, 173, 186, 227, 249, 250, 308, 311, 314, 321, 324, 348, 356, 373], "192": [6, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 248, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 308, 311, 321, 373], "text": [6, 7, 52, 54, 70, 71, 73, 75, 82, 83, 87, 95, 100, 101, 102, 157, 159], "grid2text": [6, 10, 169, 304, 305, 306, 308, 310, 311, 321, 372, 373], "is_label": [6, 8, 300, 301, 308, 312, 315, 321, 324, 325, 344, 349, 356, 357, 368, 374], "enabl": [6, 30, 34, 38, 43, 49, 50, 52, 54, 63, 88, 90], "scatter_dens": 6, "y": [6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 35, 53, 62, 71, 75, 147, 148, 151, 152, 203, 204, 302, 305, 306, 308, 310, 311, 312, 315, 321, 324, 325, 344, 349, 356, 357, 368, 372, 373, 374], "labelx": 6, "labe": 6, "scatter": [6, 7, 314, 317, 337, 338, 343, 348, 351, 360, 361, 367], "densiti": [6, 70, 73, 320, 338, 354, 361], "left": [6, 30, 34, 52, 54, 70, 71, 73, 75, 148, 150, 152, 154, 157, 159, 206, 207, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 328], "width": [6, 112, 113, 127, 128, 300, 301], "bottom": 6, "height": [6, 257], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 52, 54, 163, 166, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289, 311, 337, 360, 373], "top": [6, 15, 16, 17, 19, 21, 22, 23, 25, 52, 54], "right": [6, 30, 34, 52, 54, 70, 71, 73, 75, 148, 150, 152, 154, 157, 159, 206, 207, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 328], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": [6, 148, 150, 152, 154, 163, 166], "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 305, 306, 310, 372], "cart2sph": [6, 10, 169, 304, 305, 306, 310, 372], "sin_elev": 6, "circularli": [6, 288], "continu": [6, 53, 62, 71, 75, 77, 78, 288], "circular": [6, 284, 285, 288, 295, 296], "pad": [6, 132, 162, 165, 227, 249, 250, 279, 284, 285, 288, 290, 295, 296], "boundari": [6, 288], "expand_dim": 6, "astyp": [6, 163, 166], "float32": [6, 163, 166], "from_numpi": [6, 163, 166], "pad_textur": 6, "circular_pad": [6, 10, 169, 277, 288], "padd": 6, "conv": [6, 112, 113, 120, 127, 128, 215, 227, 245, 246, 247, 248, 249, 250, 251, 278, 289], "conv2d": [6, 257], "in_channel": [6, 8, 53, 62, 110, 111, 112, 113, 114, 116, 127, 128, 215, 227, 247, 248, 249], "out_channel": [6, 8, 215, 227, 247, 248, 249], "stride": [6, 112, 113, 125, 126, 127, 128, 131, 132, 284, 285, 295, 296], "conv_textur": 6, "194": [6, 9, 216, 217, 218, 219, 220, 221, 222, 223, 224, 258, 259, 260, 261, 262, 263, 264, 265, 266, 284, 295, 376], "045": [6, 9, 376], "plot_project_textur": [6, 9, 376], "get_rectangular_project": [7, 10, 169, 304, 320, 354], "depth": [7, 8, 30, 34, 113, 124, 128, 130, 134, 136, 138, 212, 215, 227, 243, 244, 247, 248, 249, 278, 280, 281, 282, 286, 289, 291, 292, 293, 297, 317, 336, 337, 340, 351, 359, 360, 364], "vidx": 7, "cnt": [7, 314, 317, 337, 338, 343, 348, 351, 360, 361, 367], "enumer": [7, 8, 314, 317, 337, 338, 343, 348, 351, 360, 361, 367], "marker": [7, 314, 317, 337, 338, 343, 348, 351, 360, 361, 367], "str": [7, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 66, 70, 71, 73, 75, 77, 82, 83, 89, 104, 106, 107, 129, 130, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 173, 175, 176, 178, 181, 182, 184, 186, 200, 201, 210, 211, 212, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 249, 250, 252, 253, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 293, 302, 313, 318, 327, 328, 329, 330, 332, 334, 335, 344, 346, 347, 352, 368, 371], "3x3": [7, 112, 113, 127, 128, 132, 215, 227, 248, 249], "rectangular": [7, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 320, 338, 354, 361], "sphere": [7, 245, 250, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 320, 338, 342, 353, 354, 358, 361, 362, 366], "zoom": [7, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 294, 317, 320, 338, 351, 354, 361], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": [7, 30, 34], "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 38, 43, 176, 182, 278, 289, 317, 320, 351, 354, 370], "node_rec_neigh": 7, "node_tplane_neigh": 7, "398": [7, 9, 376], "195": 7, "plot_spherical_neighbor": [7, 9, 376], "sphericalunet": [8, 10, 169, 209, 215, 227, 247, 248, 249], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 30, 34, 169, 170, 171, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 243, 248, 249, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 300, 301, 308, 311, 321, 328, 329, 330, 331, 334, 335, 337, 360, 373, 375], "crossentropi": 8, "sgd": [8, 53, 62], "obviou": 8, "classificationdataset": [8, 10, 169, 198, 199, 202], "in_ord": [8, 227, 249], "start_filt": [8, 215, 227, 248, 249], "conv_mod": [8, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "dine": [8, 175, 176, 181, 182, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289, 337, 360], "dine_s": [8, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "up_mod": [8, 227, 249, 250], "transpos": [8, 215, 227, 248, 249, 250, 280, 285, 286, 291, 296, 297], "loss_fn": 8, "crossentropyloss": 8, "momentum": [8, 53, 62], "n_batch": 8, "zero_grad": 8, "backward": [8, 53, 62, 77, 78], "current": [8, 30, 34, 38, 43, 49, 50, 52, 53, 54, 62, 64, 65, 67, 86, 148, 152], "item": [8, 29, 35, 327], "7f": 8, "5d": 8, "eval": [8, 38, 43, 49, 50, 52, 54], "test_loss": 8, "correct": [8, 77, 78, 82, 83, 86], "y_pred": [8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 77, 78, 80, 81, 82, 83], "no_grad": 8, "logit": [8, 69, 72], "softmax": [8, 52, 54], "type": [8, 14, 20, 29, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 62, 63, 64, 77, 78, 79, 84, 85, 86, 112, 113, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 178, 184, 185, 195, 227, 249, 250, 282, 293, 318, 337, 344, 352, 360, 368], "append": [8, 18, 24, 38, 43], "concaten": [8, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "error": [8, 16, 19, 22, 25, 30, 34, 38, 43, 49, 50, 82, 83, 103, 106, 158, 160, 302, 326], "n": [8, 15, 16, 17, 19, 21, 22, 23, 25, 38, 43, 71, 75, 89, 107, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 194, 199, 202, 203, 204, 208, 212, 243, 278, 280, 283, 289, 291, 294, 300, 301, 307, 308, 309, 311, 312, 316, 317, 318, 321, 322, 323, 329, 330, 334, 335, 337, 338, 342, 344, 350, 351, 352, 355, 360, 361, 366, 368, 369, 370, 373, 374], "1f": 8, "avg": 8, "8f": 8, "240223": 8, "042014": 8, "880884": 8, "712951": 8, "595959": 8, "494291": 8, "410809": 8, "335262": 8, "004935": 8, "003078": 8, "002033": 8, "001755": 8, "002034": 8, "002901": 8, "004256": 8, "005585": 8, "000695": 8, "000400": 8, "000204": 8, "000097": 8, "000045": 8, "000021": 8, "000010": 8, "000005": 8, "000026": 8, "000033": 8, "000039": 8, "000043": 8, "000044": 8, "000041": 8, "000035": 8, "000028": 8, "corresspond": 8, "exactli": 8, "ground": [8, 77, 78, 82, 83], "truth": [8, 77, 78, 82, 83], "762": [8, 9, 376], "566": 8, "plot_unet_segment": [8, 9, 376], "425": [9, 376], "565": [9, 376], "03": [9, 376], "02": [9, 147, 151, 376], "pleas": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "detail": [10, 15, 17, 21, 23, 69, 72, 86, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 149, 153], "raw": [10, 30, 34, 328, 331, 333], "mai": [10, 38, 43, 302], "enough": 10, "guidelin": 10, "deep": [10, 12, 52, 53, 54, 62, 157, 159, 375], "neuroimag": [10, 12, 27, 28, 30, 31, 32, 33, 34, 200, 201, 228, 256], "metric": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 62, 77, 78, 79, 80, 81, 82, 83, 169, 173, 186], "variou": [10, 87, 257], "help": [10, 38, 43, 87], "develop": [10, 11, 87], "volum": [10, 30, 34, 53, 62, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 328, 333, 375], "definit": [10, 63, 70, 73, 108, 109, 205, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 324, 356], "backbon": [10, 53, 62, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 169, 213, 240], "intens": [10, 86, 142, 143, 144, 145, 157, 158, 159, 160, 169], "preprocess": [10, 30, 34, 86, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 302], "link": 10, "plugin": 10, "helper": [10, 170], "integr": [10, 71, 75, 79, 170, 247], "pytorch": [10, 38, 43, 49, 50, 52, 53, 54, 62, 170, 210, 211, 225, 226, 252, 253, 254, 255, 313, 375], "artifici": [10, 147, 151, 198], "dedic": [10, 277], "content": [10, 27, 32], "fetch_experi": [10, 12, 63, 169], "filter_config": [10, 12, 64, 169], "get_env": [10, 12, 65, 169], "load_interfac": [10, 12, 66, 169], "update_param": [10, 12, 67, 169], "multiviewstransform": [10, 12, 85, 169], "batchtypingcallback": [10, 13, 14, 20, 38, 43, 169], "kneighborsclassifiercvcallback": [10, 13, 15, 21, 169], "kneighborsregressorcvcallback": [10, 13, 16, 22, 169], "logisticregressioncvcallback": [10, 13, 17, 23, 169], "modelprob": [10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 169], "ridgecvcallback": [10, 13, 19, 25, 169], "model_prob": [10, 21, 22, 23, 24, 25, 169], "check_typ": [10, 20, 169], "baseimagedataset": [10, 26, 27, 32, 169], "basenumpydataset": [10, 26, 28, 33, 169], "imagedataframedataset": [10, 26, 29, 35, 169], "openbhb": [10, 30, 34, 169], "basedataset": [10, 26, 27, 28, 31, 32, 33, 169], "pandas_dataset": [10, 29, 35, 36, 169], "default_image_load": [10, 26, 29, 35, 36, 169], "baseestim": [10, 18, 24, 37, 38, 43, 49, 50, 52, 53, 54, 62, 70, 73, 169], "classifiermixin": [10, 37, 39, 44, 49, 50, 169], "clustermixin": [10, 37, 40, 45, 169], "regressormixin": [10, 37, 41, 46, 169], "transformermixin": [10, 18, 24, 37, 42, 47, 52, 53, 54, 62, 169], "logistic_regress": [10, 50, 169], "yawarecontrastivelearn": [10, 51, 53, 62, 169], "yawar": [10, 58, 61, 62, 169], "projectionhead": [10, 55, 56, 57, 58, 59, 60, 61, 169], "simclrprojectionhead": [10, 55, 57, 60, 169], "yawareprojectionhead": [10, 53, 55, 58, 61, 62, 169], "projection_head": [10, 53, 56, 59, 60, 61, 62, 169], "infonc": [10, 49, 50, 52, 53, 54, 62, 69, 71, 72, 75, 169], "kernelmetr": [10, 53, 62, 68, 70, 71, 73, 75, 169], "yawareinfonc": [10, 53, 62, 68, 71, 75, 169], "yaware_infonc": [10, 53, 62, 73, 74, 75, 169], "pairwisecosinesimilar": [10, 68, 74, 169], "pearson_r": [10, 76, 80, 81, 169], "regression_report": [10, 76, 82, 83, 169], "_regress": [10, 77, 78, 79, 169], "_check_reg_target": [10, 76, 77, 78, 169], "_check_reg_targets_with_floating_dtyp": [10, 76, 77, 78, 169], "_find_matching_floating_dtyp": [10, 76, 77, 78, 79, 169], "regress": [10, 16, 17, 18, 19, 22, 23, 24, 25, 38, 41, 43, 46, 49, 50, 77, 78, 81, 82, 83, 169], "bunch": [10, 63, 88, 90, 169], "print_multicolor": [10, 87, 95, 102, 169], "attr": [10, 87, 92, 104, 169], "fg": [10, 87, 93, 169], "hex": [10, 87, 94, 169], "print_result": [10, 87, 96, 169], "print_subtitl": [10, 87, 97, 169], "print_titl": [10, 87, 98, 169], "print_warn": [10, 87, 99, 169], "random_styl": [10, 87, 100, 169], "styliz": [10, 87, 101, 169], "_availableifdescriptor": [10, 87, 103, 169], "_estimator_i": [10, 87, 104, 169], "available_if": [10, 87, 105, 169], "check_is_fit": [10, 87, 106, 169], "alexnet": [10, 109, 110, 114, 169], "densenet": [10, 109, 111, 115, 116, 122, 169], "resnettrunc": [10, 109, 113, 128, 169], "densenet121": [10, 109, 115, 122, 169], "resnet18_trunc": [10, 109, 124, 134, 169], "resnet50": [10, 109, 112, 113, 127, 128, 135, 137, 169], "resnet50_trunc": [10, 109, 136, 138, 169], "densenet3d": [10, 116, 117, 118, 119, 120, 121, 122, 169], "_denseblock": [10, 109, 117, 169], "_denselay": [10, 109, 118, 169], "_transit": [10, 109, 119, 169], "_bn_function_factori": [10, 109, 120, 169], "_densenet": [10, 109, 121, 169], "alexnet3d": [10, 114, 169], "resnet3d": [10, 53, 62, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 169], "basicblock": [10, 109, 112, 113, 125, 127, 128, 169], "bottleneck": [10, 109, 111, 112, 113, 116, 126, 127, 128, 169], "_resnet": [10, 109, 129, 169], "_resnet_trunc": [10, 109, 130, 169], "conv1x1": [10, 109, 131, 169], "conv3x3": [10, 109, 132, 169], "volume_transform": [10, 168, 169], "volumetransform": [10, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 165, 166, 168, 169], "randomgaussianblur": [10, 86, 141, 142, 144, 169], "randomgaussiannois": [10, 86, 141, 143, 145, 169], "random_blur": [10, 144, 169], "random_nois": [10, 145, 169], "randomeras": [10, 86, 146, 147, 151, 169], "randomflip": [10, 86, 146, 148, 152, 169], "randomrot": [10, 86, 146, 150, 154, 169], "random_rot": [10, 154, 169], "random_resized_crop": [10, 153, 169], "random_flip": [10, 152, 169], "random_eras": [10, 151, 169], "robustresc": [10, 86, 156, 157, 159, 169], "znormal": [10, 86, 156, 158, 160, 169], "z_normal": [10, 160, 169], "rescal": [10, 157, 159, 169, 346], "croporpad": [10, 86, 161, 162, 165, 169], "crop_or_pad": [10, 165, 169], "randomcompos": [10, 169, 170, 303], "standardscal": [10, 169, 170, 302], "basetransform": [10, 169, 171, 172, 179, 180, 190, 193, 194], "groupmixup": [10, 169, 171, 173, 186], "hemimixup": [10, 169, 171, 174, 187], "surfblur": [10, 169, 171, 175, 181], "surfcutout": [10, 169, 171, 176, 182], "surfnois": [10, 169, 171, 177, 183], "surfrot": [10, 169, 171, 178, 184], "apply_chained_transform": [10, 169, 171, 180, 194], "multichannel_augment": [10, 169, 171, 189, 197], "randomaugment": [10, 169, 171, 172, 175, 176, 177, 178, 181, 182, 183, 184, 188, 189, 190, 191, 197], "listifi": [10, 169, 171, 196], "mixup": [10, 169, 186, 187, 188], "mixupaugment": [10, 169, 171, 173, 174, 186, 187, 188], "genericsurfdataset": [10, 169, 198, 200, 201], "_samples_gener": [10, 169, 202, 203], "_gener": [10, 169, 201], "sphericalvaeloss": [10, 169, 205, 206, 207], "vae": [10, 169, 206, 207, 208, 228, 252, 253, 254, 255, 256, 257], "log_likelihood": [10, 169, 205, 208], "hemifusiondecod": [10, 169, 209, 210, 252], "hemifusionencod": [10, 169, 209, 211, 253], "sit": [10, 169, 212, 241, 242, 243, 244], "sphericalbas": [10, 169, 209, 214, 225, 226, 227, 229, 239, 249, 254, 255, 267], "sphericalgunet": [10, 169, 209, 215, 227, 247, 248, 249], "sphericalgvgg": [10, 169, 209, 216, 229, 258, 267], "sphericalgvgg11": [10, 169, 209, 216, 217, 258, 259], "sphericalgvgg11bn": [10, 169, 209, 218, 260], "sphericalgvgg13": [10, 169, 209, 219, 261], "sphericalgvgg13bn": [10, 169, 209, 220, 262], "sphericalgvgg16": [10, 169, 209, 221, 263], "sphericalgvgg16bn": [10, 169, 209, 222, 264], "sphericalgvgg19": [10, 169, 209, 223, 265], "sphericalgvgg19bn": [10, 169, 209, 224, 266], "sphericalhemifusiondecod": [10, 169, 209, 225, 254], "sphericalhemifusionencod": [10, 169, 209, 226, 255], "sphericalva": [10, 169, 209, 228, 256], "sphericalvgg": [10, 169, 209, 216, 229, 258, 267], "sphericalvgg11": [10, 169, 209, 229, 230, 267, 268], "sphericalvgg11bn": [10, 169, 209, 231, 269], "sphericalvgg13": [10, 169, 209, 232, 270], "sphericalvgg13bn": [10, 169, 209, 233, 271], "sphericalvgg16": [10, 169, 209, 234, 272], "sphericalvgg16bn": [10, 169, 209, 235, 273], "sphericalvgg19": [10, 169, 209, 236, 274], "sphericalvgg19bn": [10, 169, 209, 237, 275], "vgg": [10, 169, 216, 229, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "class_factori": [10, 169, 209, 276], "ico": [10, 169, 175, 176, 181, 182, 200, 201, 209, 214, 238, 239, 278, 289], "attent": [10, 169, 209, 212, 241, 243], "feedforward": [10, 169, 209, 242], "downblock": [10, 169, 209, 245], "downgblock": [10, 169, 209, 246], "graphicalunet": [10, 169, 209, 247], "upblock": [10, 169, 209, 250], "upgblock": [10, 169, 209, 251], "compute_output_dim": [10, 169, 209, 257], "icodineconv": [10, 169, 175, 181, 277, 278, 283, 284, 289, 294, 295], "icofixindexupsampl": [10, 169, 277, 279, 280, 281, 285, 286, 287, 290, 291, 292, 296, 297, 298], "icogenericupconv": [10, 169, 277, 279, 280, 281, 285, 286, 287, 290, 291, 292, 296, 297, 298], "icomaxindexupsampl": [10, 169, 277, 279, 280, 281, 285, 286, 287, 290, 291, 292, 296, 297, 298], "icopool": [10, 169, 277, 281, 282, 292, 293], "icorepaconv": [10, 169, 277, 278, 283, 284, 289, 294, 295], "icospmaconv": [10, 169, 257, 277, 278, 283, 284, 289, 294, 295], "icospmaconvtranspos": [10, 169, 277, 279, 280, 281, 285, 286, 287, 290, 291, 292, 296, 297, 298], "icoupconv": [10, 169, 277, 279, 280, 281, 286, 287, 290, 291, 292, 297, 298], "icoupsampl": [10, 169, 277, 279, 280, 281, 285, 286, 287, 290, 291, 292, 296, 297, 298], "debug_msg": [10, 169, 304, 313], "downsampl": [10, 125, 126, 169, 200, 201, 214, 239, 245, 246, 250, 280, 281, 282, 286, 291, 292, 293, 297, 304, 314, 315, 316, 324, 325, 346, 348, 349, 350, 356, 357], "downsample_data": [10, 169, 304, 314, 315, 316, 324, 325, 348, 349, 350, 356, 357], "downsample_ico": [10, 169, 304, 314, 315, 316, 324, 325, 348, 349, 350, 356, 357], "find_neighbor": [10, 169, 304, 317, 351], "find_rotation_interpol_coef": [10, 169, 304, 318, 342, 352, 366], "get_logg": [10, 169, 304, 319], "interpol": [10, 149, 153, 163, 164, 166, 167, 169, 178, 184, 227, 249, 250, 279, 287, 290, 298, 300, 301, 304, 308, 311, 314, 315, 316, 318, 321, 324, 325, 342, 344, 348, 349, 350, 352, 356, 357, 366, 368, 373], "interpolate_data": [10, 169, 304, 314, 315, 316, 324, 325, 348, 349, 350, 356, 357], "neighbors_rec": [10, 169, 283, 294, 304, 317, 337, 338, 351, 360, 361], "number_of_ico_vertic": [10, 169, 304, 339, 341, 363, 365], "number_of_neighbor": [10, 169, 304, 336, 340, 359, 364], "order_of_ico_from_vertic": [10, 169, 304, 339, 341, 363, 365], "order_triangl": [10, 169, 304, 342, 366], "patch_tri": [10, 169, 304, 343, 345, 367], "rotate_data": [10, 169, 178, 184, 304, 318, 344, 352, 368], "setup_log": [10, 169, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 304, 371], "sph2cart": [10, 169, 304, 305, 306, 310, 372], "text2ico": [10, 169, 304, 309, 312, 322, 374], "hideprint": [10, 169, 304, 326], "compute_and_stor": [10, 169, 304, 327], "decompose_cifti": [10, 169, 304, 328], "read_freesurf": [10, 169, 304, 329], "read_gifti": [10, 169, 304, 330], "surf_data_from_cifti": [10, 169, 304, 331], "ungzip": [10, 169, 304, 332], "volume_from_cifti": [10, 169, 304, 333], "write_freesurf": [10, 169, 304, 334], "write_gifti": [10, 169, 304, 335], "_patch_tri_it": [10, 169, 304, 345], "build_freesurfer_ico": [10, 169, 304, 346], "build_fslr_ref": [10, 169, 304, 347], "get_angle_with_xaxi": [10, 169, 304, 353], "middle_point": [10, 169, 304, 358], "triangles_to_edg": [10, 169, 304, 369], "vertex_adjacency_graph": [10, 169, 304, 370], "find_corresponding_ord": [10, 169, 304, 307], "walk": 11, "intal": 11, "offici": [11, 79], "releas": 11, "best": [11, 15, 16, 17, 19, 21, 22, 23, 25, 63, 163, 164, 166, 167, 309, 322], "user": [11, 15, 17, 21, 23, 38, 43, 64, 215, 227, 248, 249, 302, 344, 368], "who": 11, "latest": [11, 76, 79], "contribut": 11, "without": [11, 53, 62, 148, 152, 157, 159, 332], "privileg": 11, "pip": 11, "git": 11, "repositori": [11, 30, 34, 89, 107], "github": [11, 209, 331, 333], "com": [11, 209], "deepinsight": 11, "page": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "document": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "explain": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "signatur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "big": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "pictur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "rais": [14, 18, 20, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 85, 86, 103, 105, 106, 168, 302], "typeerror": [14, 20, 29, 35, 106], "annot": [14, 20], "traiterror": [14, 20], "incorrect": [14, 20, 29, 35], "notimplementederror": [14, 20], "handl": [14, 20, 53, 62, 85, 89, 107, 142, 144, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167], "on_predict_batch_start": [14, 20], "trainer": [14, 18, 20, 24, 38, 43, 49, 50, 52, 53, 54, 62], "pl_modul": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "batch_idx": [14, 20, 38, 43, 49, 50, 52, 53, 54, 62], "dataloader_idx": [14, 20, 38, 43, 49, 50, 52, 53, 54, 62], "begin": [14, 18, 20, 24], "on_test_batch_start": [14, 20], "on_train_batch_start": [14, 20], "train": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 38, 43, 49, 50, 52, 53, 54, 62, 63, 149, 153, 163, 164, 166, 167, 171, 200, 201], "on_validation_batch_start": [14, 20], "train_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 53, 62], "test_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43], "probe_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "tupl": [15, 16, 18, 19, 21, 22, 24, 25, 30, 34, 49, 50, 52, 53, 54, 56, 59, 62, 63, 64, 89, 107, 111, 112, 116, 127, 129, 130, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 162, 163, 164, 165, 166, 167, 191, 192, 196, 238, 284, 285, 288, 295, 296], "cv": [15, 16, 17, 19, 21, 22, 23, 25, 63, 67], "n_job": [15, 16, 17, 21, 22, 23, 343, 367], "score": [15, 16, 17, 19, 21, 22, 23, 25, 80, 81, 82, 83], "balanced_accuraci": [15, 17, 21, 23], "knn": [15, 16, 18, 21, 22, 24], "embed": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 53, 62, 69, 71, 72, 75, 110, 111, 112, 113, 114, 116, 127, 128, 212, 243], "concret": [15, 16, 17, 19, 21, 22, 23, 25, 70, 73], "emb": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "fold": [15, 16, 17, 19, 21, 22, 23, 25], "log": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 49, 50, 52, 53, 54, 62, 71, 75, 206, 207, 208, 212, 214, 215, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 247, 248, 249, 256, 258, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 319, 371], "main": [15, 16, 17, 19, 21, 22, 23, 25, 82, 83], "averag": [15, 16, 17, 19, 21, 22, 23, 25, 80, 81, 82, 83], "across": [15, 17, 21, 23, 30, 34, 38, 43, 82, 83, 142, 144, 147, 149, 151, 153, 162, 165, 173, 174, 186, 187, 212, 243], "support": [15, 17, 21, 23, 29, 30, 34, 35, 38, 43, 49, 50, 52, 54, 86], "unweight": [15, 17, 21, 23], "precis": [15, 17, 21, 23, 38, 43, 53, 62, 79], "recal": [15, 17, 21, 23], "f1": [15, 17, 21, 23], "guid": [15, 17, 21, 23, 302], "report": [15, 17, 21, 23, 82, 83], "yield": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "form": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 30, 34, 63, 89, 107, 173, 186], "probe": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 63], "default": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 49, 50, 52, 53, 54, 62, 63, 66, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 106, 107, 110, 111, 112, 113, 114, 116, 127, 128, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 164, 166, 167, 172, 173, 175, 176, 178, 181, 182, 184, 185, 186, 189, 190, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 282, 284, 285, 289, 293, 295, 296, 300, 301, 302, 307, 311, 312, 315, 316, 318, 320, 323, 325, 326, 327, 328, 337, 338, 339, 342, 343, 344, 346, 347, 349, 350, 352, 354, 355, 357, 360, 361, 363, 366, 367, 368, 371, 373, 374], "metric_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "cross": [15, 16, 17, 19, 21, 22, 23, 25, 63, 67, 69, 72, 284, 285, 295, 296], "hyper": [15, 16, 17, 19, 21, 22, 23, 25], "job": [15, 16, 17, 21, 22, 23, 343, 367], "parallel": [15, 16, 17, 21, 22, 23], "unless": [15, 16, 17, 21, 22, 23], "joblib": [15, 16, 17, 21, 22, 23], "parallel_backend": [15, 16, 17, 21, 22, 23], "context": [15, 16, 17, 21, 22, 23, 326], "processor": [15, 16, 17, 21, 22, 23], "complet": [15, 16, 17, 19, 21, 22, 23, 25, 326, 327], "list": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 52, 53, 54, 56, 59, 62, 63, 67, 70, 71, 73, 75, 77, 85, 173, 180, 186, 194, 196, 199, 200, 201, 202, 203, 204, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 247, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 315, 316, 317, 324, 325, 349, 350, 351, 356, 357, 369], "option": [15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 53, 56, 59, 62, 71, 75, 80, 81, 82, 83, 86, 175, 176, 181, 182, 206, 207, 210, 211, 214, 225, 226, 239, 252, 253, 254, 255, 300, 301, 302, 315, 316, 323, 325, 326, 342, 343, 349, 350, 355, 357, 366, 367], "scikit": [15, 16, 17, 19, 21, 22, 23, 25, 76], "org": [15, 16, 17, 19, 21, 22, 23, 25, 30, 34, 57, 58, 60, 61, 69, 72, 79, 103, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 147, 151, 331, 333], "model_evalu": [15, 16, 17, 19, 21, 22, 23, 25], "html": [15, 16, 17, 19, 21, 22, 23, 25, 79, 103], "dict": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 64, 65, 66, 67, 82, 83, 84, 85, 86, 88, 90, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 175, 176, 181, 182, 200, 201, 214, 239, 276, 303, 317, 318, 337, 351, 352, 360], "addit": [15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 38, 43, 49, 50, 52, 53, 54, 62, 84, 85, 86, 147, 151, 215, 227, 248, 249, 278, 289], "keyword": [15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 53, 62, 77, 78, 84, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167], "argument": [15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 53, 62, 66, 77, 78, 84, 85, 86, 106, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 327, 344, 368], "pass": [15, 16, 17, 19, 21, 22, 23, 25, 29, 35, 38, 43, 53, 56, 59, 62, 74, 77, 105, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 302], "constructor": [15, 16, 17, 19, 21, 22, 23, 25], "every_n_train_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "every_n_val_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "prog_bar": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43], "k": [15, 16, 21, 22, 52, 54, 70, 71, 73, 75, 111, 116, 173, 186, 278, 283, 289, 294, 312, 374], "spars": [15, 16, 17, 21, 22, 23, 302], "n_featur": [15, 16, 17, 21, 22, 23, 53, 62, 69, 70, 71, 72, 73, 75, 315, 325, 344, 349, 357, 368], "precomput": [15, 21], "n_output": [15, 16, 21, 22, 77, 78, 80, 81, 82, 83], "target": [15, 16, 17, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 77, 78, 82, 83, 157, 159, 162, 163, 164, 165, 166, 167, 200, 201, 309, 312, 322, 374], "log_metr": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "y_true": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 77, 78, 80, 81, 82, 83], "new": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 38, 43, 52, 54, 70, 73, 89, 107, 148, 152, 163, 164, 166, 167, 172, 190, 191, 192, 238, 279, 290, 302], "r2": [16, 19, 22, 25, 34, 82, 83], "regressor": [16, 19, 22, 25, 41, 46, 82, 83, 110, 114], "median": [16, 19, 22, 25, 82, 83, 162, 165], "squar": [16, 19, 22, 25, 82, 83, 210, 252, 257], "r\u00b2": [16, 19, 22, 25], "pearson": [16, 22, 80, 81, 82, 83], "correl": [16, 22, 80, 81, 82, 83, 284, 285, 295, 296], "coeffici": [16, 22, 80, 81, 82, 83, 318, 352], "varianc": [16, 19, 22, 25, 80, 81, 82, 83, 158, 160, 302], "regular": [16, 17, 19, 22, 23, 25, 53, 62, 147, 151, 324, 356], "strength": [16, 17, 19, 22, 23, 25], "ridg": [16, 18, 19, 22, 24, 25], "neg_mean_absolute_error": [16, 19, 22, 25], "neg_mean_squared_error": [16, 19, 22, 25], "max_it": [17, 23], "linear_solv": [17, 23], "lbfg": [17, 23, 53, 62], "logist": [17, 18, 23, 24, 49, 50], "l2": [17, 19, 23, 25], "invers": [17, 23, 69, 72], "grid": [17, 23, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 308, 311, 320, 321, 338, 354, 361, 373], "logarithm": [17, 23], "1e4": [17, 23], "machin": [17, 23, 63, 89, 107], "specifi": [17, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 53, 62, 63, 66, 71, 75, 86, 89, 107, 148, 149, 152, 153, 163, 166, 172, 175, 176, 181, 182, 190, 200, 201, 300, 301, 315, 316, 325, 349, 350, 357], "strenght": [17, 23], "maximum": [17, 23, 52, 54, 162, 165, 300, 301, 343, 367], "taken": [17, 23, 157, 158, 159, 160], "solver": [17, 23], "converg": [17, 23, 52, 54], "liblinear": [17, 23], "newton": [17, 23], "cg": [17, 23], "choleski": [17, 23], "sag": [17, 23], "saga": [17, 23], "problem": [17, 23, 203, 204, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "accord": [17, 23, 30, 34, 112, 113, 127, 128, 157, 159, 337, 360], "on_test_epoch_start": [18, 24], "bool": [18, 24, 29, 30, 34, 35, 38, 43, 80, 81, 82, 83, 89, 104, 107, 111, 112, 113, 116, 127, 128, 147, 151, 172, 189, 190, 197, 200, 201, 206, 207, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 246, 247, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 289, 300, 301, 302, 323, 326, 328, 337, 342, 343, 355, 360, 366, 367], "on_test_epoch_end": [18, 24], "abc": [18, 24, 86], "basic": [18, 24], "logic": [18, 24, 38, 43, 49, 50, 86], "transform_step": [18, 24, 38, 43, 52, 53, 54, 62], "abstract": [18, 24, 38, 43, 86], "should": [18, 24, 29, 30, 34, 35, 38, 43, 49, 50, 53, 62, 74, 80, 81, 85, 86, 89, 105, 107, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 158, 160, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 302], "inherit": [18, 24, 38, 43, 63], "disabl": [18, 24, 38, 43, 49, 50, 52, 54], "progress": [18, 24, 38, 43, 49, 50, 52, 53, 54, 62], "bar": [18, 24, 38, 43, 49, 50, 52, 54], "extract_featur": [18, 24], "extract": [18, 24, 29, 30, 34, 35, 52, 53, 54, 62, 332], "By": [18, 24, 29, 35, 38, 43, 49, 50, 53, 62], "linear_prob": [18, 24], "valueerror": [18, 24, 29, 35, 85, 86, 168], "on_train_epoch_end": [18, 24], "access": [18, 24, 29, 30, 34, 35, 88, 90, 276, 327], "cach": [18, 24, 49, 50, 89, 107, 175, 176, 178, 181, 182, 184, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 327], "attribut": [18, 24, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 67, 88, 90, 91, 92, 105, 106], "core": [18, 24, 29, 35, 38, 43, 49, 50], "lightningmodul": [18, 24, 38, 43, 53, 62], "them": [18, 24, 53, 62, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 179, 193, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 302, 327, 370], "hook": [18, 24, 38, 43, 53, 62, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "mylightningmodul": [18, 24], "l": [18, 24, 147, 151, 157, 159], "super": [18, 24, 38, 43, 49, 50, 52, 54], "training_step_output": [18, 24], "training_step": [18, 24, 38, 43, 49, 50, 52, 53, 54, 62], "mycallback": [18, 24], "someth": [18, 24], "epoch_mean": [18, 24], "training_epoch_mean": [18, 24], "free": [18, 24], "on_validation_epoch_end": [18, 24, 49, 50], "val": [18, 24, 30, 34, 38, 43], "pearsonr": [19, 25, 82, 83], "multipl": [19, 25, 29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 64, 80, 81, 85, 111, 116, 147, 150, 151, 154, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "multivari": [19, 25], "channel": [27, 28, 31, 32, 33, 110, 111, 112, 113, 114, 116, 127, 128, 142, 144, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 172, 189, 190, 197, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298], "subject_in_pattern": [27, 32, 200, 201], "target_map": [27, 28, 31, 32, 33, 200, 201], "mask": [27, 28, 31, 32, 33, 157, 158, 159, 160, 188, 200, 201, 206, 207, 302], "withdraw_subject": [27, 28, 31, 32, 33, 200, 201], "scalabl": [27, 32, 38, 43, 200, 201], "locat": [27, 28, 31, 32, 33, 89, 107, 200, 201, 332], "store": [27, 28, 29, 30, 31, 32, 33, 34, 35, 52, 54, 200, 201, 327, 328, 329, 330, 344, 368], "folder": [27, 32, 178, 184, 200, 201, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "level": [27, 32, 200, 201, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 371], "subject": [27, 28, 31, 32, 33, 173, 174, 186, 187, 200, 201, 302], "identifi": [27, 32, 200, 201, 309, 322], "retriev": [27, 30, 32, 34, 89, 107, 200, 201], "tabular": [27, 28, 31, 32, 33, 200, 201], "optionali": [27, 28, 31, 32, 33, 49, 50, 52, 54, 200, 201, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "dictionari": [27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 82, 83, 88, 90, 91, 175, 176, 181, 182, 200, 201, 337, 360], "replac": [27, 28, 30, 31, 32, 33, 34, 67, 80, 81, 110, 112, 113, 114, 127, 128, 147, 151, 176, 182, 200, 201, 215, 227, 248, 249], "exist": [27, 28, 31, 32, 33, 89, 107, 200, 201, 302, 346, 347], "panda": [27, 28, 29, 31, 32, 33, 35, 173, 186, 200, 201], "datafram": [27, 28, 29, 31, 32, 33, 35, 173, 186, 200, 201], "callabl": [27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 85, 105, 157, 158, 159, 160, 200, 201, 327], "optionnali": [27, 28, 31, 32, 33, 49, 50, 52, 54, 175, 176, 181, 182, 189, 197, 200, 201], "remov": [27, 28, 30, 31, 32, 33, 34, 52, 54, 158, 160, 200, 201, 302], "filenotfounderror": [27, 28, 31, 32, 33], "mandatorri": [27, 28, 31, 32, 33], "keyerror": [27, 28, 31, 32, 33], "mandatori": [27, 28, 31, 32, 33, 303], "kei": [27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 88, 90, 175, 176, 181, 182, 214, 239, 303, 337, 360], "miss": [27, 28, 30, 31, 32, 33, 34, 324, 356], "particip": [27, 28, 30, 31, 32, 33, 34, 200, 201], "tsv": [27, 28, 29, 30, 31, 32, 33, 34, 35, 200, 201], "request": [27, 28, 30, 31, 32, 33, 34, 148, 152, 200, 201, 209, 302], "conta": [27, 28, 31, 32, 33, 200, 201], "idea": [27, 32], "your": [27, 31, 32, 38, 43, 53, 62, 63, 89, 100, 101, 107, 375], "rather": [27, 32], "symlink": [27, 32], "aggreg": [27, 30, 32, 34, 80, 81], "enforc": [27, 32, 53, 62], "reproduc": [27, 32, 38, 43, 49, 50, 52, 54], "persist": [27, 32], "get_checksum": [27, 32], "hash": [27, 32, 89, 107], "get_data": [27, 28, 32, 33], "index": [27, 28, 32, 33, 38, 43, 49, 50, 52, 53, 54, 62, 82, 83, 148, 152, 175, 176, 181, 182, 314, 317, 337, 348, 351, 360, 369], "rootdir": [29, 35], "df": [29, 35], "frame": [29, 35], "seri": [29, 35, 180, 194], "image_col": [29, 35], "image_path": [29, 35], "label_col": [29, 35], "checksum_col": [29, 35], "target_transform": [29, 30, 34, 35], "return_none_if_no_label": [29, 35], "image_load": [29, 35], "is_valid_label": [29, 35], "read_csv_kwarg": [29, 35], "column": [29, 35], "checksum": [29, 35], "fly": [29, 30, 34, 35], "alongsid": [29, 35], "pd": [29, 35], "least": [29, 35, 38, 43], "csv": [29, 30, 34, 35], "string": [29, 30, 34, 35, 53, 62, 77, 78, 106, 300, 301], "version": [29, 30, 34, 35, 52, 54, 63, 66, 70, 73, 76, 302], "lambda": [29, 35], "tensor": [29, 35, 38, 43, 49, 50, 52, 53, 54, 56, 59, 62, 69, 71, 72, 75, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 206, 207, 208, 210, 211, 212, 216, 225, 226, 228, 229, 243, 250, 252, 253, 254, 255, 256, 258, 267, 288, 313], "must": [29, 35, 38, 43, 49, 50, 52, 53, 54, 62, 63, 70, 71, 73, 75, 86, 106, 142, 144, 148, 152, 157, 158, 159, 160, 163, 164, 166, 167, 172, 190, 327, 332], "empti": [29, 35], "otherwis": [29, 30, 34, 35, 38, 43, 53, 62, 80, 81, 85, 105, 106, 148, 150, 152, 154, 302], "accept": [29, 35, 77, 78, 86], "extens": [29, 35, 147, 151, 332], "pil": [29, 35], "jpg": [29, 35], "png": [29, 35], "bmp": [29, 35], "etc": [29, 35, 53, 62], "npy": [29, 35], "npz": [29, 35], "medic": [29, 35, 157, 159, 163, 164, 166, 167], "nii": [29, 30, 34, 35], "gz": [29, 30, 34, 35, 332], "nibabel": [29, 30, 34, 35, 148, 150, 152, 154, 163, 166, 200, 201, 331, 333], "filter": [29, 35, 63, 64, 111, 116, 142, 144, 175, 181, 210, 211, 214, 215, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 282, 283, 286, 289, 291, 293, 294, 297], "out": [29, 30, 34, 35, 38, 43, 49, 50, 52, 54, 176, 182, 196, 216, 227, 228, 229, 249, 256, 258, 267], "invalid": [29, 35], "nan": [29, 35, 80, 81], "boolean": [29, 35, 38, 43, 157, 158, 159, 160], "read_csv": [29, 35], "separ": [29, 35, 63, 157, 158, 159, 160], "colomn": [29, 35], "vision": [29, 35, 209, 212, 243, 343, 367], "image1": [29, 35], "image2": [29, 35], "mypath": [29, 35], "mri1": [29, 35], "mri2": [29, 35], "diagnosi": [29, 35], "patient": [29, 35], "control": [29, 30, 34, 35, 38, 43, 49, 50, 52, 53, 54, 62, 172, 175, 181, 190, 199, 202, 203, 204, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 284, 285, 295, 296, 320, 338, 354, 361], "ag": [29, 30, 34, 35], "image_mri": [29, 35], "label_mri": [29, 35], "age_mri": [29, 35], "nifti1": [29, 35], "nifti1imag": [29, 30, 34, 35], "apply_target_transform": [29, 35], "apply_transform": [29, 35, 84, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167], "modal": [30, 34], "vbm": [30, 34], "stream": [30, 34], "max_work": [30, 34], "r1": 30, "open": [30, 34, 332], "healthi": [30, 34], "brain": [30, 34, 157, 159, 375], "multi": [30, 34, 38, 43, 49, 50, 52, 54, 85, 189, 197, 212, 243], "mri": [30, 34, 53, 62, 71, 75, 157, 159], "consist": [30, 34, 53, 62, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167], "3227": [30, 34], "757": [30, 34], "t1": [30, 34], "t1w": [30, 34], "scan": [30, 34, 157, 159], "public": [30, 34], "ixi": [30, 34], "abid": [30, 34], "ii": [30, 34, 53, 62], "corr": [30, 34], "gsp": [30, 34], "mpi": [30, 34], "leipzig": [30, 34], "nar": [30, 34], "npc": [30, 34], "rbp": [30, 34], "These": [30, 34, 53, 62], "were": [30, 34], "acquir": [30, 34], "center": [30, 34, 170, 302, 317, 337, 338, 342, 351, 353, 360, 361, 366], "worldwid": [30, 34], "north": [30, 34], "america": [30, 34], "europ": [30, 34], "china": [30, 34], "balanc": [30, 34, 52, 54], "male": [30, 34], "femal": [30, 34], "uniformli": [30, 34], "cat12": [30, 34], "spm": [30, 34], "quasi": [30, 34], "hous": [30, 34], "minim": [30, 34, 52, 53, 54, 62, 336, 359], "voxel": [30, 34, 86, 147, 148, 151, 152, 157, 158, 159, 160, 163, 166], "morphometri": [30, 34], "sbm": [30, 34], "entir": [30, 34], "350gb": [30, 34], "recommend": [30, 34], "intend": [30, 34], "portion": [30, 34, 149, 153], "directori": [30, 34, 327], "multimod": [30, 34], "__getitem__": [30, 34], "whole": [30, 34, 157, 158, 159, 160], "121": [30, 34, 115, 122], "145": [30, 34], "quasiraw": [30, 34], "182": [30, 34], "218": [30, 34], "vbm_roi": [30, 34], "matter": [30, 34], "region": [30, 34], "neuromorphometr": [30, 34], "atla": [30, 34], "142": [30, 34], "hemispher": [30, 34, 173, 174, 186, 187, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "284": [30, 34], "fs_desikan_roi": [30, 34], "desikan": [30, 34], "fs_destrieux_roi": [30, 34], "destrieux": [30, 34], "148": [30, 34], "fs_xhemi": [30, 34], "curvatur": [30, 34], "sulcal": [30, 34], "cortic": [30, 34, 173, 174, 178, 184, 186, 187, 188, 198, 205, 206, 207, 209, 210, 211, 212, 215, 216, 225, 226, 227, 228, 229, 243, 248, 249, 252, 253, 254, 255, 256, 258, 267], "thick": [30, 34], "fsaverage7": [30, 34], "mesh": [30, 34, 323, 324, 337, 355, 356, 360, 370], "163842": [30, 34], "sex": [30, 34], "internal_v": [30, 34], "external_v": [30, 34], "union": [30, 34, 53, 62, 71, 75], "scanner": [30, 34], "lazili": [30, 34], "hug": [30, 34, 63, 89, 107], "face": [30, 34, 63, 89, 107, 300, 301], "demand": [30, 34], "concurr": [30, 34, 343, 367], "thread": [30, 34], "429": [30, 34], "1d": [30, 34, 53, 62, 71, 75], "exclus": [30, 34], "huggingfac": [30, 34], "either": [30, 34, 53, 62, 105, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 302], "lazi": [30, 34], "immedi": [30, 34], "dufumi": [30, 34, 53, 62, 71, 75], "b": [30, 34, 88, 90, 142, 143, 144, 145, 157, 159, 163, 164, 166, 167], "victor": [30, 34], "j": [30, 34, 52, 54, 70, 71, 73, 75], "frouin": [30, 34], "v": [30, 34], "duchesnai": [30, 34], "2022": [30, 34, 71, 75, 212, 243], "debias": [30, 34], "254": [30, 34], "119121": [30, 34], "doi": [30, 34, 69, 72, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "1016": [30, 34], "119637": [30, 34], "download_dataset_split": [30, 34], "increment": [30, 34], "present": [30, 34, 53, 62, 89, 106, 107], "make_dataset": [30, 34], "eventu": [30, 34, 147, 150, 151, 154], "download_fil": [30, 34], "filenam": [30, 34], "get_cat12_templ": [30, 34], "tissu": [30, 34], "nifti": [30, 34], "gm": [30, 34], "tpm": [30, 34], "mni152": [30, 34], "templat": [30, 34], "resourc": [30, 34], "cat12vbm_spac": [30, 34], "mni152_desc": [30, 34], "gm_tpm": [30, 34], "get_fs_label": [30, 34], "symmetr": [30, 34, 70, 73, 80, 81, 162, 165], "resp": [30, 34], "lh": [30, 34], "rh": [30, 34], "length": [30, 34, 70, 73, 337, 360], "divid": [30, 34, 112, 113, 127, 128], "json": [30, 34], "automat": [30, 34, 38, 43, 49, 50, 52, 53, 54, 62, 63, 70, 73, 78, 344, 368], "get_fs_roi_feature_nam": [30, 34], "get_fs_xhemi_feature_nam": [30, 34], "get_neuromorphometrics_atla": [30, 34], "along": [30, 34, 148, 152, 302, 307], "abbrevi": [30, 34], "integ": [30, 34, 38, 43], "under": [30, 34], "get_quasiraw_templ": [30, 34], "quasiraw_spac": [30, 34], "brain_t1w": [30, 34], "get_vbm_roi_label": [30, 34], "csf": [30, 34], "construct": [30, 34, 63], "unimod": [30, 34], "configur": [30, 34, 38, 43, 53, 62, 63, 64, 157, 159, 375], "exclud": [30, 34], "metadata": [30, 34, 163, 166, 302], "im": 36, "val_check_interv": [38, 43], "min_epoch": [38, 43], "max_step": [38, 43, 53, 62], "min_step": [38, 43], "enable_checkpoint": [38, 43], "enable_progress_bar": [38, 43], "enable_model_summari": [38, 43], "strategi": [38, 43, 49, 50, 212, 243], "num_nod": [38, 43], "liter": [38, 43], "engin": [38, 43], "float16": [38, 43], "mix": [38, 43], "bf16": [38, 43], "sequenc": [38, 43, 49, 50, 52, 54, 85, 172, 179, 190, 193, 212, 243], "design": [38, 43, 63], "lightn": [38, 43, 53, 62, 375], "interfac": [38, 43, 63, 64, 66, 67, 70, 73, 375], "capabl": [38, 43], "basicali": [38, 43], "child": [38, 43, 63, 189, 197], "mixin": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "add": [38, 43, 49, 50, 65, 111, 116, 143, 145, 177, 183, 285, 296], "loop": [38, 43], "often": [38, 43, 53, 62], "fraction": [38, 43], "fix": [38, 43, 279, 290, 300, 301, 362], "onc": [38, 43], "reach": [38, 43], "infinit": [38, 43], "forc": [38, 43, 89, 107], "checkpoint": [38, 43, 111, 116], "summar": [38, 43], "tpu": [38, 43, 49, 50, 52, 54], "hpu": [38, 43], "mp": [38, 43], "custom": [38, 43, 53, 62, 77, 78, 106], "alias": [38, 43], "listof": [38, 43], "select": [38, 43, 63, 64, 78, 147, 151], "doubl": [38, 43, 215, 227, 248, 249], "16bit": [38, 43], "bfloat16": [38, 43], "extra": [38, 43], "tune": [38, 43], "debug": [38, 43, 200, 201, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 313], "hparam": [38, 43], "dictionarai": [38, 43, 63], "TO": [38, 43], "BE": [38, 43], "validation_step": [38, 43, 49, 50, 52, 53, 54, 62], "anyth": [38, 43, 49, 50, 52, 54], "interest": [38, 43, 49, 50, 52, 54, 200, 201, 214, 239], "predict_step": [38, 43, 49, 50, 52, 53, 54, 62], "log_dict": [38, 43], "val_dataload": [38, 43, 53, 62], "instruct": [38, 43], "logger": [38, 43, 49, 50, 52, 54, 319], "on_step": [38, 43], "on_epoch": [38, 43], "reduce_fx": [38, 43], "enable_graph": [38, 43], "sync_dist": [38, 43], "sync_dist_group": [38, 43], "add_dataloader_idx": [38, 43], "metric_attribut": [38, 43], "rank_zero_onli": [38, 43], "ddp": [38, 43], "determin": [38, 43, 52, 54, 173, 186], "accumul": [38, 43], "over": [38, 43, 52, 54, 150, 154], "detach": [38, 43], "graph": [38, 43, 247, 370], "care": [38, 43, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296, 344, 368], "commun": [38, 43], "overhead": [38, 43], "group": [38, 43, 112, 113, 125, 126, 127, 128, 132, 173, 186, 302], "sync": [38, 43], "uniqu": [38, 43, 307], "infer": [38, 43, 49, 50], "explicitli": [38, 43], "restor": [38, 43, 326], "state": [38, 43, 56, 57, 58, 59, 60, 61, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 209, 210, 213, 228, 240, 241, 242, 244, 252, 256], "torchmetr": [38, 43], "tell": [38, 43], "rank": [38, 43], "won": [38, 43, 49, 50], "abl": [38, 43], "improp": [38, 43], "deadlock": [38, 43], "train_loss": [38, 43], "metriccollect": [38, 43], "test_step": [38, 43], "metric_n": [38, 43], "forward": [38, 43, 49, 50, 56, 59, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 210, 211, 212, 213, 215, 216, 225, 226, 227, 228, 229, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "overrid": [38, 43, 49, 50, 53, 62], "prevent": [38, 43, 49, 50], "oom": [38, 43, 49, 50], "basepredictionwrit": [38, 43, 49, 50], "write": [38, 43, 49, 50, 334, 335], "databas": [38, 43, 49, 50], "spawn": [38, 43, 49, 50], "happen": [38, 43, 49, 50], "ddp_spawn": [38, 43, 49, 50], "produc": [38, 43, 49, 50, 52, 53, 54, 62, 163, 164, 166, 167], "step_output": [38, 43, 49, 50, 52, 54], "skip": [38, 43, 49, 50, 52, 54, 245, 246, 247], "deepspe": [38, 43, 49, 50, 52, 54], "manual": [38, 43, 49, 50, 52, 53, 54, 62], "special": [38, 43, 49, 50, 52, 54, 63], "switch": [38, 43, 49, 50, 52, 53, 54, 62], "accumulate_grad_batch": [38, 43, 49, 50, 52, 54], "intern": [38, 43, 49, 50, 52, 54, 56, 57, 58, 59, 60, 61, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 163, 164, 166, 167, 213, 240, 241, 242, 244], "automatic_optim": [38, 43, 49, 50, 52, 54], "gan": [38, 43, 49, 50, 52, 53, 54, 62], "opt1": [38, 43, 49, 50, 52, 54], "opt2": [38, 43, 49, 50, 52, 54], "decod": [38, 43, 49, 50, 52, 54, 210, 215, 225, 227, 228, 248, 249, 252, 254, 256], "share": [38, 43, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 148, 152, 213, 240, 241, 242, 244], "api": [38, 43, 52, 53, 54, 62, 78, 79], "d": [38, 43, 49, 50, 52, 53, 54, 62, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 248, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 284, 285, 288, 295, 296, 308, 311, 321, 373], "calcul": [38, 43, 49, 50, 52, 53, 54, 62, 70, 71, 73, 75], "put": [38, 43, 49, 50, 52, 54], "At": [38, 43, 49, 50, 52, 54, 227, 249], "goe": [38, 43, 49, 50, 52, 54], "back": [38, 43, 49, 50, 52, 54, 302], "estimator_typ": [39, 40, 41, 42, 44, 45, 46, 47], "tag": [39, 40, 41, 42, 44, 45, 46, 47, 89, 107], "setup": [49, 50, 319, 371], "freez": [49, 50], "freeze_encod": [49, 50], "rate": [49, 50, 52, 53, 54, 62, 199, 202, 203, 204, 212, 243], "adam": [49, 50, 52, 53, 54, 62], "decai": [49, 50, 52, 53, 54, 62], "multisteplr": [49, 50], "schedul": [49, 50, 52, 53, 54, 62, 63], "element": [49, 50, 52, 54, 148, 152], "variabl": [49, 50, 52, 53, 54, 62, 63, 71, 75, 76, 276], "validation_step_output": [49, 50], "dictionnari": [49, 50, 214, 239, 327], "respectivelli": [49, 50], "configure_optim": [49, 50, 52, 53, 54, 62], "declar": [49, 50, 52, 54, 64], "adamw": [49, 50, 52, 53, 54, 62], "cross_entropy_loss": [49, 50], "cross_entropi": [49, 50], "clean": [49, 50], "x_i": [52, 54, 157, 158, 159, 160], "x_j": [52, 54], "maxim": [52, 53, 54, 62], "part": [52, 54], "head": [52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 110, 114, 212, 241, 243, 244], "cnn": [52, 54, 171], "scnn": [52, 54], "respons": [52, 54], "denot": [52, 54, 56, 59], "finish": [52, 54], "extractor": [52, 54], "z": [52, 54, 147, 148, 151, 152, 158, 160, 210, 211, 228, 252, 253, 256, 305, 306, 308, 310, 311, 321, 372, 373], "shown": [52, 53, 54, 62], "wors": [52, 54], "those": [52, 54, 337, 360], "becom": [52, 54], "invari": [52, 54], "thu": [52, 53, 54, 62], "stage": [52, 54], "z_i": [52, 54], "z_j": [52, 54], "therebi": [52, 54], "propos": [52, 54], "aaron": [52, 54], "van": [52, 54], "den": [52, 54], "oord": [52, 54], "short": [52, 54], "formal": [52, 54], "written": [52, 54], "ell_": [52, 54], "frac": [52, 54, 70, 71, 73, 75, 157, 158, 159, 160, 163, 166], "exp": [52, 54, 71, 75], "sim": [52, 54, 71, 75, 142, 143, 144, 145], "tau": [52, 54, 71, 75], "sum_": [52, 54, 71, 75], "2n": [52, 54], "mathbb": [52, 54], "neq": [52, 54], "z_k": [52, 54], "peak": [52, 54], "bound": [52, 54, 149, 153, 185, 195], "influenc": [52, 54], "dissimilar": [52, 53, 54, 62], "versu": [52, 54], "cosin": [52, 53, 54, 62, 70, 71, 73, 75, 149, 153, 163, 164, 166, 167], "cdot": [52, 54], "minimum": [52, 54, 157, 159, 162, 165, 300, 301], "around": [52, 54, 150, 154], "exact": [52, 54], "opposit": [52, 54], "flexibl": [52, 54], "altern": [52, 54], "track": [52, 54], "projector": [52, 54], "cosineannealinglr": [52, 54], "auxiliari": [52, 53, 54, 62, 71, 75], "info_nce_loss": [52, 54], "encoder_kwarg": [53, 62], "projection_head_kwarg": [53, 62], "kernel": [53, 62, 70, 71, 73, 75, 112, 113, 127, 128, 142, 144, 163, 164, 166, 167, 175, 181, 284, 285, 295, 296, 337, 338, 360, 361], "bandwidth": [53, 62, 70, 71, 73, 75], "ndarrai": [53, 62, 70, 71, 73, 75, 80, 81, 85, 86, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 203, 204, 302, 305, 306, 310, 372], "optimizer_kwarg": [53, 62], "learning_r": [53, 62], "0001": [53, 62, 307, 312, 374], "lr_schedul": [53, 62], "lrschedul": [53, 62], "reducelronplateau": [53, 62], "lr_scheduler_kwarg": [53, 62], "awar": [53, 62, 71, 75], "visual": [53, 62, 213, 240], "agreement": [53, 62], "view": [53, 62, 69, 71, 72, 75, 85, 342, 366], "encourag": [53, 62], "push": [53, 62], "apart": [53, 62], "uninstanti": [53, 62], "although": [53, 62, 74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "instanti": [53, 62, 163, 166], "op": [53, 62], "hidden_channel": [53, 62, 247], "n_embed": [53, 62, 110, 111, 112, 113, 114, 116, 127, 128], "2048": [53, 57, 58, 60, 61, 62], "unit": [53, 62, 158, 160, 215, 227, 248, 249, 302, 320, 338, 354, 358, 361, 362], "input_dim": [53, 57, 58, 60, 61, 62, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "output_dim": [53, 57, 58, 60, 61, 62, 257], "impli": [53, 62], "wherea": [53, 62], "high": [53, 62, 163, 164, 166, 167, 191], "impos": [53, 62, 63], "sensit": [53, 62], "epanechnikov": [53, 62, 70, 71, 73, 75], "scalar": [53, 62, 70, 71, 73, 75, 86, 149, 153, 163, 164, 166, 167], "diagnon": [53, 62, 71, 75], "diagon": [53, 62, 70, 71, 73, 75], "2d": [53, 62, 70, 71, 73, 75, 147, 149, 150, 151, 153, 154, 320, 354], "pairwis": [53, 62, 70, 71, 73, 75], "stochast": [53, 62, 85, 210, 228, 252, 256], "descent": [53, 62], "decoupl": [53, 62], "loshchilov": [53, 62], "hutter": [53, 62], "iclr": [53, 62], "2019": [53, 62, 215, 227, 247, 248, 249], "subclass": [53, 62, 74, 85, 86, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "beta": [53, 62, 206, 207, 305, 306, 310, 372], "moment": [53, 62, 63], "lrschedulerpltyp": [53, 62], "num_sanity_val_step": [53, 62], "proxi": [53, 62, 71, 75], "meta": [53, 62, 71, 75, 173, 186, 302], "miccai": [53, 62, 71, 75], "2021": [53, 58, 61, 62, 71, 75, 110, 114, 157, 159, 228, 256], "neural": [53, 62, 147, 151], "choos": [53, 62], "But": [53, 62], "lr_scheduler_config": [53, 62], "whose": [53, 62], "updat": [53, 62, 65, 302], "val_loss": [53, 62], "strict": [53, 62], "condit": [53, 62, 103], "metric_to_track": [53, 62], "optimizer1": [53, 62], "optimizer2": [53, 62], "scheduler1": [53, 62], "scheduler2": [53, 62], "lambdalr": [53, 62], "made": [53, 62], "metric_v": [53, 62], "thing": [53, 62], "know": [53, 62, 86], "closur": [53, 62], "yourself": [53, 62], "optimizer_step": [53, 62], "parse_batch": [53, 62], "pars": [53, 62, 84, 85, 86], "v1": [53, 62], "v2": [53, 62], "block": [56, 59, 63, 111, 112, 113, 116, 127, 128, 129, 130, 212, 243, 245, 246, 250, 251], "read": [56, 59, 329, 330], "in_featur": [56, 59], "batch_norm_lay": [56, 59], "non_linearity_lay": [56, 59], "non": [56, 57, 59, 60, 158, 160], "norm": [56, 59, 120], "batchnorm1d": [56, 59], "scriptmodul": [56, 57, 58, 59, 60, 61, 69, 71, 72, 74, 75, 110, 111, 112, 113, 114, 116, 117, 118, 119, 125, 126, 127, 128, 213, 240, 241, 242, 244], "zi": [57, 60], "w_2": [57, 60], "w_1": [57, 60], "2020": [57, 58, 60, 61, 69, 72, 147, 151], "arxiv": [57, 58, 60, 61, 69, 72, 111, 112, 113, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138, 147, 151, 247], "2002": [57, 60, 69, 72], "05709": [57, 60, 69, 72], "512": [58, 61, 111, 112, 113, 116, 127, 128, 216, 229, 258, 267], "z\u03b82": [58, 61], "vanilla": [58, 61], "multilay": [58, 61], "perceptron": [58, 61], "2106": [58, 61], "08808": [58, 61], "expfil": 63, "selector": [63, 64], "logdir": 63, "verbos": 63, "useful": 63, "date": 63, "reus": [63, 344, 368], "section": 63, "descipt": 63, "scaler": [63, 302], "dl": 63, "environ": [63, 64, 65, 67], "fullfil": 63, "constraint": 63, "interface_occurr": 63, "term": [63, 66, 70, 73, 87], "interface_vers": 63, "__version__": 63, "mismatch": 63, "detect": 63, "connot": 63, "previous": 63, "param": [63, 66, 67], "instanci": 63, "prefix": 63, "hierarch": 63, "properti": [63, 103], "parent": 63, "architecture_nam": [63, 89, 107], "revis": [63, 89, 107], "specifid": 63, "appropri": [63, 64, 106], "scheme": [63, 70, 73], "hyperparapet": 63, "defautl": 63, "coupl": 63, "config": 64, "env": [64, 65, 67], "filter_conf": 64, "updated_env": 65, "environemt": 65, "my_modul": 66, "my_class": 66, "exppect": 66, "module": 66, "cl": [66, 212, 243], "updated_param": 67, "param_set": 67, "entropi": [69, 72], "deriv": [69, 72], "icml": [69, 72], "48550": [69, 72, 111, 112, 113, 115, 116, 122, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "z1": [69, 71, 72, 75], "z2": [69, 71, 72, 75], "scott": [70, 73], "fast": [70, 73, 163, 164, 166, 167], "kde": [70, 73], "x1": [70, 73, 74, 250, 251], "xn": [70, 73], "w_": [70, 71, 73, 75], "xi": [70, 73], "xj": [70, 73], "geq": [70, 73], "dx": [70, 73], "silverman": [70, 73], "covari": [70, 73], "mathrm": [70, 73], "diag": [70, 73], "distanc": [70, 73, 173, 186, 283, 294], "rosenblatt": [70, 73], "m": [70, 73, 173, 175, 176, 178, 181, 182, 184, 186, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 300, 301, 316, 323, 329, 330, 334, 335, 337, 342, 350, 355, 360, 366, 370], "1956": [70, 73], "remark": [70, 73], "nonparametr": [70, 73], "annal": [70, 73], "mathemat": [70, 73], "statist": [70, 73, 147, 151, 158, 160], "parzen": [70, 73], "1962": [70, 73], "On": [70, 73, 326], "scotts_factor": [70, 73], "factor": [70, 73, 111, 116, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 320, 338, 354, 361], "set_bandwidth": [70, 73], "subsequ": [70, 73], "silverman_factor": [70, 73], "mini": [71, 75], "repres": [71, 75, 300, 301, 369, 370], "w": [71, 75, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 208, 257], "ell": [71, 75], "z_1": [71, 75], "z_2": [71, 75], "\u03c4": [71, 75], "y_i": [71, 75], "y_j": [71, 75], "phd": [71, 75], "thesi": [71, 75], "dot": [71, 75], "product": [71, 75, 375], "n_label": [71, 75], "x2": [74, 250, 251], "overridden": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "recip": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "afterward": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "former": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "latter": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "silent": [74, 110, 111, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 213, 240, 241, 242, 244, 247, 283, 284, 285, 294, 295, 296], "re": 76, "sample_weight": [77, 78, 80, 81, 82, 83, 302], "multioutput": [77, 78, 80, 81], "dtype": [77, 79, 185, 191, 195, 308, 321], "numer": [77, 158, 160], "raw_valu": [77, 78, 80, 81], "uniform_averag": [77, 78, 80, 81], "variance_weight": [77, 78], "due": [77, 78], "compat": [77, 78, 375], "r2_score": [77, 78], "check_arrai": 77, "type_tru": [77, 78], "multiclass": [77, 78], "type_of_target": [77, 78], "just": [77, 78], "suitabl": [78, 79], "privat": 78, "highest": 79, "promot": 79, "rule": 79, "api_specif": 79, "type_promot": 79, "namespac": 79, "force_finit": [80, 81], "alwai": [80, 81, 86, 89, 107, 148, 152, 302], "perfect": [80, 81], "anti": [80, 81], "flag": [80, 81], "inf": [80, 81], "constant": [80, 81, 157, 158, 159, 160, 162, 165], "real": [80, 81], "target_nam": [82, 83], "digit": [82, 83], "output_dict": [82, 83], "round": [82, 83], "summari": [82, 83], "mae": [82, 83], "meda": [82, 83], "mse": [82, 83], "pcc": [82, 83], "evar": [82, 83], "arithmet": [82, 83], "data_pars": [84, 85, 86], "sever": [85, 303], "elsewher": 85, "parse_data": [85, 86, 168], "actual": 86, "compliant": 86, "conjonct": 86, "geometri": [86, 316, 324, 329, 330, 334, 335, 350, 356, 358], "nd": [86, 147, 149, 151, 153], "gamma": 86, "todo": 86, "randombright": 86, "biasfield": 86, "typetransforminput": 86, "static": [86, 163, 166], "parse_prob": 86, "termin": 87, "expos": [88, 90], "value_kei": [88, 90], "avaiabl": [89, 107], "pathlib": [89, 107], "repo": [89, 107], "classmethod": [89, 107, 173, 186, 214, 239], "hf_download": [89, 107], "hf_id": [89, 107], "hf_revis": [89, 107], "force_download": [89, 107], "resum": [89, 107], "id": [89, 107], "commit": [89, 107], "hub_split": [89, 107], "hub_nam": [89, 107], "interpret": [89, 107, 163, 166], "hub_id": [89, 107], "hub_revis": [89, 107], "decalr": [89, 107, 170], "ns_download": [89, 107], "ns_id": [89, 107], "reset": [91, 100, 101], "background": 91, "foreground": [91, 93], "reverse_dict": 91, "revers": [91, 148, 152, 210, 252], "alia": [92, 93, 163, 164, 166, 167, 191, 192, 238, 302], "conveni": [100, 101], "style": [100, 101], "ansi": [100, 101], "fn": 103, "attribute_nam": 103, "descriptor": 103, "protocol": 103, "decor": [103, 105, 189, 197, 327, 344, 368], "attributeerror": [103, 105], "falsei": 103, "hasattr": [103, 105], "doc": 103, "howto": 103, "explan": 103, "deleg": 104, "underli": 104, "truthi": 105, "unavail": 105, "helloifeven": 105, "_x_is_even": 105, "say_hello": 105, "hello": 105, "obj": 105, "msg": [106, 313], "presenc": 106, "trail": 106, "underscor": 106, "except": [106, 302], "messag": [106, 212, 215, 216, 227, 228, 229, 243, 247, 248, 249, 256, 258, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 313], "yet": 106, "substitut": 106, "eg": 106, "sparsifi": 106, "fitt": 106, "abrol": [110, 114], "5281": [110, 114], "zenodo": [110, 114], "4309677": [110, 114], "growth_rat": [111, 116, 117, 118, 121], "block_config": [111, 116, 121], "num_init_featur": [111, 116, 121], "bn_size": [111, 116, 117, 118], "memory_effici": [111, 116, 117, 118], "huang": [111, 115, 116, 122], "2018": [111, 115, 116, 122], "1608": [111, 115, 116, 122], "06993": [111, 115, 116, 122], "pool": [111, 116, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 282, 293], "convolut": [111, 112, 113, 116, 127, 128, 131, 132, 147, 151, 175, 181, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297], "slower": [111, 116, 163, 164, 166, 167], "pdf": [111, 116], "1707": [111, 116], "06990": [111, 116], "zero_init_residu": [112, 113, 127, 128], "width_per_group": [112, 113, 127, 128], "replace_stride_with_dil": [112, 113, 127, 128], "norm_lay": [112, 113, 125, 126, 127, 128], "initial_kernel_s": [112, 113, 127, 128], "he": [112, 113, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "2015": [112, 113, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "1512": [112, 113, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "03385": [112, 113, 123, 124, 127, 128, 133, 134, 135, 136, 137, 138], "bn": [112, 113, 127, 128, 245, 246, 250, 251], "residu": [112, 113, 127, 128], "branch": [112, 113, 127, 128], "behav": [112, 113, 127, 128], "1706": [112, 113, 127, 128], "02677": [112, 113, 127, 128], "dilat": [112, 113, 125, 126, 127, 128, 132], "atrou": [112, 113, 127, 128], "preserv": [112, 113, 127, 128, 147, 151, 163, 164, 166, 167], "dens": [112, 113, 127, 128, 210, 252, 302], "batchnorm3d": [112, 113, 127, 128], "truncat": [113, 124, 128, 134, 136, 138], "num_lay": 117, "num_input_featur": [117, 118, 119], "init_featur": 117, "prev_featur": 118, "num_output_featur": 119, "arch": [121, 129, 130], "inplan": [125, 126], "plane": [125, 126, 150, 154, 283, 294, 337, 353, 360], "base_width": [125, 126], "in_plan": [131, 132], "out_plan": [131, 132], "1x1": [131, 227, 249], "deviat": [142, 143, 144, 145, 158, 160, 175, 177, 181, 183, 302], "mathcal": [142, 143, 144, 145], "six": [142, 144], "a_1": [142, 144], "b_1": [142, 144], "a_2": [142, 144], "b_2": [142, 144], "a_3": [142, 144], "b_3": [142, 144], "sigma_i": [142, 144], "a_i": [142, 144], "b_i": [142, 144], "nois": [143, 145, 177, 183], "mu": [143, 145, 158, 160], "ratio": [147, 149, 151, 153, 247], "num_iter": [147, 151], "inplac": [147, 151, 302], "randomli": [147, 150, 151, 154, 173, 174, 186, 187], "eras": [147, 151], "box": [147, 151], "r3": 147, "cutout": [147, 151, 176, 182], "r4": 147, "arbitrari": [147, 151], "proport": [147, 151], "area": [147, 149, 151, 153], "against": [147, 151], "min": [147, 151, 157, 159], "modifi": [147, 151, 164, 167], "geometr": [147, 149, 151, 153], "don": [147, 149, 151, 153], "particular": [147, 149, 151, 153], "three": [147, 149, 151, 153, 318, 352], "zhong": [147, 151], "zheng": [147, 151], "kang": [147, 151], "li": [147, 151], "yang": [147, 151], "aaai": [147, 151], "confer": [147, 151], "intellig": [147, 151], "1708": [147, 151], "04896": [147, 151], "devri": [147, 151], "taylor": [147, 151], "2017": [147, 151], "04552": [147, 151], "flip_prob": [148, 152], "anatom": [148, 150, 152, 154], "ap": [148, 150, 152, 154], "antero": [148, 150, 152, 154], "posterior": [148, 150, 152, 154], "inferior": [148, 150, 152, 154], "ra": [148, 150, 152, 154, 163, 166], "affin": [148, 150, 152, 154, 163, 166], "never": [148, 152, 164, 167], "typic": [148, 150, 152, 154, 163, 166], "get_index_from_anat_label": [148, 152], "anterior": [148, 152], "superior": [148, 152], "4x4": [148, 152], "target_shap": [149, 153, 162, 164, 165, 167], "08": [149, 153, 158, 160], "upper": [149, 153, 325, 357], "bspline": [149, 153, 163, 164, 166, 167], "cubic": [149, 153, 163, 164, 166, 167], "label_gaussian": [149, 153, 163, 164, 166, 167], "ham": [149, 153, 163, 164, 166, 167], "welch": [149, 153, 163, 164, 166, 167], "lanczo": [149, 153, 163, 164, 166, 167], "blackman": [149, 153, 163, 164, 166, 167], "itk": [149, 153, 163, 164, 166, 167], "compromis": [149, 153, 163, 164, 166, 167], "qualiti": [149, 153, 163, 164, 166, 167], "speed": [149, 153, 163, 164, 166, 167, 175, 181, 214, 239], "solid": [149, 153, 163, 164, 166, 167], "rotation_prob": [150, 154], "degre": [150, 154, 178, 184, 318, 344, 352, 368], "potenti": [150, 154, 370], "randn": [150, 154], "r5": 151, "r6": 151, "out_min_max": [157, 159], "percentil": [157, 159], "masking_fn": [157, 158, 159, 160], "robust": [157, 159, 163, 164, 166, 167], "outlier": [157, 159], "clip": [157, 159], "inter": [157, 159], "quantil": [157, 159], "p_l": [157, 159], "p_u": [157, 159], "o_": [157, 159], "p_": [157, 159], "quad": [157, 159], "ext": [157, 159], "percentag": [157, 159], "synthseg": [157, 159], "r7": 157, "nnunet": [157, 159], "r8": 157, "insid": [157, 159, 302], "cutoff": [157, 159], "convent": [157, 159], "billot": [157, 159], "2023": [157, 159], "retrain": [157, 159], "analysi": [157, 159, 212, 243], "102789": [157, 159], "isense": [157, 159], "nnu": [157, 159], "net": [157, 159, 215, 227, 247, 248, 249], "biomed": [157, 159], "natur": [157, 159, 171], "203": [157, 159], "211": [157, 159], "loc": [157, 159], "ep": [158, 160], "epsilon": [158, 160], "stabil": [158, 160], "avoid": [158, 160, 302], "determinist": [158, 160], "r9": 159, "r10": 159, "padding_mod": [162, 165], "constant_valu": [162, 165], "edg": [162, 165, 300, 301, 369, 370], "reflect": [162, 165], "info": [162, 165, 371], "physic": [163, 164, 166, 167], "4d": [163, 166, 168], "coordin": [163, 166, 304, 305, 306, 308, 309, 310, 311, 321, 322, 346, 362, 372, 373], "simpleitk": [163, 164, 166, 167], "s_w": [163, 166], "s_h": [163, 166], "s_d": [163, 166], "mm": [163, 166], "offlin": [163, 164, 166, 167], "poorer": [163, 164, 166, 167], "categor": [163, 164, 166, 167], "r11": 163, "spline": [163, 164, 166, 167], "window": [163, 164, 166, 167], "meijer": [163, 164, 166, 167], "1999": [163, 164, 166, 167], "quantit": [163, 164, 166, 167], "approxim": [163, 164, 166, 167], "dummi": [163, 166], "rand": [163, 166], "1mm": [163, 166], "ey": [163, 166], "2mm": [163, 166], "isotrop": [163, 166], "image_torch": [163, 166], "resampled_torch": [163, 166], "as_sitk": [163, 166], "from_sitk": [163, 166], "get_sitk_metadata_from_ras_affin": [163, 166], "lp": [163, 166], "implicit": [164, 167], "r12": 164, "r13": 166, "r14": 167, "inspir": 171, "init": [172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 193, 199, 202, 206, 207, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 326], "randomize_per_channel": [172, 189, 190, 192, 197], "tranform": [172, 190, 309, 322], "wise": [172, 190, 227, 249], "bootstrap": [173, 186], "measur": [173, 174, 178, 184, 186, 187, 188], "vertex": [173, 174, 175, 176, 181, 182, 186, 187, 227, 249, 337, 338, 344, 360, 361, 362, 368, 369, 370], "curupt": [173, 174, 186, 187, 188], "regroup": [173, 186], "pca": [173, 186], "compon": [173, 186, 305, 306, 310, 372], "extern": [173, 186], "popul": [173, 186], "bootstap": [173, 186], "arr": [173, 174, 176, 177, 178, 182, 183, 184, 186, 187], "bootsrap": [173, 186], "controlater": [174, 187], "cachedir": [175, 176, 178, 181, 182, 184, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 327], "recept": [175, 181], "field": [175, 181, 191, 192, 238], "icosahdron": [175, 176, 178, 181, 182, 184], "neighboor": [175, 176, 181, 182, 300, 301], "sufifi": [175, 176, 181, 182], "ie": [175, 176, 181, 182, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "organ": [175, 176, 181, 182, 328, 337, 360], "ring": [175, 176, 181, 182, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280, 282, 286, 289, 291, 293, 297, 317, 337, 351, 360], "replacement_valu": [176, 182], "connex": [176, 182], "neighborhood": [176, 182, 245, 250, 278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 320, 336, 338, 354, 359, 361], "ablat": [176, 182], "cut": [176, 182], "barycentr": [178, 184, 318, 342, 344, 352, 366, 368], "angl": [178, 184, 305, 306, 310, 318, 337, 344, 352, 353, 360, 368, 372], "euler": [178, 184, 318, 344, 352, 368], "smart": [178, 184, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "speedup": [178, 184, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "accordingli": [178, 184], "n_channel": [180, 194, 212, 243], "_data": [180, 194], "uplet": [185, 195, 283, 294, 318, 344, 352, 368], "aplli": 188, "rand_mask": 188, "binari": [188, 206, 207], "corrupt": 188, "multichannel": [189, 197], "multichannelaugment": [189, 197], "applic": [189, 197, 215, 227, 248, 249, 303], "liftifi": 196, "synthet": 198, "gene": [199, 202, 203, 204], "n_max": [200, 201], "target_ico_ord": [200, 201], "regex": [200, 201], "triangular": [200, 201, 300, 301, 343, 345, 367], "purpos": [200, 201], "desir": [200, 201, 336, 359], "assocait": [203, 204], "variat": [205, 209, 228, 256], "svae": [205, 228, 256], "left_mask": [206, 207], "right_mask": [206, 207], "use_ms": [206, 207], "kl": [206, 207], "diverg": [206, 207], "likelihood": [206, 207, 208], "recon": 208, "reconstruct": [208, 210, 228, 252, 256], "relat": [209, 214, 239], "gmvae": 209, "rest": [209, 228, 256], "fmri": [209, 228, 256], "autoencod": [209, 228, 256], "libilab": 209, "rsfmri": 209, "output_shap": [210, 252, 285, 296], "before_latent_dim": [210, 252], "latent_dim": [210, 211, 213, 225, 226, 228, 240, 252, 253, 254, 255, 256], "conv_flt": [210, 211, 225, 226, 228, 252, 253, 254, 255, 256], "fusion_level": [210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "leakyrelu": [210, 211, 225, 226, 228, 252, 253, 254, 255, 256], "batch_norm": [210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "output_channel": [210, 252], "convnet": [210, 252, 257], "left_recon_x": [210, 228, 252, 256], "input_channel": [210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "right_recon_x": [210, 228, 252, 256], "left_x": [211, 216, 225, 226, 228, 229, 253, 254, 255, 256, 258, 267], "right_x": [211, 216, 225, 226, 228, 229, 253, 254, 255, 256, 258, 267], "q": [211, 228, 253, 256], "mlp_dim": [212, 243, 244], "dim_head": [212, 241, 243, 244], "dropout": [212, 241, 242, 243, 244], "emb_dropout": [212, 243], "msit": [212, 243], "dahan": [212, 243], "simon": [212, 213, 240, 243], "midl": [212, 243], "n_verticesi": [212, 243], "trainabl": [212, 243], "msa": [212, 243], "mechan": [212, 243, 302], "feed": [212, 243], "ffn": [212, 243], "expand": [212, 243], "poll": [212, 243], "token": [212, 243], "hidden_lay": [213, 240], "return_logit": [213, 240], "kornblith": [213, 240], "mohammad": [213, 240], "norouzi": [213, 240], "geoffrei": [213, 240], "hinton": [213, 240], "y1": [213, 240], "y2": [213, 240], "input_ord": [214, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "n_layer": [214, 239], "repa_s": [214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "repa_zoom": [214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "dynamic_repa_zoom": [214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 254, 255, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275], "repa": [214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 338, 361], "ico_info": [214, 239], "build_ico_info": [214, 239], "tangent": [214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 294, 320, 337, 353, 354, 360], "tessal": [214, 239, 323, 343, 355, 367], "tessel": [214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 249, 256, 267, 268, 269, 270, 271, 272, 273, 274, 275, 343, 367], "icosehedron": [214, 239], "upsampl": [214, 227, 239, 249, 250, 279, 280, 281, 286, 287, 290, 291, 292, 297, 298, 325, 357], "onform": [214, 239], "gride": [215, 216, 246, 248, 251, 258, 308, 321], "built": [215, 227, 248, 249], "upon": [215, 227, 248, 249], "spma": [215, 248], "rectifi": [215, 227, 248, 249], "halv": [215, 227, 248, 249], "zhao": [215, 227, 248, 249], "ipmi": [215, 227, 248, 249], "cfg": [216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "4096": [216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "init_weight": [216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "stand": [216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 303], "wether": [216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "sphericalgvggbas": [217, 218, 219, 220, 221, 222, 223, 224, 259, 260, 261, 262, 263, 264, 265, 266], "interp": [227, 249, 250], "2x2": [227, 249], "maxpad": [227, 249, 250], "shift": [227, 249, 250], "zeropad": [227, 249, 250], "sphericalgva": [228, 256], "vert": [228, 229, 256, 267], "tri": [228, 229, 256, 267, 345], "reparameter": [228, 256], "reparametr": [228, 256], "trick": [228, 256], "sphericalvggbas": [230, 231, 232, 233, 234, 235, 236, 237, 268, 269, 270, 271, 272, 273, 274, 275], "neighbor_indic": [238, 278, 280, 281, 286, 289, 291, 292, 297], "down_indic": [238, 245, 250, 280, 281, 282, 286, 291, 292, 293, 297, 315, 316, 349, 350], "up_indic": [238, 279, 287, 290, 298, 324, 325, 356, 357], "conv_neighbor_indic": 238, "conv_lay": [245, 250], "in_ch": [245, 246, 250, 251], "out_ch": [245, 246, 250, 251], "conv_neigh_indic": [245, 250], "down_neigh_indic": [245, 281, 282, 292, 293], "pool_mod": 245, "discret": [245, 250, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "pool_ratio": 247, "sum_r": 247, "act": 247, "unpool": 247, "hongyang": 247, "gao": 247, "shuiwang": 247, "ji": 247, "connect": [247, 370], "summat": 247, "nonlinear": 247, "edge_index": 247, "neigh_indic": [250, 278, 283, 289, 294], "up_neigh_indic": [250, 279, 280, 281, 286, 287, 290, 291, 292, 297, 298], "upsamp": [250, 251], "upconv": [250, 251], "max_pool_indic": [250, 281, 292], "klass_nam": 276, "klass_param": 276, "destination_module_glob": 276, "publicli": 276, "assign": [276, 337, 360], "in_feat": [278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298], "out_feat": [278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298], "formul": [278, 289], "ico2_vertic": [278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298], "ico2_triangl": [278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298], "asarrai": [278, 279, 280, 281, 282, 286, 287, 289, 290, 291, 292, 293, 297, 298, 324, 356], "ico2_x": [278, 279, 280, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 297, 298], "ico3_vertic": [279, 280, 281, 282, 286, 287, 290, 291, 292, 293, 297, 298], "ico3_triangl": [279, 280, 281, 282, 286, 287, 290, 291, 292, 293, 297, 298], "ico3_x": [279, 280, 281, 282, 286, 287, 290, 291, 292, 293, 297, 298], "slow": [280, 291], "pooling_typ": [281, 282, 292, 293], "rectagular": [283, 294], "neigh_weight": [283, 294], "proj_ico_x": [284, 285, 295, 296], "pad_azimuth": [284, 285, 288, 295, 296], "pad_elev": [284, 285, 288, 295, 296], "zero_pad": [285, 296], "icoconv": [285, 296], "vmin": [300, 301], "vmax": [300, 301], "black": [300, 301], "color_map": [300, 301], "linearsegmentedcolormap": [300, 301], "opac": [300, 301], "Not": [300, 301], "line": [300, 301], "cm": [300, 301], "coolwarm": [300, 301], "colormap": [300, 301], "sub": 302, "with_mean": 302, "with_std": 302, "sklearn": 302, "scler": 302, "guarante": 302, "csr": 302, "attempt": 302, "entail": 302, "equival": 302, "later": 302, "n_subject": 302, "get_metadata_rout": 302, "rout": 302, "inverse_transform": 302, "x_tr": 302, "set_inverse_transform_request": 302, "unchang": 302, "relev": 302, "enable_metadata_rout": 302, "set_config": 302, "metadata_rout": 302, "retain": 302, "pipelin": 302, "set_partial_fit_request": 302, "partial_fit": 302, "set_transform_request": 302, "suffix": 303, "system": 304, "tool": [304, 375], "cartesian": [305, 306, 310, 372], "array_lik": [305, 306, 310, 372], "radiant": [305, 306, 310, 372], "pi": [305, 306], "r": [305, 306, 310, 372], "ref_arrai": 307, "atol": [307, 312, 374], "toler": [307, 312, 374], "new_ord": 307, "resx": [308, 311, 321, 373], "resi": [308, 311, 321, 373], "ico2_vert": [308, 309, 311, 312, 314, 315, 317, 321, 322, 324, 325, 337, 338, 343, 348, 349, 351, 356, 357, 360, 361, 367, 373, 374], "ico2_tri": [308, 309, 311, 312, 314, 315, 317, 321, 322, 324, 325, 337, 338, 343, 348, 349, 351, 356, 357, 360, 361, 367, 373, 374], "y_grid": [308, 311, 321, 373], "ref_vertic": [309, 312, 322, 374], "ico2_std_vert": [309, 312, 322, 374], "ico2_std_tri": [309, 312, 322, 374], "projecte": [311, 373], "y_std": [312, 374], "target_vertic": [314, 324, 348, 356], "n_dim": [314, 324, 348, 356], "n_queri": [314, 324, 348, 356], "nearest_idx": [314, 348], "ico3_vert": [314, 323, 324, 336, 339, 341, 343, 344, 348, 355, 356, 359, 363, 365, 367, 368], "ico3_tri": [314, 323, 324, 336, 339, 341, 343, 344, 348, 355, 356, 359, 363, 365, 367, 368], "down3to2": [314, 348], "ico3_down_vertic": [314, 348], "consecut": [315, 316, 325, 349, 350, 357], "downsampled_data": [315, 349], "new_n_vertic": [315, 325, 349, 357], "ico4_vert": [315, 316, 325, 349, 350, 357], "ico4_tri": [315, 316, 325, 349, 350, 357], "reshap": [315, 317, 324, 325, 344, 349, 351, 356, 357, 368], "y_down": [315, 349], "squeez": [315, 325, 344, 349, 357, 368], "new_vertic": [316, 350], "newli": [316, 350], "icosahedorn": [316, 350], "new_triangl": [316, 350], "ico2_down_vert": [316, 350], "ico2_down_tri": [316, 350], "start_nod": [317, 351], "recurs": [317, 351], "node_neigh": [317, 351], "asssoci": [318, 352], "euclidian": [318, 352], "grid_in_spher": [320, 338, 354, 361], "grid_in_tplan": [320, 354], "target_triangl": [324, 356], "interp_indic": [324, 356], "n_feat": [324, 356], "y_up": [324, 325, 356, 357], "upsampled_data": [325, 357], "hide_err": 326, "secur": 326, "redirect": 326, "manag": 326, "hide": 326, "func": 327, "wrap": 327, "receiv": 327, "transpar": 327, "overlap": 327, "cifti_fil": 328, "decompos": 328, "cifti": [328, 331, 333], "vol": 328, "surf_left": 328, "surf_right": 328, "surf_fil": [329, 330, 334, 335], "gifti": [330, 335], "surf_nam": 331, "nbviewer": [331, 333], "neurohackademi": [331, 333], "nh2020": [331, 333], "curriculum": [331, 333], "blob": [331, 333], "master": [331, 333], "markiewicz": [331, 333], "gnu": 332, "archiv": 332, "out_path": 332, "n_neigh": [336, 340, 359, 364], "remain": [337, 360], "n_vert": [339, 363], "min_order_to_get_n_neighbor": [340, 364], "hi": [341, 365], "clockwise_from_cent": [342, 366], "clockwis": [342, 366], "counter": [342, 366], "reordered_triangl": [342, 366], "reorder": [342, 366], "ico0_vert": [342, 366], "ico0_tri": [342, 366], "clockwise_ico0_tri": [342, 366], "counter_clockwise_ico0_tri": [342, 366], "euclidean": [344, 368], "rotated_data": [344, 368], "y_rot": [344, 368], "lower_vertic": 345, "ico_fil": 346, "topologi": [346, 347], "ref_fil": 347, "fslr": 347, "point_1": 358, "point_2": 358, "middle_point_cach": 358, "middl": 358, "return_index": 369, "triangles_index": 369, "networkx": 370, "nearbi": 370, "smooth": 370, "logfil": 371, "unifi": 375, "analyz": 375, "advanc": 375, "availbl": 375, "hydra": 375}, "objects": {"nidl.callbacks": [[14, 0, 1, "", "BatchTypingCallback"], [15, 0, 1, "", "KNeighborsClassifierCVCallback"], [16, 0, 1, "", "KNeighborsRegressorCVCallback"], [17, 0, 1, "", "LogisticRegressionCVCallback"], [18, 0, 1, "", "ModelProbing"], [19, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "log_metrics"], [15, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "log_metrics"], [16, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[18, 1, 1, "", "extract_features"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "linear_probing"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "on_test_epoch_end"], [18, 1, 1, "", "on_test_epoch_start"], [18, 1, 1, "", "on_train_epoch_end"], [18, 1, 1, "", "on_validation_epoch_end"], [18, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[20, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[20, 1, 1, "", "on_predict_batch_start"], [20, 1, 1, "", "on_test_batch_start"], [20, 1, 1, "", "on_train_batch_start"], [20, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[21, 0, 1, "", "KNeighborsClassifierCVCallback"], [22, 0, 1, "", "KNeighborsRegressorCVCallback"], [23, 0, 1, "", "LogisticRegressionCVCallback"], [24, 0, 1, "", "ModelProbing"], [25, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log_metrics"], [22, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[24, 1, 1, "", "extract_features"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "linear_probing"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "on_test_epoch_end"], [24, 1, 1, "", "on_test_epoch_start"], [24, 1, 1, "", "on_train_epoch_end"], [24, 1, 1, "", "on_validation_epoch_end"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "predict"]], "nidl.datasets": [[27, 0, 1, "", "BaseImageDataset"], [28, 0, 1, "", "BaseNumpyDataset"], [29, 0, 1, "", "ImageDataFrameDataset"], [30, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[27, 1, 1, "", "get_checksum"], [27, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[28, 1, 1, "", "get_data"]], "nidl.datasets.ImageDataFrameDataset": [[29, 1, 1, "", "apply_target_transform"], [29, 1, 1, "", "apply_transform"]], "nidl.datasets.OpenBHB": [[30, 1, 1, "", "download_dataset_split"], [30, 1, 1, "", "download_file"], [30, 1, 1, "", "get_cat12_template"], [30, 1, 1, "", "get_fs_labels"], [30, 1, 1, "", "get_fs_roi_feature_names"], [30, 1, 1, "", "get_fs_xhemi_feature_names"], [30, 1, 1, "", "get_neuromorphometrics_atlas"], [30, 1, 1, "", "get_quasiraw_template"], [30, 1, 1, "", "get_vbm_roi_labels"], [30, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[31, 0, 1, "", "BaseDataset"], [32, 0, 1, "", "BaseImageDataset"], [33, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[32, 1, 1, "", "get_checksum"], [32, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[33, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[34, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[34, 1, 1, "", "download_dataset_split"], [34, 1, 1, "", "download_file"], [34, 1, 1, "", "get_cat12_template"], [34, 1, 1, "", "get_fs_labels"], [34, 1, 1, "", "get_fs_roi_feature_names"], [34, 1, 1, "", "get_fs_xhemi_feature_names"], [34, 1, 1, "", "get_neuromorphometrics_atlas"], [34, 1, 1, "", "get_quasiraw_template"], [34, 1, 1, "", "get_vbm_roi_labels"], [34, 1, 1, "", "make_dataset"]], "nidl.datasets.pandas_dataset": [[35, 0, 1, "", "ImageDataFrameDataset"], [36, 2, 1, "", "default_image_loader"]], "nidl.datasets.pandas_dataset.ImageDataFrameDataset": [[35, 1, 1, "", "apply_target_transform"], [35, 1, 1, "", "apply_transform"]], "nidl.estimators": [[38, 0, 1, "", "BaseEstimator"], [39, 0, 1, "", "ClassifierMixin"], [40, 0, 1, "", "ClusterMixin"], [41, 0, 1, "", "RegressorMixin"], [42, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[38, 1, 1, "", "fit"], [38, 1, 1, "", "log"], [38, 1, 1, "", "log_dict"], [38, 1, 1, "", "predict"], [38, 1, 1, "", "predict_step"], [38, 1, 1, "", "training_step"], [38, 1, 1, "", "transform"], [38, 1, 1, "", "transform_step"], [38, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[43, 0, 1, "", "BaseEstimator"], [44, 0, 1, "", "ClassifierMixin"], [45, 0, 1, "", "ClusterMixin"], [46, 0, 1, "", "RegressorMixin"], [47, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[43, 1, 1, "", "fit"], [43, 1, 1, "", "log"], [43, 1, 1, "", "log_dict"], [43, 1, 1, "", "predict"], [43, 1, 1, "", "predict_step"], [43, 1, 1, "", "training_step"], [43, 1, 1, "", "transform"], [43, 1, 1, "", "transform_step"], [43, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[49, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[49, 1, 1, "", "configure_optimizers"], [49, 1, 1, "", "cross_entropy_loss"], [49, 1, 1, "", "freeze_encoder"], [49, 1, 1, "", "on_validation_epoch_end"], [49, 1, 1, "", "predict_step"], [49, 1, 1, "", "training_step"], [49, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[50, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[50, 1, 1, "", "configure_optimizers"], [50, 1, 1, "", "cross_entropy_loss"], [50, 1, 1, "", "freeze_encoder"], [50, 1, 1, "", "on_validation_epoch_end"], [50, 1, 1, "", "predict_step"], [50, 1, 1, "", "training_step"], [50, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[52, 0, 1, "", "SimCLR"], [53, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[52, 1, 1, "", "configure_optimizers"], [52, 1, 1, "", "info_nce_loss"], [52, 1, 1, "", "training_step"], [52, 1, 1, "", "transform_step"], [52, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[53, 1, 1, "", "configure_optimizers"], [53, 1, 1, "", "parse_batch"], [53, 1, 1, "", "training_step"], [53, 1, 1, "", "transform_step"], [53, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[54, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[54, 1, 1, "", "configure_optimizers"], [54, 1, 1, "", "info_nce_loss"], [54, 1, 1, "", "training_step"], [54, 1, 1, "", "transform_step"], [54, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[56, 0, 1, "", "ProjectionHead"], [57, 0, 1, "", "SimCLRProjectionHead"], [58, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[56, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[59, 0, 1, "", "ProjectionHead"], [60, 0, 1, "", "SimCLRProjectionHead"], [61, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[59, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[62, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[62, 1, 1, "", "configure_optimizers"], [62, 1, 1, "", "parse_batch"], [62, 1, 1, "", "training_step"], [62, 1, 1, "", "transform_step"], [62, 1, 1, "", "validation_step"]], "nidl.experiment": [[63, 2, 1, "", "fetch_experiment"], [64, 2, 1, "", "filter_config"], [65, 2, 1, "", "get_env"], [66, 2, 1, "", "load_interface"], [67, 2, 1, "", "update_params"]], "nidl.losses": [[69, 0, 1, "", "InfoNCE"], [70, 0, 1, "", "KernelMetric"], [71, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[69, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[70, 1, 1, "", "fit"], [70, 1, 1, "", "pairwise"], [70, 1, 1, "", "scotts_factor"], [70, 1, 1, "", "set_bandwidth"], [70, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[71, 1, 1, "", "forward"]], "nidl.losses.infonce": [[72, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[72, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[73, 0, 1, "", "KernelMetric"], [74, 0, 1, "", "PairwiseCosineSimilarity"], [75, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[73, 1, 1, "", "fit"], [73, 1, 1, "", "pairwise"], [73, 1, 1, "", "scotts_factor"], [73, 1, 1, "", "set_bandwidth"], [73, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[74, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[75, 1, 1, "", "forward"]], "nidl.metrics._regression": [[77, 2, 1, "", "_check_reg_targets"], [78, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [79, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[80, 2, 1, "", "pearson_r"], [83, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[81, 2, 1, "", "pearson_r"], [82, 2, 1, "", "regression_report"]], "nidl.transforms": [[84, 0, 1, "", "Identity"], [85, 0, 1, "", "MultiViewsTransform"], [86, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[84, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[85, 1, 1, "", "apply_transform"], [85, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[86, 1, 1, "", "apply_transform"], [86, 1, 1, "", "parse_data"], [86, 1, 1, "", "parse_probability"]], "nidl.utils": [[88, 0, 1, "", "Bunch"], [89, 0, 1, "", "Weights"], [102, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[89, 1, 1, "", "hf_download"], [89, 1, 1, "", "hub_split"], [89, 1, 1, "", "load_pretrained"], [89, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[90, 0, 1, "", "Bunch"]], "nidl.utils.color": [[91, 0, 1, "", "Colored"], [92, 2, 1, "", "attr"], [93, 2, 1, "", "fg"], [94, 2, 1, "", "hex"], [95, 2, 1, "", "print_multicolor"], [96, 2, 1, "", "print_result"], [97, 2, 1, "", "print_subtitle"], [98, 2, 1, "", "print_title"], [99, 2, 1, "", "print_warning"], [100, 2, 1, "", "random_stylize"], [101, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[91, 1, 1, "", "attribute"], [91, 1, 1, "", "background"], [91, 1, 1, "", "foreground"], [91, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[103, 0, 1, "", "_AvailableIfDescriptor"], [104, 2, 1, "", "_estimator_is"], [105, 2, 1, "", "available_if"], [106, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[107, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[107, 1, 1, "", "hf_download"], [107, 1, 1, "", "hub_split"], [107, 1, 1, "", "load_pretrained"], [107, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[110, 0, 1, "", "AlexNet"], [111, 0, 1, "", "DenseNet"], [112, 0, 1, "", "ResNet"], [113, 0, 1, "", "ResNetTruncated"], [115, 2, 1, "", "densenet121"], [123, 2, 1, "", "resnet18"], [124, 2, 1, "", "resnet18_trunc"], [137, 2, 1, "", "resnet50"], [138, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[110, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[111, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[112, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[114, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[114, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[116, 0, 1, "", "DenseNet"], [117, 0, 1, "", "_DenseBlock"], [118, 0, 1, "", "_DenseLayer"], [119, 0, 1, "", "_Transition"], [120, 2, 1, "", "_bn_function_factory"], [121, 2, 1, "", "_densenet"], [122, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[116, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[117, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[118, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[125, 0, 1, "", "BasicBlock"], [126, 0, 1, "", "Bottleneck"], [127, 0, 1, "", "ResNet"], [128, 0, 1, "", "ResNetTruncated"], [129, 2, 1, "", "_resnet"], [130, 2, 1, "", "_resnet_trunc"], [131, 2, 1, "", "conv1x1"], [132, 2, 1, "", "conv3x3"], [133, 2, 1, "", "resnet18"], [134, 2, 1, "", "resnet18_trunc"], [135, 2, 1, "", "resnet50"], [136, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[125, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[126, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[127, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[128, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[142, 0, 1, "", "RandomGaussianBlur"], [143, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[142, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[143, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[144, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[144, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[145, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[145, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[147, 0, 1, "", "RandomErasing"], [148, 0, 1, "", "RandomFlip"], [149, 0, 1, "", "RandomResizedCrop"], [150, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[147, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[148, 1, 1, "", "apply_transform"], [148, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[149, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[150, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[151, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[151, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[152, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[152, 1, 1, "", "apply_transform"], [152, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[153, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[153, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[154, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[154, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[157, 0, 1, "", "RobustRescaling"], [158, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[157, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[158, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[159, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[159, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[160, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[160, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[162, 0, 1, "", "CropOrPad"], [163, 0, 1, "", "Resample"], [164, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[162, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[163, 1, 1, "", "apply_transform"], [163, 1, 1, "", "as_sitk"], [163, 1, 1, "", "from_sitk"], [163, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[164, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[165, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[165, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[166, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[166, 1, 1, "", "apply_transform"], [166, 1, 1, "", "as_sitk"], [166, 1, 1, "", "from_sitk"], [166, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[167, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[167, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[168, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[168, 1, 1, "", "parse_data"]], "surfify.augmentation": [[172, 0, 1, "", "BaseTransformer"], [173, 0, 1, "", "GroupMixUp"], [174, 0, 1, "", "HemiMixUp"], [175, 0, 1, "", "SurfBlur"], [176, 0, 1, "", "SurfCutOut"], [177, 0, 1, "", "SurfNoise"], [178, 0, 1, "", "SurfRotation"], [179, 0, 1, "", "Transformer"], [180, 2, 1, "", "apply_chained_transforms"], [185, 2, 1, "", "interval"], [189, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[172, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[173, 1, 1, "", "groupby"], [173, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[174, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[175, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[176, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[177, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[178, 1, 1, "", "run"]], "surfify.augmentation.base": [[181, 0, 1, "", "SurfBlur"], [182, 0, 1, "", "SurfCutOut"], [183, 0, 1, "", "SurfNoise"], [184, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[181, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[182, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[183, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[184, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[186, 0, 1, "", "GroupMixUp"], [187, 0, 1, "", "HemiMixUp"], [188, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[186, 1, 1, "", "groupby"], [186, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[187, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[188, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[190, 0, 1, "", "BaseTransformer"], [191, 0, 1, "", "RandomAugmentation"], [192, 0, 1, "", "Transform"], [193, 0, 1, "", "Transformer"], [194, 2, 1, "", "apply_chained_transforms"], [195, 2, 1, "", "interval"], [196, 2, 1, "", "listify"], [197, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[190, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[191, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[191, 3, 1, "", "dtype"], [191, 3, 1, "", "high"], [191, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[192, 3, 1, "", "probability"], [192, 3, 1, "", "randomize_per_channel"], [192, 3, 1, "", "transform"]], "surfify.datasets": [[199, 0, 1, "", "ClassificationDataset"], [200, 0, 1, "", "GenericSurfDataset"], [204, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[201, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[202, 0, 1, "", "ClassificationDataset"], [203, 2, 1, "", "make_classification"]], "surfify.losses": [[206, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[207, 0, 1, "", "SphericalVAELoss"], [208, 2, 1, "", "log_likelihood"]], "surfify.models": [[210, 0, 1, "", "HemiFusionDecoder"], [211, 0, 1, "", "HemiFusionEncoder"], [212, 0, 1, "", "SiT"], [213, 0, 1, "", "SimCLR"], [214, 0, 1, "", "SphericalBase"], [215, 0, 1, "", "SphericalGUNet"], [216, 0, 1, "", "SphericalGVGG"], [217, 0, 1, "", "SphericalGVGG11"], [218, 0, 1, "", "SphericalGVGG11BN"], [219, 0, 1, "", "SphericalGVGG13"], [220, 0, 1, "", "SphericalGVGG13BN"], [221, 0, 1, "", "SphericalGVGG16"], [222, 0, 1, "", "SphericalGVGG16BN"], [223, 0, 1, "", "SphericalGVGG19"], [224, 0, 1, "", "SphericalGVGG19BN"], [225, 0, 1, "", "SphericalHemiFusionDecoder"], [226, 0, 1, "", "SphericalHemiFusionEncoder"], [227, 0, 1, "", "SphericalUNet"], [228, 0, 1, "", "SphericalVAE"], [229, 0, 1, "", "SphericalVGG"], [230, 0, 1, "", "SphericalVGG11"], [231, 0, 1, "", "SphericalVGG11BN"], [232, 0, 1, "", "SphericalVGG13"], [233, 0, 1, "", "SphericalVGG13BN"], [234, 0, 1, "", "SphericalVGG16"], [235, 0, 1, "", "SphericalVGG16BN"], [236, 0, 1, "", "SphericalVGG19"], [237, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[210, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[211, 1, 1, "", "forward"]], "surfify.models.SiT": [[212, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[213, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[214, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[215, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[216, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[225, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[226, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[227, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[228, 1, 1, "", "decode"], [228, 1, 1, "", "encode"], [228, 1, 1, "", "forward"], [228, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[229, 1, 1, "", "forward"]], "surfify.models.base": [[238, 0, 1, "", "Ico"], [239, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[238, 3, 1, "", "conv_neighbor_indices"], [238, 3, 1, "", "down_indices"], [238, 3, 1, "", "neighbor_indices"], [238, 3, 1, "", "order"], [238, 3, 1, "", "triangles"], [238, 3, 1, "", "up_indices"], [238, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[239, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[240, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[240, 1, 1, "", "forward"]], "surfify.models.sit": [[241, 0, 1, "", "Attention"], [242, 0, 1, "", "FeedForward"], [243, 0, 1, "", "SiT"], [244, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[241, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[242, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[243, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[244, 1, 1, "", "forward"]], "surfify.models.unet": [[245, 0, 1, "", "DownBlock"], [246, 0, 1, "", "DownGBlock"], [247, 0, 1, "", "GraphicalUNet"], [248, 0, 1, "", "SphericalGUNet"], [249, 0, 1, "", "SphericalUNet"], [250, 0, 1, "", "UpBlock"], [251, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[245, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[246, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[247, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[248, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[249, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[250, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[251, 1, 1, "", "forward"]], "surfify.models.vae": [[252, 0, 1, "", "HemiFusionDecoder"], [253, 0, 1, "", "HemiFusionEncoder"], [254, 0, 1, "", "SphericalHemiFusionDecoder"], [255, 0, 1, "", "SphericalHemiFusionEncoder"], [256, 0, 1, "", "SphericalVAE"], [257, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[252, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[253, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[254, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[255, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[256, 1, 1, "", "decode"], [256, 1, 1, "", "encode"], [256, 1, 1, "", "forward"], [256, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[258, 0, 1, "", "SphericalGVGG"], [259, 0, 1, "", "SphericalGVGG11"], [260, 0, 1, "", "SphericalGVGG11BN"], [261, 0, 1, "", "SphericalGVGG13"], [262, 0, 1, "", "SphericalGVGG13BN"], [263, 0, 1, "", "SphericalGVGG16"], [264, 0, 1, "", "SphericalGVGG16BN"], [265, 0, 1, "", "SphericalGVGG19"], [266, 0, 1, "", "SphericalGVGG19BN"], [267, 0, 1, "", "SphericalVGG"], [268, 0, 1, "", "SphericalVGG11"], [269, 0, 1, "", "SphericalVGG11BN"], [270, 0, 1, "", "SphericalVGG13"], [271, 0, 1, "", "SphericalVGG13BN"], [272, 0, 1, "", "SphericalVGG16"], [273, 0, 1, "", "SphericalVGG16BN"], [274, 0, 1, "", "SphericalVGG19"], [275, 0, 1, "", "SphericalVGG19BN"], [276, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[258, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[267, 1, 1, "", "forward"]], "surfify.nn": [[278, 0, 1, "", "IcoDiNeConv"], [279, 0, 1, "", "IcoFixIndexUpSample"], [280, 0, 1, "", "IcoGenericUpConv"], [281, 0, 1, "", "IcoMaxIndexUpSample"], [282, 0, 1, "", "IcoPool"], [283, 0, 1, "", "IcoRePaConv"], [284, 0, 1, "", "IcoSpMaConv"], [285, 0, 1, "", "IcoSpMaConvTranspose"], [286, 0, 1, "", "IcoUpConv"], [287, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[278, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[279, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[280, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[281, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[282, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[283, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[284, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[285, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[286, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[287, 1, 1, "", "forward"]], "surfify.nn.functional": [[288, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[289, 0, 1, "", "IcoDiNeConv"], [290, 0, 1, "", "IcoFixIndexUpSample"], [291, 0, 1, "", "IcoGenericUpConv"], [292, 0, 1, "", "IcoMaxIndexUpSample"], [293, 0, 1, "", "IcoPool"], [294, 0, 1, "", "IcoRePaConv"], [295, 0, 1, "", "IcoSpMaConv"], [296, 0, 1, "", "IcoSpMaConvTranspose"], [297, 0, 1, "", "IcoUpConv"], [298, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[289, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[290, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[291, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[292, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[293, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[294, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[295, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[296, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[297, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[298, 1, 1, "", "forward"]], "surfify.plotting": [[300, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[301, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[302, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[302, 1, 1, "", "fit"], [302, 1, 1, "", "get_metadata_routing"], [302, 1, 1, "", "inverse_transform"], [302, 1, 1, "", "set_inverse_transform_request"], [302, 1, 1, "", "set_partial_fit_request"], [302, 1, 1, "", "set_transform_request"], [302, 1, 1, "", "transform"]], "surfify.transforms": [[303, 0, 1, "", "RandomCompose"]], "surfify.utils": [[305, 2, 1, "", "cart2sph"], [313, 2, 1, "", "debug_msg"], [314, 2, 1, "", "downsample"], [315, 2, 1, "", "downsample_data"], [316, 2, 1, "", "downsample_ico"], [317, 2, 1, "", "find_neighbors"], [318, 2, 1, "", "find_rotation_interpol_coefs"], [319, 2, 1, "", "get_logger"], [320, 2, 1, "", "get_rectangular_projection"], [321, 2, 1, "", "grid2text"], [322, 2, 1, "", "ico2ico"], [323, 2, 1, "", "icosahedron"], [324, 2, 1, "", "interpolate"], [325, 2, 1, "", "interpolate_data"], [336, 2, 1, "", "min_depth_to_get_n_neighbors"], [337, 2, 1, "", "neighbors"], [338, 2, 1, "", "neighbors_rec"], [339, 2, 1, "", "number_of_ico_vertices"], [340, 2, 1, "", "number_of_neighbors"], [341, 2, 1, "", "order_of_ico_from_vertices"], [342, 2, 1, "", "order_triangles"], [343, 2, 1, "", "patch_tri"], [344, 2, 1, "", "rotate_data"], [371, 2, 1, "", "setup_logging"], [372, 2, 1, "", "sph2cart"], [373, 2, 1, "", "text2grid"], [374, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[306, 2, 1, "", "cart2sph"], [307, 2, 1, "", "find_corresponding_order"], [308, 2, 1, "", "grid2text"], [309, 2, 1, "", "ico2ico"], [310, 2, 1, "", "sph2cart"], [311, 2, 1, "", "text2grid"], [312, 2, 1, "", "text2ico"]], "surfify.utils.io": [[326, 0, 1, "", "HidePrints"], [327, 2, 1, "", "compute_and_store"], [328, 2, 1, "", "decompose_cifti"], [329, 2, 1, "", "read_freesurfer"], [330, 2, 1, "", "read_gifti"], [331, 2, 1, "", "surf_data_from_cifti"], [332, 2, 1, "", "ungzip"], [333, 2, 1, "", "volume_from_cifti"], [334, 2, 1, "", "write_freesurfer"], [335, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[345, 2, 1, "", "_patch_tri_iter"], [346, 2, 1, "", "build_freesurfer_ico"], [347, 2, 1, "", "build_fslr_ref"], [348, 2, 1, "", "downsample"], [349, 2, 1, "", "downsample_data"], [350, 2, 1, "", "downsample_ico"], [351, 2, 1, "", "find_neighbors"], [352, 2, 1, "", "find_rotation_interpol_coefs"], [353, 2, 1, "", "get_angle_with_xaxis"], [354, 2, 1, "", "get_rectangular_projection"], [355, 2, 1, "", "icosahedron"], [356, 2, 1, "", "interpolate"], [357, 2, 1, "", "interpolate_data"], [358, 2, 1, "", "middle_point"], [359, 2, 1, "", "min_depth_to_get_n_neighbors"], [360, 2, 1, "", "neighbors"], [361, 2, 1, "", "neighbors_rec"], [362, 2, 1, "", "normalize"], [363, 2, 1, "", "number_of_ico_vertices"], [364, 2, 1, "", "number_of_neighbors"], [365, 2, 1, "", "order_of_ico_from_vertices"], [366, 2, 1, "", "order_triangles"], [367, 2, 1, "", "patch_tri"], [368, 2, 1, "", "rotate_data"], [369, 2, 1, "", "triangles_to_edges"], [370, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 277], "comput": [1, 9, 376], "time": [1, 9, 376], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 51, 209], "setup": 2, "data": [2, 6], "augment": [2, 4, 140, 141, 146, 171], "dataset": [2, 8, 26, 198], "train": [2, 8], "logist": 2, "regress": [2, 76], "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 12, 139, 140, 141, 146, 155, 156, 161, 170], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 299], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 209], "segment": 8, "inspect": 8, "model": [8, 209], "predict": 8, "label": 8, "api": [10, 12, 13, 26, 37, 48, 51, 55, 68, 76, 87, 108, 109, 139, 140, 141, 146, 155, 156, 161, 169, 170, 171, 198, 205, 209, 277, 299, 304], "document": [10, 12, 13, 26, 37, 48, 51, 55, 68, 76, 87, 108, 109, 139, 140, 141, 146, 155, 156, 161, 169, 170, 171, 198, 205, 209, 277, 299, 304], "nidl": [10, 11, 12, 13, 26, 37, 48, 51, 55, 68, 76, 87, 108, 109, 139, 140, 141, 146, 155, 156, 161, 169], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "model_prob": 13, "check_typ": 13, "base": [26, 37, 171, 209], "pandas_dataset": 26, "openbhb": 26, "estim": [37, 48, 51, 55], "linear": 48, "logistic_regress": 48, "exampl": [49, 50, 52, 54, 89, 107], "ssl": [51, 55], "yawar": 51, "util": [55, 87, 171, 304], "projection_head": 55, "loss": [68, 205], "infonc": 68, "yaware_infonc": 68, "metric": 76, "classif": 76, "_regress": 76, "color": 87, "bunch": 87, "valid": 87, "weight": 87, "volum": [108, 109, 139, 140, 141, 146, 155, 156, 161], "backbon": 109, "densenet3d": 109, "alexnet3d": 109, "resnet3d": 109, "volume_transform": 139, "intens": [141, 156], "random_blur": 141, "random_nois": 141, "spatial": [146, 161], "random_rot": 146, "random_resized_crop": 146, "random_flip": 146, "random_eras": 146, "preprocess": [155, 156, 161, 170], "z_normal": 156, "rescal": 156, "resiz": 161, "resampl": 161, "crop_or_pad": 161, "search": 169, "surfifi": [170, 171, 198, 205, 209, 277, 299, 304], "mixup": 171, "_samples_gener": 198, "_gener": 198, "vae": [205, 209], "vgg": 209, "sit": 209, "nn": 277, "function": 277, "plot": 299, "io": 304, "sampl": 304, "coord": 304}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [376, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of nidl": [[10, "api-documentation-of-nidl"], [12, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "nidl.transforms": [[12, "nidl-transforms"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[13, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[26, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[26, "nidl-datasets"]], "nidl.datasets.base": [[26, "nidl-datasets-base"]], "nidl.datasets.pandas_dataset": [[26, "nidl-datasets-pandas-dataset"]], "nidl.datasets.openbhb": [[26, "id1"]], "API documentation of nidl.estimators": [[37, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[37, "nidl-estimators"]], "nidl.estimators.base": [[37, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[48, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[48, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[48, "nidl-estimators-linear-logistic-regression"]], "Examples": [[49, "examples"], [50, "examples"], [52, "examples"], [54, "examples"], [89, "examples"], [107, "examples"]], "API documentation of nidl.estimators.ssl": [[51, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[51, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[51, "id1"]], "nidl.estimators.ssl.yaware": [[51, "nidl-estimators-ssl-yaware"]], "API documentation of nidl.estimators.ssl.utils": [[55, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[55, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[55, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[68, "api-documentation-of-nidl-losses"]], "nidl.losses": [[68, "nidl-losses"]], "nidl.losses.infonce": [[68, "id1"]], "nidl.losses.yaware_infonce": [[68, "nidl-losses-yaware-infonce"]], "API documentation of nidl.metrics": [[76, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[76, "nidl-metrics"]], "nidl.metrics.classification": [[76, "nidl-metrics-classification"]], "nidl.metrics._regression": [[76, "nidl-metrics-regression"]], "nidl.metrics.regression": [[76, "id1"]], "API documentation of nidl.utils": [[87, "api-documentation-of-nidl-utils"]], "nidl.utils": [[87, "nidl-utils"]], "nidl.utils.color": [[87, "nidl-utils-color"]], "nidl.utils.bunch": [[87, "id1"]], "nidl.utils.validation": [[87, "nidl-utils-validation"]], "nidl.utils.weights": [[87, "id2"]], "API documentation of nidl.volume": [[108, "api-documentation-of-nidl-volume"]], "nidl.volume": [[108, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[109, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[109, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[109, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[109, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[109, "nidl-volume-backbones-resnet3d"]], "API documentation of nidl.volume.transforms": [[139, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[139, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[139, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[140, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[140, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[141, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[141, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[141, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[141, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[146, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[146, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[146, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[146, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[146, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[146, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "API documentation of nidl.volume.transforms.preprocessing": [[155, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[155, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[156, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[156, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[156, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[156, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[161, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[161, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[161, "id1"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[161, "id2"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[161, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "Search in API documentation of nidl": [[169, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[170, "api-documentation-of-surfify"]], "surfify": [[170, "surfify"]], "surfify.transforms": [[170, "surfify-transforms"]], "surfify.preprocessing": [[170, "surfify-preprocessing"]], "API documentation of surfify.augmentation": [[171, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[171, "surfify-augmentation"]], "surfify.augmentation.base": [[171, "surfify-augmentation-base"]], "surfify.augmentation.utils": [[171, "surfify-augmentation-utils"]], "surfify.augmentation.mixup": [[171, "surfify-augmentation-mixup"]], "API documentation of surfify.datasets": [[198, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[198, "surfify-datasets"]], "surfify.datasets._samples_generator": [[198, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[198, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[205, "api-documentation-of-surfify-losses"]], "surfify.losses": [[205, "surfify-losses"]], "surfify.losses.vae": [[205, "surfify-losses-vae"]], "API documentation of surfify.models": [[209, "api-documentation-of-surfify-models"]], "surfify.models": [[209, "surfify-models"]], "surfify.models.vgg": [[209, "surfify-models-vgg"]], "surfify.models.base": [[209, "surfify-models-base"]], "surfify.models.simclr": [[209, "id1"]], "surfify.models.sit": [[209, "id2"]], "surfify.models.unet": [[209, "surfify-models-unet"]], "surfify.models.vae": [[209, "surfify-models-vae"]], "API documentation of surfify.nn": [[277, "api-documentation-of-surfify-nn"]], "surfify.nn": [[277, "surfify-nn"]], "surfify.nn.functional": [[277, "surfify-nn-functional"]], "surfify.nn.modules": [[277, "surfify-nn-modules"]], "API documentation of surfify.plotting": [[299, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[299, "surfify-plotting"]], "surfify.plotting.surface": [[299, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[304, "api-documentation-of-surfify-utils"]], "surfify.utils": [[304, "surfify-utils"]], "surfify.utils.io": [[304, "surfify-utils-io"]], "surfify.utils.sampling": [[304, "surfify-utils-sampling"]], "surfify.utils.coord": [[304, "surfify-utils-coord"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[14, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[18, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[19, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[27, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[28, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[28, "nidl.datasets.BaseNumpyDataset.get_data"]], "imagedataframedataset (class in nidl.datasets)": [[29, "nidl.datasets.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.imagedataframedataset method)": [[29, "nidl.datasets.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.imagedataframedataset method)": [[29, "nidl.datasets.ImageDataFrameDataset.apply_transform"]], "openbhb (class in nidl.datasets)": [[30, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[30, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[31, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[32, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[32, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[32, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[33, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[33, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[34, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[34, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "imagedataframedataset (class in nidl.datasets.pandas_dataset)": [[35, "nidl.datasets.pandas_dataset.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[35, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[35, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_transform"]], "default_image_loader() (in module nidl.datasets.pandas_dataset)": [[36, "nidl.datasets.pandas_dataset.default_image_loader"]], "baseestimator (class in nidl.estimators)": [[38, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[38, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[39, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[40, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[41, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[42, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[43, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[43, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[44, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[45, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[46, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[47, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[49, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[49, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[50, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[52, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[52, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[52, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[52, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[52, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[52, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[53, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[54, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[54, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[54, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[54, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[54, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[54, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[56, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[56, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[57, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[58, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[59, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[59, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[60, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[61, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[62, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[63, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[64, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[65, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[66, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[67, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[69, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[69, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[70, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[70, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[70, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[70, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[70, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[70, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[71, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[71, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[72, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[72, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[73, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[73, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[73, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[73, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[73, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[73, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[74, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[74, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[75, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[75, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[77, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[78, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[79, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[80, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[81, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[82, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[83, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[84, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[84, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[85, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[85, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[85, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[86, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[86, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[86, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[86, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[88, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[89, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[89, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[89, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[89, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[89, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[90, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[91, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[91, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[91, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[91, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[91, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[92, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[93, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[94, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[95, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[96, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[97, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[98, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[99, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[100, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[101, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[102, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[103, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[104, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[105, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[106, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[107, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[107, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[107, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[107, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[107, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[110, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[110, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[111, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[111, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[112, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[112, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[113, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[113, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[114, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[114, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[115, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[116, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[116, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[117, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[117, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[118, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[118, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[119, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[120, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[121, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[122, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[123, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[124, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[125, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[125, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[126, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[126, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[127, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[127, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[128, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[132, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[134, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[135, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[136, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[137, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[138, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[142, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[142, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[143, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[143, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[144, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[144, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[145, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[145, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[147, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[147, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[148, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[148, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[148, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[151, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[151, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[152, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[152, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[152, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[153, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[153, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[154, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[154, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[157, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[157, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[158, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[158, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[159, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[159, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[160, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[160, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[162, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[162, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[163, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[163, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[163, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[165, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[165, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[166, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[166, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[167, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[167, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[168, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[168, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[172, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[172, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[173, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[173, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[173, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[174, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[174, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[175, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[175, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[176, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[176, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[177, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[177, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[178, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[178, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[179, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[180, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[181, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[181, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[182, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[182, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[183, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[183, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[184, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[184, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[185, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[186, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[186, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[186, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[187, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[187, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[188, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[188, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[189, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[190, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[190, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[191, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[191, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[191, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[191, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[191, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[192, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[192, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[192, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[192, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[195, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[196, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[197, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[199, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[200, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[201, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[202, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[203, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[204, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[206, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[207, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[208, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[210, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[210, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[211, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[211, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[212, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[212, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[213, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[213, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[214, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[214, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[215, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[215, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[216, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[216, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[217, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[218, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[219, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[220, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[221, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[222, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[223, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[224, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[225, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[225, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[226, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[226, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[227, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[227, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[228, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[228, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[228, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[228, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[228, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[229, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[229, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[230, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[231, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[232, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[233, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[234, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[235, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[236, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[237, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[238, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[238, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[239, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[239, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[240, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[240, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[241, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[241, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[242, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[242, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[243, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[243, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[244, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[244, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[245, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[245, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[246, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[246, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[247, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[247, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[248, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[248, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[249, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[249, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[250, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[250, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[251, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[251, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[252, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[252, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[253, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[253, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[254, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[254, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[255, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[255, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[256, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[256, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[256, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[256, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[256, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[257, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[258, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[258, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[259, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[260, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[261, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[262, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[263, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[264, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[265, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[267, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[273, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[274, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[275, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[276, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[278, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[278, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[279, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[279, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[280, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[280, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[281, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[281, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[282, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[282, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[283, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[283, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[284, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[284, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[285, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[285, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[286, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[286, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[287, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[287, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[288, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[289, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[289, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[290, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[290, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[291, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[291, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[292, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[292, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[293, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[293, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[294, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[294, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[295, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[295, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[296, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[296, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[297, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[297, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[298, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[298, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[300, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[301, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[302, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[302, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[303, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[305, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[306, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[307, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[308, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[309, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[310, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[311, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[312, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[313, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[314, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[315, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[316, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[317, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[318, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[319, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[320, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[321, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[322, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[323, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[324, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[325, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[326, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[327, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[328, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[329, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[330, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[331, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[332, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[333, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[334, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[335, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[336, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[337, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[338, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[339, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[340, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[341, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[342, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[343, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[344, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[345, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[346, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[347, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[348, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[349, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[350, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[351, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[352, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[368, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[369, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[370, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[371, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[372, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[373, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[374, "surfify.utils.text2ico"]]}})
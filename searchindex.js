Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/model_probing", "auto_gallery/openbhb", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "auto_gallery/yaware_openbhb", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.ClassificationProbingCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.MultiTaskEstimator", "generated/nidl.callbacks.MultitaskModelProbing", "generated/nidl.callbacks.RegressionProbingCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.ClassificationProbingCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RegressionProbingCallback", "generated/nidl.callbacks.multitask_probing.MultiTaskEstimator", "generated/nidl.callbacks.multitask_probing.MultitaskModelProbing", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.ImageDataFrameDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset", "generated/nidl.datasets.pandas_dataset.default_image_loader", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.autoencoders", "generated/nidl.estimators.autoencoders.VAE", "generated/nidl.estimators.autoencoders.vae.VAE", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.BetaVAELoss", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.beta_vae.BetaVAELoss", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/model_probing.rst", "auto_gallery/openbhb.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "auto_gallery/yaware_openbhb.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.ClassificationProbingCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.MultiTaskEstimator.rst", "generated/nidl.callbacks.MultitaskModelProbing.rst", "generated/nidl.callbacks.RegressionProbingCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.ClassificationProbingCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RegressionProbingCallback.rst", "generated/nidl.callbacks.multitask_probing.MultiTaskEstimator.rst", "generated/nidl.callbacks.multitask_probing.MultitaskModelProbing.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.ImageDataFrameDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset.rst", "generated/nidl.datasets.pandas_dataset.default_image_loader.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.autoencoders.rst", "generated/nidl.estimators.autoencoders.VAE.rst", "generated/nidl.estimators.autoencoders.vae.VAE.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.BetaVAELoss.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.beta_vae.BetaVAELoss.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Model probing callback of embedding estimators", "Presentation of the OpenBHB dataset and baseline models for age and sex predictions", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "Weakly Supervised Contrastive Learning with y-Aware", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.autoencoders</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 3, 13, 19, 20, 25, 27, 41, 49, 55, 56, 57, 58, 59, 60, 62, 65, 68, 77, 81, 93, 97, 111, 113, 115, 165, 167, 220, 251, 310, 384], "supervis": [0, 1, 3, 13, 32, 33, 37, 38, 55, 56, 57, 58, 59, 60, 62, 65, 68, 93, 97, 115, 384], "contrast": [0, 3, 33, 37, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 78, 83, 93, 97, 115, 165, 167, 208, 209, 221, 248, 384], "learn": [0, 3, 13, 15, 18, 20, 22, 24, 26, 27, 33, 37, 47, 48, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 75, 78, 79, 83, 84, 93, 97, 115, 118, 119, 122, 124, 165, 167, 217, 221, 236, 248, 264, 286, 297, 383, 384], "simclr": [0, 3, 13, 55, 56, 58, 60, 63, 64, 66, 67, 93, 97, 115, 177, 221, 248, 384], "weakli": [0, 3, 33, 37, 59, 68, 93, 384], "y": [0, 2, 3, 8, 10, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 37, 38, 59, 68, 78, 83, 93, 155, 156, 159, 160, 211, 212, 310, 313, 314, 316, 318, 319, 320, 323, 329, 332, 333, 352, 357, 364, 365, 376, 380, 381, 382, 384], "awar": [0, 3, 33, 37, 59, 68, 78, 83, 93, 384], "present": [0, 3, 33, 37, 59, 68, 97, 114, 115, 384], "openbhb": [0, 3, 13, 33, 37, 177, 384], "dataset": [0, 3, 8, 13, 19, 21, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 69, 177, 207, 208, 209, 210, 211, 212, 307, 319, 320, 323, 332, 333, 352, 357, 364, 365, 376, 381, 382, 384], "baselin": [0, 3, 33, 37, 384], "model": [0, 3, 4, 13, 18, 19, 22, 24, 25, 26, 28, 33, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 93, 95, 97, 115, 120, 121, 123, 130, 135, 136, 177, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 384], "ag": [0, 3, 12, 32, 33, 37, 38, 384], "sex": [0, 3, 33, 37, 384], "predict": [0, 3, 4, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 37, 41, 49, 55, 56, 58, 60, 62, 65, 88, 89, 220, 224, 237, 251, 266, 275, 384], "probe": [0, 3, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 58, 59, 60, 68, 69, 93, 384], "callback": [0, 3, 4, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 37, 41, 49, 55, 56, 58, 59, 60, 68, 93, 177, 384], "embed": [0, 3, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 47, 48, 58, 59, 60, 68, 76, 78, 80, 83, 93, 118, 119, 120, 121, 122, 124, 135, 136, 220, 251, 384], "estim": [0, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 75, 77, 79, 81, 85, 86, 90, 91, 93, 112, 114, 177, 310, 317, 330, 384], "neighbor": [0, 1, 5, 6, 11, 12, 13, 171, 172, 174, 175, 177, 181, 183, 184, 189, 190, 194, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 258, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 291, 294, 297, 299, 300, 301, 302, 305, 312, 316, 319, 322, 325, 326, 329, 332, 344, 345, 346, 348, 352, 356, 359, 360, 364, 367, 368, 369, 372, 376, 378, 381, 384], "unet": [0, 5, 11, 13, 177, 223, 235, 253, 254, 255, 256, 257, 258, 259, 384], "segment": [0, 2, 5, 11, 120, 121, 135, 136, 165, 167, 384], "project": [0, 2, 5, 6, 7, 9, 11, 12, 14, 30, 35, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 186, 192, 220, 251, 317, 320, 322, 325, 328, 330, 331, 345, 346, 351, 356, 359, 361, 362, 363, 366, 368, 369, 375, 382, 384], "textur": [0, 5, 6, 11, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 194, 195, 218, 219, 224, 233, 234, 236, 237, 260, 261, 262, 263, 264, 266, 275, 308, 309, 316, 319, 320, 323, 329, 332, 333, 352, 357, 364, 365, 376, 381, 382, 384], "icosahedron": [0, 5, 6, 8, 9, 10, 11, 13, 177, 183, 184, 186, 189, 190, 192, 207, 210, 211, 212, 217, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 257, 258, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 316, 317, 319, 320, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 381, 382, 384], "match": [0, 1, 5, 11, 31, 36, 170, 172, 173, 175, 315, 320, 382, 384], "augment": [0, 5, 11, 13, 30, 31, 34, 35, 36, 55, 56, 58, 59, 60, 68, 69, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 171, 172, 174, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 384], "download": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 33, 37, 95, 97, 115], "all": [0, 1, 2, 4, 7, 19, 20, 25, 27, 30, 32, 33, 35, 37, 38, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 58, 59, 60, 62, 65, 68, 82, 87, 88, 89, 90, 91, 93, 94, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 157, 161, 170, 173, 221, 223, 235, 248, 249, 250, 252, 255, 256, 257, 291, 292, 293, 302, 303, 304, 384], "exampl": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 19, 25, 32, 38, 41, 49, 62, 65, 90, 91, 96, 98, 113, 158, 162, 165, 167, 171, 174, 222, 224, 235, 236, 237, 247, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 381, 382, 384], "python": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 15, 111], "sourc": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 236, 237, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 275, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "code": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 23, 58, 60, 69, 72, 75, 79, 108, 109], "auto_gallery_python": 0, "zip": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 340], "jupyt": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "notebook": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "auto_gallery_jupyt": 0, "galleri": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384], "gener": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 29, 30, 33, 35, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 75, 79, 93, 94, 155, 157, 159, 161, 196, 206, 207, 210, 211, 212, 217, 319, 325, 340, 342, 343, 354, 355, 359, 381], "sphinx": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "go": [1, 2, 4, 6, 7, 8, 9, 10, 12], "end": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 59, 68, 108, 109, 114], "full": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 41, 49, 88, 89, 171, 172, 174, 175, 324, 358], "thi": [1, 2, 4, 7, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "show": [1, 2, 4, 6, 7, 8, 9, 10, 12, 90, 91, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "you": [1, 4, 7, 12, 14, 17, 19, 23, 25, 30, 32, 33, 35, 37, 38, 41, 49, 55, 56, 59, 68, 69, 70, 97, 115, 310], "how": [1, 2, 4, 6, 7, 9, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "investig": [1, 12], "given": [1, 4, 18, 19, 22, 24, 25, 26, 33, 37, 47, 48, 58, 59, 60, 68, 75, 78, 79, 83, 93, 97, 114, 115, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 216, 218, 260, 310, 335, 352, 376, 377, 378], "an": [1, 2, 4, 8, 9, 10, 14, 18, 19, 21, 22, 24, 25, 26, 28, 32, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 69, 71, 72, 96, 97, 98, 111, 113, 114, 115, 120, 121, 135, 136, 155, 159, 183, 184, 189, 190, 193, 196, 197, 199, 203, 205, 222, 223, 235, 247, 256, 257, 286, 297, 310, 316, 319, 320, 324, 329, 331, 333, 344, 347, 348, 349, 352, 358, 363, 365, 366, 367, 371, 372, 373, 376, 381, 382], "barlow": [1, 4], "twin": [1, 4], "us": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "notion": 1, "A": [1, 4, 6, 7, 8, 9, 10, 20, 27, 30, 31, 33, 34, 35, 36, 37, 47, 48, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 97, 115, 179, 208, 209, 217, 221, 248, 311], "standard": [1, 2, 4, 12, 78, 83, 150, 151, 152, 153, 166, 168, 183, 185, 189, 191, 222, 223, 235, 247, 256, 257, 310, 331, 334, 351, 363, 375], "machin": [1, 69, 97, 115], "e": [1, 4, 8, 14, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 72, 75, 77, 78, 79, 81, 83, 88, 89, 93, 119, 120, 121, 124, 135, 136, 155, 159, 171, 174, 310, 319, 381], "g": [1, 4, 32, 33, 37, 38, 41, 49, 55, 56, 58, 59, 60, 63, 66, 68, 78, 83, 120, 121, 135, 136, 155, 159, 171, 174, 310], "linear": [1, 4, 12, 13, 47, 48, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 77, 78, 81, 83, 118, 122, 157, 161, 171, 172, 174, 175, 177, 220, 223, 235, 251, 256, 257, 258], "svm": 1, "i": [1, 2, 4, 7, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "evalu": [1, 2, 4, 8, 21, 28, 77, 81, 296], "task": [1, 2, 4, 12, 20, 21, 27, 28, 32, 38, 55, 56, 58, 60, 85, 86, 120, 121, 135, 136], "being": [1, 2, 4], "fit": [1, 4, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 41, 47, 48, 49, 59, 68, 77, 81, 114, 310], "It": [1, 2, 4, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "allow": [1, 2, 4, 7, 17, 23, 31, 36, 69, 70, 310, 335, 352, 376], "user": [1, 14, 18, 19, 24, 25, 41, 49, 70, 223, 235, 256, 257, 310, 352, 376], "understand": [1, 58, 60], "what": [1, 4, 59, 68, 69, 72], "concept": [1, 47, 48, 75, 79], "ar": [1, 2, 4, 7, 8, 10, 12, 17, 19, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 70, 87, 88, 89, 90, 91, 93, 94, 96, 98, 150, 151, 152, 153, 155, 156, 158, 159, 160, 162, 165, 167, 171, 172, 174, 175, 179, 208, 209, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 296, 310, 315, 319, 332, 345, 352, 354, 364, 368, 376, 378, 381], "ha": [1, 2, 4, 7, 19, 25, 41, 49, 55, 56, 58, 59, 60, 62, 65, 68, 90, 91, 119, 120, 121, 124, 135, 136, 151, 153, 165, 166, 167, 168, 223, 235, 256, 257, 310], "been": [1, 2, 4, 33, 37, 41, 49, 55, 56, 58, 59, 60, 68], "first": [1, 2, 4, 7, 8, 10, 12, 33, 37, 58, 59, 60, 62, 65, 68, 76, 78, 80, 83, 88, 89, 119, 120, 121, 124, 135, 136, 218, 220, 223, 235, 251, 253, 254, 256, 257, 260, 352, 376], "introduc": [1, 2, 75, 79], "guillaum": 1, "alain": 1, "yoshua": 1, "bengio": 1, "2017": [1, 47, 48, 75, 79, 155, 159], "1": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 93, 94, 96, 98, 113, 118, 119, 120, 121, 122, 124, 133, 134, 135, 136, 139, 140, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 172, 174, 175, 180, 181, 184, 190, 194, 198, 199, 200, 207, 210, 211, 212, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 253, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 292, 293, 294, 297, 299, 300, 301, 303, 304, 305, 308, 309, 310, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 354, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 378, 381, 382], "intern": [1, 41, 49, 55, 56, 62, 63, 64, 65, 66, 67, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 171, 172, 174, 175, 221, 248, 249, 250, 252], "behavior": 1, "deep": [1, 2, 13, 15, 58, 59, 60, 68, 165, 167, 383], "neural": [1, 59, 68, 155, 159], "network": [1, 4, 47, 48, 59, 68, 155, 159, 217, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "along": [1, 2, 33, 37, 156, 160, 310, 315], "differ": [1, 2, 4, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 58, 59, 60, 68, 69, 171, 174, 184, 190, 208, 209, 222, 223, 235, 247, 256, 257], "layer": [1, 4, 47, 48, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 118, 119, 120, 121, 122, 124, 135, 136, 137, 138, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 255, 256, 257, 258, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306], "techniqu": [1, 4, 12, 157, 161, 171, 172, 174, 175, 378], "aim": [1, 12], "answer": 1, "question": [1, 4], "like": [1, 2, 4, 20, 21, 27, 28, 41, 49, 55, 56, 59, 68, 69, 85, 86, 88, 89, 90, 91, 120, 121, 135, 136, 255, 310, 311], "intermedi": 1, "inform": [1, 2, 4, 12, 30, 31, 34, 35, 36, 69, 78, 83, 208, 209, 217, 222, 247], "contain": [1, 2, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 69, 96, 98, 208, 209, 222, 247, 265, 308, 309, 335, 351, 375], "Then": [1, 7, 12], "adapt": [1, 4, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 184, 190, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "benchmark": [1, 2, 4], "vision": [1, 32, 38, 217, 220, 251, 351, 375], "dino": 1, "dinov2": 1, "classic": [1, 4, 235, 257, 258], "imagenet": [1, 4], "cifar": 1, "implement": [1, 4, 19, 21, 25, 28, 41, 47, 48, 49, 55, 56, 63, 64, 66, 67, 76, 77, 78, 80, 81, 83, 84, 93, 94, 111, 156, 160, 183, 189, 217, 220, 221, 236, 248, 251, 255, 264], "k": [1, 12, 58, 60, 77, 78, 81, 83, 119, 124, 181, 194, 286, 291, 297, 302, 320, 382], "nearest": [1, 8, 157, 161, 171, 172, 174, 175, 181, 194, 235, 257, 258, 316, 319, 322, 329, 332, 356, 364, 381], "ouput": 1, "classifi": [1, 4, 18, 20, 24, 27, 42, 50], "iclr": [1, 47, 48, 59, 68, 75, 79], "workshop": 1, "requir": [1, 2, 4, 12, 41, 49, 55, 56, 59, 68, 77, 81, 84, 158, 162], "some": [1, 4, 9, 12, 13, 41, 49, 55, 56, 58, 59, 60, 68, 69, 71, 77, 81, 120, 121, 135, 136, 187, 188, 201, 202, 206, 310, 378], "packag": [1, 4, 7, 12, 14], "besid": [1, 4, 12], "nidl": [1, 2, 4, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 383], "let": [1, 2, 4, 12], "": [1, 2, 4, 7, 9, 12, 21, 22, 26, 28, 32, 33, 37, 38, 41, 49, 59, 68, 77, 81, 88, 89, 114, 155, 159, 171, 174, 182, 183, 184, 186, 189, 190, 192, 195, 207, 210, 211, 212, 218, 219, 223, 233, 234, 235, 253, 256, 257, 258, 260, 261, 262, 263, 286, 297, 322, 325, 335, 345, 346, 350, 351, 356, 359, 368, 369, 374, 375], "start": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 120, 121, 135, 136, 184, 190, 325, 359], "import": [1, 2, 4, 6, 7, 8, 9, 10, 12, 32, 38, 69, 71, 72, 90, 91, 96, 98, 113, 158, 162, 165, 167, 171, 174, 206, 222, 224, 235, 236, 237, 247, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 381, 382], "our": [1, 4, 7, 12, 55, 56], "librari": [1, 4, 12], "below": [1, 4, 12, 59, 68, 69], "o": [1, 4, 7, 9, 312, 322, 325, 345, 346, 351, 356, 359, 368, 369, 375], "re": [1, 84], "matplotlib": [1, 2, 4, 6, 7, 8, 9, 10, 12, 308, 309, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "pyplot": [1, 2, 4, 6, 7, 8, 9, 10, 12, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "plt": [1, 2, 4, 6, 7, 8, 9, 10, 12, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "numpi": [1, 2, 6, 7, 8, 10, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 59, 68, 84, 94, 165, 167, 170, 171, 173, 174, 176, 310, 313, 314, 318, 380], "np": [1, 2, 6, 7, 8, 10, 12, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 316, 329, 332, 364], "torch": [1, 4, 8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 32, 38, 41, 47, 48, 49, 58, 59, 60, 68, 75, 76, 78, 79, 80, 83, 93, 94, 97, 115, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 217, 224, 235, 236, 237, 255, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "nn": [1, 4, 8, 10, 13, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 76, 78, 80, 82, 83, 97, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 177, 183, 189, 218, 219, 221, 233, 234, 248, 249, 250, 252, 253, 255, 258, 260, 261, 262, 263, 265, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "function": [1, 2, 4, 7, 8, 10, 13, 15, 17, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 55, 56, 59, 63, 66, 68, 69, 70, 71, 72, 73, 75, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 165, 166, 167, 168, 177, 179, 183, 184, 186, 188, 189, 190, 192, 193, 197, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 216, 217, 218, 219, 221, 223, 233, 234, 235, 248, 249, 250, 252, 255, 256, 257, 260, 261, 262, 263, 265, 284, 291, 292, 293, 296, 302, 303, 304, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "func": [1, 335], "from": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 76, 77, 80, 81, 88, 89, 90, 91, 96, 98, 113, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 151, 153, 155, 157, 158, 159, 161, 162, 165, 167, 171, 174, 181, 184, 190, 194, 208, 209, 218, 222, 223, 224, 235, 236, 237, 247, 256, 257, 260, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 381, 382, 384], "sklearn": [1, 2, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 310], "linear_model": [1, 2, 12], "logisticregress": [1, 2, 4, 13, 54, 55, 56, 177], "ridg": 1, "tensorboard": 1, "backend": [1, 4], "event_process": 1, "event_accumul": 1, "util": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 18, 19, 21, 22, 24, 25, 26, 28, 59, 62, 63, 64, 65, 66, 67, 68, 85, 86, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 177, 183, 184, 186, 189, 190, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 235, 236, 237, 257, 264, 275, 285, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 307, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "dataload": [1, 4, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 58, 59, 60, 68, 69], "torchvis": [1, 4, 12, 59, 68, 94, 155, 157, 159, 161], "transform": [1, 4, 7, 12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 47, 48, 49, 53, 69, 92, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 187, 188, 197, 198, 200, 201, 202, 205, 208, 209, 217, 218, 220, 251, 252, 260, 310, 311, 313, 314, 317, 318, 330, 351, 375, 380], "op": [1, 12, 59, 68], "mlp": [1, 4, 12, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "make_grid": [1, 4], "model_prob": [1, 3, 13, 24, 25, 26, 177, 384], "classificationprobingcallback": [1, 13, 16, 18, 24, 177], "multitask_prob": [1, 13, 27, 28, 177], "multitaskmodelprob": [1, 13, 16, 21, 28, 177], "ssl": [1, 4, 12, 13, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 177], "yawarecontrastivelearn": [1, 12, 13, 57, 59, 68, 177], "multiviewstransform": [1, 4, 12, 13, 15, 93, 177], "we": [1, 2, 4, 7, 8, 10, 12, 33, 37, 41, 49, 55, 56, 58, 59, 60, 68, 75, 77, 79, 81, 112, 155, 157, 159, 161, 284, 296, 339, 341], "defin": [1, 2, 4, 12, 30, 31, 32, 34, 35, 36, 38, 41, 47, 48, 49, 55, 56, 62, 63, 65, 66, 69, 70, 75, 79, 82, 88, 89, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 174, 181, 194, 196, 199, 208, 209, 221, 223, 235, 248, 249, 250, 252, 255, 256, 257, 258, 259, 284, 291, 292, 293, 302, 303, 304, 308, 309, 311, 328, 331, 337, 338, 342, 343, 362, 363], "global": [1, 4, 12, 18, 21, 24, 28, 69, 155, 159, 284], "paramet": [1, 4, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 113, 114, 115, 118, 119, 120, 121, 122, 124, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "throughout": [1, 12], "data_dir": [1, 4, 12, 97, 115], "tmp": [1, 2, 4, 12], "batch_siz": [1, 4, 10, 12, 41, 47, 48, 49, 76, 78, 80, 83, 219, 233, 234, 236, 261, 262, 263, 264], "128": [1, 4, 12, 59, 62, 63, 64, 65, 66, 67, 68, 118, 122, 171, 174, 218, 219, 233, 234, 260, 261, 262, 263], "num_work": [1, 4, 12], "10": [1, 2, 4, 6, 7, 9, 10, 12, 33, 37, 59, 68, 76, 80, 90, 91, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 224, 235, 237, 257, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "latent_s": [1, 4, 12, 55, 56, 58, 60], "32": [1, 6, 12, 41, 49, 119, 124, 223, 235, 236, 255, 256, 257, 264], "For": [1, 2, 4, 12, 32, 38, 41, 47, 48, 49, 55, 56, 114, 165, 167, 171, 172, 174, 175, 265, 345, 368], "illustr": 1, "purpos": [1, 208, 209], "focu": [1, 4, 12], "handwritten": 1, "digit": [1, 90, 91], "60k": 1, "imag": [1, 4, 8, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 55, 56, 58, 59, 60, 68, 75, 79, 156, 157, 158, 160, 161, 162, 165, 167, 171, 172, 174, 175, 179, 208, 209, 216, 319, 336, 381], "10k": 1, "test": [1, 4, 7, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 49], "size": [1, 4, 8, 9, 10, 47, 48, 58, 59, 60, 68, 78, 83, 118, 119, 120, 121, 122, 124, 135, 136, 150, 152, 155, 157, 159, 161, 165, 167, 170, 171, 173, 174, 181, 182, 184, 190, 194, 195, 196, 208, 209, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 292, 293, 296, 302, 303, 304, 325, 328, 346, 351, 353, 359, 362, 369, 375], "28x28": 1, "pixel": [1, 4, 75, 79], "each": [1, 2, 4, 7, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 33, 35, 37, 41, 49, 55, 56, 58, 59, 60, 62, 65, 68, 69, 75, 79, 90, 91, 119, 120, 121, 124, 135, 136, 155, 157, 158, 159, 161, 162, 165, 166, 167, 168, 170, 173, 181, 183, 184, 189, 190, 194, 197, 205, 207, 210, 211, 212, 216, 218, 219, 220, 222, 223, 233, 234, 235, 247, 251, 255, 256, 257, 260, 261, 262, 263, 310, 325, 326, 345, 346, 352, 359, 360, 368, 369, 376], "0": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 17, 23, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 75, 76, 77, 78, 79, 80, 81, 83, 84, 88, 89, 90, 91, 94, 113, 120, 121, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 170, 171, 172, 173, 174, 175, 184, 186, 190, 192, 199, 200, 220, 236, 246, 249, 250, 251, 252, 255, 264, 287, 292, 293, 298, 303, 304, 308, 309, 315, 317, 320, 322, 325, 330, 345, 346, 350, 351, 352, 356, 359, 368, 369, 374, 375, 376, 378, 382, 384], "9": [1, 2, 4, 6, 7, 59, 68, 90, 91, 214, 215, 384], "rather": [1, 30, 35], "small": [1, 2, 7, 12, 33, 37, 59, 68, 75, 79, 118, 122, 166, 168], "scale": [1, 2, 4, 8, 10, 12, 33, 37, 41, 47, 48, 49, 55, 56, 76, 77, 78, 80, 81, 83, 155, 157, 159, 161, 165, 166, 167, 168, 178, 207, 210, 211, 212, 310, 319, 320, 323, 328, 332, 333, 346, 352, 357, 362, 364, 365, 369, 376, 381, 382], "compar": [1, 2, 4, 12], "modern": 1, "suffici": [1, 4], "logist": [1, 55, 56], "evolv": 1, "becom": 1, "more": [1, 2, 4, 12, 18, 24, 30, 31, 32, 34, 35, 36, 38, 58, 59, 60, 68, 75, 79, 119, 124, 157, 161, 170, 173, 178, 208, 209, 383], "linearli": 1, "separ": [1, 21, 28, 32, 38, 69, 165, 166, 167, 168], "class": [1, 4, 8, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 334], "load": [1, 4, 10, 12, 13, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 49, 69, 72, 73, 97, 115, 206, 208, 209, 339, 341], "These": [1, 2, 33, 37, 59, 68], "scale_transform": [1, 4], "compos": [1, 4, 12, 69, 220, 251, 311, 345, 368], "totensor": [1, 4], "normal": [1, 2, 4, 13, 41, 47, 48, 49, 55, 56, 59, 62, 65, 68, 75, 76, 77, 79, 80, 81, 120, 121, 135, 136, 155, 159, 165, 166, 167, 168, 177, 178, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 310, 312, 361, 370], "5": [1, 2, 4, 6, 8, 9, 10, 11, 12, 90, 91, 158, 162, 165, 167, 186, 192, 222, 223, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 302, 328, 345, 346, 362, 368, 369, 384], "train_xy_dataset": 1, "true": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 37, 38, 41, 47, 48, 49, 59, 68, 75, 79, 85, 86, 90, 91, 97, 103, 108, 109, 110, 113, 115, 119, 124, 155, 159, 180, 197, 198, 205, 214, 215, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 255, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 294, 297, 299, 300, 301, 305, 308, 309, 310, 316, 317, 320, 323, 325, 329, 330, 345, 350, 357, 359, 368, 374, 382], "test_xy_dataset": 1, "fals": [1, 2, 4, 6, 8, 9, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 41, 47, 48, 49, 55, 56, 59, 68, 88, 89, 90, 91, 97, 111, 113, 115, 119, 120, 121, 124, 125, 126, 135, 136, 155, 159, 208, 209, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 253, 254, 255, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 308, 309, 310, 317, 322, 324, 325, 330, 331, 332, 333, 334, 336, 339, 341, 345, 346, 350, 351, 352, 356, 358, 359, 363, 364, 365, 368, 369, 374, 375, 376, 377], "To": [1, 4, 7, 12, 19, 25, 30, 35, 41, 49, 55, 56, 85], "perform": [1, 2, 4, 12, 18, 19, 22, 24, 25, 26, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 82, 114, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 181, 194, 221, 248, 249, 250, 252, 255, 290, 291, 292, 293, 301, 302, 303, 304, 310], "need": [1, 2, 4, 7, 8, 41, 49, 59, 68, 69, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 296, 302, 303, 304], "set": [1, 2, 4, 7, 12, 20, 27, 33, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 68, 69, 73, 77, 78, 81, 83, 88, 89, 93, 99, 165, 167, 170, 172, 173, 175, 184, 186, 190, 192, 206, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 255, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 311, 322, 332, 336, 356, 364], "creat": [1, 4, 12, 111, 165, 167, 171, 174, 193, 199, 200, 203, 206, 208, 209, 246, 284], "multipl": [1, 21, 22, 26, 28, 32, 33, 37, 38, 41, 49, 55, 56, 59, 68, 69, 70, 88, 89, 93, 119, 124, 155, 158, 159, 162, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "view": [1, 2, 58, 59, 60, 68, 76, 78, 80, 83, 93, 350, 374], "same": [1, 2, 4, 7, 12, 21, 28, 33, 37, 41, 49, 58, 59, 60, 68, 69, 70, 78, 83, 85, 86, 92, 93, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 315, 317, 330, 335, 340, 345, 368], "sinc": [1, 4, 7, 8, 12, 41, 49, 58, 59, 60, 68, 82, 88, 89, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 165, 167, 171, 172, 174, 175, 221, 248, 249, 250, 252, 255, 291, 292, 293, 296, 302, 303, 304], "work": [1, 4, 7, 12, 30, 32, 35, 38, 59, 68, 69, 171, 174, 183, 184, 189, 190, 265, 310], "grayscal": [1, 4], "random": [1, 4, 6, 12, 41, 49, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 171, 174, 180, 184, 190, 196, 197, 198, 199, 205, 207, 210, 211, 212], "resiz": [1, 4, 13, 94, 157, 161, 172, 175, 177], "crop": [1, 4, 157, 161, 170, 173], "gaussian": [1, 4, 12, 59, 68, 75, 77, 78, 79, 81, 83, 150, 151, 152, 153, 157, 161, 171, 172, 174, 175, 183, 185, 189, 191, 207, 210, 211, 212], "blur": [1, 4, 150, 152, 183, 189], "reduc": [1, 2, 4, 12, 41, 49, 85, 120, 121, 135, 136, 181, 194, 220, 251, 323, 324, 326, 357, 358, 360], "kernel": [1, 12, 59, 68, 77, 78, 81, 83, 120, 121, 135, 136, 150, 152, 171, 172, 174, 175, 183, 189, 292, 293, 303, 304, 345, 346, 368, 369], "3x3": [1, 9, 120, 121, 135, 136, 140, 223, 235, 256, 257], "onli": [1, 2, 4, 7, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "contrast_transform": [1, 4, 12], "randomresizedcrop": [1, 4, 13, 94, 154, 157, 161, 177], "28": [1, 6], "gaussianblur": [1, 4], "kernel_s": [1, 4, 8, 292, 293, 303, 304], "3": [1, 2, 4, 6, 7, 9, 10, 19, 25, 59, 68, 69, 90, 91, 96, 98, 111, 119, 120, 121, 124, 135, 136, 150, 152, 155, 159, 171, 172, 174, 175, 183, 184, 186, 189, 190, 192, 207, 208, 209, 210, 211, 212, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 247, 256, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 316, 317, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 337, 338, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 381, 382], "custom": [1, 41, 49, 59, 68, 85, 86, 114], "return": [1, 2, 12, 19, 20, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 111, 113, 115, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 202, 203, 204, 205, 208, 209, 211, 212, 216, 218, 219, 220, 222, 224, 233, 234, 236, 237, 247, 251, 260, 261, 262, 263, 264, 265, 266, 275, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382], "without": [1, 2, 12, 14, 58, 59, 60, 68, 90, 91, 156, 160, 165, 167, 340], "label": [1, 2, 4, 8, 12, 18, 19, 22, 24, 25, 26, 32, 33, 37, 38, 55, 56, 58, 59, 60, 68, 78, 83, 156, 158, 160, 162, 171, 172, 174, 175, 211, 212, 308, 309], "sslmnist": 1, "def": [1, 2, 6, 8, 12, 19, 25, 41, 49, 55, 56, 59, 68, 113], "__getitem__": [1, 33, 37], "index": [1, 2, 30, 31, 35, 36, 41, 49, 55, 56, 58, 59, 60, 68, 90, 91, 156, 160, 183, 184, 189, 190, 322, 325, 345, 356, 359, 368, 377], "img": [1, 4, 32, 38], "_": [1, 8, 12, 32, 38, 47, 48, 289, 290, 300, 301, 311, 339, 341], "super": [1, 19, 25, 41, 49, 55, 56], "ssl_dataset": 1, "n_view": [1, 4, 12, 93], "2": [1, 2, 4, 6, 7, 9, 10, 12, 19, 25, 47, 48, 59, 68, 69, 77, 78, 81, 83, 84, 88, 89, 90, 91, 96, 98, 113, 120, 121, 135, 136, 150, 152, 156, 160, 171, 174, 193, 199, 200, 203, 207, 210, 211, 212, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 313, 314, 316, 317, 319, 320, 322, 323, 324, 325, 328, 329, 330, 332, 333, 344, 345, 346, 351, 356, 357, 358, 359, 362, 364, 365, 367, 368, 369, 375, 377, 381, 382], "test_ssl_dataset": 1, "And": [1, 4], "final": [1, 4, 10, 12, 33, 37, 58, 59, 60, 64, 67, 68, 118, 122, 235, 257], "loader": [1, 4, 10, 39], "train_xy_load": 1, "shuffl": [1, 4, 10, 12, 41, 49], "drop_last": [1, 4], "pin_memori": [1, 4], "test_xy_load": 1, "train_ssl_load": 1, "test_ssl_load": 1, "befor": [1, 4, 32, 38, 114, 157, 161, 223, 235, 256, 257, 293, 304, 310], "show_imag": 1, "titl": [1, 2, 4, 8, 105, 106], "none": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 69, 72, 73, 78, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 114, 115, 120, 121, 133, 134, 135, 136, 156, 158, 160, 162, 165, 166, 167, 168, 171, 174, 176, 181, 183, 184, 186, 189, 190, 192, 194, 207, 208, 209, 210, 211, 212, 214, 215, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 293, 304, 308, 309, 310, 323, 324, 333, 335, 352, 354, 355, 357, 358, 365, 366, 376, 379], "nrow": [1, 4], "8": [1, 2, 4, 6, 8, 10, 11, 12, 33, 37, 41, 49, 55, 56, 90, 91, 166, 168, 171, 172, 174, 175, 235, 249, 257, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 384], "grid": [1, 2, 12, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 256, 257, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 316, 319, 328, 329, 346, 362, 369, 381], "pad_valu": [1, 4], "figur": [1, 2, 4, 8, 308, 309], "figsiz": [1, 2, 4, 6, 7, 8, 9, 12, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "imshow": [1, 4, 8, 319, 381], "permut": [1, 4, 7, 182, 195, 315, 317, 330], "cpu": [1, 4, 19, 25, 41, 49], "axi": [1, 4, 8, 10, 156, 158, 160, 162, 170, 173, 308, 309, 310, 315, 326, 332, 339, 341, 345, 352, 360, 361, 364, 368, 376], "off": [1, 4, 8], "origin": [1, 2, 4, 8, 12, 157, 161, 165, 166, 167, 168, 171, 174, 179, 216, 310], "next": [1, 2, 4, 7, 41, 49, 55, 56, 335], "iter": [1, 4, 41, 49, 55, 56, 265], "augmented_view": 1, "view1": 1, "view2": 1, "fig": [1, 2, 6, 7, 9, 12, 308, 309, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "ax": [1, 2, 6, 7, 8, 9, 12, 156, 158, 160, 162, 293, 304, 308, 309, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "subplot": [1, 2, 6, 7, 9, 12, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "6": [1, 2, 4, 6, 12, 33, 37, 59, 68, 90, 91, 96, 98, 236, 237, 246, 264, 275, 345, 351, 368, 375], "4": [1, 2, 3, 4, 6, 7, 9, 10, 12, 19, 25, 59, 68, 75, 77, 79, 81, 90, 91, 119, 120, 121, 124, 135, 136, 156, 158, 160, 162, 171, 172, 174, 175, 235, 246, 257, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 301, 304, 305, 306, 315, 317, 320, 323, 324, 330, 333, 348, 357, 358, 365, 372, 378, 382], "rang": [1, 2, 4, 6, 7, 10, 41, 49, 150, 151, 152, 153, 155, 157, 159, 161, 165, 167, 313, 314, 348, 372], "cmap": [1, 2, 12], "grai": [1, 2, 9, 12, 33, 37], "set_titl": [1, 2, 12], "f": [1, 2, 4, 8, 12, 55, 56, 58, 60, 165, 167, 223, 235, 256, 257], "item": [1, 2, 10, 12, 32, 38, 335], "tight_layout": [1, 2, 6, 12], "can": [1, 2, 4, 7, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 55, 56, 58, 59, 60, 64, 67, 68, 69, 75, 77, 79, 81, 94, 112, 151, 153, 155, 159, 166, 168, 180, 187, 198, 201, 208, 209, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 265, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 334, 335], "now": [1, 2, 4, 7, 10, 12, 120, 121, 135, 136, 165, 167, 265], "The": [1, 2, 4, 7, 12, 18, 19, 21, 22, 24, 25, 26, 28, 30, 32, 33, 35, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 63, 66, 68, 69, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 88, 89, 90, 91, 93, 94, 114, 151, 153, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 183, 185, 186, 189, 191, 192, 217, 218, 219, 220, 223, 233, 234, 235, 236, 251, 255, 256, 257, 260, 261, 262, 263, 264, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 310, 313, 314, 334, 335], "everi": [1, 4, 41, 49, 59, 68, 82, 94, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 322, 356], "epoch": [1, 4, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 59, 68], "log": [1, 18, 19, 21, 22, 24, 25, 26, 28, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 75, 78, 79, 83, 214, 215, 216, 220, 222, 223, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 255, 256, 257, 264, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 327, 379], "default": [1, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 114, 115, 118, 119, 120, 121, 122, 124, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 174, 175, 180, 181, 183, 184, 186, 189, 190, 192, 193, 194, 197, 198, 203, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 290, 292, 293, 297, 301, 303, 304, 308, 309, 310, 315, 319, 320, 323, 324, 326, 328, 331, 333, 334, 335, 336, 345, 346, 347, 350, 351, 352, 354, 355, 357, 358, 360, 362, 363, 365, 368, 369, 371, 374, 375, 376, 379, 381, 382], "max_it": [1, 2, 12], "200": [1, 4], "every_n_train_epoch": [1, 18, 19, 21, 22, 24, 25, 26, 28], "simpl": [1, 2, 4, 6, 7, 9, 10, 12, 58, 60, 62, 63, 64, 65, 66, 67, 118, 122, 155, 157, 159, 161, 221, 248, 317, 330, 378], "lenet": 1, "architectur": [1, 4, 10, 13, 55, 56, 58, 59, 60, 68, 116, 117, 118, 119, 120, 121, 122, 124, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 217, 223, 224, 235, 236, 237, 255, 256, 257, 264, 266, 275], "encod": [1, 4, 12, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 75, 79, 213, 217, 219, 223, 233, 234, 235, 236, 256, 257, 261, 262, 263, 264], "few": [1, 4], "output": [1, 4, 19, 21, 25, 28, 41, 47, 48, 49, 55, 56, 59, 68, 69, 72, 85, 86, 88, 89, 90, 91, 92, 94, 96, 98, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 183, 184, 189, 190, 218, 220, 223, 235, 251, 253, 254, 255, 256, 257, 258, 259, 260, 265, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 334, 335], "dimens": [1, 4, 7, 12, 47, 48, 58, 59, 60, 68, 94, 150, 152, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 172, 173, 175, 220, 251, 265], "which": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 64, 67, 68, 75, 78, 79, 83, 114, 120, 121, 135, 136, 151, 153, 156, 160, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 310, 315, 325, 352, 359, 376], "approxim": [1, 171, 172, 174, 175], "30": [1, 6, 10, 32, 38, 181, 194], "time": [1, 4, 6, 7, 8, 9, 10, 12, 21, 28, 58, 59, 60, 68, 77, 81, 93, 155, 157, 159, 161, 352, 376], "smaller": [1, 4], "input": [1, 2, 4, 10, 12, 17, 18, 19, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 71, 75, 77, 78, 79, 81, 83, 86, 87, 88, 89, 92, 93, 94, 97, 115, 118, 119, 120, 121, 122, 124, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 202, 204, 208, 209, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 310, 315, 316, 319, 320, 329, 335, 337, 338, 353, 381, 382], "larger": [1, 4], "than": [1, 4, 12, 41, 49, 58, 60, 75, 79], "number": [1, 4, 7, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 37, 41, 47, 48, 49, 55, 56, 59, 68, 77, 78, 81, 83, 88, 89, 90, 91, 93, 118, 119, 120, 121, 122, 124, 135, 136, 155, 159, 181, 184, 190, 193, 194, 199, 200, 203, 207, 210, 211, 212, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297, 308, 309, 319, 323, 324, 333, 344, 347, 348, 349, 351, 357, 358, 365, 367, 371, 372, 373, 375, 381], "lenetencod": 1, "modul": [1, 2, 7, 13, 19, 25, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 78, 80, 82, 83, 94, 97, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 177, 178, 179, 183, 189, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 236, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "__init__": [1, 19, 25, 41, 49, 55, 56, 113], "conv1": 1, "conv2d": [1, 8, 265], "stride": [1, 8, 120, 121, 133, 134, 135, 136, 139, 140, 292, 293, 303, 304], "pad": [1, 8, 140, 170, 173, 235, 257, 258, 287, 292, 293, 296, 298, 303, 304], "pool1": 1, "avgpool2d": 1, "conv2": 1, "16": [1, 6, 12, 41, 49, 59, 68, 119, 124, 292, 293, 303, 304], "pool2": 1, "fc1": 1, "120": 1, "fc2": 1, "84": [1, 6], "fc3": 1, "forward": [1, 19, 25, 41, 47, 48, 49, 55, 56, 62, 65, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 218, 219, 220, 221, 223, 224, 233, 234, 235, 236, 237, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "x": [1, 2, 4, 8, 9, 10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 38, 47, 48, 58, 60, 62, 65, 75, 77, 79, 81, 93, 113, 118, 119, 120, 121, 122, 124, 133, 134, 135, 136, 156, 160, 165, 166, 167, 168, 211, 212, 216, 219, 220, 223, 224, 233, 234, 235, 236, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 313, 314, 316, 318, 319, 320, 323, 329, 332, 333, 345, 352, 357, 361, 364, 365, 368, 376, 380, 381, 382], "relu": [1, 4, 59, 62, 63, 64, 65, 66, 67, 68, 128, 223, 235, 253, 254, 255, 256, 257, 258, 259], "limit": [1, 4, 12, 75, 79], "sake": [1, 12], "becaus": [1, 4, 7, 58, 60, 310], "enough": [1, 13], "check": [1, 2, 4, 17, 18, 23, 24, 30, 32, 35, 38, 41, 49, 69, 84, 85, 92, 93, 94, 111, 112, 113, 114, 156, 157, 160, 161, 171, 174, 176], "evolut": 1, "geometri": [1, 2, 94, 324, 332, 337, 338, 342, 343, 358, 364, 366], "across": [1, 2, 20, 27, 33, 37, 41, 49, 90, 91, 150, 152, 155, 157, 159, 161, 170, 173, 181, 182, 194, 195, 220, 251], "random_st": [1, 4, 12, 41, 47, 48, 49, 55, 56, 58, 60], "42": [1, 4, 6, 8, 10, 12, 90, 91, 319, 320, 323, 332, 333, 352, 357, 364, 365, 376, 381, 382], "limit_train_batch": 1, "100": [1, 4, 6, 9, 10, 165, 167, 322, 325, 345, 346, 351, 354, 356, 359, 368, 369, 375], "max_epoch": [1, 4, 12, 41, 49, 55, 56, 58, 59, 60, 68], "temperatur": [1, 4, 12, 55, 56, 58, 59, 60, 68, 76, 78, 80, 83, 221, 248], "hidden_dim": [1, 4, 12, 58, 60, 63, 64, 66, 67, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "64": [1, 4, 6, 12, 41, 49, 90, 91, 119, 120, 121, 124, 133, 134, 135, 136, 158, 162, 165, 167, 171, 174, 218, 219, 220, 233, 234, 236, 249, 251, 260, 261, 262, 263, 264], "lr": [1, 4, 10, 47, 48, 55, 56, 58, 59, 60, 68, 156, 158, 160, 162], "1e": [1, 4, 10, 12, 59, 68, 166, 168, 315, 320, 382], "weight_decai": [1, 4, 10, 47, 48, 55, 56, 58, 59, 60, 68], "enable_checkpoint": [1, 12, 41, 49], "kei": [1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 96, 98, 183, 184, 189, 190, 222, 247, 311, 345, 368], "part": [1, 58, 59, 60, 68], "after": [1, 4, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 58, 59, 60, 68, 77, 81, 120, 121, 135, 136, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 256, 257, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "store": [1, 21, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 58, 60, 208, 209, 335, 336, 337, 338, 352, 376], "lightning_log": 1, "folder": [1, 30, 35, 186, 192, 208, 209, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "thei": [1, 2, 4, 7, 10, 12, 33, 37, 58, 60, 96, 98], "accuraci": [1, 2, 4, 10, 18, 21, 24, 28, 41, 49, 55, 56], "balanc": [1, 18, 21, 24, 28, 33, 37], "f1": [1, 18, 21, 24, 28], "score": [1, 2, 18, 20, 21, 22, 24, 26, 27, 28, 88, 89, 90, 91], "weight": [1, 2, 4, 13, 18, 21, 24, 28, 33, 37, 47, 48, 55, 56, 58, 59, 60, 68, 69, 75, 77, 78, 79, 81, 83, 85, 86, 88, 89, 90, 91, 97, 115, 177, 181, 194, 214, 215, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 326, 332, 346, 352, 360, 364, 369, 376], "macro": [1, 18, 21, 24, 28], "precis": [1, 18, 21, 24, 28, 41, 49, 59, 68, 87], "recal": [1, 18, 21, 24, 28], "get_last_log_vers": 1, "logs_dir": 1, "version": [1, 32, 33, 37, 38, 58, 60, 69, 72, 77, 81, 84, 310], "d": [1, 12, 41, 49, 55, 56, 59, 68, 75, 77, 79, 81, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 256, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 292, 293, 296, 303, 304, 316, 319, 329, 381], "listdir": 1, "r": [1, 12, 21, 22, 26, 28, 77, 81, 313, 314, 318, 380], "version_": 1, "append": [1, 2, 10, 19, 25, 41, 49], "int": [1, 6, 18, 19, 21, 22, 24, 25, 26, 28, 30, 33, 35, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 77, 78, 81, 83, 90, 91, 93, 94, 118, 119, 120, 121, 122, 124, 132, 135, 136, 137, 138, 142, 144, 146, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 175, 181, 182, 183, 184, 189, 190, 193, 194, 195, 196, 203, 207, 208, 209, 210, 211, 212, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 315, 316, 319, 323, 324, 325, 328, 329, 331, 333, 344, 345, 346, 347, 348, 349, 351, 357, 358, 359, 362, 363, 365, 367, 368, 369, 371, 372, 373, 375, 377, 381], "group": [1, 41, 49, 120, 121, 133, 134, 135, 136, 140, 181, 194, 310], "max": [1, 2, 4, 12, 47, 48, 75, 79, 155, 159, 165, 167, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 254, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 290, 300, 301], "els": [1, 4, 12, 32, 38], "log_dir": 1, "ea": 1, "eventaccumul": 1, "reload": 1, "balanced_accuraci": 1, "f1_weight": 1, "f1_macro": 1, "precision_macro": 1, "recall_macro": 1, "scalar": [1, 59, 68, 77, 78, 81, 83, 94, 157, 161, 171, 172, 174, 175], "m": [1, 2, 77, 81, 181, 183, 184, 186, 189, 190, 192, 194, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 308, 309, 324, 331, 337, 338, 342, 343, 345, 350, 358, 363, 368, 374, 378], "replac": [1, 2, 30, 31, 33, 34, 35, 36, 37, 73, 88, 89, 118, 120, 121, 122, 135, 136, 155, 159, 184, 190, 208, 209, 223, 235, 256, 257], "onc": [1, 21, 28, 41, 49, 58, 60], "plot": [1, 6, 7, 8, 9, 10, 12, 13, 177, 308, 309, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "them": [1, 2, 12, 19, 25, 59, 68, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 187, 201, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 310, 335, 378], "step": [1, 2, 4, 10, 12, 19, 25, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 223, 235, 256, 257], "increas": [1, 4, 333, 365], "event": 1, "valu": [1, 2, 7, 17, 21, 23, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 59, 68, 69, 77, 78, 81, 83, 85, 86, 90, 91, 94, 96, 98, 111, 113, 150, 151, 152, 153, 155, 159, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 183, 184, 189, 190, 208, 209, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 308, 309, 313, 314, 315, 332, 345, 364, 368], "xlabel": [1, 2], "nb": 1, "batch": [1, 4, 10, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 75, 78, 79, 83, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 255, 256, 257, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "ylabel": [1, 2], "legend": [1, 12], "observ": [1, 2, 4, 12, 75, 79], "see": [1, 4, 30, 31, 34, 35, 36, 47, 48, 55, 56, 59, 68, 69, 75, 76, 78, 79, 80, 83, 111, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 170, 171, 172, 173, 174, 175, 186, 192, 208, 209, 310, 339, 341], "steadili": 1, "reach": [1, 41, 49], "80": [1, 4, 6, 90, 91], "quit": [1, 4], "good": [1, 4, 157, 161, 171, 172, 174, 175], "have": [1, 2, 4, 7, 8, 12, 17, 21, 23, 28, 32, 33, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 151, 153, 166, 168, 335, 345, 368], "previous": [1, 69], "seen": 1, "case": [1, 4, 32, 38, 41, 49, 55, 56, 58, 59, 60, 68, 69, 72, 73, 77, 81, 88, 89, 155, 156, 157, 158, 159, 160, 161, 162, 310], "where": [1, 4, 8, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 58, 59, 60, 63, 64, 66, 67, 68, 69, 77, 78, 81, 83, 97, 115, 165, 166, 167, 168, 171, 174, 208, 209, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297, 308, 309, 311, 319, 378, 381], "one": [1, 4, 7, 12, 21, 28, 32, 38, 47, 48, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 82, 85, 86, 90, 91, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 150, 152, 155, 157, 159, 161, 171, 174, 184, 190, 197, 205, 218, 221, 248, 249, 250, 252, 255, 260, 291, 292, 293, 302, 303, 304, 320, 382], "monitor": [1, 4, 41, 49, 59, 68], "also": [1, 4, 12, 13, 30, 31, 34, 35, 36, 47, 48, 55, 56, 59, 68, 75, 79, 90, 91, 111, 206, 208, 209, 335, 383], "mix": [1, 20, 27, 41, 49], "could": [1, 4, 7, 59, 68, 156, 158, 160, 162], "sever": [1, 93, 311], "target": [1, 2, 12, 20, 21, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 85, 86, 90, 91, 165, 167, 170, 171, 172, 173, 174, 175, 208, 209, 317, 320, 330, 382], "variabl": [1, 55, 56, 59, 68, 69, 78, 83, 84, 284], "should": [1, 19, 21, 25, 28, 32, 33, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 82, 88, 89, 93, 94, 97, 113, 115, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 166, 168, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 310], "decod": [1, 2, 41, 47, 48, 49, 55, 56, 75, 79, 218, 223, 233, 235, 236, 256, 257, 260, 262, 264], "brain": [1, 12, 33, 37, 165, 167, 383], "refer": [1, 2, 7, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "detail": [1, 2, 13, 18, 24, 58, 60, 76, 80, 94, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 157, 161], "neuroimag": [1, 2, 12, 13, 15, 30, 31, 33, 34, 35, 36, 37, 208, 209, 236, 264], "relev": [1, 2, 12, 41, 49, 310], "consid": [1, 4, 7, 12, 30, 31, 32, 34, 35, 36, 38, 55, 56, 77, 81, 184, 190, 208, 209, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297], "matter": [1, 2, 12, 33, 37], "csf": [1, 33, 37], "volum": [1, 2, 12, 13, 33, 37, 59, 68, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 336, 341, 383], "region": [1, 12, 33, 37], "interest": [1, 2, 12, 41, 49, 55, 56, 208, 209, 222, 247], "neuromorphometr": [1, 12, 33, 37], "atla": [1, 12, 33, 37], "subject": [1, 2, 12, 30, 31, 34, 35, 36, 75, 79, 181, 182, 194, 195, 208, 209, 310], "vbm_roi": [1, 2, 12, 33, 37], "modal": [1, 12, 33, 37], "tabular": [1, 12, 30, 31, 34, 35, 36, 208, 209], "still": [1, 2, 4, 310], "well": [1, 4, 41, 47, 48, 49, 55, 56, 156, 158, 160, 162], "suit": 1, "veri": [1, 4, 7, 55, 56, 155, 159, 171, 172, 174, 175], "light": 1, "raw": [1, 13, 33, 37, 336, 339, 341], "284": [1, 12, 33, 37], "vector": [1, 4, 12, 33, 37, 47, 48, 58, 59, 60, 68, 78, 83, 345, 368], "target_transform": [1, 32, 33, 37, 38], "arrai": [1, 2, 6, 7, 19, 20, 21, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 59, 68, 77, 78, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 156, 160, 165, 166, 167, 168, 171, 174, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 202, 204, 207, 208, 209, 210, 211, 212, 253, 258, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 319, 320, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 336, 337, 338, 342, 343, 345, 346, 350, 351, 352, 356, 357, 358, 360, 361, 362, 363, 364, 365, 368, 369, 374, 375, 376, 377, 378, 381, 382], "femal": [1, 33, 37], "lambda": [1, 12, 32, 38], "flatten": [1, 2, 6, 8, 12, 58, 59, 60, 68, 220, 251, 296], "stream": [1, 2, 33, 37], "split": [1, 2, 4, 12, 30, 31, 33, 34, 35, 36, 37, 208, 209], "val": [1, 2, 12, 19, 25, 33, 37, 41, 49], "mask": [1, 12, 30, 31, 34, 35, 36, 165, 166, 167, 168, 196, 208, 209, 214, 215, 310], "nois": [1, 12, 151, 153, 185, 191], "auxiliari": [1, 59, 68, 78, 83], "mask_prob": [1, 12], "noise_std": [1, 12], "rand": [1, 12, 171, 174], "shape": [1, 2, 4, 7, 8, 10, 12, 20, 21, 27, 28, 33, 37, 47, 48, 59, 68, 76, 77, 78, 80, 81, 83, 85, 86, 88, 89, 90, 91, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 224, 235, 236, 237, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 331, 332, 347, 363, 364, 371], "astyp": [1, 8, 12, 171, 174], "float32": [1, 8, 12, 171, 174], "randn": [1, 12, 158, 162], "As": [1, 4, 10, 12], "compress": [1, 12], "latent": [1, 4, 47, 48, 58, 59, 60, 68, 75, 79, 218, 219, 220, 233, 234, 236, 251, 260, 261, 262, 263, 264], "space": [1, 2, 4, 8, 12, 33, 37, 47, 48, 58, 59, 60, 64, 67, 68, 118, 119, 120, 121, 122, 124, 135, 136, 156, 160, 171, 172, 174, 175, 218, 219, 220, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 257, 260, 261, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 328, 362], "in_channel": [1, 8, 10, 12, 59, 68, 118, 119, 120, 121, 122, 124, 135, 136, 223, 235, 255, 256, 257], "hidden_channel": [1, 12, 59, 68, 255], "bandwidth": [1, 12, 59, 68, 77, 78, 81, 83], "varianc": [1, 12, 21, 22, 26, 28, 47, 48, 88, 89, 90, 91, 166, 168, 310], "sigma": [1, 4, 6, 12, 47, 48, 59, 63, 66, 68, 77, 78, 81, 83, 150, 151, 152, 153, 166, 168, 171, 172, 174, 175, 183, 184, 185, 189, 190, 191], "projection_head_kwarg": [1, 12, 59, 68], "input_dim": [1, 12, 59, 63, 64, 66, 67, 68, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "output_dim": [1, 12, 59, 63, 64, 66, 67, 68, 265], "learning_r": [1, 12, 59, 68], "add": [1, 2, 41, 49, 55, 56, 71, 119, 124, 151, 153, 185, 191, 293, 304], "r2": [1, 12, 37, 90, 91], "coeffici": [1, 12, 88, 89, 90, 91, 326, 360], "determin": [1, 41, 49, 181, 194], "explain": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "evar": [1, 90, 91], "pearson": [1, 21, 22, 26, 28, 88, 89, 90, 91], "correl": [1, 88, 89, 90, 91, 292, 293, 303, 304], "pcc": [1, 90, 91], "last": [1, 4, 33, 37, 120, 121, 135, 136, 218, 260], "lightn": [1, 41, 49, 59, 68, 383], "integ": [1, 33, 37, 41, 49], "file": [1, 2, 3, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 69, 97, 115, 208, 209, 336, 337, 338, 340, 342, 343, 379, 383, 384], "task0": 1, "correlact": 1, "task1": [1, 21, 28], "fetch": [1, 7, 13, 33, 37, 69, 206, 354, 355], "two": [1, 2, 4, 7, 12, 33, 37, 47, 48, 55, 56, 58, 59, 60, 62, 65, 68, 78, 83, 150, 151, 152, 153, 315, 317, 330, 345, 368], "plot_task": 1, "task_prefix": 1, "task_metr": 1, "startswith": 1, "set_xlabel": [1, 2, 8, 12], "set_ylabel": [1, 2, 8, 12], "In": [1, 2, 4, 12, 32, 38, 41, 49, 55, 56, 59, 68, 73, 77, 81, 94, 155, 156, 157, 158, 159, 160, 161, 162, 223, 235, 256, 257, 284], "shown": [1, 59, 68], "avail": [1, 2, 4, 12, 33, 37, 41, 49, 55, 56, 59, 68, 69, 90, 91, 97, 113, 115, 157, 161, 171, 172, 174, 175], "singl": [1, 4, 30, 32, 33, 35, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 93, 383], "multi": [1, 2, 12, 19, 20, 21, 25, 27, 28, 33, 37, 41, 49, 55, 56, 58, 60, 93, 197, 205, 220, 251], "regular": [1, 59, 68, 155, 159, 332, 364], "interv": [1, 6, 13, 59, 68, 177, 179, 193, 196, 199, 203], "provid": [1, 2, 4, 30, 31, 32, 34, 35, 36, 38, 41, 49, 58, 60, 150, 152, 156, 158, 160, 162, 171, 174, 186, 192, 208, 209, 285, 310, 326, 352, 360, 376, 383], "insight": [1, 4], "suitabl": [1, 86, 87], "downstream": [1, 4, 12, 55, 56, 58, 60], "memori": [1, 2, 4, 6, 7, 8, 9, 10, 12, 19, 21, 25, 28, 31, 36, 119, 124, 156, 160, 310, 335], "usag": [1, 2, 4, 6, 7, 8, 9, 10, 12], "mb": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 384], "ipynb": [1, 2, 4, 6, 7, 8, 9, 10, 12, 339, 341], "py": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 384], "larg": [2, 4, 33, 37, 310], "site": [2, 7, 33, 37], "mri": [2, 12, 33, 37, 59, 64, 67, 68, 78, 83, 165, 167], "design": [2, 41, 49, 69], "data": [2, 6, 10, 13, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 64, 67, 68, 69, 75, 77, 78, 79, 81, 83, 85, 86, 87, 88, 89, 92, 93, 94, 97, 115, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 204, 205, 206, 208, 209, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 310, 316, 319, 322, 323, 329, 332, 333, 335, 336, 339, 341, 352, 354, 355, 356, 357, 364, 365, 376, 381], "demonstr": 2, "serv": [2, 58, 60], "entri": 2, "point": [2, 7, 9, 12, 86, 87, 90, 91, 322, 325, 328, 332, 345, 346, 351, 356, 359, 361, 362, 364, 366, 368, 369, 375], "potenti": [2, 158, 162, 378], "bia": [2, 4, 62, 65, 286, 297], "dufumi": [2, 12, 33, 37, 59, 64, 67, 68, 78, 83], "et": [2, 4, 12, 47, 48, 59, 63, 64, 66, 67, 68, 75, 76, 78, 79, 80, 83, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 165, 167, 171, 172, 174, 175, 220, 223, 235, 251, 256, 257], "al": [2, 4, 12, 47, 48, 59, 63, 64, 66, 67, 68, 75, 76, 78, 79, 80, 83, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 165, 167, 171, 172, 174, 175, 220, 223, 235, 251, 256, 257], "debias": [2, 33, 37], "2022": [2, 33, 37, 78, 83, 220, 251], "http": [2, 4, 14, 33, 37, 59, 63, 64, 66, 67, 68, 76, 78, 80, 83, 87, 111, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 155, 159, 217, 339, 341], "www": 2, "sciencedirect": 2, "com": [2, 14, 217], "scienc": 2, "articl": 2, "pii": 2, "s1053811922007522": 2, "run": [2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 59, 68, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 194, 195, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 351, 375], "nibabel": [2, 32, 33, 37, 38, 156, 158, 160, 162, 171, 174, 208, 209, 339, 341], "panda": [2, 30, 31, 32, 34, 35, 36, 38, 181, 194, 208, 209], "pd": [2, 32, 38], "seaborn": 2, "sn": 2, "nilearn": 2, "metric": [2, 12, 13, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 58, 59, 60, 68, 85, 86, 87, 88, 89, 90, 91, 177, 181, 194], "accuracy_scor": 2, "r2_score": [2, 12, 85, 86], "pipelin": [2, 310], "make_pipelin": 2, "preprocess": [2, 12, 13, 33, 37, 94, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 310], "standardscal": [2, 13, 177, 178, 310], "healthi": [2, 33, 37], "anatom": [2, 156, 158, 160, 162], "n_": 2, "train": [2, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 157, 161, 171, 172, 174, 175, 179, 208, 209], "3227": [2, 33, 37], "757": [2, 33, 37], "valid": [2, 4, 13, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 73, 94, 111, 112, 113, 114, 177], "demograph": 2, "about": [2, 4, 69, 352, 376], "acquisit": 2, "magnet": 2, "field": [2, 183, 189, 199, 200, 246], "strength": 2, "root": [2, 4, 14, 21, 22, 26, 28, 30, 31, 33, 34, 35, 36, 37, 90, 91, 208, 209], "quasiraw": [2, 33, 37], "fs_desikan_roi": [2, 12, 33, 37], "fs_destrieux_roi": [2, 33, 37], "fs_xhemi": [2, 33, 37], "take": [2, 4, 32, 33, 37, 38, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 265, 291, 292, 293, 302, 303, 304], "look": [2, 4, 12, 325, 359], "ll": 2, "densiti": [2, 8, 12, 77, 81, 328, 346, 362, 369], "map": [2, 4, 7, 8, 12, 31, 33, 36, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 64, 67, 68, 120, 121, 135, 136, 171, 172, 174, 175, 292, 293, 296, 303, 304, 308, 309, 317, 330, 351, 375], "comput": [2, 7, 19, 21, 22, 25, 26, 28, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 90, 91, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 165, 166, 167, 168, 216, 221, 248, 249, 250, 252, 255, 265, 291, 292, 293, 302, 303, 304, 310, 326, 335, 352, 360, 361, 376], "cat12": [2, 33, 37], "toolbox": 2, "involv": 2, "tissu": [2, 33, 37], "mni": 2, "result": [2, 4, 12, 18, 21, 22, 24, 26, 28, 88, 89, 104, 111, 171, 172, 174, 175, 284, 334], "wise": [2, 180, 198, 235, 257], "reflect": [2, 12, 170, 173], "local": [2, 4, 33, 37, 69, 73, 97, 115], "t1": [2, 33, 37], "scan": [2, 12, 33, 37, 165, 167], "basic": [2, 47, 48, 75, 79], "correct": [2, 10, 85, 86, 90, 91, 94], "skull": 2, "strip": 2, "spatial": [2, 7, 13, 94, 120, 121, 135, 136, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 317, 330], "heavi": 2, "smooth": [2, 378], "goal": 2, "retain": [2, 310], "much": [2, 4, 12, 119, 124], "possibl": [2, 7, 12, 41, 49, 55, 56, 97, 115, 170, 173], "close": [2, 4, 7, 12, 47, 48, 58, 59, 60, 68], "while": [2, 4, 7, 12, 41, 49, 55, 56, 58, 59, 60, 68, 75, 79, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 165, 167, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "physic": [2, 171, 172, 174, 175], "all_mod": 2, "info": [2, 170, 173, 379], "get": [2, 4, 19, 25, 32, 33, 37, 38, 171, 174, 310, 344, 347, 348, 349, 367, 371, 372, 373, 378], "img_vbm": 2, "select": [2, 41, 49, 69, 70, 86, 155, 159], "channel": [2, 30, 31, 34, 35, 36, 75, 79, 118, 119, 120, 121, 122, 124, 135, 136, 150, 152, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 180, 197, 198, 205, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306], "nii_img": 2, "nifti1imag": [2, 32, 33, 37, 38], "affin": [2, 156, 158, 160, 162, 171, 174], "ey": [2, 171, 174], "print": [2, 4, 6, 7, 8, 10, 32, 33, 37, 38, 90, 91, 95, 99, 113, 171, 174, 222, 224, 236, 237, 247, 264, 266, 275, 331, 344, 347, 348, 349, 350, 363, 367, 371, 372, 373, 374], "plot_anat": 2, "img_quasiraw": 2, "onto": [2, 8, 12, 220, 251, 319, 320, 381, 382], "featur": [2, 4, 12, 13, 19, 25, 33, 37, 55, 56, 58, 59, 60, 64, 67, 68, 77, 78, 81, 83, 119, 120, 121, 124, 135, 136, 206, 223, 235, 253, 254, 255, 256, 257, 258, 259, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 310], "averag": [2, 12, 20, 22, 26, 27, 88, 89, 90, 91], "within": [2, 4, 12, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "142": [2, 33, 37], "correspond": [2, 7, 19, 20, 25, 27, 33, 37, 59, 68, 75, 79, 85, 86, 156, 160, 181, 182, 194, 195, 315, 320, 347, 371, 382], "structur": [2, 4, 7, 41, 49, 90, 91], "extract": [2, 12, 19, 25, 32, 33, 37, 38, 58, 59, 60, 68, 340], "independ": [2, 75, 79], "hemispher": [2, 33, 37, 181, 182, 194, 195, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "millilit": 2, "ml": 2, "map_roi_on_neuromorphometrics_atla": 2, "roi_valu": 2, "atlas_data": 2, "get_fdata": 2, "atlas_label": 2, "brain_map": 2, "zeros_lik": 2, "idx_map": 2, "name": [2, 4, 12, 18, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 55, 56, 59, 68, 69, 72, 90, 91, 97, 114, 115, 218, 219, 233, 234, 260, 261, 262, 263, 284, 308, 309, 310, 321, 335], "idx": [2, 4, 6, 9, 30, 31, 35, 36, 325, 345, 351, 359, 368, 375], "enumer": [2, 9, 10, 12, 322, 325, 345, 346, 351, 356, 359, 368, 369, 375], "clean": [2, 55, 56], "up": [2, 4, 19, 25, 222, 223, 235, 247, 256, 257, 315, 317, 325, 330, 348, 359, 372], "remov": [2, 30, 31, 33, 34, 35, 36, 37, 166, 168, 208, 209, 310], "_gm_vol": 2, "suffix": [2, 311], "get_vbm_roi_label": [2, 33, 37], "get_neuromorphometrics_atla": [2, 33, 37], "plot_stat_map": 2, "plasma": 2, "appeal": 2, "sequenti": [2, 4, 55, 56, 62, 65, 126, 127, 345, 368], "colormap": [2, 308, 309], "draw_cross": 2, "colorbar": [2, 6, 9, 12, 308, 309, 317, 322, 324, 325, 330, 331, 345, 346, 351, 356, 358, 359, 363, 368, 369, 375], "includ": [2, 4, 13, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 55, 56, 94, 206, 208, 209], "cortic": [2, 12, 33, 37, 181, 182, 186, 192, 194, 195, 196, 206, 213, 214, 215, 217, 218, 219, 220, 223, 224, 233, 234, 235, 236, 237, 251, 256, 257, 260, 261, 262, 263, 264, 266, 275], "thick": [2, 12, 33, 37], "area": [2, 12, 155, 157, 159, 161], "curvatur": [2, 12, 33, 37], "over": [2, 41, 49, 158, 162], "predefin": 2, "desikan": [2, 12, 33, 37], "killiani": [2, 12], "34": [2, 6, 33, 37, 90, 91], "per": [2, 4, 21, 22, 26, 28, 30, 32, 33, 35, 37, 38, 75, 79, 120, 121, 135, 136, 150, 152, 156, 160, 165, 166, 167, 168], "74": [2, 6, 33, 37, 90, 91], "exclud": [2, 33, 37], "medial": 2, "wall": 2, "repres": [2, 47, 48, 78, 83, 308, 309, 377, 378], "summari": [2, 90, 91], "morphologi": 2, "cortex": 2, "addit": [2, 32, 38, 41, 49, 55, 56, 58, 59, 60, 68, 92, 93, 94, 155, 159, 223, 235, 256, 257, 286, 297], "xhemi": 2, "cross": [2, 47, 48, 69, 73, 75, 76, 79, 80, 292, 293, 303, 304], "163842": [2, 33, 37], "vertic": [2, 6, 7, 9, 33, 37, 181, 182, 183, 184, 186, 189, 190, 192, 194, 195, 207, 210, 211, 212, 220, 235, 246, 251, 257, 286, 287, 297, 298, 308, 309, 310, 316, 317, 319, 320, 322, 323, 324, 326, 329, 330, 331, 332, 333, 337, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 381, 382], "merg": 2, "homolog": 2, "both": [2, 7, 12, 21, 28, 33, 37, 41, 49, 62, 63, 64, 65, 66, 67, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 221, 248, 249, 250, 252, 293, 304, 345, 368], "analysi": [2, 77, 81, 165, 167, 220, 251], "asymmetri": 2, "improv": [2, 4, 12, 58, 60, 75, 79, 120, 121, 135, 136, 155, 159], "statist": [2, 75, 77, 79, 81, 155, 159, 166, 168], "power": 2, "combin": [2, 4, 181, 194], "left": [2, 8, 33, 37, 75, 77, 78, 79, 81, 83, 156, 158, 160, 162, 165, 167, 214, 215, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 336], "right": [2, 8, 33, 37, 75, 77, 78, 79, 81, 83, 156, 158, 160, 162, 165, 167, 214, 215, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 336], "follow": [2, 4, 12, 19, 25, 32, 33, 37, 38, 62, 64, 65, 67, 69, 77, 81, 87, 90, 91, 165, 166, 167, 168], "fsaverage5": 2, "higher": [2, 4, 41, 49], "resolut": [2, 4, 120, 121, 135, 136, 165, 167, 208, 209, 223, 235, 256, 257], "done": [2, 4, 41, 49, 335], "similarli": [2, 4], "mesh": [2, 33, 37, 331, 332, 345, 363, 364, 368, 378], "map_freesurfer_destrieux_data": 2, "hemi": 2, "fsaverag": 2, "fetch_atlas_surf_destrieux": 2, "verbos": [2, 69], "fs_label": 2, "utf": 2, "map_hemi": 2, "map_": 2, "vertex": [2, 181, 182, 183, 184, 189, 190, 194, 195, 235, 257, 345, 346, 352, 368, 369, 370, 376, 377, 378], "vertex_data": 2, "dtype": [2, 85, 87, 193, 199, 203, 316, 329], "float": [2, 4, 6, 10, 20, 27, 33, 37, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 173, 174, 176, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 203, 214, 215, 220, 251, 255, 308, 309, 313, 314, 315, 318, 320, 380, 382], "roi_nam": 2, "surface_area": 2, "get_fs_roi_feature_nam": [2, 33, 37], "surface_area_mm": 2, "gray_matter_volume_mm": 2, "average_thickness_mm": 2, "integrated_rectified_mean_curvature_mm": 2, "get_fs_label": [2, 33, 37], "symmetr": [2, 33, 37, 77, 81, 88, 89, 170, 173], "fs_surfac": 2, "fs_volum": 2, "fs_thick": 2, "fs_curv": 2, "surface_vertex": 2, "volume_vertex": 2, "thickness_vertex": 2, "curv_vertex": 2, "prepar": [2, 4], "mm": [2, 171, 174], "gm": [2, 12, 33, 37], "mean": [2, 4, 12, 19, 21, 22, 25, 26, 28, 41, 47, 48, 49, 55, 56, 73, 90, 91, 151, 153, 155, 157, 159, 161, 166, 168, 170, 173, 220, 235, 251, 253, 257, 290, 301, 310, 332, 364], "fetch_surf_fsaverag": 2, "inflated_left": 2, "infl_left": 2, "sulc_left": 2, "12": [2, 6, 7, 12, 119, 124, 345, 368], "subplot_kw": [2, 6, 7, 9, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "3d": [2, 6, 7, 9, 12, 32, 33, 37, 38, 59, 64, 67, 68, 78, 83, 94, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 317, 322, 325, 328, 330, 331, 345, 346, 351, 356, 359, 362, 363, 368, 369, 375], "dat": 2, "plot_surf": 2, "surf_map": 2, "later": [2, 310], "bg_map": 2, "subplots_adjust": 2, "wspace": 2, "25": [2, 6, 10, 32, 38, 90, 91], "lh": [2, 33, 37], "curv": 2, "fold": 2, "pattern": [2, 4, 8, 30, 31, 34, 35, 36, 208, 209, 296], "arbitrari": [2, 155, 159], "unit": [2, 59, 68, 75, 79, 166, 168, 223, 235, 256, 257, 310, 328, 346, 362, 366, 369, 370], "neg": [2, 4, 75, 79], "sulci": 2, "posit": [2, 4, 41, 49, 77, 81, 93, 94], "gyri": 2, "sulc": 2, "sulcal": [2, 33, 37], "depth": [2, 9, 10, 33, 37, 121, 132, 136, 138, 142, 144, 146, 220, 223, 235, 251, 252, 255, 256, 257, 286, 288, 289, 290, 294, 297, 299, 300, 301, 305, 325, 344, 345, 348, 359, 367, 368, 372], "indic": [2, 4, 12, 33, 37, 41, 49, 59, 68, 88, 89, 156, 160, 181, 194, 253, 258, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 315, 323, 324, 325, 326, 332, 333, 345, 351, 357, 358, 359, 360, 364, 365, 368, 375, 377], "millimit": 2, "get_fs_xhemi_feature_nam": [2, 33, 37], "fs_sulc": 2, "dark": 2, "explor": [2, 4], "three": [2, 47, 48, 155, 157, 159, 161, 326, 360], "represent": [2, 4, 19, 21, 25, 28, 33, 37, 47, 48, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 75, 79, 118, 122, 186, 192, 217, 221, 233, 234, 236, 248, 262, 263, 264, 310, 326, 352, 360, 376, 378], "sbm": [2, 12, 33, 37], "68": [2, 6, 12, 33, 37, 90, 91], "148": [2, 33, 37], "modality_nam": 2, "dataset_train": 2, "dataset_v": 2, "extract_features_and_target": 2, "y_age": 2, "y_sex": 2, "x_train": 2, "y_train_ag": 2, "y_train_sex": 2, "x_test": 2, "y_test_ag": 2, "y_test_sex": 2, "min": [2, 12, 155, 159, 165, 167], "distribut": [2, 4, 12, 19, 25, 41, 47, 48, 49, 58, 60, 75, 79, 151, 153, 155, 159, 219, 236, 261, 264], "n": [2, 10, 41, 47, 48, 49, 58, 60, 77, 78, 81, 83, 97, 115, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 202, 207, 210, 211, 212, 216, 220, 251, 286, 288, 291, 297, 299, 302, 308, 309, 315, 316, 317, 319, 320, 324, 325, 326, 329, 330, 331, 337, 338, 342, 343, 345, 346, 350, 352, 358, 359, 360, 363, 368, 369, 374, 376, 377, 378, 381, 382], "seri": [2, 32, 38, 188, 202], "value_count": 2, "r\u00b2": [2, 12, 21, 22, 26, 28], "v": [2, 12, 33, 37], "color": [2, 4, 9, 12, 13, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 177, 308, 309], "tab": 2, "blue": [2, 6, 7, 9, 317, 325, 330, 345, 346, 359, 368, 369], "green": [2, 6, 7, 9, 317, 330], "orang": [2, 9, 12], "15": [2, 6, 10, 12, 90, 91], "sharex": [2, 12], "sharei": [2, 12], "ridge_model": 2, "alpha": [2, 6, 7, 12, 171, 172, 174, 175, 308, 309, 313, 314, 317, 318, 330, 380], "y_pred_ag": 2, "scatterplot": 2, "edgecolor": [2, 6, 7, 308, 309, 317, 330], "line": [2, 308, 309], "lineplot": 2, "red": [2, 6, 9, 322, 325, 345, 346, 356, 359, 368, 369], "linestyl": 2, "nr\u00b2": 2, "2f": [2, 4, 12], "suptitl": [2, 12], "fontsiz": [2, 12], "14": [2, 6, 12], "02": [2, 11, 12, 155, 159, 384], "logreg_model": 2, "1000": [2, 4, 41, 49], "y_pred_sex": 2, "acc": [2, 4, 41, 49], "barplot": 2, "palett": 2, "ylim": 2, "text": [2, 8, 9, 58, 60, 75, 77, 78, 79, 81, 83, 90, 91, 95, 103, 108, 109, 110, 165, 167], "abov": [2, 4], "bar": [2, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56], "center": [2, 33, 37, 178, 310, 325, 345, 346, 350, 359, 361, 368, 369, 374], "give": [2, 4, 13, 41, 49, 171, 172, 174, 175], "best": [2, 14, 69, 171, 172, 174, 175, 317, 330], "highli": [2, 4], "nevertheless": 2, "would": [2, 4], "whether": [2, 4, 18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 94, 97, 115], "complementari": 2, "exercis": 2, "reader": 2, "00": [3, 11, 90, 91, 384], "000": [3, 4, 384], "total": [3, 6, 7, 8, 9, 10, 11, 47, 48, 119, 120, 121, 124, 135, 136, 384], "execut": [3, 11, 335, 384], "auto_galleri": [3, 11], "mem": [3, 11, 384], "simclr_stl10": [3, 4, 384], "yaware_openbhb": [3, 12, 384], "uvadlc": 4, "readthedoc": 4, "io": [4, 13, 177, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "tutori": [4, 12, 14], "closer": [4, 12, 59, 68], "sometim": [4, 96, 98], "call": [4, 17, 19, 23, 25, 30, 31, 34, 35, 36, 41, 49, 55, 56, 59, 68, 77, 81, 82, 85, 94, 114, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 156, 158, 160, 162, 208, 209, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 335, 352, 376], "unsupervis": [4, 32, 38], "describ": [4, 63, 64, 66, 67, 69, 383], "scenario": 4, "accompani": 4, "wai": [4, 12, 345, 368, 383], "howev": [4, 12, 171, 172, 174, 175], "lot": 4, "other": [4, 7, 41, 49, 55, 56, 58, 60, 69, 310, 320, 382], "descript": [4, 171, 172, 174, 175], "certain": [4, 325, 348, 359, 372], "cluster": [4, 41, 43, 49, 51, 59, 68], "popular": [4, 13, 206], "method": [4, 13, 17, 19, 23, 25, 30, 33, 35, 37, 41, 47, 48, 49, 59, 68, 77, 78, 81, 83, 86, 94, 96, 97, 98, 112, 113, 115, 165, 167, 171, 172, 174, 175, 178, 206, 220, 222, 223, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 256, 257, 258, 259, 264, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 310, 352, 376], "appli": [4, 7, 8, 12, 19, 25, 32, 33, 37, 38, 55, 56, 58, 59, 60, 62, 64, 65, 67, 68, 77, 81, 93, 94, 97, 115, 120, 121, 135, 136, 150, 152, 157, 158, 161, 162, 165, 166, 167, 168, 170, 171, 173, 174, 176, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 194, 195, 198, 199, 201, 202, 220, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 296, 317, 328, 330, 346, 362, 369], "stl10": 4, "pytorch_lightn": [4, 19, 25], "pl": 4, "collect": 4, "ordereddict": [4, 55, 56], "copi": [4, 30, 35, 310], "deepcopi": 4, "learningratemonitor": [4, 59, 68], "modelcheckpoint": [4, 41, 49], "datadir": 4, "checkpointdir": 4, "saved_model": 4, "cpu_count": 4, "num_imag": 4, "cudnn": 4, "determinst": 4, "devic": [4, 41, 49, 55, 56, 58, 59, 60, 68], "gpu": [4, 19, 25, 41, 49, 55, 56, 58, 59, 60, 68], "cuda": 4, "is_avail": 4, "mani": [4, 7, 33, 37, 41, 49, 59, 68, 119, 120, 121, 124, 135, 136], "pre": [4, 12], "If": [4, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 59, 68, 75, 77, 78, 79, 81, 83, 87, 90, 91, 93, 94, 97, 114, 115, 120, 121, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 310, 335, 352, 376], "make": [4, 12, 19, 25, 41, 49, 58, 60, 113, 155, 159, 284], "sure": 4, "disk": [4, 32, 33, 37, 38, 41, 49, 55, 56], "load_pretrain": [4, 97, 115], "makedir": 4, "exist_ok": 4, "hf": [4, 33, 37, 69, 97, 115], "hub": [4, 69, 97, 115], "neurospin": [4, 14, 97, 115], "resnet18": [4, 13, 59, 68, 117, 131, 141, 177], "filepath": [4, 97, 115], "pt": 4, "effici": [4, 119, 124], "sampl": [4, 10, 12, 13, 20, 27, 32, 33, 37, 38, 41, 47, 48, 49, 58, 59, 60, 68, 75, 77, 78, 79, 81, 83, 85, 86, 88, 89, 90, 91, 150, 151, 152, 153, 155, 157, 159, 161, 177, 206, 207, 210, 211, 212, 216, 218, 219, 223, 224, 235, 236, 237, 253, 256, 257, 258, 260, 261, 264, 266, 275, 288, 289, 290, 294, 296, 299, 300, 301, 305, 319, 346, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381], "easiest": 4, "do": [4, 7, 19, 25, 41, 49, 55, 56, 58, 59, 60, 68, 310], "when": [4, 12, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 32, 33, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 75, 79, 85, 86, 87, 90, 91, 94, 97, 113, 115, 156, 158, 160, 162, 165, 167, 308, 309, 310, 315, 320, 335, 350, 374, 382], "twice": 4, "framework": [4, 41, 47, 48, 49, 58, 59, 60, 63, 64, 66, 67, 68, 75, 79, 221, 248], "easili": [4, 7], "extend": [4, 86, 96, 98], "most": [4, 308, 309], "usual": [4, 93], "obtain": [4, 47, 48], "specif": [4, 13, 181, 182, 194, 195, 223, 235, 256, 257, 284, 347, 371], "want": [4, 14, 97, 115], "choic": [4, 69, 157, 161, 171, 172, 174, 175], "crucial": 4, "hyperparamet": [4, 12, 41, 49], "directli": [4, 41, 49, 59, 68, 90, 91, 155, 159, 179], "affect": [4, 41, 49], "might": [4, 41, 49, 55, 56, 59, 68, 156, 160], "overal": 4, "experi": [4, 13, 69, 70, 71, 72, 73, 177, 383], "horizont": [4, 8], "flip": [4, 156, 158, 160, 162], "distort": 4, "comparison": [4, 12, 171, 172, 174, 175], "effect": [4, 12, 120, 121, 135, 136, 171, 174, 310], "jitter": 4, "slightli": 4, "instead": [4, 12, 82, 85, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 310], "bright": 4, "satur": 4, "hue": 4, "better": [4, 58, 60], "wa": [4, 75, 79], "faster": [4, 12, 335], "stabl": 4, "instanc": [4, 7, 32, 38, 41, 49, 59, 68, 82, 87, 114, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 180, 198, 199, 200, 221, 246, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "vari": 4, "benefici": [4, 55, 56], "t": [4, 8, 12, 41, 49, 55, 56, 63, 64, 66, 67, 155, 157, 159, 161], "reli": 4, "anymor": 4, "distinguish": 4, "between": [4, 7, 12, 33, 37, 59, 68, 75, 76, 77, 78, 79, 80, 81, 83, 88, 89, 94, 155, 157, 159, 161, 171, 172, 174, 175, 181, 182, 194, 195, 308, 309, 315, 317, 330, 345, 354, 368, 378], "randomhorizontalflip": 4, "96": [4, 6, 11, 293, 304, 316, 329, 384], "randomappli": 4, "colorjitt": 4, "p": [4, 47, 48, 75, 77, 79, 81, 92, 94, 176], "randomgrayscal": 4, "discuss": 4, "cifar10": 4, "airplan": 4, "bird": 4, "car": 4, "cat": [4, 32, 38], "deer": 4, "dog": [4, 32, 38], "hors": 4, "monkei": 4, "ship": 4, "truck": 4, "500": 4, "addition": 4, "unlabel": 4, "similar": [4, 7, 12, 58, 59, 60, 64, 67, 68, 77, 78, 81, 83, 155, 159], "wider": 4, "anim": 4, "vehicl": 4, "ideal": [4, 12], "showcas": 4, "benefit": 4, "offer": [4, 157, 161, 171, 172, 174, 175], "luckili": 4, "through": [4, 14, 18, 19, 22, 24, 25, 26, 42, 43, 44, 45, 50, 51, 52, 53, 62, 65], "keep": [4, 33, 37, 75, 79, 208, 209], "mind": 4, "rel": [4, 30, 31, 32, 34, 35, 36, 38, 155, 157, 159, 161], "consider": 4, "3gb": 4, "bit": [4, 59, 68], "initi": [4, 33, 37, 59, 62, 63, 64, 65, 66, 67, 68, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 252, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "unlabeled_data": 4, "via": [4, 33, 37, 55, 56, 352, 376], "train_data_contrast": 4, "pair": [4, 41, 49, 58, 59, 60, 68, 78, 83, 158, 162, 208, 209], "stack": [4, 19, 25], "dim": [4, 10, 12, 59, 68, 82, 171, 174, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "img_grid": 4, "associ": [4, 9, 33, 37, 55, 56, 59, 68, 78, 83, 312, 320, 326, 352, 360, 376, 382], "256": [4, 62, 65, 99, 218, 219, 233, 234, 260, 261, 262, 263], "train_load": 4, "val_load": 4, "common": [4, 13, 16, 29, 40, 41, 49, 55, 56, 74, 116, 117, 179, 213, 217, 310], "resnet": [4, 13, 59, 68, 117, 120, 121, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 177], "18": [4, 6, 59, 68, 121, 131, 132, 136, 141, 142, 165, 167], "paper": [4, 12, 119, 124], "activ": [4, 59, 63, 66, 68, 218, 219, 223, 233, 234, 235, 236, 256, 257, 260, 261, 262, 263, 264], "hidden": [4, 59, 63, 64, 66, 67, 68, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "note": [4, 30, 31, 33, 34, 35, 36, 37, 41, 49, 55, 56, 59, 68, 69, 75, 77, 79, 81, 93, 111, 118, 122, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 335], "simclrv2": 4, "author": [4, 69], "mention": 4, "boost": 4, "why": [4, 7], "four": 4, "deeper": 4, "overfit": 4, "u": [4, 8, 150, 151, 152, 153, 165, 167, 208, 209, 223, 235, 255, 256, 257], "lead": [4, 41, 49, 75, 79], "smoother": 4, "loss": [4, 10, 13, 19, 25, 41, 47, 48, 49, 55, 56, 58, 59, 60, 64, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 177, 214, 215, 216], "gradient": [4, 12, 41, 49, 55, 56, 59, 68], "experienc": 4, "num_class": [4, 55, 56, 237, 238, 239, 240, 241, 242, 243, 244, 245, 275, 276, 277, 278, 279, 280, 281, 282, 283], "fc": [4, 55, 56], "out_featur": [4, 62, 65], "ident": [4, 13, 15, 41, 49, 92, 120, 121, 135, 136, 156, 158, 160, 162, 171, 174, 177], "save_weights_onli": 4, "mode": [4, 14, 19, 25, 41, 49, 55, 56, 59, 68, 69, 77, 81, 170, 173, 253, 310], "val_acc_top5": 4, "logging_interv": 4, "trainer_param": [4, 41, 49], "default_root_dir": 4, "acceler": [4, 41, 49, 55, 56], "5e": [4, 59, 68], "07": 4, "found": [4, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 59, 68, 114], "pretrain": [4, 58, 60], "weight_fil": [4, 97, 115], "fitted_": 4, "deploi": [4, 55, 56], "littl": [4, 55, 56], "verifi": [4, 55, 56, 94, 114], "word": [4, 55, 56], "base": [4, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 93, 94, 96, 97, 98, 99, 111, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 207, 208, 209, 210, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 315, 334, 335, 345, 346, 351, 368, 369, 375], "chang": [4, 32, 38, 59, 68, 94, 171, 174, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310], "dure": [4, 33, 37, 41, 49, 55, 56, 58, 60, 157, 161, 171, 172, 174, 175, 184, 190], "process": [4, 12, 14, 41, 49, 55, 56, 222, 247], "h": [4, 63, 66, 77, 78, 81, 83, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 216, 265], "necessari": 4, "further": [4, 13, 18, 19, 21, 22, 24, 25, 26, 28], "worri": 4, "too": [4, 33, 37, 310], "henc": 4, "expect": [4, 10, 30, 31, 33, 34, 35, 36, 37, 41, 49, 59, 68, 69, 157, 161, 170, 173, 208, 209], "even": [4, 97, 115], "assum": [4, 32, 38, 55, 56, 77, 81, 156, 158, 160, 162, 171, 174, 181, 182, 194, 195, 315], "alreadi": [4, 33, 37, 93, 94, 97, 115], "dynam": [4, 55, 56, 69, 71, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "so": [4, 7, 55, 56, 120, 121, 135, 136], "here": [4, 7, 12, 41, 49, 55, 56, 58, 59, 60, 68, 69, 77, 81, 93, 339, 341], "second": [4, 6, 7, 8, 9, 10, 59, 62, 65, 68, 76, 78, 80, 83, 88, 89], "did": [4, 7], "ani": [4, 12, 32, 33, 37, 38, 39, 41, 49, 55, 56, 58, 59, 60, 68, 87, 92, 93, 94, 151, 153, 155, 157, 159, 161, 165, 167, 208, 209, 331, 363], "signific": [4, 41, 49], "gain": 4, "800": 4, "train_img_data": 4, "test_img_data": 4, "len": [4, 6, 7, 8, 10, 12, 235, 236, 237, 257, 264, 275, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 325, 344, 349, 359, 367, 373], "froozen": 4, "new_model": 4, "normal_": 4, "std": [4, 12, 151, 153, 166, 168, 310], "01": [4, 47, 48], "zero_": 4, "requires_grad_": 4, "earli": [4, 41, 49], "stop": [4, 41, 49, 59, 68, 345, 368], "low": [4, 33, 37, 59, 68, 199], "frequenc": [4, 59, 68], "ensur": [4, 86, 204], "despit": 4, "20": [4, 6, 8, 9, 10, 165, 167, 181, 194], "50": [4, 6, 143, 144, 145, 146], "intuit": 4, "transfer": [4, 58, 60], "recognit": 4, "classif": [4, 8, 10, 12, 18, 20, 21, 24, 27, 28, 41, 49, 58, 59, 60, 64, 67, 68, 78, 83, 207, 210, 211, 212, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "test_load": 4, "val_acc": 4, "check_val_every_n_epoch": [4, 41, 49, 59, 68], "pred": [4, 10, 55, 56], "argmax": [4, 10], "_pretrained_filenam": 4, "path": [4, 30, 31, 32, 33, 35, 36, 37, 38, 39, 69, 97, 115, 183, 184, 189, 190, 223, 235, 256, 257, 335, 336, 340, 342, 343, 345, 354, 355, 368], "join": 4, "isfil": 4, "save": [4, 69, 342, 343], "state_dict": 4, "60": [4, 6], "correctli": 4, "impress": 4, "dimension": [4, 12, 58, 59, 60, 68], "With": 4, "achiev": [4, 58, 60], "suggest": [4, 12], "exponenti": [4, 59, 68, 77, 78, 81, 83], "finetun": 4, "advantag": 4, "straightforward": 4, "clear": [4, 19, 25], "its": [4, 12, 20, 27, 33, 37, 59, 68, 92, 94, 108, 109, 120, 121, 135, 136, 165, 167, 171, 174, 335, 345, 368], "count": 4, "fair": 4, "ones": [4, 59, 68], "notic": 4, "ad": [4, 12, 47, 48, 58, 59, 60, 68, 166, 168, 223, 235, 256, 257], "restrict": 4, "oper": [4, 41, 49, 55, 56, 255, 310], "125": 4, "1250": 4, "recogn": 4, "object": [4, 39, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 58, 60, 69, 72, 75, 79, 96, 97, 98, 99, 111, 113, 115, 180, 193, 198, 199, 203, 214, 215, 308, 309, 310, 311, 334, 335], "patch": [4, 184, 190, 208, 209, 220, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 346, 351, 353, 369, 375], "belong": [4, 85], "chosen": [4, 41, 49], "weaker": 4, "almost": [4, 8, 166, 168], "strongli": 4, "train_transform": 4, "train_img_aug_data": 4, "2e": 4, "scratch": 4, "73": [4, 6], "7": [4, 6, 11, 12, 33, 37, 90, 91, 120, 121, 135, 136, 345, 368, 384], "less": 4, "leverag": [4, 12, 59, 68], "amount": 4, "generaliz": 4, "sole": [4, 41, 49], "par": 4, "tenth": 4, "experiment": [4, 69], "recent": 4, "ting": [4, 58, 60, 221, 248], "chen": [4, 58, 60, 63, 64, 66, 67, 76, 80, 221, 248], "trend": 4, "seem": [4, 7], "stronger": [4, 75, 79], "come": 4, "approach": [4, 12, 14], "beyond": 4, "khosla": 4, "moreov": 4, "year": [4, 33, 37], "great": 4, "distil": 4, "byol": 4, "redund": [4, 85], "reduct": [4, 12, 41, 49], "There": 4, "domain": [4, 6, 33, 37], "ahead": 4, "credit": [6, 7, 8, 9, 10], "grigi": [6, 8, 9, 10, 33, 37], "c": [6, 7, 9, 12, 33, 37, 96, 98, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 216, 322, 325, 345, 346, 356, 359, 368, 369], "ambrois": [6, 7, 33, 37], "surfifi": [6, 7, 8, 9, 10, 11, 13, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384], "min_depth_to_get_n_neighbor": [6, 13, 177, 312, 344, 367], "plot_trisurf": [6, 7, 8, 9, 10, 13, 177, 307, 308, 309, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 345, 346, 351, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 375, 376, 381, 382], "triangl": [6, 7, 9, 183, 184, 186, 189, 190, 192, 235, 246, 257, 308, 309, 316, 317, 320, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 337, 338, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 358, 359, 360, 363, 364, 365, 368, 369, 374, 375, 376, 377, 378, 382], "order": [6, 7, 8, 9, 10, 12, 41, 49, 59, 68, 69, 90, 91, 93, 156, 160, 171, 172, 174, 175, 183, 184, 189, 190, 208, 209, 218, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 257, 260, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 308, 309, 311, 315, 316, 317, 319, 320, 322, 323, 324, 325, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 381, 382], "neigh": [6, 9, 183, 184, 189, 190, 291, 302, 325, 326, 345, 346, 352, 353, 359, 360, 368, 369, 376], "direct_neighbor": [6, 9, 286, 288, 289, 290, 294, 297, 299, 300, 301, 305, 325, 345, 351, 353, 359, 368, 375], "max_depth": 6, "ceil": 6, "displai": [6, 8, 9, 10, 13, 18, 19, 21, 22, 24, 25, 26, 28, 69, 90, 91, 103, 110, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 321], "aug": 6, "add_axi": 6, "arg": [6, 93, 94, 121, 136, 188, 202, 236, 264, 310], "kwarg": [6, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 92, 93, 94, 96, 98, 121, 123, 129, 130, 131, 132, 136, 137, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 188, 202, 236, 264, 310], "aspect": [6, 7, 9, 155, 157, 159, 161, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "auto": [6, 7, 9, 41, 47, 48, 49, 69, 73, 213, 217, 317, 322, 325, 330, 331, 345, 346, 351, 356, 359, 363, 368, 369, 375], "white": [6, 185, 191], "linewidth": [6, 9, 308, 309], "_textur": 6, "patch_siz": [6, 184, 190], "n_patch": [6, 184, 190, 220, 251], "uniform": [6, 59, 68, 88, 89, 90, 91], "phi": [6, 75, 79, 186, 192], "180": 6, "theta": [6, 75, 79, 186, 192], "psi": [6, 186, 192], "controlateral_textur": 6, "prob": [6, 181, 182, 194, 195, 196], "n_vertic": [6, 8, 10, 181, 182, 194, 195, 196, 211, 212, 220, 233, 234, 236, 251, 262, 263, 264, 310, 323, 333, 344, 347, 348, 349, 352, 357, 365, 367, 371, 372, 373, 376], "controlateral_data": [6, 182, 195], "group_textur": 6, "group_data": [6, 181, 194], "n_sampl": [6, 8, 10, 20, 21, 27, 28, 47, 48, 77, 81, 85, 86, 88, 89, 90, 91, 181, 194, 207, 210, 211, 212, 220, 251, 319, 320, 322, 323, 332, 333, 352, 356, 357, 364, 365, 376, 381, 382], "neigh_ind": [6, 181, 194], "groupbi": [6, 181, 194], "n_neighbor": [6, 12, 181, 194], "n_compon": [6, 12, 181, 194], "58": 6, "49": 6, "62": 6, "47": 6, "99": [6, 10, 59, 68, 165, 167], "92": [6, 90, 91], "54": 6, "65": [6, 8, 90, 91], "31": 6, "78": 6, "90": [6, 90, 91, 158, 162], "76": 6, "93": [6, 33, 37], "21": [6, 90, 91], "70": 6, "22": 6, "46": 6, "89": [6, 8, 11, 384], "82": 6, "11": [6, 7, 11, 384], "59": 6, "56": 6, "19": [6, 33, 37], "13": [6, 9], "23": 6, "51": 6, "79": 6, "17": 6, "77": 6, "88": [6, 33, 37], "52": 6, "95": [6, 78, 83, 90, 91], "48": 6, "72": 6, "66": [6, 11, 384], "24": [6, 7, 11, 119, 124, 384], "69": 6, "86": [6, 165, 167], "26": [6, 90, 91], "27": [6, 90, 91], "29": [6, 7], "83": 6, "63": 6, "36": 6, "33": [6, 155, 157, 159, 161], "39": 6, "35": [6, 10], "37": 6, "38": [6, 33, 37], "45": [6, 352, 376], "71": 6, "40": [6, 8, 9, 10, 207, 210, 211, 212], "41": 6, "81": 6, "43": 6, "44": [6, 90, 91], "87": 6, "98": 6, "97": 6, "53": 6, "55": [6, 90, 91], "57": 6, "61": [6, 90, 91], "94": [6, 78, 83], "67": [6, 7], "75": [6, 90, 91, 157, 161], "85": [6, 90, 91], "91": 6, "aug1": 6, "aug2": 6, "aug3": 6, "tran": 6, "regist": [6, 33, 37, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 180, 187, 198, 201, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "probabl": [6, 33, 37, 75, 77, 79, 81, 94, 156, 158, 160, 162, 180, 181, 182, 194, 195, 196, 198, 200, 311], "script": [6, 7, 8, 9, 10], "minut": [6, 7, 8, 9, 10], "110": [6, 11, 384], "plot_augment": [6, 11, 384], "math": [7, 165, 167], "warn": [7, 33, 37, 41, 49, 59, 68, 69, 107], "scipi": [7, 77, 81, 310, 317, 330], "mpl_toolkit": 7, "mplot3d": 7, "axes3d": [7, 308, 309], "ico2ico": [7, 13, 177, 312, 317, 320, 330, 382], "build": [7, 9, 59, 68, 69, 90, 91, 183, 184, 189, 190, 193, 203, 222, 247, 310, 345, 346, 351, 353, 354, 355, 366, 368, 369, 375, 378], "vertices_norm": 7, "triangles_norm": 7, "standard_ico": [7, 8, 10, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 317, 320, 330, 331, 351, 363, 375, 382], "642": [7, 8, 10], "1280": [7, 8, 10], "freesurf": [7, 33, 37, 222, 247, 337, 342, 351, 354, 375], "try": [7, 310], "find": [7, 69, 87, 315, 317, 322, 325, 330, 332, 356, 359, 364, 366], "optim": [7, 10, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69], "rotat": [7, 158, 162, 186, 192, 317, 326, 330, 352, 360, 376], "rmse": [7, 90, 91], "align_vector": 7, "54571598073452": 7, "okai": 7, "doe": [7, 19, 25, 84, 310], "suppos": 7, "equal": [7, 58, 59, 60, 68, 78, 83, 88, 89, 150, 152, 155, 159], "zero": [7, 8, 32, 38, 88, 89, 120, 121, 135, 136, 184, 190, 224, 235, 236, 237, 257, 258, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 329], "issu": [7, 72], "matric": [7, 310], "That": 7, "previou": [7, 12], "algorithm": 7, "properli": 7, "row": [7, 12, 183, 184, 189, 190, 345, 368], "matrix": [7, 59, 68, 77, 78, 81, 83, 156, 158, 160, 162, 171, 174, 181, 194, 310], "52573111": 7, "85065081": 7, "96386126": 7, "2664047": 7, "91298249": 7, "39960705": 7, "08232358": 7, "8944": 7, "4472": 7, "2764": 7, "8507": 7, "1815": 7, "296": 7, "9378": 7, "0272": 7, "3462": 7, "0692": 7, "213": 7, "9746": 7, "sufac": [7, 13, 285, 312], "togeth": [7, 12, 311], "place": [7, 73], "subset": [7, 208, 209], "absolut": [7, 12, 21, 22, 26, 28, 69, 72, 90, 91], "sign": [7, 317, 330], "vertices_of_interest_norm": 7, "search": [7, 325, 345, 359, 368], "coords_of_interest": 7, "idx_of_interest": 7, "ab": [7, 59, 63, 64, 66, 67, 68, 78, 83, 120, 121, 135, 136, 155, 159], "sum": [7, 10, 47, 48], "vertices_of_interest": 7, "fs_row_idx": 7, "break": 7, "depend": [7, 33, 37, 59, 68, 94], "various": 7, "until": 7, "itertool": 7, "n_permut": 7, "factori": 7, "best_rms": 7, "best_rot": 7, "catch_warn": 7, "simplefilt": 7, "ignor": [7, 41, 47, 48, 49, 58, 59, 60, 68, 82, 90, 91, 92, 93, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 156, 158, 160, 162, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 310], "categori": 7, "userwarn": [7, 30, 31, 34, 35, 36], "format": [7, 10, 17, 23, 90, 91, 94, 156, 158, 160, 162, 171, 174, 321, 337, 338, 342, 343], "as_matrix": 7, "52575203": 7, "85063788": 7, "971395685383565e": 7, "05": [7, 11, 59, 68, 90, 91, 384], "simpli": [7, 59, 68], "solv": [7, 20, 27], "outlin": 7, "proper": [7, 30, 31, 32, 35, 36, 38], "anoth": [7, 12], "half": 7, "clearli": 7, "appear": [7, 12, 18, 21, 22, 24, 26, 28], "opt": 7, "hostedtoolcach": 7, "x64": 7, "lib": 7, "python3": 7, "coord": [7, 13, 177, 314, 315, 316, 317, 318, 319, 320], "246": 7, "closest": [7, 326, 360], "9190925817849288": 7, "903": [7, 11, 384], "plot_match_icosahedron": [7, 11, 384], "convert": [8, 86, 171, 174, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 256, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 316, 319, 329, 381], "spheric": [8, 11, 213, 214, 215, 217, 222, 223, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 256, 257, 258, 259, 264, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 292, 293, 296, 303, 304, 312, 313, 314, 316, 318, 319, 328, 329, 345, 362, 368, 380, 381, 384], "evenli": [8, 319, 381], "resampl": [8, 13, 94, 157, 161, 171, 172, 174, 175, 177, 319, 381], "respect": [8, 12, 47, 48, 157, 161, 171, 174, 296, 319, 381], "sin": [8, 319, 381], "elev": [8, 214, 215, 218, 219, 224, 236, 237, 260, 261, 264, 266, 275, 296, 313, 314, 318, 319, 380, 381], "azimuth": [8, 214, 215, 218, 219, 224, 236, 237, 260, 261, 264, 266, 275, 296, 313, 314, 318, 319, 380, 381], "vice": 8, "versa": 8, "ico_ord": [8, 10, 183, 184, 189, 190, 208, 209], "n_class": [8, 10, 207, 210, 211, 212, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 319, 320, 323, 332, 333, 352, 357, 364, 365, 376, 381, 382], "ico_vertic": [8, 10, 207, 210, 211, 212], "ico_triangl": [8, 10], "make_classif": [8, 10, 13, 177, 206, 211, 212, 319, 320, 323, 332, 333, 352, 357, 364, 365, 376, 381, 382], "seed": [8, 10, 47, 48, 55, 56, 58, 60, 207, 210, 211, 212, 319, 320, 323, 332, 333, 352, 357, 364, 365, 376, 381, 382], "proj_textur": 8, "text2grid": [8, 13, 177, 312, 313, 314, 316, 318, 319, 329, 380, 381], "proj": [8, 316, 319, 329, 381], "lower": [8, 12, 157, 161, 323, 354, 357], "192": [8, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 256, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 316, 319, 329, 381], "grid2text": [8, 13, 177, 312, 313, 314, 316, 318, 319, 329, 380, 381], "is_label": [8, 10, 308, 309, 316, 320, 323, 329, 332, 333, 352, 357, 364, 365, 376, 382], "enabl": [8, 33, 37, 41, 49, 55, 56, 69, 96, 98], "scatter_dens": 8, "labelx": 8, "labe": 8, "scatter": [8, 9, 12, 322, 325, 345, 346, 351, 356, 359, 368, 369, 375], "width": [8, 120, 121, 135, 136, 308, 309], "bottom": 8, "height": [8, 265], "005": 8, "rect_scatt": 8, "rect_histx": 8, "rect_histi": 8, "ax_scatt": 8, "tick_param": 8, "direct": [8, 171, 174, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297, 319, 345, 368, 381], "top": [8, 18, 21, 22, 24, 26, 28], "ax_histx": 8, "ax_histi": 8, "bin": 8, "hist": 8, "orient": [8, 156, 158, 160, 162, 171, 174], "set_xlim": 8, "get_xlim": 8, "set_ylim": 8, "get_ylim": 8, "radiu": [8, 313, 314, 318, 380], "cart2sph": [8, 13, 177, 312, 313, 314, 318, 380], "sin_elev": 8, "circularli": [8, 296], "continu": [8, 12, 21, 28, 47, 48, 59, 64, 67, 68, 78, 83, 85, 86, 296], "circular": [8, 292, 293, 296, 303, 304], "boundari": [8, 296], "expand_dim": 8, "from_numpi": [8, 171, 174], "pad_textur": 8, "circular_pad": [8, 13, 177, 285, 296], "padd": 8, "conv": [8, 120, 121, 128, 135, 136, 223, 235, 253, 254, 255, 256, 257, 258, 259, 286, 297], "out_channel": [8, 10, 223, 235, 255, 256, 257], "conv_textur": 8, "194": [8, 11, 224, 225, 226, 227, 228, 229, 230, 231, 232, 266, 267, 268, 269, 270, 271, 272, 273, 274, 292, 303, 384], "015": [8, 11, 384], "plot_project_textur": [8, 11, 384], "get_rectangular_project": [9, 13, 177, 312, 328, 362], "vidx": 9, "cnt": [9, 322, 325, 345, 346, 351, 356, 359, 368, 369, 375], "marker": [9, 322, 325, 345, 346, 351, 356, 359, 368, 369, 375], "str": [9, 18, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 69, 70, 72, 75, 77, 78, 79, 81, 83, 85, 90, 91, 97, 112, 114, 115, 137, 138, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 175, 181, 183, 184, 186, 189, 190, 192, 194, 208, 209, 218, 219, 220, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 257, 258, 260, 261, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 301, 310, 321, 326, 335, 336, 337, 338, 340, 342, 343, 352, 354, 355, 360, 376, 379], "rectangular": [9, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 328, 346, 362, 369], "sphere": [9, 253, 258, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 328, 346, 350, 361, 362, 366, 369, 370, 374], "zoom": [9, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 302, 325, 328, 346, 359, 362, 369], "purpl": 9, "brown": 9, "pink": 9, "oliv": 9, "cyan": 9, "yellow": 9, "tan": 9, "salmon": 9, "violet": 9, "steelblu": [9, 12], "lime": 9, "navi": 9, "node": [9, 41, 49, 184, 190, 286, 297, 325, 328, 359, 362, 378], "node_rec_neigh": 9, "node_tplane_neigh": 9, "304": [9, 11, 384], "195": 9, "plot_spherical_neighbor": [9, 11, 384], "sphericalunet": [10, 13, 177, 217, 223, 235, 255, 256, 257], "genrat": 10, "n_epoch": 10, "surfac": [10, 12, 13, 33, 37, 177, 178, 179, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 251, 256, 257, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 308, 309, 316, 319, 329, 336, 337, 338, 339, 342, 343, 345, 368, 381, 383], "crossentropi": 10, "sgd": [10, 59, 68], "obviou": 10, "classificationdataset": [10, 13, 177, 206, 207, 210], "in_ord": [10, 235, 257], "start_filt": [10, 223, 235, 256, 257], "conv_mod": [10, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "dine": [10, 183, 184, 189, 190, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297, 345, 368], "dine_s": [10, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "up_mod": [10, 235, 257, 258], "transpos": [10, 223, 235, 256, 257, 258, 288, 293, 294, 299, 304, 305], "loss_fn": 10, "crossentropyloss": 10, "momentum": [10, 59, 68], "n_batch": 10, "zero_grad": 10, "backward": [10, 59, 68, 85, 86], "current": [10, 21, 28, 33, 37, 41, 49, 55, 56, 58, 59, 60, 68, 70, 71, 73, 94, 156, 160], "7f": 10, "5d": 10, "eval": [10, 41, 49, 55, 56], "test_loss": 10, "y_pred": [10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 85, 86, 88, 89, 90, 91], "no_grad": 10, "logit": [10, 76, 80], "softmax": 10, "type": [10, 17, 23, 32, 38, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 59, 68, 69, 70, 85, 86, 87, 92, 93, 94, 120, 121, 135, 136, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 186, 192, 193, 203, 235, 257, 258, 290, 301, 326, 345, 352, 360, 368, 376], "concaten": [10, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 255, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "error": [10, 12, 21, 22, 26, 28, 33, 37, 41, 47, 48, 49, 55, 56, 90, 91, 111, 114, 166, 168, 310, 334], "1f": 10, "avg": 10, "8f": 10, "187070": 10, "979653": 10, "855242": 10, "712914": 10, "607041": 10, "516769": 10, "425260": 10, "333251": 10, "001165": 10, "001057": 10, "001287": 10, "001859": 10, "002577": 10, "002806": 10, "002196": 10, "001267": 10, "000006": 10, "000005": 10, "000007": 10, "000009": 10, "000010": 10, "000011": 10, "000013": 10, "000014": 10, "000001": 10, "corresspond": 10, "exactli": 10, "ground": [10, 21, 28, 85, 86, 90, 91], "truth": [10, 21, 28, 85, 86, 90, 91], "727": [10, 11, 384], "565": 10, "plot_unet_segment": [10, 11, 384], "058": [11, 384], "564": [11, 384], "weak": 12, "guid": [12, 18, 24, 310], "bring": 12, "push": [12, 58, 59, 60, 68], "apart": [12, 58, 59, 60, 68], "dissimilar": [12, 59, 68], "enhanc": 12, "qualiti": [12, 157, 161, 171, 172, 174, 175], "diseas": 12, "md": 12, "regress": [12, 13, 20, 21, 22, 26, 27, 28, 41, 44, 49, 52, 55, 56, 58, 60, 85, 86, 89, 90, 91, 177], "knn": 12, "voxel": [12, 33, 37, 94, 155, 156, 159, 160, 165, 166, 167, 168, 171, 174], "morphometri": [12, 33, 37], "vbm": [12, 33, 37], "templat": [12, 33, 37], "footprint": 12, "roi": 12, "whole": [12, 33, 37, 165, 166, 167, 168], "individu": 12, "proxi": [12, 59, 64, 67, 68, 78, 83], "meta": [12, 20, 27, 59, 64, 67, 68, 78, 83, 181, 194, 310], "miccai": [12, 59, 64, 67, 68, 78, 83], "2021": [12, 58, 59, 60, 64, 67, 68, 78, 83, 118, 122, 165, 167, 236, 264], "linearregress": 12, "manifold": 12, "mean_absolute_error": 12, "kneighborsregressor": 12, "dataloader_ssl_vbm": 12, "dataloader_ssl_vbm_test": 12, "sbm_channel": 12, "sbm_transform": 12, "vbm_transform": 12, "dataloader_ssl_sbm": 12, "dataloader_ssl_sbm_test": 12, "don": [12, 155, 157, 159, 161], "dataloader_vbm_train": 12, "dataloader_vbm_test": 12, "dataloader_sbm_train": 12, "dataloader_sbm_test": 12, "hack": 12, "avoid": [12, 21, 28, 166, 168, 310], "instanti": [12, 59, 68, 171, 174], "impos": [12, 59, 68, 69], "272": 12, "vbm_encod": 12, "sbm_encod": 12, "vbm_model": 12, "sbm_model": 12, "wide": 12, "pairwis": [12, 59, 68, 77, 78, 81, 83], "distanc": [12, 47, 48, 75, 77, 79, 81, 181, 194, 291, 302], "preserv": [12, 120, 121, 135, 136, 155, 159, 171, 172, 174, 175], "z_train_vbm": 12, "z_test_vbm": 12, "z_train_sbm": 12, "z_test_sbm": 12, "y_train_vbm": 12, "y_test_vbm": 12, "y_train_sbm": 12, "y_test_sbm": 12, "accord": [12, 33, 37, 47, 48, 120, 121, 135, 136, 165, 167, 345, 368], "plot_mds_side_by_sid": 12, "z_vbm": 12, "z_sbm": 12, "y_vbm": 12, "y_sbm": 12, "side": 12, "n_init": 12, "300": 12, "z_vbm_md": 12, "fit_transform": 12, "z_sbm_md": 12, "sc1": 12, "viridi": 12, "sc2": 12, "report": [12, 18, 21, 24, 28, 90, 91], "evaluate_and_predict": 12, "z_train": 12, "z_test": 12, "y_train": 12, "y_test": 12, "mae": [12, 90, 91], "plot_comparison": 12, "dict": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 70, 71, 72, 73, 90, 91, 92, 93, 94, 96, 98, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 183, 184, 189, 190, 208, 209, 222, 247, 284, 311, 325, 326, 345, 359, 360, 368], "n_model": 12, "n_modal": 12, "model_nam": 12, "col": 12, "lw": 12, "nmae": 12, "organ": [12, 183, 184, 189, 190, 336, 345, 368], "mai": [12, 13, 41, 49, 310], "captur": 12, "relat": [12, 217, 222, 247], "context": [12, 334], "confirm": 12, "outperform": 12, "pleas": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "guidelin": 13, "autoencod": [13, 47, 48, 177, 217, 236, 264], "variou": [13, 95, 265], "help": [13, 41, 49, 95], "develop": [13, 14, 95], "definit": [13, 69, 77, 81, 116, 117, 213, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 332, 364], "backbon": [13, 47, 48, 59, 68, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 177, 221, 248], "intens": [13, 94, 150, 151, 152, 153, 165, 166, 167, 168, 177], "link": 13, "plugin": 13, "helper": [13, 178], "integr": [13, 78, 83, 87, 178, 255], "pytorch": [13, 41, 49, 55, 56, 59, 68, 178, 218, 219, 233, 234, 260, 261, 262, 263, 321, 383], "artifici": [13, 155, 159, 206], "dedic": [13, 285], "content": [13, 30, 35], "fetch_experi": [13, 15, 69, 177], "filter_config": [13, 15, 70, 177], "get_env": [13, 15, 71, 177], "load_interfac": [13, 15, 72, 177], "update_param": [13, 15, 73, 177], "batchtypingcallback": [13, 16, 17, 23, 41, 49, 177], "modelprob": [13, 16, 18, 19, 21, 22, 24, 25, 26, 28, 177], "multitaskestim": [13, 16, 20, 21, 27, 28, 177], "regressionprobingcallback": [13, 16, 22, 26, 177], "check_typ": [13, 23, 177], "baseimagedataset": [13, 29, 30, 35, 177], "basenumpydataset": [13, 29, 31, 36, 177], "imagedataframedataset": [13, 29, 32, 38, 177], "pandas_dataset": [13, 32, 38, 39, 177], "default_image_load": [13, 29, 32, 38, 39, 177], "basedataset": [13, 29, 30, 31, 34, 35, 36, 177], "baseestim": [13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 40, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68, 77, 81, 177], "classifiermixin": [13, 40, 42, 50, 55, 56, 177], "clustermixin": [13, 40, 43, 51, 177], "regressormixin": [13, 40, 44, 52, 177], "transformermixin": [13, 19, 25, 40, 45, 47, 48, 53, 58, 59, 60, 68, 177], "vae": [13, 47, 48, 75, 79, 177, 214, 215, 216, 236, 260, 261, 262, 263, 264, 265], "logistic_regress": [13, 56, 177], "yawar": [13, 64, 67, 68, 177], "projectionhead": [13, 61, 62, 63, 64, 65, 66, 67, 177], "simclrprojectionhead": [13, 61, 63, 66, 177], "yawareprojectionhead": [13, 59, 61, 64, 67, 68, 177], "projection_head": [13, 59, 62, 65, 66, 67, 68, 177], "betavaeloss": [13, 47, 48, 74, 75, 79, 177], "infonc": [13, 55, 56, 58, 59, 60, 68, 76, 78, 80, 83, 177], "kernelmetr": [13, 59, 68, 74, 77, 78, 81, 83, 177], "yawareinfonc": [13, 59, 68, 74, 78, 83, 177], "yaware_infonc": [13, 59, 68, 81, 82, 83, 177], "pairwisecosinesimilar": [13, 74, 82, 177], "beta_va": [13, 79, 177], "pearson_r": [13, 84, 88, 89, 177], "regression_report": [13, 84, 90, 91, 177], "_regress": [13, 85, 86, 87, 177], "_check_reg_target": [13, 84, 85, 86, 177], "_check_reg_targets_with_floating_dtyp": [13, 84, 85, 86, 177], "_find_matching_floating_dtyp": [13, 84, 85, 86, 87, 177], "bunch": [13, 69, 96, 98, 177], "print_multicolor": [13, 95, 103, 110, 177], "attr": [13, 95, 100, 112, 177], "fg": [13, 95, 101, 177], "hex": [13, 95, 102, 177], "print_result": [13, 95, 104, 177], "print_subtitl": [13, 95, 105, 177], "print_titl": [13, 95, 106, 177], "print_warn": [13, 95, 107, 177], "random_styl": [13, 95, 108, 177], "styliz": [13, 95, 109, 177], "_availableifdescriptor": [13, 95, 111, 177], "_estimator_i": [13, 95, 112, 177], "available_if": [13, 95, 113, 177], "check_is_fit": [13, 95, 114, 177], "alexnet": [13, 117, 118, 122, 177], "densenet": [13, 117, 119, 123, 124, 130, 177], "resnettrunc": [13, 117, 121, 136, 177], "densenet121": [13, 117, 123, 130, 177], "resnet18_trunc": [13, 117, 132, 142, 177], "resnet50": [13, 117, 120, 121, 135, 136, 143, 145, 177], "resnet50_trunc": [13, 117, 144, 146, 177], "alexnet3d": [13, 122, 177], "resnet3d": [13, 59, 68, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 177], "basicblock": [13, 117, 120, 121, 133, 135, 136, 177], "bottleneck": [13, 75, 79, 117, 119, 120, 121, 124, 134, 135, 136, 177], "_resnet": [13, 117, 137, 177], "_resnet_trunc": [13, 117, 138, 177], "conv1x1": [13, 117, 139, 177], "conv3x3": [13, 117, 140, 177], "densenet3d": [13, 124, 125, 126, 127, 128, 129, 130, 177], "_denseblock": [13, 117, 125, 177], "_denselay": [13, 117, 126, 177], "_transit": [13, 117, 127, 177], "_bn_function_factori": [13, 117, 128, 177], "_densenet": [13, 117, 129, 177], "volume_transform": [13, 176, 177], "volumetransform": [13, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 173, 174, 176, 177], "randomgaussianblur": [13, 94, 149, 150, 152, 177], "randomgaussiannois": [13, 94, 149, 151, 153, 177], "random_nois": [13, 153, 177], "random_blur": [13, 152, 177], "randomeras": [13, 94, 154, 155, 159, 177], "randomflip": [13, 94, 154, 156, 160, 177], "randomrot": [13, 94, 154, 158, 162, 177], "random_eras": [13, 159, 177], "random_flip": [13, 160, 177], "random_resized_crop": [13, 161, 177], "random_rot": [13, 162, 177], "robustresc": [13, 94, 164, 165, 167, 177], "znormal": [13, 94, 164, 166, 168, 177], "z_normal": [13, 168, 177], "rescal": [13, 165, 167, 177, 354], "croporpad": [13, 94, 169, 170, 173, 177], "crop_or_pad": [13, 173, 177], "randomcompos": [13, 177, 178, 311], "basetransform": [13, 177, 179, 180, 187, 188, 198, 201, 202], "groupmixup": [13, 177, 179, 181, 194], "hemimixup": [13, 177, 179, 182, 195], "surfblur": [13, 177, 179, 183, 189], "surfcutout": [13, 177, 179, 184, 190], "surfnois": [13, 177, 179, 185, 191], "surfrot": [13, 177, 179, 186, 192], "apply_chained_transform": [13, 177, 179, 188, 202], "multichannel_augment": [13, 177, 179, 197, 205], "mixup": [13, 177, 194, 195, 196], "mixupaugment": [13, 177, 179, 181, 182, 194, 195, 196], "randomaugment": [13, 177, 179, 180, 183, 184, 185, 186, 189, 190, 191, 192, 196, 197, 198, 199, 205], "listifi": [13, 177, 179, 204], "genericsurfdataset": [13, 177, 206, 208, 209], "_samples_gener": [13, 177, 210, 211], "_gener": [13, 177, 209], "sphericalvaeloss": [13, 177, 213, 214, 215], "log_likelihood": [13, 177, 213, 216], "hemifusiondecod": [13, 177, 217, 218, 260], "hemifusionencod": [13, 177, 217, 219, 261], "sit": [13, 177, 220, 249, 250, 251, 252], "sphericalbas": [13, 177, 217, 222, 233, 234, 235, 237, 247, 257, 262, 263, 275], "sphericalgunet": [13, 177, 217, 223, 235, 255, 256, 257], "sphericalgvgg": [13, 177, 217, 224, 237, 266, 275], "sphericalgvgg11": [13, 177, 217, 224, 225, 266, 267], "sphericalgvgg11bn": [13, 177, 217, 226, 268], "sphericalgvgg13": [13, 177, 217, 227, 269], "sphericalgvgg13bn": [13, 177, 217, 228, 270], "sphericalgvgg16": [13, 177, 217, 229, 271], "sphericalgvgg16bn": [13, 177, 217, 230, 272], "sphericalgvgg19": [13, 177, 217, 231, 273], "sphericalgvgg19bn": [13, 177, 217, 232, 274], "sphericalhemifusiondecod": [13, 177, 217, 233, 262], "sphericalhemifusionencod": [13, 177, 217, 234, 263], "sphericalva": [13, 177, 217, 236, 264], "sphericalvgg": [13, 177, 217, 224, 237, 266, 275], "sphericalvgg11": [13, 177, 217, 237, 238, 275, 276], "sphericalvgg11bn": [13, 177, 217, 239, 277], "sphericalvgg13": [13, 177, 217, 240, 278], "sphericalvgg13bn": [13, 177, 217, 241, 279], "sphericalvgg16": [13, 177, 217, 242, 280], "sphericalvgg16bn": [13, 177, 217, 243, 281], "sphericalvgg19": [13, 177, 217, 244, 282], "sphericalvgg19bn": [13, 177, 217, 245, 283], "attent": [13, 177, 217, 220, 249, 251], "feedforward": [13, 177, 217, 250], "vgg": [13, 177, 224, 237, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "class_factori": [13, 177, 217, 284], "compute_output_dim": [13, 177, 217, 265], "downblock": [13, 177, 217, 253], "downgblock": [13, 177, 217, 254], "graphicalunet": [13, 177, 217, 255], "upblock": [13, 177, 217, 258], "upgblock": [13, 177, 217, 259], "ico": [13, 177, 183, 184, 189, 190, 208, 209, 217, 222, 246, 247, 286, 297], "icodineconv": [13, 177, 183, 189, 285, 286, 291, 292, 297, 302, 303], "icofixindexupsampl": [13, 177, 285, 287, 288, 289, 293, 294, 295, 298, 299, 300, 304, 305, 306], "icogenericupconv": [13, 177, 285, 287, 288, 289, 293, 294, 295, 298, 299, 300, 304, 305, 306], "icomaxindexupsampl": [13, 177, 285, 287, 288, 289, 293, 294, 295, 298, 299, 300, 304, 305, 306], "icopool": [13, 177, 285, 289, 290, 300, 301], "icorepaconv": [13, 177, 285, 286, 291, 292, 297, 302, 303], "icospmaconv": [13, 177, 265, 285, 286, 291, 292, 297, 302, 303], "icospmaconvtranspos": [13, 177, 285, 287, 288, 289, 293, 294, 295, 298, 299, 300, 304, 305, 306], "icoupconv": [13, 177, 285, 287, 288, 289, 294, 295, 298, 299, 300, 305, 306], "icoupsampl": [13, 177, 285, 287, 288, 289, 293, 294, 295, 298, 299, 300, 304, 305, 306], "debug_msg": [13, 177, 312, 321], "downsampl": [13, 133, 134, 177, 208, 209, 222, 247, 253, 254, 258, 288, 289, 290, 294, 299, 300, 301, 305, 312, 322, 323, 324, 332, 333, 354, 356, 357, 358, 364, 365], "downsample_data": [13, 177, 312, 322, 323, 324, 332, 333, 356, 357, 358, 364, 365], "downsample_ico": [13, 177, 312, 322, 323, 324, 332, 333, 356, 357, 358, 364, 365], "find_neighbor": [13, 177, 312, 325, 359], "find_rotation_interpol_coef": [13, 177, 312, 326, 350, 360, 374], "get_logg": [13, 177, 312, 327], "interpol": [13, 157, 161, 171, 172, 174, 175, 177, 186, 192, 235, 257, 258, 287, 295, 298, 306, 308, 309, 312, 316, 319, 322, 323, 324, 326, 329, 332, 333, 350, 352, 356, 357, 358, 360, 364, 365, 374, 376, 381], "interpolate_data": [13, 177, 312, 322, 323, 324, 332, 333, 356, 357, 358, 364, 365], "neighbors_rec": [13, 177, 291, 302, 312, 325, 345, 346, 359, 368, 369], "number_of_ico_vertic": [13, 177, 312, 347, 349, 371, 373], "number_of_neighbor": [13, 177, 312, 344, 348, 367, 372], "order_of_ico_from_vertic": [13, 177, 312, 347, 349, 371, 373], "order_triangl": [13, 177, 312, 350, 374], "patch_tri": [13, 177, 312, 351, 353, 375], "rotate_data": [13, 177, 186, 192, 312, 326, 352, 360, 376], "setup_log": [13, 177, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 379], "sph2cart": [13, 177, 312, 313, 314, 318, 380], "text2ico": [13, 177, 312, 317, 320, 330, 382], "find_corresponding_ord": [13, 177, 312, 315], "_patch_tri_it": [13, 177, 312, 353], "build_freesurfer_ico": [13, 177, 312, 354], "build_fslr_ref": [13, 177, 312, 355], "get_angle_with_xaxi": [13, 177, 312, 361], "middle_point": [13, 177, 312, 366], "triangles_to_edg": [13, 177, 312, 377], "vertex_adjacency_graph": [13, 177, 312, 378], "hideprint": [13, 177, 312, 334], "compute_and_stor": [13, 177, 312, 335], "decompose_cifti": [13, 177, 312, 336], "read_freesurf": [13, 177, 312, 337], "read_gifti": [13, 177, 312, 338], "surf_data_from_cifti": [13, 177, 312, 339], "ungzip": [13, 177, 312, 340], "volume_from_cifti": [13, 177, 312, 341], "write_freesurf": [13, 177, 312, 342], "write_gifti": [13, 177, 312, 343], "walk": 14, "intal": 14, "offici": [14, 87], "releas": 14, "who": 14, "latest": [14, 84, 87], "contribut": 14, "privileg": 14, "pip": 14, "git": 14, "repositori": [14, 33, 37, 97, 115], "github": [14, 217, 339, 341], "deepinsight": 14, "page": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "document": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "signatur": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "big": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "pictur": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "rais": [17, 19, 23, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 75, 79, 93, 94, 111, 113, 114, 176, 310], "typeerror": [17, 23, 32, 38, 114], "annot": [17, 23], "traiterror": [17, 23], "incorrect": [17, 23, 32, 38], "notimplementederror": [17, 23], "handl": [17, 19, 23, 25, 58, 59, 60, 68, 93, 97, 115, 150, 152, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175], "on_predict_batch_start": [17, 23], "trainer": [17, 19, 23, 25, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68], "pl_modul": [17, 18, 19, 21, 22, 23, 24, 25, 26, 28], "batch_idx": [17, 23, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68], "dataloader_idx": [17, 23, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68], "begin": [17, 19, 23, 25], "on_test_batch_start": [17, 23], "on_train_batch_start": [17, 23], "on_validation_batch_start": [17, 23], "train_dataload": [18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 58, 59, 60, 68], "test_dataload": [18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 58, 59, 60, 68], "probe_nam": [18, 21, 22, 24, 26, 28], "every_n_val_epoch": [18, 19, 21, 22, 24, 25, 26, 28], "on_test_epoch_start": [18, 19, 21, 22, 24, 25, 26, 28], "on_test_epoch_end": [18, 19, 21, 22, 24, 25, 26, 28], "prog_bar": [18, 19, 21, 22, 24, 25, 26, 28, 41, 49], "concret": [18, 22, 24, 26, 77, 81], "emb": [18, 19, 22, 24, 25, 26], "main": [18, 21, 22, 24, 26, 28, 47, 48, 90, 91], "yield": [18, 19, 21, 22, 24, 25, 26, 28], "form": [18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 69, 97, 115, 181, 194], "scikit": [18, 20, 22, 24, 26, 27, 84], "metric_nam": [18, 21, 22, 24, 26, 28], "probe_class_nam": [18, 22, 24, 26], "disabl": [18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56], "bool": [18, 19, 21, 22, 24, 25, 26, 28, 32, 33, 37, 38, 41, 47, 48, 49, 88, 89, 90, 91, 97, 112, 115, 119, 120, 121, 124, 135, 136, 155, 159, 180, 197, 198, 205, 208, 209, 214, 215, 218, 219, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 254, 255, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 297, 308, 309, 310, 331, 334, 336, 345, 350, 351, 363, 368, 374, 375], "progress": [18, 19, 21, 22, 24, 25, 26, 28, 41, 49, 55, 56, 59, 68], "log_metr": [18, 19, 21, 22, 24, 25, 26, 28], "y_true": [18, 19, 21, 22, 24, 25, 26, 28, 85, 86, 88, 89, 90, 91], "abc": [19, 25, 94], "logic": [19, 25, 41, 49, 55, 56, 94], "transform_step": [19, 25, 41, 47, 48, 49, 58, 59, 60, 68], "pass": [19, 25, 32, 38, 41, 49, 59, 62, 65, 68, 82, 85, 113, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 310], "abstract": [19, 25, 41, 49, 94], "inherit": [19, 25, 41, 49, 69], "must": [19, 25, 32, 38, 41, 49, 55, 56, 58, 59, 60, 68, 69, 77, 78, 81, 83, 94, 114, 150, 152, 156, 160, 165, 166, 167, 168, 171, 172, 174, 175, 180, 198, 335, 340], "static": [19, 25, 94, 171, 174], "adapt_dataloader_for_ddp": [19, 25], "wrap": [19, 20, 25, 27, 335], "distributedsampl": [19, 25], "ddp": [19, 25, 41, 49], "extract_featur": [19, 25], "By": [19, 25, 32, 38, 41, 47, 48, 49, 55, 56, 59, 68], "tupl": [19, 25, 33, 37, 55, 56, 58, 59, 60, 62, 65, 68, 69, 70, 97, 115, 119, 120, 124, 135, 137, 138, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 170, 171, 172, 173, 174, 175, 199, 200, 204, 246, 292, 293, 296, 303, 304], "z": [19, 25, 47, 48, 63, 66, 75, 79, 155, 156, 159, 160, 166, 168, 218, 219, 236, 260, 261, 264, 313, 314, 316, 318, 319, 329, 380, 381], "on_train_epoch_end": [19, 25], "access": [19, 25, 32, 33, 37, 38, 96, 98, 284, 335], "cach": [19, 25, 55, 56, 97, 115, 183, 184, 186, 189, 190, 192, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 335], "attribut": [19, 25, 32, 33, 37, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 73, 96, 98, 99, 100, 113, 114], "core": [19, 25, 32, 38, 41, 49, 55, 56], "lightningmodul": [19, 25, 41, 49, 59, 68], "hook": [19, 25, 41, 49, 59, 68, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "mylightningmodul": [19, 25], "l": [19, 25, 47, 48, 155, 159, 165, 167], "training_step_output": [19, 25], "training_step": [19, 25, 41, 47, 48, 49, 55, 56, 58, 59, 60, 68], "mycallback": [19, 25], "someth": [19, 25], "epoch_mean": [19, 25], "training_epoch_mean": [19, 25], "free": [19, 25], "on_validation_epoch_end": [19, 25, 55, 56], "new": [19, 25, 41, 49, 77, 81, 97, 115, 156, 160, 171, 172, 174, 175, 180, 198, 199, 200, 246, 287, 298, 310], "valueerror": [19, 25, 32, 38, 75, 79, 93, 94, 176], "list": [20, 21, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 58, 59, 60, 62, 65, 68, 69, 73, 77, 78, 81, 83, 85, 93, 181, 188, 194, 202, 204, 207, 208, 209, 210, 211, 212, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 255, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 323, 324, 325, 332, 333, 357, 358, 359, 364, 365, 377], "problem": [20, 27, 211, 212, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "regressor": [20, 22, 26, 27, 44, 52, 90, 91, 118, 122], "column": [20, 27, 32, 38], "n_featur": [20, 27, 59, 68, 76, 77, 78, 80, 81, 83, 323, 333, 352, 357, 365, 376], "n_task": [20, 21, 27, 28], "multitask": [21, 28], "categor": [21, 28, 171, 172, 174, 175], "task_name_i": [21, 28], "length": [21, 28, 33, 37, 345, 368], "task2": [21, 28], "log_classification_metr": [21, 28], "task_nam": [21, 28], "log_regression_metr": [21, 28], "median": [21, 22, 26, 28, 90, 91, 170, 173], "squar": [21, 22, 26, 28, 47, 48, 90, 91, 218, 260, 265], "multivari": [22, 26, 77, 81], "subject_in_pattern": [30, 35, 208, 209], "target_map": [30, 31, 34, 35, 36, 208, 209], "withdraw_subject": [30, 31, 34, 35, 36, 208, 209], "scalabl": [30, 35, 41, 49, 208, 209], "locat": [30, 31, 34, 35, 36, 97, 115, 208, 209, 340], "level": [30, 35, 208, 209, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 379], "identifi": [30, 35, 208, 209, 317, 330], "retriev": [30, 33, 35, 37, 97, 115, 208, 209], "optionali": [30, 31, 34, 35, 36, 55, 56, 58, 60, 208, 209, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "dictionari": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 48, 49, 55, 56, 59, 68, 90, 91, 96, 98, 99, 183, 184, 189, 190, 208, 209, 345, 368], "specifi": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 59, 68, 69, 72, 90, 91, 94, 97, 115, 156, 157, 160, 161, 171, 174, 180, 183, 184, 189, 190, 198, 208, 209, 308, 309, 323, 324, 333, 357, 358, 365], "exist": [30, 31, 34, 35, 36, 97, 115, 208, 209, 310, 354, 355], "datafram": [30, 31, 32, 34, 35, 36, 38, 181, 194, 208, 209], "callabl": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 49, 93, 113, 165, 166, 167, 168, 208, 209, 335], "optionnali": [30, 31, 34, 35, 36, 55, 56, 183, 184, 189, 190, 197, 205, 208, 209], "filenotfounderror": [30, 31, 34, 35, 36], "mandatorri": [30, 31, 34, 35, 36], "keyerror": [30, 31, 34, 35, 36], "mandatori": [30, 31, 34, 35, 36, 311], "miss": [30, 31, 33, 34, 35, 36, 37, 332, 364], "particip": [30, 31, 33, 34, 35, 36, 37, 208, 209], "tsv": [30, 31, 32, 33, 34, 35, 36, 37, 38, 208, 209], "request": [30, 31, 33, 34, 35, 36, 37, 156, 160, 208, 209, 217, 310], "conta": [30, 31, 34, 35, 36, 208, 209], "idea": [30, 35, 58, 60, 75, 79], "your": [30, 34, 35, 41, 49, 59, 68, 69, 97, 108, 109, 115, 383], "symlink": [30, 35], "aggreg": [30, 33, 35, 37, 88, 89], "enforc": [30, 35, 59, 68], "reproduc": [30, 35, 41, 47, 48, 49, 55, 56, 58, 60], "persist": [30, 35], "get_checksum": [30, 35], "hash": [30, 35, 97, 115], "get_data": [30, 31, 35, 36], "rootdir": [32, 38], "df": [32, 38], "frame": [32, 38], "image_col": [32, 38], "image_path": [32, 38], "label_col": [32, 38], "checksum_col": [32, 38], "return_none_if_no_label": [32, 38], "image_load": [32, 38], "is_valid_label": [32, 38], "read_csv_kwarg": [32, 38], "option": [32, 38, 47, 48, 58, 59, 60, 62, 65, 68, 78, 83, 88, 89, 90, 91, 94, 183, 184, 189, 190, 214, 215, 218, 219, 222, 233, 234, 247, 260, 261, 262, 263, 308, 309, 310, 323, 324, 331, 333, 334, 350, 351, 357, 358, 363, 365, 374, 375], "checksum": [32, 38], "fly": [32, 33, 37, 38], "alongsid": [32, 38], "least": [32, 38, 41, 49], "csv": [32, 33, 37, 38], "string": [32, 33, 37, 38, 59, 68, 85, 86, 114, 308, 309], "tensor": [32, 38, 41, 47, 48, 49, 55, 56, 58, 59, 60, 62, 65, 68, 75, 76, 78, 79, 80, 83, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 214, 215, 216, 218, 219, 220, 224, 233, 234, 236, 237, 251, 258, 260, 261, 262, 263, 264, 266, 275, 296, 321], "empti": [32, 38], "otherwis": [32, 33, 37, 38, 41, 49, 59, 68, 88, 89, 93, 113, 114, 156, 158, 160, 162, 310], "accept": [32, 38, 85, 86, 94], "extens": [32, 38, 155, 159, 340], "support": [32, 33, 37, 38, 41, 49, 55, 56, 75, 79, 94], "pil": [32, 38], "jpg": [32, 38], "png": [32, 38], "bmp": [32, 38], "etc": [32, 38, 59, 68], "npy": [32, 38], "npz": [32, 38], "medic": [32, 38, 165, 167, 171, 172, 174, 175], "nii": [32, 33, 37, 38], "gz": [32, 33, 37, 38, 340], "filter": [32, 38, 69, 70, 119, 124, 150, 152, 183, 189, 218, 219, 222, 223, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 290, 291, 294, 297, 299, 301, 302, 305], "out": [32, 33, 37, 38, 41, 49, 55, 56, 184, 190, 204, 224, 235, 236, 237, 257, 264, 266, 275], "invalid": [32, 38], "nan": [32, 38, 88, 89], "boolean": [32, 38, 41, 49, 165, 166, 167, 168], "keyword": [32, 38, 58, 59, 60, 68, 85, 86, 92, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175], "argument": [32, 38, 58, 59, 60, 68, 72, 85, 86, 92, 93, 94, 114, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 335, 352, 376], "read_csv": [32, 38], "colomn": [32, 38], "image1": [32, 38], "image2": [32, 38], "mypath": [32, 38], "mri1": [32, 38], "mri2": [32, 38], "diagnosi": [32, 38], "patient": [32, 38], "control": [32, 33, 37, 38, 41, 49, 55, 56, 58, 59, 60, 68, 180, 183, 189, 198, 207, 210, 211, 212, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 292, 293, 303, 304, 328, 346, 362, 369], "image_mri": [32, 38], "label_mri": [32, 38], "age_mri": [32, 38], "nifti1": [32, 38], "apply_target_transform": [32, 38], "apply_transform": [32, 38, 92, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175], "max_work": [33, 37], "r1": 33, "open": [33, 37, 340], "consist": [33, 37, 47, 48, 58, 59, 60, 64, 67, 68, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175], "t1w": [33, 37], "public": [33, 37], "ixi": [33, 37], "abid": [33, 37], "ii": [33, 37, 59, 68], "corr": [33, 37], "gsp": [33, 37], "mpi": [33, 37], "leipzig": [33, 37], "nar": [33, 37], "npc": [33, 37], "rbp": [33, 37], "were": [33, 37], "acquir": [33, 37], "worldwid": [33, 37], "north": [33, 37], "america": [33, 37], "europ": [33, 37], "china": [33, 37], "male": [33, 37], "uniformli": [33, 37], "spm": [33, 37], "quasi": [33, 37], "hous": [33, 37], "minim": [33, 37, 47, 48, 58, 59, 60, 68, 344, 367], "entir": [33, 37], "350gb": [33, 37], "recommend": [33, 37], "intend": [33, 37], "portion": [33, 37, 157, 161], "directori": [33, 37, 335], "multimod": [33, 37], "121": [33, 37, 123, 130], "145": [33, 37], "182": [33, 37], "218": [33, 37], "destrieux": [33, 37], "fsaverage7": [33, 37], "internal_v": [33, 37], "external_v": [33, 37], "union": [33, 37, 59, 68, 78, 83], "scanner": [33, 37], "lazili": [33, 37], "hug": [33, 37, 69, 97, 115], "face": [33, 37, 69, 97, 115, 308, 309], "demand": [33, 37], "concurr": [33, 37, 351, 375], "thread": [33, 37], "429": [33, 37], "1d": [33, 37, 59, 68, 78, 83], "exclus": [33, 37], "huggingfac": [33, 37], "either": [33, 37, 59, 68, 113, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 310], "lazi": [33, 37], "immedi": [33, 37], "b": [33, 37, 59, 64, 67, 68, 77, 78, 81, 83, 96, 98, 150, 151, 152, 153, 165, 167, 171, 172, 174, 175], "victor": [33, 37], "j": [33, 37, 58, 60, 77, 78, 81, 83], "frouin": [33, 37], "duchesnai": [33, 37], "254": [33, 37], "119121": [33, 37], "doi": [33, 37, 76, 80, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "org": [33, 37, 59, 63, 64, 66, 67, 68, 76, 78, 80, 83, 87, 111, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 155, 159, 339, 341], "1016": [33, 37], "119637": [33, 37], "download_dataset_split": [33, 37], "increment": [33, 37], "make_dataset": [33, 37], "eventu": [33, 37, 155, 158, 159, 162], "download_fil": [33, 37], "filenam": [33, 37], "get_cat12_templ": [33, 37], "nifti": [33, 37], "tpm": [33, 37], "mni152": [33, 37], "resourc": [33, 37], "cat12vbm_spac": [33, 37], "mni152_desc": [33, 37], "gm_tpm": [33, 37], "resp": [33, 37], "rh": [33, 37], "divid": [33, 37, 120, 121, 135, 136], "json": [33, 37], "automat": [33, 37, 41, 47, 48, 49, 55, 56, 59, 68, 69, 77, 81, 86, 352, 376], "abbrevi": [33, 37], "under": [33, 37, 75, 79], "get_quasiraw_templ": [33, 37], "quasiraw_spac": [33, 37], "brain_t1w": [33, 37], "construct": [33, 37, 69], "unimod": [33, 37], "configur": [33, 37, 41, 49, 59, 68, 69, 70, 165, 167, 383], "id": [33, 37, 97, 115], "metadata": [33, 37, 171, 174, 310], "im": 39, "val_check_interv": [41, 49], "min_epoch": [41, 49], "max_step": [41, 49, 59, 68], "min_step": [41, 49], "enable_progress_bar": [41, 49], "enable_model_summari": [41, 49], "strategi": [41, 49, 55, 56, 220, 251], "num_nod": [41, 49], "liter": [41, 49], "engin": [41, 49], "float16": [41, 49], "bf16": [41, 49], "sequenc": [41, 49, 55, 56, 58, 60, 93, 180, 187, 198, 201, 220, 251], "interfac": [41, 49, 69, 70, 72, 73, 77, 81, 383], "capabl": [41, 49], "basicali": [41, 49], "child": [41, 49, 69, 197, 205], "mixin": [41, 42, 43, 44, 45, 49, 50, 51, 52, 53], "loop": [41, 49], "often": [41, 49, 59, 68], "fraction": [41, 49], "fix": [41, 49, 287, 298, 308, 309, 370], "infinit": [41, 49], "forc": [41, 49, 97, 115], "checkpoint": [41, 49, 119, 124], "summar": [41, 49], "tpu": [41, 49, 55, 56], "hpu": [41, 49], "mp": [41, 49], "alias": [41, 49], "listof": [41, 49], "doubl": [41, 49, 223, 235, 256, 257], "16bit": [41, 49], "bfloat16": [41, 49], "extra": [41, 49, 58, 59, 60, 68], "tune": [41, 49], "debug": [41, 49, 208, 209, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 321], "hparam": [41, 49], "dictionarai": [41, 49, 69], "TO": [41, 49], "BE": [41, 49], "validation_step": [41, 47, 48, 49, 55, 56, 58, 59, 60, 68], "anyth": [41, 49, 55, 56], "predict_step": [41, 49, 55, 56], "log_dict": [41, 49], "val_dataload": [41, 49, 58, 59, 60, 68], "instruct": [41, 49], "logger": [41, 49, 55, 56, 327], "on_step": [41, 49], "on_epoch": [41, 49], "reduce_fx": [41, 49], "enable_graph": [41, 49], "sync_dist": [41, 49], "sync_dist_group": [41, 49], "add_dataloader_idx": [41, 49], "metric_attribut": [41, 49], "rank_zero_onli": [41, 49], "accumul": [41, 49], "detach": [41, 49], "graph": [41, 49, 255, 378], "care": [41, 49, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304, 352, 376], "commun": [41, 49], "overhead": [41, 49], "sync": [41, 49], "uniqu": [41, 49, 315], "infer": [41, 49, 55, 56, 58, 59, 60, 68], "explicitli": [41, 49], "restor": [41, 49, 334], "state": [41, 49, 62, 63, 64, 65, 66, 67, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 217, 218, 221, 236, 248, 249, 250, 252, 260, 264], "torchmetr": [41, 49], "tell": [41, 49], "rank": [41, 49], "won": [41, 49, 55, 56], "abl": [41, 49], "improp": [41, 49], "deadlock": [41, 49], "train_loss": [41, 49], "metriccollect": [41, 49], "test_step": [41, 49], "metric_n": [41, 49], "overrid": [41, 49, 55, 56, 59, 68], "prevent": [41, 49, 55, 56], "oom": [41, 49, 55, 56], "basepredictionwrit": [41, 49, 55, 56], "write": [41, 49, 55, 56, 342, 343], "databas": [41, 49, 55, 56], "spawn": [41, 49, 55, 56], "happen": [41, 49, 55, 56], "ddp_spawn": [41, 49, 55, 56], "produc": [41, 49, 55, 56, 59, 68, 171, 172, 174, 175], "step_output": [41, 49, 55, 56], "skip": [41, 49, 55, 56, 253, 254, 255], "deepspe": [41, 49, 55, 56], "manual": [41, 49, 55, 56, 59, 68], "special": [41, 49, 55, 56, 69], "switch": [41, 49, 55, 56, 59, 68], "accumulate_grad_batch": [41, 49, 55, 56], "automatic_optim": [41, 49, 55, 56], "gan": [41, 49, 55, 56, 59, 68], "opt1": [41, 49, 55, 56], "opt2": [41, 49, 55, 56], "gather": [41, 49, 58, 59, 60, 68], "share": [41, 49, 62, 63, 64, 65, 66, 67, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 156, 160, 221, 248, 249, 250, 252], "api": [41, 49, 86, 87], "calcul": [41, 49, 55, 56, 59, 68, 77, 78, 81, 83], "put": [41, 49, 55, 56, 75, 79], "At": [41, 49, 55, 56, 235, 257], "goe": [41, 49, 55, 56], "back": [41, 49, 55, 56, 310], "estimator_typ": [42, 43, 44, 45, 50, 51, 52, 53], "tag": [42, 43, 44, 45, 50, 51, 52, 53, 97, 115], "encoder_out_dim": [47, 48], "latent_dim": [47, 48, 218, 219, 221, 233, 234, 236, 248, 260, 261, 262, 263, 264], "beta": [47, 48, 59, 68, 75, 79, 214, 215, 313, 314, 318, 380], "default_dist": [47, 48, 75, 79], "stochastic_transform": [47, 48], "0001": [47, 48, 59, 68, 315, 320, 382], "variat": [47, 48, 75, 79, 213, 217, 236, 264], "r3": 47, "r4": 47, "probabilist": [47, 48, 75, 79], "reconstruct": [47, 48, 75, 79, 216, 218, 236, 260, 264], "compon": [47, 48, 181, 194, 313, 314, 318, 380], "mu": [47, 48, 151, 153, 166, 168], "reparameter": [47, 48, 236, 264], "trick": [47, 48, 236, 264], "sim": [47, 48, 58, 60, 75, 78, 79, 83, 150, 151, 152, 153], "q": [47, 48, 75, 79, 219, 236, 261, 264], "mathcal": [47, 48, 150, 151, 152, 153], "hat": [47, 48, 77, 81], "measur": [47, 48, 58, 60, 181, 182, 186, 192, 194, 195, 196], "binari": [47, 48, 75, 79, 196, 214, 215], "entropi": [47, 48, 75, 76, 79, 80], "bce": [47, 48], "mse": [47, 48, 75, 79, 90, 91], "recon": [47, 48, 216], "mathbb": [47, 48, 75, 77, 79, 81], "kl": [47, 48, 75, 79, 214, 215], "diverg": [47, 48, 75, 79, 214, 215], "encourag": [47, 48, 59, 68], "prior": [47, 48], "d_": [47, 48, 75, 79], "laplac": [47, 48, 75, 79], "posterior": [47, 48, 75, 79, 156, 158, 160, 162], "factor": [47, 48, 77, 81, 119, 124, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 328, 346, 362, 369], "kullback": [47, 48], "leibler": [47, 48], "l2": [47, 48, 75, 79], "l1": [47, 48, 75, 79], "bernoulli": [47, 48, 75, 79], "rate": [47, 48, 55, 56, 58, 59, 60, 68, 207, 210, 211, 212, 220, 251], "adam": [47, 48, 55, 56, 58, 59, 60, 68], "decai": [47, 48, 55, 56, 58, 59, 60, 68], "diederik": [47, 48], "kingma": [47, 48], "bay": [47, 48], "2014": [47, 48], "irina": [47, 48, 75, 79], "higgin": [47, 48, 75, 79], "visual": [47, 48, 58, 59, 60, 63, 64, 66, 67, 68, 75, 77, 79, 81, 221, 248], "constrain": [47, 48, 75, 79], "fc_mu": [47, 48], "fc_logvar": [47, 48], "configure_optim": [47, 48, 55, 56, 58, 59, 60, 68], "declar": [47, 48, 55, 56, 58, 60, 70], "adamw": [47, 48, 55, 56, 58, 59, 60, 68], "nsampl": [47, 48], "rec_loss": [47, 48], "kl_loss": [47, 48], "just": [47, 48, 85, 86], "r5": 48, "r6": 48, "setup": [55, 56, 327, 379], "freez": [55, 56], "freeze_encod": [55, 56], "multisteplr": [55, 56], "schedul": [55, 56, 58, 59, 60, 68, 69], "element": [55, 56, 156, 160], "validation_step_output": [55, 56], "dictionnari": [55, 56, 222, 247, 335], "respectivelli": [55, 56], "cross_entropy_loss": [55, 56], "cross_entropi": [55, 56], "r7": 58, "reus": [58, 60, 69, 352, 376], "cnn": [58, 60, 179], "head": [58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 118, 122, 220, 249, 251, 252], "z_i": [58, 60], "z_j": [58, 60], "maxim": [58, 59, 60, 68, 75, 79], "r8": 58, "r9": 58, "ell_": [58, 60], "frac": [58, 60, 77, 78, 81, 83, 165, 166, 167, 168, 171, 174], "exp": [58, 60, 78, 83], "tau": [58, 60, 78, 83], "sum_": [58, 60, 78, 83], "neq": [58, 60], "2n": [58, 60], "z_k": [58, 60], "cosin": [58, 59, 60, 68, 77, 78, 81, 83, 157, 161, 171, 172, 174, 175], "sharp": [58, 60], "r10": 58, "discard": [58, 60], "extractor": [58, 60], "those": [58, 60, 345, 368], "projector": [58, 60], "cosineannealinglr": [58, 60], "simon": [58, 60, 220, 221, 248, 251], "kornblith": [58, 60, 221, 248], "mohammad": [58, 60, 221, 248], "norouzi": [58, 60, 221, 248], "geoffrei": [58, 60, 221, 248], "hinton": [58, 60, 221, 248], "icml": [58, 60, 63, 64, 66, 67, 76, 80], "2020": [58, 60, 63, 64, 66, 67, 76, 80, 155, 159], "aaron": [58, 60], "van": [58, 60], "den": [58, 60], "oord": [58, 60], "yazh": [58, 60], "li": [58, 60, 155, 159], "oriol": [58, 60], "vinyal": [58, 60], "arxiv": [58, 59, 60, 63, 64, 66, 67, 68, 76, 78, 80, 83, 119, 120, 121, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146, 155, 159, 255], "2018": [58, 60, 119, 123, 124, 130], "sohn": [58, 60], "kihyuk": [58, 60], "nip": [58, 60], "2016": [58, 60], "feng": [58, 60], "wang": [58, 60], "huap": [58, 60], "liu": [58, 60], "behaviour": [58, 60], "cvpr": [58, 60], "all_gather_and_flatten": [58, 59, 60, 68], "edg": [58, 59, 60, 68, 170, 173, 308, 309, 377, 378], "all_gath": [58, 59, 60, 68], "v1": [58, 59, 60, 68], "v2": [58, 59, 60, 68], "importantli": [58, 59, 60, 68], "encoder_kwarg": [59, 68], "ndarrai": [59, 68, 77, 78, 81, 83, 88, 89, 93, 94, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 211, 212, 310, 313, 314, 318, 380], "optimizer_kwarg": [59, 68], "lr_schedul": [59, 68], "lrschedul": [59, 68], "reducelronplateau": [59, 68], "lr_scheduler_kwarg": [59, 68], "r11": 59, "agreement": [59, 68], "uninstanti": [59, 68], "although": [59, 68, 82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "n_embed": [59, 68, 118, 119, 120, 121, 122, 124, 135, 136], "2048": [59, 63, 64, 66, 67, 68], "impli": [59, 68], "wherea": [59, 68], "high": [59, 68, 171, 172, 174, 175, 199], "sensit": [59, 68], "epanechnikov": [59, 68, 77, 78, 81, 83], "diagnon": [59, 68, 78, 83], "diagon": [59, 68, 75, 77, 78, 79, 81, 83], "2d": [59, 68, 77, 78, 81, 83, 155, 157, 158, 159, 161, 162, 328, 362], "stochast": [59, 68, 93, 218, 236, 260, 264], "descent": [59, 68], "decoupl": [59, 68], "loshchilov": [59, 68], "hutter": [59, 68], "2019": [59, 68, 223, 235, 255, 256, 257], "subclass": [59, 68, 82, 93, 94, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "moment": [59, 68, 69], "lrschedulerpltyp": [59, 68], "num_sanity_val_step": [59, 68], "2106": [59, 64, 67, 68, 78, 83], "08808": [59, 64, 67, 68, 78, 83], "choos": [59, 68], "But": [59, 68], "lr_scheduler_config": [59, 68], "whose": [59, 68], "updat": [59, 68, 71, 310], "val_loss": [59, 68], "thu": [59, 68], "strict": [59, 68], "condit": [59, 68, 111], "metric_to_track": [59, 68], "optimizer1": [59, 68], "optimizer2": [59, 68], "scheduler1": [59, 68], "scheduler2": [59, 68], "lambdalr": [59, 68], "made": [59, 68], "metric_v": [59, 68], "thing": [59, 68], "know": [59, 68, 94], "lbfg": [59, 68], "closur": [59, 68], "yourself": [59, 68], "optimizer_step": [59, 68], "parse_batch": [59, 68], "pars": [59, 68, 92, 93, 94], "r12": 60, "r13": 60, "r14": 60, "r15": 60, "block": [62, 65, 69, 119, 120, 121, 124, 135, 136, 137, 138, 220, 251, 253, 254, 258, 259], "denot": [62, 65], "read": [62, 65, 337, 338], "in_featur": [62, 65], "batch_norm_lay": [62, 65], "non_linearity_lay": [62, 65], "non": [62, 63, 64, 65, 66, 67, 166, 168], "norm": [62, 65, 128], "batchnorm1d": [62, 65], "scriptmodul": [62, 63, 64, 65, 66, 67, 76, 78, 80, 82, 83, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 221, 248, 249, 250, 252], "r16": 63, "multilay": [63, 64, 66, 67], "perceptron": [63, 64, 66, 67], "mathbf": [63, 66], "w_2": [63, 66], "cdot": [63, 66, 77, 81], "w_1": [63, 66], "2002": [63, 64, 66, 67, 76, 80], "05709": [63, 64, 66, 67, 76, 80], "512": [64, 67, 119, 120, 121, 124, 135, 136, 224, 237, 266, 275], "z_": [64, 67], "theta_2": [64, 67], "r17": 64, "r18": 64, "typic": [64, 67, 156, 158, 160, 162, 171, 174], "r19": 66, "r20": 67, "r21": 67, "r22": 68, "expfil": 69, "selector": [69, 70], "cv": [69, 73], "logdir": 69, "useful": 69, "date": 69, "section": 69, "descipt": 69, "scaler": [69, 310], "dl": 69, "environ": [69, 70, 71, 73], "fullfil": 69, "constraint": [69, 75, 79], "interface_occurr": 69, "term": [69, 72, 77, 81, 95], "interface_vers": 69, "__version__": 69, "mismatch": 69, "detect": 69, "connot": 69, "param": [69, 72, 73], "instanci": 69, "prefix": 69, "hierarch": 69, "properti": [69, 111], "parent": 69, "architecture_nam": [69, 97, 115], "revis": [69, 97, 115], "specifid": 69, "appropri": [69, 70, 114], "scheme": 69, "hyperparapet": 69, "defautl": 69, "coupl": 69, "config": 70, "env": [70, 71, 73], "filter_conf": 70, "updated_env": 71, "environemt": 71, "my_modul": 72, "my_class": 72, "exppect": 72, "module": 72, "cl": [72, 220, 251], "updated_param": 73, "param_set": 73, "r23": 75, "disentangl": [75, 79], "interpret": [75, 79, 97, 115, 171, 174], "real": [75, 79, 88, 89], "constant": [75, 79, 88, 89, 165, 166, 167, 168, 170, 173], "delta": [75, 79], "underset": [75, 79], "mathrm": [75, 77, 79, 81], "q_": [75, 79], "p_": [75, 79, 165, 167], "rewrit": [75, 79], "equat": [75, 79], "lagrangian": [75, 79], "multipli": [75, 79], "l_": [75, 79], "capac": [75, 79], "kl_normal_loss": [75, 79], "covari": [75, 77, 79, 81], "reconstruction_loss": [75, 79], "likelihood": [75, 79, 214, 215, 216], "implicit": [75, 79, 172, 175], "deriv": [76, 80], "48550": [76, 80, 119, 120, 121, 123, 124, 130, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "invers": [76, 80], "z1": [76, 78, 80, 83], "z2": [76, 78, 80, 83], "scott": [77, 81], "fast": [77, 81, 171, 172, 174, 175], "w": [77, 78, 81, 83, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 216, 265], "kde": [77, 81], "r24": 77, "r25": 77, "x_1": [77, 81], "x_n": [77, 81], "w_": [77, 78, 81, 83], "x_i": [77, 81, 165, 166, 167, 168], "x_j": [77, 81], "ge": [77, 81], "dx": [77, 81], "rule": [77, 81, 87], "r26": 77, "silverman": [77, 81], "r27": 77, "propto": [77, 81], "diag": [77, 81], "ldot": [77, 81], "univari": [77, 81], "decorrel": [77, 81], "numer": [77, 81, 85, 166, 168], "stabil": [77, 81, 166, 168], "thumb": [77, 81], "rosenblatt": [77, 81], "1956": [77, 81], "remark": [77, 81], "nonparametr": [77, 81], "annal": [77, 81], "mathemat": [77, 81], "parzen": [77, 81], "1962": [77, 81], "On": [77, 81, 334], "1992": [77, 81], "theori": [77, 81], "practic": [77, 81], "wilei": [77, 81], "1986": [77, 81], "monograph": [77, 81], "scotts_factor": [77, 81], "set_bandwidth": [77, 81], "subsequ": [77, 81], "silverman_factor": [77, 81], "r28": 78, "mini": [78, 83], "z_1": [78, 83], "z_2": [78, 83], "ell": [78, 83], "y_i": [78, 83], "y_j": [78, 83], "phd": [78, 83], "thesi": [78, 83], "dot": [78, 83], "product": [78, 83, 383], "n_label": [78, 83], "r29": 79, "r30": 81, "r31": 81, "r32": 81, "r33": 81, "x1": [82, 258, 259], "x2": [82, 258, 259], "overridden": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "recip": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "afterward": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "former": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "latter": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "silent": [82, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 135, 136, 221, 248, 249, 250, 252, 255, 291, 292, 293, 302, 303, 304], "r34": 83, "sample_weight": [85, 86, 88, 89, 90, 91, 310], "multioutput": [85, 86, 88, 89], "n_output": [85, 86, 88, 89, 90, 91], "raw_valu": [85, 86, 88, 89], "uniform_averag": [85, 86, 88, 89], "variance_weight": [85, 86], "due": [85, 86], "compat": [85, 86, 383], "check_arrai": 85, "type_tru": [85, 86], "multiclass": [85, 86], "type_of_target": [85, 86], "privat": 86, "highest": 87, "promot": 87, "api_specif": 87, "type_promot": 87, "html": [87, 111], "namespac": 87, "force_finit": [88, 89], "alwai": [88, 89, 94, 97, 115, 156, 160, 310], "perfect": [88, 89], "anti": [88, 89], "flag": [88, 89], "inf": [88, 89], "target_nam": [90, 91], "output_dict": [90, 91], "round": [90, 91], "pearsonr": [90, 91], "meda": [90, 91], "arithmet": [90, 91], "data_pars": [92, 93, 94], "elsewher": 93, "parse_data": [93, 94, 176], "actual": 94, "compliant": 94, "conjonct": 94, "nd": [94, 155, 157, 159, 161], "gamma": 94, "todo": 94, "randombright": 94, "biasfield": 94, "typetransforminput": 94, "parse_prob": 94, "termin": 95, "expos": [96, 98], "value_kei": [96, 98], "avaiabl": [97, 115], "pathlib": [97, 115], "repo": [97, 115], "classmethod": [97, 115, 181, 194, 222, 247], "hf_download": [97, 115], "hf_id": [97, 115], "hf_revis": [97, 115], "force_download": [97, 115], "resum": [97, 115], "commit": [97, 115], "hub_split": [97, 115], "hub_nam": [97, 115], "hub_id": [97, 115], "hub_revis": [97, 115], "decalr": [97, 115, 178], "ns_download": [97, 115], "ns_id": [97, 115], "reset": [99, 108, 109], "background": 99, "foreground": [99, 101], "reverse_dict": 99, "revers": [99, 156, 160, 218, 260], "alia": [100, 101, 171, 172, 174, 175, 199, 200, 246, 310], "conveni": [108, 109], "style": [108, 109], "ansi": [108, 109], "fn": 111, "attribute_nam": 111, "descriptor": 111, "protocol": 111, "decor": [111, 113, 197, 205, 335, 352, 376], "attributeerror": [111, 113], "falsei": 111, "hasattr": [111, 113], "doc": 111, "howto": 111, "explan": 111, "deleg": 112, "underli": 112, "truthi": 113, "unavail": 113, "helloifeven": 113, "_x_is_even": 113, "say_hello": 113, "hello": 113, "obj": 113, "msg": [114, 321], "presenc": 114, "trail": 114, "underscor": 114, "except": [114, 310], "messag": [114, 220, 223, 224, 235, 236, 237, 251, 255, 256, 257, 264, 266, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 321], "yet": 114, "substitut": 114, "eg": 114, "sparsifi": 114, "fitt": 114, "abrol": [118, 122], "5281": [118, 122], "zenodo": [118, 122], "4309677": [118, 122], "growth_rat": [119, 124, 125, 126, 129], "block_config": [119, 124, 129], "num_init_featur": [119, 124, 129], "bn_size": [119, 124, 125, 126], "memory_effici": [119, 124, 125, 126], "huang": [119, 123, 124, 130], "1608": [119, 123, 124, 130], "06993": [119, 123, 124, 130], "pool": [119, 124, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 290, 301], "convolut": [119, 120, 121, 124, 135, 136, 139, 140, 155, 159, 183, 189, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 291, 292, 293, 294, 297, 299, 302, 303, 304, 305], "slower": [119, 124, 171, 172, 174, 175], "pdf": [119, 124], "1707": [119, 124], "06990": [119, 124], "zero_init_residu": [120, 121, 135, 136], "width_per_group": [120, 121, 135, 136], "replace_stride_with_dil": [120, 121, 135, 136], "norm_lay": [120, 121, 133, 134, 135, 136], "initial_kernel_s": [120, 121, 135, 136], "he": [120, 121, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "2015": [120, 121, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "1512": [120, 121, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "03385": [120, 121, 131, 132, 135, 136, 141, 142, 143, 144, 145, 146], "bn": [120, 121, 135, 136, 253, 254, 258, 259], "residu": [120, 121, 135, 136], "branch": [120, 121, 135, 136], "behav": [120, 121, 135, 136], "1706": [120, 121, 135, 136], "02677": [120, 121, 135, 136], "dilat": [120, 121, 133, 134, 135, 136, 140], "atrou": [120, 121, 135, 136], "dens": [120, 121, 135, 136, 218, 260, 310], "batchnorm3d": [120, 121, 135, 136], "truncat": [121, 132, 136, 142, 144, 146], "num_lay": 125, "num_input_featur": [125, 126, 127], "init_featur": 125, "prev_featur": 126, "num_output_featur": 127, "arch": [129, 137, 138], "inplan": [133, 134], "plane": [133, 134, 158, 162, 291, 302, 345, 361, 368], "base_width": [133, 134], "in_plan": [139, 140], "out_plan": [139, 140], "1x1": [139, 235, 257], "deviat": [150, 151, 152, 153, 166, 168, 183, 185, 189, 191, 310], "six": [150, 152], "a_1": [150, 152], "b_1": [150, 152], "a_2": [150, 152], "b_2": [150, 152], "a_3": [150, 152], "b_3": [150, 152], "sigma_i": [150, 152], "a_i": [150, 152], "b_i": [150, 152], "ratio": [155, 157, 159, 161, 255], "num_iter": [155, 159], "inplac": [155, 159, 310], "randomli": [155, 158, 159, 162, 181, 182, 194, 195], "eras": [155, 159], "box": [155, 159], "r35": 155, "cutout": [155, 159, 184, 190], "r36": 155, "proport": [155, 159], "against": [155, 159], "modifi": [155, 159, 172, 175], "geometr": [155, 157, 159, 161], "particular": [155, 157, 159, 161], "zhong": [155, 159], "zheng": [155, 159], "kang": [155, 159], "yang": [155, 159], "aaai": [155, 159], "confer": [155, 159], "intellig": [155, 159], "1708": [155, 159], "04896": [155, 159], "devri": [155, 159], "taylor": [155, 159], "04552": [155, 159], "flip_prob": [156, 160], "ap": [156, 158, 160, 162], "antero": [156, 158, 160, 162], "inferior": [156, 158, 160, 162], "ra": [156, 158, 160, 162, 171, 174], "never": [156, 160, 172, 175], "get_index_from_anat_label": [156, 160], "anterior": [156, 160], "superior": [156, 160], "4x4": [156, 160], "target_shap": [157, 161, 170, 172, 173, 175], "08": [157, 161, 166, 168], "upper": [157, 161, 333, 365], "bound": [157, 161, 193, 203], "bspline": [157, 161, 171, 172, 174, 175], "cubic": [157, 161, 171, 172, 174, 175], "label_gaussian": [157, 161, 171, 172, 174, 175], "ham": [157, 161, 171, 172, 174, 175], "welch": [157, 161, 171, 172, 174, 175], "lanczo": [157, 161, 171, 172, 174, 175], "blackman": [157, 161, 171, 172, 174, 175], "itk": [157, 161, 171, 172, 174, 175], "compromis": [157, 161, 171, 172, 174, 175], "speed": [157, 161, 171, 172, 174, 175, 183, 189, 222, 247], "solid": [157, 161, 171, 172, 174, 175], "rotation_prob": [158, 162], "degre": [158, 162, 186, 192, 326, 352, 360, 376], "around": [158, 162], "r37": 159, "r38": 159, "out_min_max": [165, 167], "percentil": [165, 167], "masking_fn": [165, 166, 167, 168], "robust": [165, 167, 171, 172, 174, 175], "outlier": [165, 167], "clip": [165, 167], "inter": [165, 167], "quantil": [165, 167], "p_l": [165, 167], "p_u": [165, 167], "o_": [165, 167], "quad": [165, 167], "ext": [165, 167], "percentag": [165, 167], "synthseg": [165, 167], "r39": 165, "nnunet": [165, 167], "r40": 165, "insid": [165, 167, 310], "cutoff": [165, 167], "taken": [165, 166, 167, 168], "minimum": [165, 167, 170, 173, 308, 309], "convent": [165, 167], "billot": [165, 167], "2023": [165, 167], "retrain": [165, 167], "102789": [165, 167], "isense": [165, 167], "nnu": [165, 167], "net": [165, 167, 223, 235, 255, 256, 257], "biomed": [165, 167], "natur": [165, 167, 179], "203": [165, 167], "211": [165, 167], "loc": [165, 167], "ep": [166, 168], "epsilon": [166, 168], "determinist": [166, 168], "r41": 167, "r42": 167, "padding_mod": [170, 173], "constant_valu": [170, 173], "maximum": [170, 173, 308, 309, 351, 375], "4d": [171, 174, 176], "coordin": [171, 174, 312, 313, 314, 316, 317, 318, 319, 329, 330, 354, 370, 380, 381], "simpleitk": [171, 172, 174, 175], "s_w": [171, 174], "s_h": [171, 174], "s_d": [171, 174], "offlin": [171, 172, 174, 175], "poorer": [171, 172, 174, 175], "r43": 171, "spline": [171, 172, 174, 175], "window": [171, 172, 174, 175], "meijer": [171, 172, 174, 175], "1999": [171, 172, 174, 175], "quantit": [171, 172, 174, 175], "dummi": [171, 174], "1mm": [171, 174], "2mm": [171, 174], "isotrop": [171, 174], "image_torch": [171, 174], "resampled_torch": [171, 174], "as_sitk": [171, 174], "from_sitk": [171, 174], "get_sitk_metadata_from_ras_affin": [171, 174], "lp": [171, 174], "r44": 172, "r45": 174, "r46": 175, "inspir": 179, "init": [180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 198, 199, 201, 207, 210, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 334], "randomize_per_channel": [180, 197, 198, 200, 205], "tranform": [180, 198, 317, 330], "bootstrap": [181, 194], "curupt": [181, 182, 194, 195, 196], "regroup": [181, 194], "pca": [181, 194], "extern": [181, 194], "popul": [181, 194], "bootstap": [181, 194], "arr": [181, 182, 184, 185, 186, 190, 191, 192, 194, 195], "bootsrap": [181, 194], "controlater": [182, 195], "cachedir": [183, 184, 186, 189, 190, 192, 222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 335], "recept": [183, 189], "icosahdron": [183, 184, 186, 189, 190, 192], "neighboor": [183, 184, 189, 190, 308, 309], "sufifi": [183, 184, 189, 190], "ie": [183, 184, 189, 190, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "ring": [183, 184, 189, 190, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 290, 294, 297, 299, 301, 305, 325, 345, 359, 368], "replacement_valu": [184, 190], "connex": [184, 190], "neighborhood": [184, 190, 253, 258, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 328, 344, 346, 362, 367, 369], "ablat": [184, 190], "cut": [184, 190], "barycentr": [186, 192, 326, 350, 352, 360, 374, 376], "angl": [186, 192, 313, 314, 318, 326, 345, 352, 360, 361, 368, 376, 380], "euler": [186, 192, 326, 352, 360, 376], "smart": [186, 192, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "speedup": [186, 192, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "accordingli": [186, 192], "n_channel": [188, 202, 220, 251], "_data": [188, 202], "uplet": [193, 203, 291, 302, 326, 352, 360, 376], "aplli": 196, "rand_mask": 196, "corrupt": 196, "multichannel": [197, 205], "multichannelaugment": [197, 205], "applic": [197, 205, 223, 235, 256, 257, 311], "liftifi": 204, "synthet": 206, "gene": [207, 210, 211, 212], "n_max": [208, 209], "target_ico_ord": [208, 209], "regex": [208, 209], "triangular": [208, 209, 308, 309, 351, 353, 375], "desir": [208, 209, 344, 367], "assocait": [211, 212], "svae": [213, 236, 264], "left_mask": [214, 215], "right_mask": [214, 215], "use_ms": [214, 215], "gmvae": 217, "rest": [217, 236, 264], "fmri": [217, 236, 264], "libilab": 217, "rsfmri": 217, "output_shap": [218, 260, 293, 304], "before_latent_dim": [218, 260], "conv_flt": [218, 219, 233, 234, 236, 260, 261, 262, 263, 264], "fusion_level": [218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "leakyrelu": [218, 219, 233, 234, 236, 260, 261, 262, 263, 264], "batch_norm": [218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "output_channel": [218, 260], "convnet": [218, 260, 265], "left_recon_x": [218, 236, 260, 264], "input_channel": [218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "right_recon_x": [218, 236, 260, 264], "left_x": [219, 224, 233, 234, 236, 237, 261, 262, 263, 264, 266, 275], "right_x": [219, 224, 233, 234, 236, 237, 261, 262, 263, 264, 266, 275], "mlp_dim": [220, 251, 252], "dim_head": [220, 249, 251, 252], "dropout": [220, 249, 250, 251, 252], "emb_dropout": [220, 251], "msit": [220, 251], "dahan": [220, 251], "midl": [220, 251], "n_verticesi": [220, 251], "trainabl": [220, 251], "msa": [220, 251], "mechan": [220, 251, 310], "feed": [220, 251], "ffn": [220, 251], "expand": [220, 251], "poll": [220, 251], "token": [220, 251], "hidden_lay": [221, 248], "return_logit": [221, 248], "y1": [221, 248], "y2": [221, 248], "input_ord": [222, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "n_layer": [222, 247], "repa_s": [222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "repa_zoom": [222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "dynamic_repa_zoom": [222, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 262, 263, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283], "repa": [222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 346, 369], "ico_info": [222, 247], "build_ico_info": [222, 247], "tangent": [222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 302, 328, 345, 361, 362, 368], "tessal": [222, 247, 331, 351, 363, 375], "tessel": [222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 257, 264, 275, 276, 277, 278, 279, 280, 281, 282, 283, 351, 375], "icosehedron": [222, 247], "upsampl": [222, 235, 247, 257, 258, 287, 288, 289, 294, 295, 298, 299, 300, 305, 306, 333, 365], "onform": [222, 247], "gride": [223, 224, 254, 256, 259, 266, 316, 329], "built": [223, 235, 256, 257], "upon": [223, 235, 256, 257], "spma": [223, 256], "rectifi": [223, 235, 256, 257], "halv": [223, 235, 256, 257], "zhao": [223, 235, 256, 257], "ipmi": [223, 235, 256, 257], "cfg": [224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "4096": [224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "init_weight": [224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "stand": [224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 311], "wether": [224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "sphericalgvggbas": [225, 226, 227, 228, 229, 230, 231, 232, 267, 268, 269, 270, 271, 272, 273, 274], "interp": [235, 257, 258], "2x2": [235, 257], "maxpad": [235, 257, 258], "shift": [235, 257, 258], "zeropad": [235, 257, 258], "sphericalgva": [236, 264], "vert": [236, 237, 264, 275], "tri": [236, 237, 264, 275, 353], "reparametr": [236, 264], "sphericalvggbas": [238, 239, 240, 241, 242, 243, 244, 245, 276, 277, 278, 279, 280, 281, 282, 283], "neighbor_indic": [246, 286, 288, 289, 294, 297, 299, 300, 305], "down_indic": [246, 253, 258, 288, 289, 290, 294, 299, 300, 301, 305, 323, 324, 357, 358], "up_indic": [246, 287, 295, 298, 306, 332, 333, 364, 365], "conv_neighbor_indic": 246, "conv_lay": [253, 258], "in_ch": [253, 254, 258, 259], "out_ch": [253, 254, 258, 259], "conv_neigh_indic": [253, 258], "down_neigh_indic": [253, 289, 290, 300, 301], "pool_mod": 253, "discret": [253, 258, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "pool_ratio": 255, "sum_r": 255, "act": 255, "unpool": 255, "hongyang": 255, "gao": 255, "shuiwang": 255, "ji": 255, "connect": [255, 378], "summat": 255, "nonlinear": 255, "edge_index": 255, "neigh_indic": [258, 286, 291, 297, 302], "up_neigh_indic": [258, 287, 288, 289, 294, 295, 298, 299, 300, 305, 306], "upsamp": [258, 259], "upconv": [258, 259], "max_pool_indic": [258, 289, 300], "klass_nam": 284, "klass_param": 284, "destination_module_glob": 284, "publicli": 284, "assign": [284, 345, 368], "in_feat": [286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306], "out_feat": [286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306], "formul": [286, 297], "ico2_vertic": [286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306], "ico2_triangl": [286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306], "asarrai": [286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 305, 306, 332, 364], "ico2_x": [286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306], "ico3_vertic": [287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 305, 306], "ico3_triangl": [287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 305, 306], "ico3_x": [287, 288, 289, 290, 294, 295, 298, 299, 300, 301, 305, 306], "slow": [288, 299], "pooling_typ": [289, 290, 300, 301], "rectagular": [291, 302], "neigh_weight": [291, 302], "proj_ico_x": [292, 293, 303, 304], "pad_azimuth": [292, 293, 296, 303, 304], "pad_elev": [292, 293, 296, 303, 304], "zero_pad": [293, 304], "icoconv": [293, 304], "vmin": [308, 309], "vmax": [308, 309], "black": [308, 309], "color_map": [308, 309], "linearsegmentedcolormap": [308, 309], "opac": [308, 309], "Not": [308, 309], "cm": [308, 309], "coolwarm": [308, 309], "sub": 310, "with_mean": 310, "with_std": 310, "scler": 310, "guarante": 310, "spars": 310, "csr": 310, "attempt": 310, "entail": 310, "equival": 310, "n_subject": 310, "get_metadata_rout": 310, "rout": 310, "inverse_transform": 310, "x_tr": 310, "set_inverse_transform_request": 310, "unchang": 310, "enable_metadata_rout": 310, "set_config": 310, "metadata_rout": 310, "set_partial_fit_request": 310, "partial_fit": 310, "set_transform_request": 310, "system": 312, "tool": [312, 383], "cartesian": [313, 314, 318, 380], "array_lik": [313, 314, 318, 380], "radiant": [313, 314, 318, 380], "pi": [313, 314], "ref_arrai": 315, "atol": [315, 320, 382], "toler": [315, 320, 382], "new_ord": 315, "resx": [316, 319, 329, 381], "resi": [316, 319, 329, 381], "ico2_vert": [316, 317, 319, 320, 322, 323, 325, 329, 330, 332, 333, 345, 346, 351, 356, 357, 359, 364, 365, 368, 369, 375, 381, 382], "ico2_tri": [316, 317, 319, 320, 322, 323, 325, 329, 330, 332, 333, 345, 346, 351, 356, 357, 359, 364, 365, 368, 369, 375, 381, 382], "y_grid": [316, 319, 329, 381], "ref_vertic": [317, 320, 330, 382], "ico2_std_vert": [317, 320, 330, 382], "ico2_std_tri": [317, 320, 330, 382], "projecte": [319, 381], "y_std": [320, 382], "target_vertic": [322, 332, 356, 364], "n_dim": [322, 332, 356, 364], "n_queri": [322, 332, 356, 364], "nearest_idx": [322, 356], "ico3_vert": [322, 331, 332, 344, 347, 349, 351, 352, 356, 363, 364, 367, 371, 373, 375, 376], "ico3_tri": [322, 331, 332, 344, 347, 349, 351, 352, 356, 363, 364, 367, 371, 373, 375, 376], "down3to2": [322, 356], "ico3_down_vertic": [322, 356], "consecut": [323, 324, 333, 357, 358, 365], "downsampled_data": [323, 357], "new_n_vertic": [323, 333, 357, 365], "ico4_vert": [323, 324, 333, 357, 358, 365], "ico4_tri": [323, 324, 333, 357, 358, 365], "reshap": [323, 325, 332, 333, 352, 357, 359, 364, 365, 376], "y_down": [323, 357], "squeez": [323, 333, 352, 357, 365, 376], "new_vertic": [324, 358], "newli": [324, 358], "icosahedorn": [324, 358], "new_triangl": [324, 358], "ico2_down_vert": [324, 358], "ico2_down_tri": [324, 358], "start_nod": [325, 359], "recurs": [325, 359], "node_neigh": [325, 359], "asssoci": [326, 360], "euclidian": [326, 360], "grid_in_spher": [328, 346, 362, 369], "grid_in_tplan": [328, 362], "target_triangl": [332, 364], "interp_indic": [332, 364], "n_feat": [332, 364], "y_up": [332, 333, 364, 365], "upsampled_data": [333, 365], "hide_err": 334, "secur": 334, "redirect": 334, "manag": 334, "complet": [334, 335], "hide": 334, "receiv": 335, "transpar": 335, "overlap": 335, "cifti_fil": 336, "decompos": 336, "cifti": [336, 339, 341], "vol": 336, "surf_left": 336, "surf_right": 336, "surf_fil": [337, 338, 342, 343], "gifti": [338, 343], "surf_nam": 339, "nbviewer": [339, 341], "neurohackademi": [339, 341], "nh2020": [339, 341], "curriculum": [339, 341], "blob": [339, 341], "master": [339, 341], "markiewicz": [339, 341], "gnu": 340, "archiv": 340, "out_path": 340, "n_neigh": [344, 348, 367, 372], "remain": [345, 368], "n_vert": [347, 371], "min_order_to_get_n_neighbor": [348, 372], "hi": [349, 373], "clockwise_from_cent": [350, 374], "clockwis": [350, 374], "counter": [350, 374], "reordered_triangl": [350, 374], "reorder": [350, 374], "ico0_vert": [350, 374], "ico0_tri": [350, 374], "clockwise_ico0_tri": [350, 374], "counter_clockwise_ico0_tri": [350, 374], "n_job": [351, 375], "job": [351, 375], "euclidean": [352, 376], "rotated_data": [352, 376], "y_rot": [352, 376], "lower_vertic": 353, "ico_fil": 354, "topologi": [354, 355], "ref_fil": 355, "fslr": 355, "point_1": 366, "point_2": 366, "middle_point_cach": 366, "middl": 366, "return_index": 377, "triangles_index": 377, "networkx": 378, "nearbi": 378, "logfil": 379, "unifi": 383, "analyz": 383, "advanc": 383, "availbl": 383, "hydra": 383}, "objects": {"nidl.callbacks": [[17, 0, 1, "", "BatchTypingCallback"], [18, 0, 1, "", "ClassificationProbingCallback"], [19, 0, 1, "", "ModelProbing"], [20, 0, 1, "", "MultiTaskEstimator"], [21, 0, 1, "", "MultitaskModelProbing"], [22, 0, 1, "", "RegressionProbingCallback"]], "nidl.callbacks.BatchTypingCallback": [[17, 1, 1, "", "on_predict_batch_start"], [17, 1, 1, "", "on_test_batch_start"], [17, 1, 1, "", "on_train_batch_start"], [17, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.ClassificationProbingCallback": [[18, 1, 1, "", "log_metrics"]], "nidl.callbacks.ModelProbing": [[19, 1, 1, "", "adapt_dataloader_for_ddp"], [19, 1, 1, "", "extract_features"], [19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "on_test_epoch_end"], [19, 1, 1, "", "on_test_epoch_start"], [19, 1, 1, "", "on_train_epoch_end"], [19, 1, 1, "", "on_validation_epoch_end"], [19, 1, 1, "", "predict"], [19, 1, 1, "", "probing"]], "nidl.callbacks.MultiTaskEstimator": [[20, 1, 1, "", "fit"], [20, 1, 1, "", "predict"], [20, 1, 1, "", "score"]], "nidl.callbacks.MultitaskModelProbing": [[21, 1, 1, "", "log_classification_metrics"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "log_regression_metrics"]], "nidl.callbacks.RegressionProbingCallback": [[22, 1, 1, "", "log_metrics"]], "nidl.callbacks.check_typing": [[23, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[23, 1, 1, "", "on_predict_batch_start"], [23, 1, 1, "", "on_test_batch_start"], [23, 1, 1, "", "on_train_batch_start"], [23, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[24, 0, 1, "", "ClassificationProbingCallback"], [25, 0, 1, "", "ModelProbing"], [26, 0, 1, "", "RegressionProbingCallback"]], "nidl.callbacks.model_probing.ClassificationProbingCallback": [[24, 1, 1, "", "log_metrics"]], "nidl.callbacks.model_probing.ModelProbing": [[25, 1, 1, "", "adapt_dataloader_for_ddp"], [25, 1, 1, "", "extract_features"], [25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "on_test_epoch_end"], [25, 1, 1, "", "on_test_epoch_start"], [25, 1, 1, "", "on_train_epoch_end"], [25, 1, 1, "", "on_validation_epoch_end"], [25, 1, 1, "", "predict"], [25, 1, 1, "", "probing"]], "nidl.callbacks.model_probing.RegressionProbingCallback": [[26, 1, 1, "", "log_metrics"]], "nidl.callbacks.multitask_probing": [[27, 0, 1, "", "MultiTaskEstimator"], [28, 0, 1, "", "MultitaskModelProbing"]], "nidl.callbacks.multitask_probing.MultiTaskEstimator": [[27, 1, 1, "", "fit"], [27, 1, 1, "", "predict"], [27, 1, 1, "", "score"]], "nidl.callbacks.multitask_probing.MultitaskModelProbing": [[28, 1, 1, "", "log_classification_metrics"], [28, 1, 1, "", "log_metrics"], [28, 1, 1, "", "log_regression_metrics"]], "nidl.datasets": [[30, 0, 1, "", "BaseImageDataset"], [31, 0, 1, "", "BaseNumpyDataset"], [32, 0, 1, "", "ImageDataFrameDataset"], [33, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[30, 1, 1, "", "get_checksum"], [30, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[31, 1, 1, "", "get_data"]], "nidl.datasets.ImageDataFrameDataset": [[32, 1, 1, "", "apply_target_transform"], [32, 1, 1, "", "apply_transform"]], "nidl.datasets.OpenBHB": [[33, 1, 1, "", "download_dataset_split"], [33, 1, 1, "", "download_file"], [33, 1, 1, "", "get_cat12_template"], [33, 1, 1, "", "get_fs_labels"], [33, 1, 1, "", "get_fs_roi_feature_names"], [33, 1, 1, "", "get_fs_xhemi_feature_names"], [33, 1, 1, "", "get_neuromorphometrics_atlas"], [33, 1, 1, "", "get_quasiraw_template"], [33, 1, 1, "", "get_vbm_roi_labels"], [33, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[34, 0, 1, "", "BaseDataset"], [35, 0, 1, "", "BaseImageDataset"], [36, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[35, 1, 1, "", "get_checksum"], [35, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[36, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[37, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[37, 1, 1, "", "download_dataset_split"], [37, 1, 1, "", "download_file"], [37, 1, 1, "", "get_cat12_template"], [37, 1, 1, "", "get_fs_labels"], [37, 1, 1, "", "get_fs_roi_feature_names"], [37, 1, 1, "", "get_fs_xhemi_feature_names"], [37, 1, 1, "", "get_neuromorphometrics_atlas"], [37, 1, 1, "", "get_quasiraw_template"], [37, 1, 1, "", "get_vbm_roi_labels"], [37, 1, 1, "", "make_dataset"]], "nidl.datasets.pandas_dataset": [[38, 0, 1, "", "ImageDataFrameDataset"], [39, 2, 1, "", "default_image_loader"]], "nidl.datasets.pandas_dataset.ImageDataFrameDataset": [[38, 1, 1, "", "apply_target_transform"], [38, 1, 1, "", "apply_transform"]], "nidl.estimators": [[41, 0, 1, "", "BaseEstimator"], [42, 0, 1, "", "ClassifierMixin"], [43, 0, 1, "", "ClusterMixin"], [44, 0, 1, "", "RegressorMixin"], [45, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[41, 1, 1, "", "fit"], [41, 1, 1, "", "log"], [41, 1, 1, "", "log_dict"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_step"], [41, 1, 1, "", "training_step"], [41, 1, 1, "", "transform"], [41, 1, 1, "", "transform_step"], [41, 1, 1, "", "validation_step"]], "nidl.estimators.autoencoders": [[47, 0, 1, "", "VAE"]], "nidl.estimators.autoencoders.VAE": [[47, 1, 1, "", "configure_optimizers"], [47, 1, 1, "", "forward"], [47, 1, 1, "", "sample"], [47, 1, 1, "", "training_step"], [47, 1, 1, "", "transform_step"], [47, 1, 1, "", "validation_step"]], "nidl.estimators.autoencoders.vae": [[48, 0, 1, "", "VAE"]], "nidl.estimators.autoencoders.vae.VAE": [[48, 1, 1, "", "configure_optimizers"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "sample"], [48, 1, 1, "", "training_step"], [48, 1, 1, "", "transform_step"], [48, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[49, 0, 1, "", "BaseEstimator"], [50, 0, 1, "", "ClassifierMixin"], [51, 0, 1, "", "ClusterMixin"], [52, 0, 1, "", "RegressorMixin"], [53, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[49, 1, 1, "", "fit"], [49, 1, 1, "", "log"], [49, 1, 1, "", "log_dict"], [49, 1, 1, "", "predict"], [49, 1, 1, "", "predict_step"], [49, 1, 1, "", "training_step"], [49, 1, 1, "", "transform"], [49, 1, 1, "", "transform_step"], [49, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[55, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[55, 1, 1, "", "configure_optimizers"], [55, 1, 1, "", "cross_entropy_loss"], [55, 1, 1, "", "freeze_encoder"], [55, 1, 1, "", "on_validation_epoch_end"], [55, 1, 1, "", "predict_step"], [55, 1, 1, "", "training_step"], [55, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[56, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[56, 1, 1, "", "configure_optimizers"], [56, 1, 1, "", "cross_entropy_loss"], [56, 1, 1, "", "freeze_encoder"], [56, 1, 1, "", "on_validation_epoch_end"], [56, 1, 1, "", "predict_step"], [56, 1, 1, "", "training_step"], [56, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[58, 0, 1, "", "SimCLR"], [59, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[58, 1, 1, "", "all_gather_and_flatten"], [58, 1, 1, "", "configure_optimizers"], [58, 1, 1, "", "training_step"], [58, 1, 1, "", "transform_step"], [58, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[59, 1, 1, "", "all_gather_and_flatten"], [59, 1, 1, "", "configure_optimizers"], [59, 1, 1, "", "parse_batch"], [59, 1, 1, "", "training_step"], [59, 1, 1, "", "transform_step"], [59, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[60, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[60, 1, 1, "", "all_gather_and_flatten"], [60, 1, 1, "", "configure_optimizers"], [60, 1, 1, "", "training_step"], [60, 1, 1, "", "transform_step"], [60, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[62, 0, 1, "", "ProjectionHead"], [63, 0, 1, "", "SimCLRProjectionHead"], [64, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[62, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[65, 0, 1, "", "ProjectionHead"], [66, 0, 1, "", "SimCLRProjectionHead"], [67, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[65, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[68, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[68, 1, 1, "", "all_gather_and_flatten"], [68, 1, 1, "", "configure_optimizers"], [68, 1, 1, "", "parse_batch"], [68, 1, 1, "", "training_step"], [68, 1, 1, "", "transform_step"], [68, 1, 1, "", "validation_step"]], "nidl.experiment": [[69, 2, 1, "", "fetch_experiment"], [70, 2, 1, "", "filter_config"], [71, 2, 1, "", "get_env"], [72, 2, 1, "", "load_interface"], [73, 2, 1, "", "update_params"]], "nidl.losses": [[75, 0, 1, "", "BetaVAELoss"], [76, 0, 1, "", "InfoNCE"], [77, 0, 1, "", "KernelMetric"], [78, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.BetaVAELoss": [[75, 1, 1, "", "kl_normal_loss"], [75, 1, 1, "", "reconstruction_loss"]], "nidl.losses.InfoNCE": [[76, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[77, 1, 1, "", "fit"], [77, 1, 1, "", "pairwise"], [77, 1, 1, "", "scotts_factor"], [77, 1, 1, "", "set_bandwidth"], [77, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[78, 1, 1, "", "forward"]], "nidl.losses.beta_vae": [[79, 0, 1, "", "BetaVAELoss"]], "nidl.losses.beta_vae.BetaVAELoss": [[79, 1, 1, "", "kl_normal_loss"], [79, 1, 1, "", "reconstruction_loss"]], "nidl.losses.infonce": [[80, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[80, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[81, 0, 1, "", "KernelMetric"], [82, 0, 1, "", "PairwiseCosineSimilarity"], [83, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[81, 1, 1, "", "fit"], [81, 1, 1, "", "pairwise"], [81, 1, 1, "", "scotts_factor"], [81, 1, 1, "", "set_bandwidth"], [81, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[82, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[83, 1, 1, "", "forward"]], "nidl.metrics._regression": [[85, 2, 1, "", "_check_reg_targets"], [86, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [87, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[88, 2, 1, "", "pearson_r"], [91, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[89, 2, 1, "", "pearson_r"], [90, 2, 1, "", "regression_report"]], "nidl.transforms": [[92, 0, 1, "", "Identity"], [93, 0, 1, "", "MultiViewsTransform"], [94, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[92, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[93, 1, 1, "", "apply_transform"], [93, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[94, 1, 1, "", "apply_transform"], [94, 1, 1, "", "parse_data"], [94, 1, 1, "", "parse_probability"]], "nidl.utils": [[96, 0, 1, "", "Bunch"], [97, 0, 1, "", "Weights"], [110, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[97, 1, 1, "", "hf_download"], [97, 1, 1, "", "hub_split"], [97, 1, 1, "", "load_pretrained"], [97, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[98, 0, 1, "", "Bunch"]], "nidl.utils.color": [[99, 0, 1, "", "Colored"], [100, 2, 1, "", "attr"], [101, 2, 1, "", "fg"], [102, 2, 1, "", "hex"], [103, 2, 1, "", "print_multicolor"], [104, 2, 1, "", "print_result"], [105, 2, 1, "", "print_subtitle"], [106, 2, 1, "", "print_title"], [107, 2, 1, "", "print_warning"], [108, 2, 1, "", "random_stylize"], [109, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[99, 1, 1, "", "attribute"], [99, 1, 1, "", "background"], [99, 1, 1, "", "foreground"], [99, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[111, 0, 1, "", "_AvailableIfDescriptor"], [112, 2, 1, "", "_estimator_is"], [113, 2, 1, "", "available_if"], [114, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[115, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[115, 1, 1, "", "hf_download"], [115, 1, 1, "", "hub_split"], [115, 1, 1, "", "load_pretrained"], [115, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[118, 0, 1, "", "AlexNet"], [119, 0, 1, "", "DenseNet"], [120, 0, 1, "", "ResNet"], [121, 0, 1, "", "ResNetTruncated"], [123, 2, 1, "", "densenet121"], [131, 2, 1, "", "resnet18"], [132, 2, 1, "", "resnet18_trunc"], [145, 2, 1, "", "resnet50"], [146, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[118, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[119, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[120, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[121, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[122, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[122, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[124, 0, 1, "", "DenseNet"], [125, 0, 1, "", "_DenseBlock"], [126, 0, 1, "", "_DenseLayer"], [127, 0, 1, "", "_Transition"], [128, 2, 1, "", "_bn_function_factory"], [129, 2, 1, "", "_densenet"], [130, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[124, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[125, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[126, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[133, 0, 1, "", "BasicBlock"], [134, 0, 1, "", "Bottleneck"], [135, 0, 1, "", "ResNet"], [136, 0, 1, "", "ResNetTruncated"], [137, 2, 1, "", "_resnet"], [138, 2, 1, "", "_resnet_trunc"], [139, 2, 1, "", "conv1x1"], [140, 2, 1, "", "conv3x3"], [141, 2, 1, "", "resnet18"], [142, 2, 1, "", "resnet18_trunc"], [143, 2, 1, "", "resnet50"], [144, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[133, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[134, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[135, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[136, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[150, 0, 1, "", "RandomGaussianBlur"], [151, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[150, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[151, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[152, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[152, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[153, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[153, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[155, 0, 1, "", "RandomErasing"], [156, 0, 1, "", "RandomFlip"], [157, 0, 1, "", "RandomResizedCrop"], [158, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[155, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[156, 1, 1, "", "apply_transform"], [156, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[157, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[158, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[159, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[159, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[160, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[160, 1, 1, "", "apply_transform"], [160, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[161, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[161, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[162, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[162, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[165, 0, 1, "", "RobustRescaling"], [166, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[165, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[166, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[167, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[167, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[168, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[168, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[170, 0, 1, "", "CropOrPad"], [171, 0, 1, "", "Resample"], [172, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[170, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[171, 1, 1, "", "apply_transform"], [171, 1, 1, "", "as_sitk"], [171, 1, 1, "", "from_sitk"], [171, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[172, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[173, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[173, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[174, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[174, 1, 1, "", "apply_transform"], [174, 1, 1, "", "as_sitk"], [174, 1, 1, "", "from_sitk"], [174, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[175, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[175, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[176, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[176, 1, 1, "", "parse_data"]], "surfify.augmentation": [[180, 0, 1, "", "BaseTransformer"], [181, 0, 1, "", "GroupMixUp"], [182, 0, 1, "", "HemiMixUp"], [183, 0, 1, "", "SurfBlur"], [184, 0, 1, "", "SurfCutOut"], [185, 0, 1, "", "SurfNoise"], [186, 0, 1, "", "SurfRotation"], [187, 0, 1, "", "Transformer"], [188, 2, 1, "", "apply_chained_transforms"], [193, 2, 1, "", "interval"], [197, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[180, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[181, 1, 1, "", "groupby"], [181, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[182, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[183, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[184, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[185, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[186, 1, 1, "", "run"]], "surfify.augmentation.base": [[189, 0, 1, "", "SurfBlur"], [190, 0, 1, "", "SurfCutOut"], [191, 0, 1, "", "SurfNoise"], [192, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[189, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[190, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[191, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[192, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[194, 0, 1, "", "GroupMixUp"], [195, 0, 1, "", "HemiMixUp"], [196, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[194, 1, 1, "", "groupby"], [194, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[195, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[196, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[198, 0, 1, "", "BaseTransformer"], [199, 0, 1, "", "RandomAugmentation"], [200, 0, 1, "", "Transform"], [201, 0, 1, "", "Transformer"], [202, 2, 1, "", "apply_chained_transforms"], [203, 2, 1, "", "interval"], [204, 2, 1, "", "listify"], [205, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[198, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[199, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[199, 3, 1, "", "dtype"], [199, 3, 1, "", "high"], [199, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[200, 3, 1, "", "probability"], [200, 3, 1, "", "randomize_per_channel"], [200, 3, 1, "", "transform"]], "surfify.datasets": [[207, 0, 1, "", "ClassificationDataset"], [208, 0, 1, "", "GenericSurfDataset"], [212, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[209, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[210, 0, 1, "", "ClassificationDataset"], [211, 2, 1, "", "make_classification"]], "surfify.losses": [[214, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[215, 0, 1, "", "SphericalVAELoss"], [216, 2, 1, "", "log_likelihood"]], "surfify.models": [[218, 0, 1, "", "HemiFusionDecoder"], [219, 0, 1, "", "HemiFusionEncoder"], [220, 0, 1, "", "SiT"], [221, 0, 1, "", "SimCLR"], [222, 0, 1, "", "SphericalBase"], [223, 0, 1, "", "SphericalGUNet"], [224, 0, 1, "", "SphericalGVGG"], [225, 0, 1, "", "SphericalGVGG11"], [226, 0, 1, "", "SphericalGVGG11BN"], [227, 0, 1, "", "SphericalGVGG13"], [228, 0, 1, "", "SphericalGVGG13BN"], [229, 0, 1, "", "SphericalGVGG16"], [230, 0, 1, "", "SphericalGVGG16BN"], [231, 0, 1, "", "SphericalGVGG19"], [232, 0, 1, "", "SphericalGVGG19BN"], [233, 0, 1, "", "SphericalHemiFusionDecoder"], [234, 0, 1, "", "SphericalHemiFusionEncoder"], [235, 0, 1, "", "SphericalUNet"], [236, 0, 1, "", "SphericalVAE"], [237, 0, 1, "", "SphericalVGG"], [238, 0, 1, "", "SphericalVGG11"], [239, 0, 1, "", "SphericalVGG11BN"], [240, 0, 1, "", "SphericalVGG13"], [241, 0, 1, "", "SphericalVGG13BN"], [242, 0, 1, "", "SphericalVGG16"], [243, 0, 1, "", "SphericalVGG16BN"], [244, 0, 1, "", "SphericalVGG19"], [245, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[218, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[219, 1, 1, "", "forward"]], "surfify.models.SiT": [[220, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[221, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[222, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[223, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[224, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[233, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[234, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[235, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[236, 1, 1, "", "decode"], [236, 1, 1, "", "encode"], [236, 1, 1, "", "forward"], [236, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[237, 1, 1, "", "forward"]], "surfify.models.base": [[246, 0, 1, "", "Ico"], [247, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[246, 3, 1, "", "conv_neighbor_indices"], [246, 3, 1, "", "down_indices"], [246, 3, 1, "", "neighbor_indices"], [246, 3, 1, "", "order"], [246, 3, 1, "", "triangles"], [246, 3, 1, "", "up_indices"], [246, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[247, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[248, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[248, 1, 1, "", "forward"]], "surfify.models.sit": [[249, 0, 1, "", "Attention"], [250, 0, 1, "", "FeedForward"], [251, 0, 1, "", "SiT"], [252, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[249, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[250, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[251, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[252, 1, 1, "", "forward"]], "surfify.models.unet": [[253, 0, 1, "", "DownBlock"], [254, 0, 1, "", "DownGBlock"], [255, 0, 1, "", "GraphicalUNet"], [256, 0, 1, "", "SphericalGUNet"], [257, 0, 1, "", "SphericalUNet"], [258, 0, 1, "", "UpBlock"], [259, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[253, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[254, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[255, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[256, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[257, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[258, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[259, 1, 1, "", "forward"]], "surfify.models.vae": [[260, 0, 1, "", "HemiFusionDecoder"], [261, 0, 1, "", "HemiFusionEncoder"], [262, 0, 1, "", "SphericalHemiFusionDecoder"], [263, 0, 1, "", "SphericalHemiFusionEncoder"], [264, 0, 1, "", "SphericalVAE"], [265, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[260, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[261, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[262, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[263, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[264, 1, 1, "", "decode"], [264, 1, 1, "", "encode"], [264, 1, 1, "", "forward"], [264, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[266, 0, 1, "", "SphericalGVGG"], [267, 0, 1, "", "SphericalGVGG11"], [268, 0, 1, "", "SphericalGVGG11BN"], [269, 0, 1, "", "SphericalGVGG13"], [270, 0, 1, "", "SphericalGVGG13BN"], [271, 0, 1, "", "SphericalGVGG16"], [272, 0, 1, "", "SphericalGVGG16BN"], [273, 0, 1, "", "SphericalGVGG19"], [274, 0, 1, "", "SphericalGVGG19BN"], [275, 0, 1, "", "SphericalVGG"], [276, 0, 1, "", "SphericalVGG11"], [277, 0, 1, "", "SphericalVGG11BN"], [278, 0, 1, "", "SphericalVGG13"], [279, 0, 1, "", "SphericalVGG13BN"], [280, 0, 1, "", "SphericalVGG16"], [281, 0, 1, "", "SphericalVGG16BN"], [282, 0, 1, "", "SphericalVGG19"], [283, 0, 1, "", "SphericalVGG19BN"], [284, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[266, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[275, 1, 1, "", "forward"]], "surfify.nn": [[286, 0, 1, "", "IcoDiNeConv"], [287, 0, 1, "", "IcoFixIndexUpSample"], [288, 0, 1, "", "IcoGenericUpConv"], [289, 0, 1, "", "IcoMaxIndexUpSample"], [290, 0, 1, "", "IcoPool"], [291, 0, 1, "", "IcoRePaConv"], [292, 0, 1, "", "IcoSpMaConv"], [293, 0, 1, "", "IcoSpMaConvTranspose"], [294, 0, 1, "", "IcoUpConv"], [295, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[286, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[287, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[288, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[289, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[290, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[291, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[292, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[293, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[294, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[295, 1, 1, "", "forward"]], "surfify.nn.functional": [[296, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[297, 0, 1, "", "IcoDiNeConv"], [298, 0, 1, "", "IcoFixIndexUpSample"], [299, 0, 1, "", "IcoGenericUpConv"], [300, 0, 1, "", "IcoMaxIndexUpSample"], [301, 0, 1, "", "IcoPool"], [302, 0, 1, "", "IcoRePaConv"], [303, 0, 1, "", "IcoSpMaConv"], [304, 0, 1, "", "IcoSpMaConvTranspose"], [305, 0, 1, "", "IcoUpConv"], [306, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[297, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[298, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[299, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[300, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[301, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[302, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[303, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[304, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[305, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[306, 1, 1, "", "forward"]], "surfify.plotting": [[308, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[309, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[310, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[310, 1, 1, "", "fit"], [310, 1, 1, "", "get_metadata_routing"], [310, 1, 1, "", "inverse_transform"], [310, 1, 1, "", "set_inverse_transform_request"], [310, 1, 1, "", "set_partial_fit_request"], [310, 1, 1, "", "set_transform_request"], [310, 1, 1, "", "transform"]], "surfify.transforms": [[311, 0, 1, "", "RandomCompose"]], "surfify.utils": [[313, 2, 1, "", "cart2sph"], [321, 2, 1, "", "debug_msg"], [322, 2, 1, "", "downsample"], [323, 2, 1, "", "downsample_data"], [324, 2, 1, "", "downsample_ico"], [325, 2, 1, "", "find_neighbors"], [326, 2, 1, "", "find_rotation_interpol_coefs"], [327, 2, 1, "", "get_logger"], [328, 2, 1, "", "get_rectangular_projection"], [329, 2, 1, "", "grid2text"], [330, 2, 1, "", "ico2ico"], [331, 2, 1, "", "icosahedron"], [332, 2, 1, "", "interpolate"], [333, 2, 1, "", "interpolate_data"], [344, 2, 1, "", "min_depth_to_get_n_neighbors"], [345, 2, 1, "", "neighbors"], [346, 2, 1, "", "neighbors_rec"], [347, 2, 1, "", "number_of_ico_vertices"], [348, 2, 1, "", "number_of_neighbors"], [349, 2, 1, "", "order_of_ico_from_vertices"], [350, 2, 1, "", "order_triangles"], [351, 2, 1, "", "patch_tri"], [352, 2, 1, "", "rotate_data"], [379, 2, 1, "", "setup_logging"], [380, 2, 1, "", "sph2cart"], [381, 2, 1, "", "text2grid"], [382, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[314, 2, 1, "", "cart2sph"], [315, 2, 1, "", "find_corresponding_order"], [316, 2, 1, "", "grid2text"], [317, 2, 1, "", "ico2ico"], [318, 2, 1, "", "sph2cart"], [319, 2, 1, "", "text2grid"], [320, 2, 1, "", "text2ico"]], "surfify.utils.io": [[334, 0, 1, "", "HidePrints"], [335, 2, 1, "", "compute_and_store"], [336, 2, 1, "", "decompose_cifti"], [337, 2, 1, "", "read_freesurfer"], [338, 2, 1, "", "read_gifti"], [339, 2, 1, "", "surf_data_from_cifti"], [340, 2, 1, "", "ungzip"], [341, 2, 1, "", "volume_from_cifti"], [342, 2, 1, "", "write_freesurfer"], [343, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[353, 2, 1, "", "_patch_tri_iter"], [354, 2, 1, "", "build_freesurfer_ico"], [355, 2, 1, "", "build_fslr_ref"], [356, 2, 1, "", "downsample"], [357, 2, 1, "", "downsample_data"], [358, 2, 1, "", "downsample_ico"], [359, 2, 1, "", "find_neighbors"], [360, 2, 1, "", "find_rotation_interpol_coefs"], [361, 2, 1, "", "get_angle_with_xaxis"], [362, 2, 1, "", "get_rectangular_projection"], [363, 2, 1, "", "icosahedron"], [364, 2, 1, "", "interpolate"], [365, 2, 1, "", "interpolate_data"], [366, 2, 1, "", "middle_point"], [367, 2, 1, "", "min_depth_to_get_n_neighbors"], [368, 2, 1, "", "neighbors"], [369, 2, 1, "", "neighbors_rec"], [370, 2, 1, "", "normalize"], [371, 2, 1, "", "number_of_ico_vertices"], [372, 2, 1, "", "number_of_neighbors"], [373, 2, 1, "", "order_of_ico_from_vertices"], [374, 2, 1, "", "order_triangles"], [375, 2, 1, "", "patch_tri"], [376, 2, 1, "", "rotate_data"], [377, 2, 1, "", "triangles_to_edges"], [378, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 5], "case": [0, 5], "spheric": [0, 5, 6, 9], "modul": [0, 5, 285], "model": [1, 2, 10, 12, 217], "probe": 1, "callback": [1, 16], "embed": 1, "estim": [1, 40, 46, 54, 57, 61], "setup": [1, 4, 12], "unsupervis": 1, "contrast": [1, 4, 12], "learn": [1, 2, 4, 12], "mnist": 1, "dataset": [1, 2, 4, 10, 12, 29, 206], "data": [1, 4, 8, 12], "augment": [1, 4, 6, 12, 148, 149, 154, 179], "simclr": [1, 4, 57, 217], "train": [1, 4, 10, 12], "classif": [1, 2, 84], "visual": [1, 2, 12], "metric": [1, 84], "dure": 1, "y": [1, 12], "awar": [1, 12], "represent": [1, 12], "ag": [1, 2], "sex": [1, 2], "predict": [1, 2, 10], "openbhb": [1, 2, 12, 29], "cl": 1, "multitask": 1, "regress": [1, 2, 4, 84], "conclus": [1, 4], "present": 2, "baselin": [2, 4], "load": [2, 8], "packag": 2, "plot": [2, 307], "modal": 2, "whole": 2, "brain": 2, "voxel": 2, "base": [2, 29, 40, 179, 217], "morphometri": 2, "vbm": 2, "quasi": 2, "raw": 2, "imag": 2, "roi": 2, "neuromorphometr": 2, "atla": 2, "surfac": [2, 8, 307], "measur": 2, "from": 2, "freesurf": 2, "region": 2, "destrieux": 2, "fine": 2, "grain": 2, "fsaverage7": 2, "templat": 2, "fit": 2, "machin": 2, "ridg": 2, "logist": [2, 4], "comput": [3, 11, 384], "time": [3, 11, 384], "self": 4, "supervis": [4, 12], "surfcutout": 6, "surfnois": 6, "surfblur": 6, "surfrot": 6, "hemimixup": 6, "groupmixup": 6, "group": 6, "transform": [6, 15, 147, 148, 149, 154, 163, 164, 169, 178], "icosahedron": 7, "match": 7, "project": 8, "textur": 8, "3": 8, "d": 8, "2": 8, "grid": 8, "uniformli": 8, "distribut": 8, "locat": 8, "integr": 8, "deep": 8, "neural": 8, "network": 8, "neighbor": 9, "direct": 9, "rectagular": 9, "tangent": 9, "plane": 9, "unet": [10, 217], "segment": 10, "inspect": 10, "label": 10, "weakli": 12, "evalu": 12, "api": [13, 15, 16, 29, 40, 46, 54, 57, 61, 74, 84, 95, 116, 117, 147, 148, 149, 154, 163, 164, 169, 177, 178, 179, 206, 213, 217, 285, 307, 312], "document": [13, 15, 16, 29, 40, 46, 54, 57, 61, 74, 84, 95, 116, 117, 147, 148, 149, 154, 163, 164, 169, 177, 178, 179, 206, 213, 217, 285, 307, 312], "nidl": [13, 14, 15, 16, 29, 40, 46, 54, 57, 61, 74, 84, 95, 116, 117, 147, 148, 149, 154, 163, 164, 169, 177], "instal": 14, "stabl": 14, "version": 14, "current": 14, "experi": 15, "check_typ": 16, "multitask_prob": 16, "model_prob": 16, "exampl": [24, 28, 33, 37, 55, 56, 58, 59, 60, 68, 93, 97, 115], "pandas_dataset": 29, "autoencod": 46, "vae": [46, 213, 217], "linear": 54, "logistic_regress": 54, "ssl": [57, 61], "yawar": 57, "util": [61, 95, 179, 312], "projection_head": 61, "loss": [74, 213], "yaware_infonc": 74, "infonc": 74, "beta_va": 74, "_regress": 84, "weight": 95, "bunch": 95, "color": 95, "valid": 95, "volum": [116, 117, 147, 148, 149, 154, 163, 164, 169], "backbon": 117, "alexnet3d": 117, "resnet3d": 117, "densenet3d": 117, "volume_transform": 147, "intens": [149, 164], "random_nois": 149, "random_blur": 149, "spatial": [154, 169], "random_eras": 154, "random_flip": 154, "random_resized_crop": 154, "random_rot": 154, "preprocess": [163, 164, 169, 178], "z_normal": 164, "rescal": 164, "resiz": 169, "resampl": 169, "crop_or_pad": 169, "search": 177, "surfifi": [178, 179, 206, 213, 217, 285, 307, 312], "mixup": 179, "_samples_gener": 206, "_gener": 206, "sit": 217, "vgg": 217, "nn": 285, "function": 285, "coord": 312, "sampl": 312, "io": 312}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [5, "spherical-modules-use-cases"]], "Model probing callback of embedding estimators": [[1, "model-probing-callback-of-embedding-estimators"]], "Setup": [[1, "setup"], [4, "setup"], [12, "setup"]], "Unsupervised Contrastive Learning on MNIST": [[1, "unsupervised-contrastive-learning-on-mnist"]], "Dataset and data augmentations for contrastive learning": [[1, "dataset-and-data-augmentations-for-contrastive-learning"]], "SimCLR training with classification probing callback": [[1, "simclr-training-with-classification-probing-callback"]], "Visualization of the classification metrics during training": [[1, "visualization-of-the-classification-metrics-during-training"]], "Probing of y-Aware representation on age and sex prediction": [[1, "probing-of-y-aware-representation-on-age-and-sex-prediction"]], "OpenBHB dataset and data augmentations": [[1, "openbhb-dataset-and-data-augmentations"]], "y-Aware CL training with multitask probing callback": [[1, "y-aware-cl-training-with-multitask-probing-callback"]], "Visualization of the classification and regression metrics during training": [[1, "visualization-of-the-classification-and-regression-metrics-during-training"]], "Conclusions": [[1, "conclusions"]], "Presentation of the OpenBHB dataset and baseline models for age and sex predictions": [[2, "presentation-of-the-openbhb-dataset-and-baseline-models-for-age-and-sex-predictions"]], "Load the packages": [[2, "load-the-packages"]], "Load the OpenBHB dataset and plot the modalities": [[2, "load-the-openbhb-dataset-and-plot-the-modalities"]], "Plot whole-brain Voxel-Based Morphometry (VBM) and Quasi-Raw images": [[2, "plot-whole-brain-voxel-based-morphometry-vbm-and-quasi-raw-images"]], "Plot VBM-ROI on the Neuromorphometrics atlas": [[2, "plot-vbm-roi-on-the-neuromorphometrics-atlas"]], "Plot Surface-Based Measures from FreeSurfer": [[2, "plot-surface-based-measures-from-freesurfer"]], "Visualize regional measures on the Destrieux atlas": [[2, "visualize-regional-measures-on-the-destrieux-atlas"]], "Visualize fine-grained measures on the fsaverage7 template": [[2, "visualize-fine-grained-measures-on-the-fsaverage7-template"]], "Fit machine learning models for age and sex prediction": [[2, "fit-machine-learning-models-for-age-and-sex-prediction"]], "Age prediction with Ridge regression": [[2, "age-prediction-with-ridge-regression"]], "Sex classification with logistic regression": [[2, "sex-classification-with-logistic-regression"]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [384, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[4, "self-supervised-contrastive-learning-with-simclr"]], "Data Augmentation for Contrastive Learning": [[4, "data-augmentation-for-contrastive-learning"]], "Dataset": [[4, "dataset"]], "Training": [[4, "training"]], "Logistic Regression": [[4, "logistic-regression"]], "Baseline": [[4, "baseline"]], "Conclusion": [[4, "conclusion"]], "Spherical augmentations": [[6, "spherical-augmentations"]], "SurfCutOut": [[6, "surfcutout"]], "SurfNoise": [[6, "surfnoise"]], "SurfBlur": [[6, "surfblur"]], "SurfRotation": [[6, "surfrotation"]], "HemiMixUp": [[6, "hemimixup"]], "GroupMixUp": [[6, "groupmixup"]], "GroupMixUp group": [[6, "groupmixup-group"]], "Transformer": [[6, "transformer"]], "Icosahedron matching": [[7, "icosahedron-matching"]], "Project texture": [[8, "project-texture"]], "Load data": [[8, "load-data"]], "3-D surface to 2-D grid projection": [[8, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[8, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[8, "uniformly-distributed-locations"]], "Integration in deep neural network": [[8, "integration-in-deep-neural-network"]], "Spherical neighbors": [[9, "spherical-neighbors"]], "Direct Neighbor": [[9, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[9, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[10, "unet-segmentation"]], "Inspect dataset": [[10, "inspect-dataset"]], "Train the model": [[10, "train-the-model"]], "Inspect the predicted labels": [[10, "inspect-the-predicted-labels"]], "Weakly Supervised Contrastive Learning with y-Aware": [[12, "weakly-supervised-contrastive-learning-with-y-aware"]], "OpenBHB datasets and data augmentations for Contrastive Learning": [[12, "openbhb-datasets-and-data-augmentations-for-contrastive-learning"]], "Training of y-Aware Contrastive Learning models": [[12, "training-of-y-aware-contrastive-learning-models"]], "Visualization and evaluation of the learned representations": [[12, "visualization-and-evaluation-of-the-learned-representations"]], "API documentation of nidl": [[13, "api-documentation-of-nidl"], [15, "api-documentation-of-nidl"]], "Installing nidl": [[14, "installing-nidl"]], "Installing a stable version": [[14, "installing-a-stable-version"]], "Installing the current version": [[14, "installing-the-current-version"]], "nidl": [[15, "nidl"]], "nidl.transforms": [[15, "nidl-transforms"]], "nidl.experiment": [[15, "nidl-experiment"]], "API documentation of nidl.callbacks": [[16, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[16, "nidl-callbacks"]], "nidl.callbacks.check_typing": [[16, "nidl-callbacks-check-typing"]], "nidl.callbacks.multitask_probing": [[16, "nidl-callbacks-multitask-probing"]], "nidl.callbacks.model_probing": [[16, "nidl-callbacks-model-probing"]], "Examples": [[24, "examples"], [28, "examples"], [33, "examples"], [37, "examples"], [55, "examples"], [56, "examples"], [58, "examples"], [59, "examples"], [60, "examples"], [68, "examples"], [93, "examples"], [97, "examples"], [115, "examples"]], "API documentation of nidl.datasets": [[29, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[29, "nidl-datasets"]], "nidl.datasets.pandas_dataset": [[29, "nidl-datasets-pandas-dataset"]], "nidl.datasets.openbhb": [[29, "id1"]], "nidl.datasets.base": [[29, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[40, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[40, "nidl-estimators"]], "nidl.estimators.base": [[40, "nidl-estimators-base"]], "API documentation of nidl.estimators.autoencoders": [[46, "api-documentation-of-nidl-estimators-autoencoders"]], "nidl.estimators.autoencoders": [[46, "nidl-estimators-autoencoders"]], "nidl.estimators.autoencoders.vae": [[46, "id1"]], "API documentation of nidl.estimators.linear": [[54, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[54, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[54, "nidl-estimators-linear-logistic-regression"]], "API documentation of nidl.estimators.ssl": [[57, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[57, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[57, "id1"]], "nidl.estimators.ssl.yaware": [[57, "nidl-estimators-ssl-yaware"]], "API documentation of nidl.estimators.ssl.utils": [[61, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[61, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[61, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[74, "api-documentation-of-nidl-losses"]], "nidl.losses": [[74, "nidl-losses"]], "nidl.losses.yaware_infonce": [[74, "nidl-losses-yaware-infonce"]], "nidl.losses.infonce": [[74, "id1"]], "nidl.losses.beta_vae": [[74, "nidl-losses-beta-vae"]], "API documentation of nidl.metrics": [[84, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[84, "nidl-metrics"]], "nidl.metrics.classification": [[84, "nidl-metrics-classification"]], "nidl.metrics.regression": [[84, "nidl-metrics-regression"]], "nidl.metrics._regression": [[84, "id1"]], "API documentation of nidl.utils": [[95, "api-documentation-of-nidl-utils"]], "nidl.utils": [[95, "nidl-utils"]], "nidl.utils.weights": [[95, "id1"]], "nidl.utils.bunch": [[95, "id2"]], "nidl.utils.color": [[95, "nidl-utils-color"]], "nidl.utils.validation": [[95, "nidl-utils-validation"]], "API documentation of nidl.volume": [[116, "api-documentation-of-nidl-volume"]], "nidl.volume": [[116, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[117, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[117, "nidl-volume-backbones"]], "nidl.volume.backbones.alexnet3d": [[117, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[117, "nidl-volume-backbones-resnet3d"]], "nidl.volume.backbones.densenet3d": [[117, "nidl-volume-backbones-densenet3d"]], "API documentation of nidl.volume.transforms": [[147, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[147, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[147, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[148, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[148, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[149, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[149, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[149, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[149, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[154, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[154, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[154, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[154, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[154, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[154, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "API documentation of nidl.volume.transforms.preprocessing": [[163, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[163, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[164, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[164, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[164, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[164, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[169, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[169, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[169, "id1"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[169, "id2"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[169, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "Search in API documentation of nidl": [[177, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[178, "api-documentation-of-surfify"]], "surfify": [[178, "surfify"]], "surfify.preprocessing": [[178, "surfify-preprocessing"]], "surfify.transforms": [[178, "surfify-transforms"]], "API documentation of surfify.augmentation": [[179, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[179, "surfify-augmentation"]], "surfify.augmentation.mixup": [[179, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[179, "surfify-augmentation-utils"]], "surfify.augmentation.base": [[179, "surfify-augmentation-base"]], "API documentation of surfify.datasets": [[206, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[206, "surfify-datasets"]], "surfify.datasets._samples_generator": [[206, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[206, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[213, "api-documentation-of-surfify-losses"]], "surfify.losses": [[213, "surfify-losses"]], "surfify.losses.vae": [[213, "surfify-losses-vae"]], "API documentation of surfify.models": [[217, "api-documentation-of-surfify-models"]], "surfify.models": [[217, "surfify-models"]], "surfify.models.sit": [[217, "id1"]], "surfify.models.vgg": [[217, "surfify-models-vgg"]], "surfify.models.simclr": [[217, "id2"]], "surfify.models.vae": [[217, "surfify-models-vae"]], "surfify.models.unet": [[217, "surfify-models-unet"]], "surfify.models.base": [[217, "surfify-models-base"]], "API documentation of surfify.nn": [[285, "api-documentation-of-surfify-nn"]], "surfify.nn": [[285, "surfify-nn"]], "surfify.nn.modules": [[285, "surfify-nn-modules"]], "surfify.nn.functional": [[285, "surfify-nn-functional"]], "API documentation of surfify.plotting": [[307, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[307, "surfify-plotting"]], "surfify.plotting.surface": [[307, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[312, "api-documentation-of-surfify-utils"]], "surfify.utils": [[312, "surfify-utils"]], "surfify.utils.coord": [[312, "surfify-utils-coord"]], "surfify.utils.sampling": [[312, "surfify-utils-sampling"]], "surfify.utils.io": [[312, "surfify-utils-io"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "classificationprobingcallback (class in nidl.callbacks)": [[18, "nidl.callbacks.ClassificationProbingCallback"]], "log_metrics() (nidl.callbacks.classificationprobingcallback method)": [[18, "nidl.callbacks.ClassificationProbingCallback.log_metrics"]], "modelprobing (class in nidl.callbacks)": [[19, "nidl.callbacks.ModelProbing"]], "adapt_dataloader_for_ddp() (nidl.callbacks.modelprobing static method)": [[19, "nidl.callbacks.ModelProbing.adapt_dataloader_for_ddp"]], "extract_features() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.fit"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.predict"]], "probing() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.probing"]], "multitaskestimator (class in nidl.callbacks)": [[20, "nidl.callbacks.MultiTaskEstimator"]], "fit() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.fit"]], "predict() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.predict"]], "score() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.score"]], "multitaskmodelprobing (class in nidl.callbacks)": [[21, "nidl.callbacks.MultitaskModelProbing"]], "log_classification_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_classification_metrics"]], "log_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_metrics"]], "log_regression_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_regression_metrics"]], "regressionprobingcallback (class in nidl.callbacks)": [[22, "nidl.callbacks.RegressionProbingCallback"]], "log_metrics() (nidl.callbacks.regressionprobingcallback method)": [[22, "nidl.callbacks.RegressionProbingCallback.log_metrics"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "classificationprobingcallback (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ClassificationProbingCallback"]], "log_metrics() (nidl.callbacks.model_probing.classificationprobingcallback method)": [[24, "nidl.callbacks.model_probing.ClassificationProbingCallback.log_metrics"]], "modelprobing (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.ModelProbing"]], "adapt_dataloader_for_ddp() (nidl.callbacks.model_probing.modelprobing static method)": [[25, "nidl.callbacks.model_probing.ModelProbing.adapt_dataloader_for_ddp"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.fit"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.predict"]], "probing() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.probing"]], "regressionprobingcallback (class in nidl.callbacks.model_probing)": [[26, "nidl.callbacks.model_probing.RegressionProbingCallback"]], "log_metrics() (nidl.callbacks.model_probing.regressionprobingcallback method)": [[26, "nidl.callbacks.model_probing.RegressionProbingCallback.log_metrics"]], "multitaskestimator (class in nidl.callbacks.multitask_probing)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator"]], "fit() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.fit"]], "predict() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.predict"]], "score() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.score"]], "multitaskmodelprobing (class in nidl.callbacks.multitask_probing)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing"]], "log_classification_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_classification_metrics"]], "log_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_metrics"]], "log_regression_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_regression_metrics"]], "baseimagedataset (class in nidl.datasets)": [[30, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[30, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[30, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[31, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[31, "nidl.datasets.BaseNumpyDataset.get_data"]], "imagedataframedataset (class in nidl.datasets)": [[32, "nidl.datasets.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.imagedataframedataset method)": [[32, "nidl.datasets.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.imagedataframedataset method)": [[32, "nidl.datasets.ImageDataFrameDataset.apply_transform"]], "openbhb (class in nidl.datasets)": [[33, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[34, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[35, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[35, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[35, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[36, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[36, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[37, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "imagedataframedataset (class in nidl.datasets.pandas_dataset)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_transform"]], "default_image_loader() (in module nidl.datasets.pandas_dataset)": [[39, "nidl.datasets.pandas_dataset.default_image_loader"]], "baseestimator (class in nidl.estimators)": [[41, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[42, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[43, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[44, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[45, "nidl.estimators.TransformerMixin"]], "vae (class in nidl.estimators.autoencoders)": [[47, "nidl.estimators.autoencoders.VAE"]], "configure_optimizers() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.configure_optimizers"]], "forward() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.forward"]], "sample() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.sample"]], "training_step() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.training_step"]], "transform_step() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.transform_step"]], "validation_step() (nidl.estimators.autoencoders.vae method)": [[47, "nidl.estimators.autoencoders.VAE.validation_step"]], "vae (class in nidl.estimators.autoencoders.vae)": [[48, "nidl.estimators.autoencoders.vae.VAE"]], "configure_optimizers() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.configure_optimizers"]], "forward() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.forward"]], "sample() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.sample"]], "training_step() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.training_step"]], "transform_step() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.transform_step"]], "validation_step() (nidl.estimators.autoencoders.vae.vae method)": [[48, "nidl.estimators.autoencoders.vae.VAE.validation_step"]], "baseestimator (class in nidl.estimators.base)": [[49, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[49, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[50, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[51, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[52, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[53, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[55, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[55, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[56, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[58, "nidl.estimators.ssl.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr method)": [[58, "nidl.estimators.ssl.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[58, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr method)": [[58, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[58, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[58, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[59, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[60, "nidl.estimators.ssl.simclr.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr.simclr method)": [[60, "nidl.estimators.ssl.simclr.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[60, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[60, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[60, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[60, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[62, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[62, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[63, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[64, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[65, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[65, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[66, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[67, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[68, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[69, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[70, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[71, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[72, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[73, "nidl.experiment.update_params"]], "betavaeloss (class in nidl.losses)": [[75, "nidl.losses.BetaVAELoss"]], "kl_normal_loss() (nidl.losses.betavaeloss method)": [[75, "nidl.losses.BetaVAELoss.kl_normal_loss"]], "reconstruction_loss() (nidl.losses.betavaeloss method)": [[75, "nidl.losses.BetaVAELoss.reconstruction_loss"]], "infonce (class in nidl.losses)": [[76, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[76, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[77, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[77, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[77, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[77, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[77, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[77, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[78, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[78, "nidl.losses.YAwareInfoNCE.forward"]], "betavaeloss (class in nidl.losses.beta_vae)": [[79, "nidl.losses.beta_vae.BetaVAELoss"]], "kl_normal_loss() (nidl.losses.beta_vae.betavaeloss method)": [[79, "nidl.losses.beta_vae.BetaVAELoss.kl_normal_loss"]], "reconstruction_loss() (nidl.losses.beta_vae.betavaeloss method)": [[79, "nidl.losses.beta_vae.BetaVAELoss.reconstruction_loss"]], "infonce (class in nidl.losses.infonce)": [[80, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[80, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[81, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[81, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[81, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[81, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[81, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[81, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[82, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[82, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[83, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[83, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[85, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[86, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[87, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[88, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[89, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[90, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[91, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[92, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[92, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[93, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[93, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[93, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[94, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[94, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[94, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[94, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[96, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[97, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[97, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[97, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[97, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[97, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[98, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[99, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[99, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[99, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[99, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[99, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[100, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[101, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[102, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[103, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[104, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[105, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[106, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[107, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[108, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[109, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[110, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[111, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[112, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[113, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[114, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[115, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[115, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[115, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[115, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[115, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[118, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[118, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[119, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[119, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[120, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[120, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[121, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[121, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[122, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[122, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[123, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[124, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[124, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[125, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[125, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[126, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[126, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[127, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[128, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[129, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[130, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[131, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[132, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[133, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[134, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[134, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[135, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[135, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[136, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[136, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[137, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[138, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[139, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[140, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[141, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[142, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[143, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[144, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[145, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[146, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[150, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[150, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[151, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[151, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[152, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[152, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[153, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[153, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[155, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[155, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[156, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[156, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[156, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[157, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[157, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[158, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[158, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[159, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[159, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[160, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[160, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[160, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[161, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[161, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[162, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[162, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[165, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[165, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[166, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[166, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[167, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[167, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[168, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[168, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[170, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[170, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[171, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[171, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[171, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[171, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[171, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[172, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[172, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[173, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[173, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[174, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[174, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[174, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[174, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[174, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[175, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[175, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[176, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[176, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[180, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[180, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[181, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[181, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[181, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[182, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[182, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[183, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[183, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[184, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[184, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[185, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[185, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[186, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[186, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[187, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[188, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[189, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[189, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[190, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[190, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[191, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[191, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[192, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[192, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[193, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[194, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[194, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[194, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[195, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[195, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[196, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[196, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[197, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[198, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[198, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[199, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[199, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[199, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[199, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[199, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[200, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[200, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[200, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[200, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[201, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[202, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[203, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[204, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[205, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[207, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[208, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[209, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[210, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[211, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[212, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[214, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[215, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[216, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[218, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[218, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[219, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[219, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[220, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[220, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[221, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[221, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[222, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[222, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[223, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[223, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[224, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[224, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[225, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[226, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[227, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[228, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[229, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[230, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[231, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[232, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[233, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[233, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[234, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[234, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[235, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[235, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[236, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[236, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[236, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[236, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[236, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[237, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[237, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[238, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[239, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[240, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[241, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[242, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[243, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[244, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[245, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[246, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[246, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[247, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[247, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[248, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[248, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[249, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[249, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[250, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[250, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[251, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[251, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[252, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[252, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[253, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[253, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[254, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[254, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[255, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[255, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[256, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[256, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[257, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[257, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[258, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[258, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[259, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[259, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[260, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[260, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[261, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[261, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[262, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[262, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[263, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[263, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[264, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[264, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[264, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[264, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[264, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[265, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[266, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[273, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[274, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[275, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[275, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[276, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[277, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[278, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[279, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[280, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[281, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[282, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[283, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[284, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[286, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[286, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[287, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[287, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[288, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[288, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[289, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[289, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[290, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[290, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[291, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[291, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[292, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[292, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[293, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[293, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[294, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[294, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[295, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[295, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[296, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[297, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[297, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[298, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[298, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[299, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[299, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[300, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[300, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[301, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[301, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[302, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[302, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[303, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[303, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[304, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[304, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[305, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[305, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[306, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[306, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[308, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[309, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[310, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[310, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[311, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[313, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[314, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[315, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[316, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[317, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[318, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[319, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[320, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[321, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[322, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[323, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[324, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[325, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[326, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[327, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[328, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[329, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[330, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[331, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[332, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[333, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[334, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[335, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[336, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[337, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[338, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[339, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[340, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[341, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[342, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[343, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[344, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[345, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[346, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[347, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[348, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[349, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[350, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[351, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[352, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[368, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[369, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[370, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[371, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[372, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[373, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[374, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[375, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[376, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[377, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[378, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[379, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[380, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[381, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[382, "surfify.utils.text2ico"]]}})
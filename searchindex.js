Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms", "generated/nidl.transforms.ContrastiveTransforms", "generated/nidl.transforms.ssl.ContrastiveTransforms", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.rst", "generated/nidl.transforms.ContrastiveTransforms.rst", "generated/nidl.transforms.ssl.ContrastiveTransforms.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.transforms</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 18, 24, 33, 38, 44, 45, 46, 47, 48, 49, 51, 54, 57, 65, 68, 79, 80, 81, 84, 98, 100, 102, 177, 208, 267, 341], "supervis": [0, 1, 10, 44, 45, 46, 47, 48, 49, 51, 54, 57, 79, 80, 81, 84, 102, 341], "contrast": [0, 1, 44, 45, 47, 48, 49, 57, 66, 70, 84, 102, 165, 166, 178, 205, 341], "learn": [0, 1, 10, 12, 15, 16, 17, 19, 21, 22, 23, 25, 44, 45, 47, 48, 49, 57, 66, 70, 71, 79, 80, 81, 84, 102, 105, 106, 109, 111, 174, 178, 193, 205, 221, 243, 254, 340, 341], "simclr": [0, 1, 10, 44, 45, 47, 49, 52, 53, 55, 56, 84, 102, 134, 178, 205, 341], "neighbor": [0, 3, 4, 9, 10, 15, 16, 21, 22, 134, 138, 140, 141, 146, 147, 151, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 215, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 248, 251, 254, 256, 257, 258, 259, 262, 269, 273, 276, 279, 282, 283, 286, 289, 301, 302, 303, 305, 309, 313, 316, 317, 321, 324, 325, 326, 329, 333, 335, 338, 341], "unet": [0, 3, 9, 10, 134, 180, 192, 210, 211, 212, 213, 214, 215, 216, 341], "segment": [0, 3, 9, 107, 108, 122, 123, 341], "project": [0, 3, 4, 5, 7, 9, 11, 27, 30, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 143, 149, 177, 208, 274, 277, 279, 282, 285, 287, 288, 302, 303, 308, 313, 316, 318, 319, 320, 323, 325, 326, 332, 339, 341], "textur": [0, 3, 4, 9, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 175, 176, 181, 190, 191, 193, 194, 217, 218, 219, 220, 221, 223, 232, 265, 266, 273, 276, 277, 280, 286, 289, 290, 309, 314, 321, 322, 333, 338, 339, 341], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 134, 140, 141, 143, 146, 147, 149, 164, 167, 168, 169, 174, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 214, 215, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 273, 274, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 338, 339, 341], "match": [0, 3, 9, 28, 31, 272, 277, 339, 341], "augment": [0, 3, 9, 10, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 57, 58, 80, 81, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 341], "download": [0, 2, 4, 5, 6, 7, 8, 82, 84, 102], "all": [0, 2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 49, 51, 54, 69, 74, 75, 76, 77, 78, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 180, 192, 205, 206, 207, 209, 212, 213, 214, 248, 249, 250, 259, 260, 261, 341], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 18, 24, 33, 38, 48, 51, 54, 57, 77, 78, 80, 81, 83, 85, 100, 179, 181, 192, 193, 194, 204, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 338, 339, 341], "python": [0, 2, 4, 5, 6, 7, 8, 10, 12, 98], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 190, 191, 192, 193, 194, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "code": [0, 2, 4, 5, 6, 7, 8, 14, 20, 58, 61, 95, 96], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 297], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 30, 33, 38, 44, 45, 47, 48, 49, 57, 153, 163, 164, 167, 168, 169, 174, 276, 282, 297, 299, 300, 311, 312, 316, 338], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 77, 78, 341], "000": [1, 2, 341], "total": [1, 4, 5, 6, 7, 8, 9, 106, 107, 108, 111, 122, 123, 341], "execut": [1, 9, 292, 341], "1": [1, 2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 52, 53, 55, 56, 57, 58, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 83, 85, 100, 105, 106, 107, 108, 109, 111, 120, 121, 122, 123, 126, 127, 137, 138, 141, 147, 151, 155, 156, 157, 164, 167, 168, 169, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 210, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 265, 266, 267, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 311, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 335, 338, 339], "file": [1, 9, 27, 28, 29, 30, 31, 58, 84, 102, 165, 166, 293, 294, 295, 297, 299, 300, 336, 340, 341], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 15, 16, 18, 21, 22, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 64, 65, 67, 68, 75, 76, 77, 78, 83, 85, 100, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 138, 141, 147, 151, 165, 166, 175, 179, 180, 181, 192, 193, 194, 204, 213, 214, 217, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 338, 339, 341], "auto_galleri": [1, 9], "mem": [1, 9, 341], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 341], "simclr_stl10": [1, 2, 341], "py": [1, 2, 4, 5, 6, 7, 8, 9, 341], "0": [1, 2, 4, 5, 6, 7, 8, 9, 14, 19, 20, 25, 33, 38, 44, 45, 47, 48, 49, 57, 58, 64, 65, 66, 67, 68, 70, 71, 75, 76, 77, 78, 100, 107, 108, 122, 123, 141, 143, 147, 149, 156, 157, 177, 193, 203, 206, 207, 208, 209, 212, 221, 244, 249, 250, 255, 260, 261, 265, 266, 272, 274, 277, 279, 282, 287, 302, 303, 307, 308, 309, 313, 316, 325, 326, 331, 332, 333, 335, 339, 341], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 95, 96, 101], "full": [2, 4, 5, 6, 7, 8, 10, 33, 38, 75, 76, 281, 315], "http": [2, 11, 15, 16, 17, 19, 21, 22, 23, 25, 52, 53, 55, 56, 64, 67, 74, 98, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 174, 296, 298], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 134, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "In": [2, 33, 38, 44, 45, 47, 48, 49, 57, 62, 65, 68, 80, 81, 180, 192, 213, 214, 241], "thi": [2, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "tutori": [2, 11], "we": [2, 5, 6, 8, 44, 45, 47, 49, 52, 55, 80, 81, 99, 241, 253, 296, 298], "take": [2, 47, 49, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 222, 248, 249, 250, 259, 260, 261], "closer": [2, 47, 48, 49, 57], "look": [2, 47, 49, 282, 316], "also": [2, 10, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 57, 77, 78, 98, 163, 165, 166, 292, 340], "sometim": [2, 83, 85], "call": [2, 14, 18, 20, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 65, 68, 69, 72, 80, 81, 101, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 165, 166, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 292, 309, 333], "unsupervis": 2, "describ": [2, 17, 23, 47, 49, 58, 340], "scenario": 2, "where": [2, 6, 17, 18, 23, 24, 27, 28, 29, 30, 31, 47, 48, 49, 52, 55, 57, 58, 66, 70, 84, 102, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254, 265, 266, 268, 276, 335, 338], "have": [2, 5, 6, 14, 20, 33, 38, 44, 45, 47, 48, 49, 57, 292, 302, 325], "given": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 66, 70, 84, 101, 102, 173, 175, 217, 267, 292, 309, 333, 334, 335], "input": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 48, 57, 58, 60, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 102, 105, 106, 107, 108, 109, 111, 122, 123, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 159, 161, 165, 166, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 267, 272, 273, 276, 277, 286, 292, 294, 295, 310, 338, 339], "accompani": 2, "label": [2, 6, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 44, 45, 48, 57, 66, 70, 168, 169, 265, 266], "classic": [2, 192, 214, 215], "wai": [2, 80, 81, 302, 325, 340], "howev": 2, "still": [2, 267], "contain": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 83, 85, 165, 166, 179, 204, 222, 265, 266, 292, 308, 332], "lot": 2, "inform": [2, 27, 28, 29, 30, 31, 58, 66, 70, 165, 166, 174, 179, 204], "which": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 66, 70, 101, 107, 108, 122, 123, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 267, 272, 282, 309, 316, 333], "can": [2, 5, 18, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 65, 68, 99, 137, 144, 155, 158, 165, 166, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 222, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 291, 292], "how": [2, 4, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "ar": [2, 5, 6, 8, 14, 17, 19, 20, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 74, 75, 76, 83, 85, 136, 165, 166, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 253, 267, 272, 276, 289, 302, 309, 311, 321, 325, 333, 335, 338], "imag": [2, 6, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 57, 80, 81, 136, 165, 166, 173, 276, 293, 338], "differ": [2, 5, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 57, 58, 80, 81, 141, 147, 165, 166, 179, 180, 192, 204, 213, 214], "each": [2, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 58, 77, 78, 80, 81, 106, 107, 108, 111, 122, 123, 138, 140, 141, 146, 147, 151, 154, 162, 164, 167, 168, 169, 173, 175, 176, 177, 179, 180, 190, 191, 192, 204, 208, 212, 213, 214, 217, 218, 219, 220, 267, 282, 283, 302, 303, 309, 316, 317, 325, 326, 333], "other": [2, 5, 33, 38, 44, 45, 47, 49, 58, 267, 277, 339], "what": [2, 48, 57, 58, 61], "pattern": [2, 6, 27, 28, 29, 30, 31, 165, 166, 253], "descript": 2, "certain": [2, 282, 305, 316, 329], "cluster": [2, 33, 35, 38, 40, 48, 57], "To": [2, 5, 18, 24, 27, 30, 33, 38, 44, 45, 47, 49, 66, 70, 72], "get": [2, 18, 24, 47, 49, 267, 301, 304, 305, 306, 324, 328, 329, 330, 335], "an": [2, 6, 7, 8, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 48, 51, 54, 57, 58, 60, 61, 80, 81, 83, 84, 85, 98, 100, 101, 102, 107, 108, 122, 123, 140, 141, 146, 147, 150, 153, 154, 156, 160, 162, 179, 180, 192, 204, 213, 214, 243, 254, 267, 273, 276, 277, 281, 286, 288, 290, 301, 304, 305, 306, 309, 315, 320, 322, 323, 324, 328, 329, 330, 333, 338, 339], "insight": 2, "question": 2, "implement": [2, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 64, 65, 66, 67, 68, 70, 71, 98, 140, 146, 174, 177, 178, 193, 205, 208, 212, 221], "popular": [2, 10, 163], "simpl": [2, 4, 5, 7, 8, 47, 49, 51, 54, 105, 109, 178, 205, 274, 287, 335], "method": [2, 10, 14, 18, 20, 24, 27, 30, 33, 38, 48, 57, 65, 66, 68, 70, 73, 83, 84, 85, 99, 100, 102, 135, 163, 177, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 213, 214, 215, 216, 221, 223, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 267, 309, 333], "appli": [2, 5, 6, 18, 24, 44, 45, 47, 49, 51, 54, 65, 68, 80, 81, 84, 102, 107, 108, 122, 123, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 155, 156, 158, 159, 177, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 253, 274, 285, 287, 303, 319, 326], "stl10": 2, "requir": [2, 33, 38, 44, 45, 47, 48, 49, 57, 65, 68, 71], "some": [2, 7, 10, 33, 38, 44, 45, 47, 48, 49, 57, 58, 60, 65, 68, 107, 108, 122, 123, 144, 145, 158, 159, 163, 267, 335], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 340], "let": [2, 47, 49], "": [2, 5, 7, 18, 24, 33, 38, 47, 48, 49, 57, 65, 68, 75, 76, 101, 139, 140, 141, 143, 146, 147, 149, 152, 164, 167, 168, 169, 175, 176, 180, 190, 191, 192, 210, 213, 214, 215, 217, 218, 219, 220, 243, 254, 279, 282, 292, 302, 303, 307, 308, 313, 316, 325, 326, 331, 332], "first": [2, 5, 6, 8, 48, 51, 54, 57, 64, 66, 67, 70, 75, 76, 106, 107, 108, 111, 122, 123, 175, 177, 180, 192, 208, 210, 211, 213, 214, 217, 309, 333], "start": [2, 18, 24, 107, 108, 122, 123, 141, 147, 282, 316], "import": [2, 4, 5, 6, 7, 8, 47, 49, 58, 60, 61, 77, 78, 83, 85, 100, 163, 179, 181, 192, 193, 194, 204, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 338, 339], "our": [2, 5, 44, 45], "standard": [2, 66, 70, 140, 142, 146, 148, 179, 180, 192, 204, 213, 214, 267, 288, 291, 308, 320, 332], "librari": 2, "below": [2, 47, 48, 49, 57, 58], "o": [2, 5, 7, 269, 279, 282, 302, 303, 308, 313, 316, 325, 326, 332], "matplotlib": [2, 4, 5, 6, 7, 8, 265, 266, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "pyplot": [2, 4, 5, 6, 7, 8, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "plt": [2, 4, 5, 6, 7, 8, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "pytorch_lightn": [2, 18, 24], "pl": 2, "torch": [2, 6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 48, 57, 64, 66, 67, 70, 84, 102, 174, 181, 192, 193, 194, 212, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "nn": [2, 6, 8, 10, 33, 38, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 64, 66, 67, 69, 70, 84, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 134, 140, 146, 175, 176, 178, 190, 191, 205, 206, 207, 209, 210, 212, 215, 217, 218, 219, 220, 222, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "util": [2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 48, 51, 52, 53, 54, 55, 56, 57, 72, 73, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 134, 140, 141, 143, 146, 147, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 192, 193, 194, 214, 221, 232, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "torchvis": [2, 48, 57], "collect": 2, "ordereddict": [2, 44, 45], "copi": [2, 27, 30, 267], "deepcopi": 2, "weight": [2, 10, 15, 17, 21, 23, 44, 45, 47, 48, 49, 57, 58, 65, 66, 68, 70, 72, 73, 75, 76, 77, 78, 84, 102, 134, 138, 151, 171, 172, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 283, 289, 303, 309, 317, 321, 326, 333], "estim": [2, 4, 5, 6, 7, 8, 10, 18, 19, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 65, 68, 72, 73, 77, 78, 99, 101, 134, 267, 274, 287], "ssl": [2, 10, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 81, 134], "linear": [2, 10, 18, 24, 44, 45, 48, 51, 52, 54, 55, 57, 65, 66, 68, 70, 105, 109, 134, 177, 180, 192, 208, 213, 214, 215], "logisticregress": [2, 10, 17, 23, 43, 44, 45, 134], "callback": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 48, 57, 134], "learningratemonitor": [2, 48, 57], "modelcheckpoint": [2, 33, 38], "transform": [2, 5, 10, 27, 28, 29, 30, 31, 33, 37, 38, 42, 47, 48, 49, 57, 58, 80, 81, 134, 136, 137, 144, 145, 154, 155, 157, 158, 159, 162, 165, 166, 174, 175, 177, 208, 209, 217, 267, 268, 270, 271, 274, 275, 287, 308, 332, 337], "defin": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 58, 59, 69, 75, 76, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 138, 151, 153, 156, 165, 166, 178, 180, 192, 205, 206, 207, 209, 212, 213, 214, 215, 216, 241, 248, 249, 250, 259, 260, 261, 265, 266, 268, 285, 288, 294, 295, 299, 300, 319, 320], "global": [2, 15, 17, 21, 23, 58, 241], "paramet": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 80, 81, 84, 100, 101, 102, 105, 106, 107, 108, 109, 111, 122, 123, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 48, 57, 77, 78, 83, 85, 193, 194, 203, 221, 232, 302, 308, 325, 332, 341], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 48, 57, 72, 73, 77, 78, 84, 90, 95, 96, 97, 100, 102, 106, 111, 137, 154, 155, 162, 171, 172, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 251, 254, 256, 257, 258, 262, 265, 266, 267, 273, 274, 277, 280, 282, 286, 287, 302, 307, 314, 316, 325, 331, 339], "benchmark": 2, "fals": [2, 4, 6, 7, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 75, 76, 77, 78, 84, 98, 100, 102, 106, 107, 108, 111, 112, 113, 122, 123, 165, 166, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 210, 211, 212, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 265, 266, 267, 274, 279, 281, 282, 287, 288, 289, 290, 291, 293, 296, 298, 302, 303, 307, 308, 309, 313, 315, 316, 320, 321, 322, 325, 326, 331, 332, 333, 334], "devic": [2, 33, 38, 44, 45], "gpu": [2, 33, 38, 44, 45, 47, 49], "cuda": 2, "is_avail": 2, "els": 2, "cpu": [2, 33, 38], "As": [2, 8, 47, 49], "mani": [2, 5, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 47, 48, 49, 57, 106, 107, 108, 111, 122, 123], "befor": [2, 47, 49, 101, 180, 192, 213, 214, 250, 261, 267], "provid": [2, 27, 28, 29, 30, 31, 33, 38, 143, 149, 165, 166, 242, 267, 283, 309, 317, 333, 340], "pre": 2, "model": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 58, 82, 84, 102, 107, 108, 110, 117, 122, 123, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "If": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 48, 57, 65, 66, 68, 70, 74, 77, 78, 84, 101, 102, 107, 108, 122, 123, 267, 292, 309, 333], "you": [2, 5, 11, 14, 18, 20, 24, 27, 30, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 84, 102, 267], "run": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 21, 22, 23, 24, 48, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 308, 332], "local": [2, 58, 62, 84, 102], "make": [2, 18, 24, 33, 38, 100, 241], "sure": 2, "suffici": 2, "disk": [2, 33, 38, 44, 45], "space": [2, 6, 47, 48, 49, 57, 105, 106, 107, 108, 109, 111, 122, 123, 175, 176, 177, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 214, 217, 218, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 285, 319], "avail": [2, 33, 38, 44, 45, 48, 57, 58, 77, 78, 84, 100, 102], "load_pretrain": [2, 84, 102], "makedir": 2, "exist_ok": 2, "name": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 48, 57, 58, 61, 77, 78, 84, 101, 102, 175, 176, 190, 191, 217, 218, 219, 220, 241, 265, 266, 267, 278, 292], "hf": [2, 58, 84, 102], "hub": [2, 58, 84, 102], "neurospin": [2, 11, 84, 102], "resnet18": [2, 10, 48, 57, 104, 118, 128, 134], "data_dir": [2, 84, 102], "filepath": [2, 84, 102], "pt": 2, "allow": [2, 5, 14, 20, 28, 31, 47, 49, 58, 59, 80, 81, 267, 292, 309, 333], "effici": [2, 80, 81, 106, 111], "need": [2, 5, 6, 33, 38, 47, 48, 49, 57, 58, 69, 80, 81, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 253, 259, 260, 261], "prepar": [2, 80, 81], "load": [2, 8, 10, 27, 28, 30, 31, 33, 38, 58, 61, 62, 80, 81, 84, 102, 163, 165, 166, 296, 298], "sampl": [2, 8, 10, 17, 23, 33, 38, 48, 57, 65, 66, 68, 70, 72, 73, 75, 76, 77, 78, 80, 81, 134, 163, 164, 167, 168, 169, 173, 175, 176, 180, 181, 192, 193, 194, 210, 213, 214, 215, 217, 218, 221, 223, 232, 245, 246, 247, 251, 253, 256, 257, 258, 262, 276, 303, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338], "two": [2, 5, 44, 45, 47, 48, 49, 51, 54, 57, 66, 70, 80, 81, 272, 274, 287, 302, 325], "random": [2, 4, 33, 38, 80, 81, 137, 141, 147, 153, 154, 155, 156, 162, 164, 167, 168, 169], "batch": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 66, 70, 80, 81, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "The": [2, 5, 18, 24, 27, 30, 33, 38, 44, 45, 47, 48, 49, 57, 58, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 80, 81, 101, 140, 142, 143, 146, 148, 149, 174, 175, 176, 177, 180, 190, 191, 192, 193, 208, 212, 213, 214, 217, 218, 219, 220, 221, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 267, 270, 271, 291, 292], "easiest": [2, 80, 81], "do": [2, 5, 18, 24, 33, 38, 44, 45, 47, 49, 80, 81, 267], "i": [2, 5, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "creat": [2, 80, 81, 98, 150, 156, 157, 160, 163, 165, 166, 203, 241], "when": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 72, 73, 74, 77, 78, 80, 81, 84, 100, 102, 265, 266, 267, 272, 277, 292, 307, 331, 339], "being": [2, 80, 81], "set": [2, 5, 15, 16, 21, 22, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 57, 58, 62, 65, 66, 68, 70, 75, 76, 80, 81, 86, 141, 143, 147, 149, 163, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 211, 212, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268, 279, 289, 293, 313, 321], "twice": [2, 80, 81], "class": [2, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 86, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 291], "contrastivetransform": [2, 10, 79, 80, 81, 134], "framework": [2, 33, 38, 48, 57, 178, 205], "easili": [2, 5], "extend": [2, 73, 83, 85], "more": [2, 15, 17, 21, 23, 27, 28, 29, 30, 31, 48, 57, 80, 81, 106, 111, 135, 165, 166, 340], "posit": [2, 33, 38, 65, 68, 80, 81], "than": [2, 33, 38, 47, 49], "same": [2, 5, 33, 38, 47, 48, 49, 57, 58, 59, 66, 70, 72, 73, 77, 78, 272, 274, 287, 292, 297, 302, 325], "most": [2, 265, 266], "usual": [2, 47, 49], "obtain": [2, 47, 49, 52, 55], "us": [2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "onli": [2, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "def": [2, 4, 6, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 100], "__init__": [2, 18, 24, 33, 38, 44, 45, 47, 49, 100], "base_transform": 2, "n_view": [2, 80, 81], "2": [2, 4, 5, 7, 8, 9, 15, 16, 18, 21, 22, 24, 48, 57, 58, 65, 66, 68, 70, 71, 75, 76, 77, 78, 80, 81, 83, 85, 100, 107, 108, 122, 123, 150, 156, 157, 160, 164, 167, 168, 169, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 270, 271, 273, 274, 276, 277, 279, 280, 281, 282, 285, 286, 287, 289, 290, 301, 302, 303, 308, 313, 314, 315, 316, 319, 321, 322, 324, 325, 326, 332, 334, 338, 339, 341], "__call__": 2, "x": [2, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 47, 49, 51, 54, 65, 68, 100, 105, 106, 107, 108, 109, 111, 120, 121, 122, 123, 168, 169, 173, 176, 177, 180, 181, 190, 191, 192, 193, 194, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 270, 271, 273, 275, 276, 277, 280, 286, 289, 290, 302, 309, 314, 318, 321, 322, 325, 333, 337, 338, 339], "return": [2, 18, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 84, 98, 100, 102, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 159, 160, 161, 162, 165, 166, 168, 169, 173, 175, 176, 177, 179, 181, 190, 191, 193, 194, 204, 208, 217, 218, 219, 220, 221, 222, 223, 232, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339], "rang": [2, 4, 5, 8, 33, 38, 65, 68, 270, 271, 305, 329], "next": [2, 5, 33, 38, 44, 45, 47, 49, 292], "specif": [2, 10, 138, 139, 151, 152, 180, 192, 213, 214, 241, 304, 328], "want": [2, 11, 47, 49, 84, 102], "choic": [2, 58], "crucial": 2, "hyperparamet": [2, 33, 38, 47, 49], "sinc": [2, 5, 6, 47, 49, 69, 75, 76, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 253, 259, 260, 261], "directli": [2, 33, 38, 48, 57, 136], "affect": [2, 33, 38], "latent": [2, 48, 57, 175, 176, 177, 190, 191, 193, 208, 217, 218, 219, 220, 221], "structur": [2, 5, 33, 38, 77, 78], "might": [2, 33, 38, 44, 45, 47, 48, 49, 57], "overal": 2, "experi": [2, 10, 58, 59, 60, 61, 62, 134, 340], "5": [2, 4, 6, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 77, 78, 143, 149, 179, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 213, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 259, 285, 302, 303, 319, 325, 326], "follow": [2, 18, 24, 47, 49, 51, 54, 58, 65, 68, 74, 77, 78], "origin": [2, 6, 47, 49, 136, 173, 267], "horizont": [2, 6], "flip": 2, "crop": 2, "resiz": 2, "color": [2, 7, 10, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 134, 265, 266], "distort": 2, "grayscal": 2, "gaussian": [2, 48, 57, 65, 66, 68, 70, 140, 142, 146, 148, 164, 167, 168, 169], "blur": [2, 140, 146], "comparison": 2, "reduc": [2, 33, 38, 72, 107, 108, 122, 123, 138, 151, 177, 208, 280, 281, 283, 314, 315, 317], "effect": [2, 107, 108, 122, 123, 267], "jitter": 2, "slightli": 2, "instead": [2, 69, 72, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 267], "8": [2, 4, 6, 8, 9, 33, 38, 44, 45, 77, 78, 192, 206, 214, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 341], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 69, 101, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 138, 151, 178, 205, 206, 207, 209, 212, 247, 248, 249, 250, 258, 259, 260, 261, 267], "wa": [2, 47, 49], "faster": [2, 292], "stabl": 2, "instanc": [2, 5, 33, 38, 48, 57, 69, 74, 101, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 137, 155, 156, 157, 178, 203, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "scale": [2, 6, 8, 17, 23, 33, 38, 44, 45, 64, 65, 66, 67, 68, 70, 135, 164, 167, 168, 169, 267, 276, 277, 280, 285, 289, 290, 303, 309, 314, 319, 321, 322, 326, 333, 338, 339], "highli": 2, "vari": 2, "benefici": [2, 44, 45], "t": [2, 6, 33, 38, 44, 45], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 17, 23, 47, 48, 49, 57, 64, 65, 66, 67, 68, 70, 75, 76, 138, 139, 151, 152, 265, 266, 272, 274, 287, 302, 311, 325, 335], "contrast_transform": 2, "compos": [2, 58, 80, 81, 177, 208, 268, 302, 325], "randomhorizontalflip": 2, "randomresizedcrop": 2, "size": [2, 6, 7, 8, 47, 48, 49, 57, 66, 70, 105, 106, 107, 108, 109, 111, 122, 123, 138, 139, 141, 147, 151, 152, 153, 165, 166, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 253, 259, 260, 261, 282, 285, 303, 308, 310, 316, 319, 326, 332], "96": [2, 4, 250, 261, 273, 286], "randomappli": 2, "colorjitt": 2, "p": [2, 65, 68], "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 249, 250, 260, 261], "9": [2, 4, 5, 48, 57, 77, 78, 171, 172], "totensor": 2, "normal": [2, 10, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 64, 67, 107, 108, 122, 123, 134, 135, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 267, 269, 318, 327], "after": [2, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 65, 68, 107, 108, 122, 123, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "discuss": 2, "techniqu": [2, 335], "now": [2, 5, 8, 47, 49, 107, 108, 122, 123, 222], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 48, 57, 64, 67, 77, 78, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 181, 192, 194, 214, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332, 341], "airplan": 2, "bird": 2, "car": 2, "cat": 2, "deer": 2, "dog": 2, "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": [2, 33, 38], "resolut": [2, 107, 108, 122, 123, 165, 166, 180, 192, 213, 214], "pixel": 2, "500": 2, "per": [2, 19, 25, 27, 30, 107, 108, 122, 123], "addition": 2, "much": [2, 106, 111], "larger": [2, 47, 49], "100": [2, 4, 7, 8, 17, 23, 279, 282, 302, 303, 308, 311, 313, 316, 325, 326, 332], "unlabel": 2, "similar": [2, 5, 47, 48, 49, 57, 65, 66, 68, 70], "wider": [2, 47, 49], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": 2, "luckili": 2, "through": [2, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 34, 35, 36, 37, 39, 40, 41, 42, 51, 54], "keep": [2, 165, 166], "mind": 2, "rel": [2, 17, 23, 27, 28, 29, 30, 31], "larg": [2, 267], "ha": [2, 5, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 77, 78, 106, 107, 108, 111, 122, 123, 180, 192, 213, 214, 267], "consider": [2, 47, 49], "3gb": 2, "bit": [2, 48, 57], "time": [2, 4, 5, 6, 7, 8, 309, 333], "For": [2, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 49, 101, 222, 302, 325], "initi": [2, 48, 51, 52, 53, 54, 55, 56, 57, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "loader": [2, 8], "abov": 2, "unlabeled_data": 2, "via": [2, 44, 45, 309, 333], "train_data_contrast": 2, "valid": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 58, 62, 98, 99, 100, 101, 134], "root": [2, 11, 16, 19, 22, 25, 27, 28, 29, 30, 31, 77, 78, 165, 166], "split": [2, 27, 28, 29, 30, 31, 47, 49, 165, 166], "pair": [2, 33, 38, 48, 57, 66, 70, 165, 166], "img": 2, "stack": [2, 18, 24], "idx": [2, 4, 7, 27, 28, 30, 31, 282, 302, 308, 316, 325, 332], "dim": [2, 8, 48, 57, 69, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "img_grid": 2, "make_grid": 2, "nrow": 2, "pad_valu": 2, "permut": [2, 5, 139, 152, 272, 274, 287], "figur": [2, 6, 265, 266], "figsiz": [2, 4, 5, 6, 7, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "titl": [2, 6, 92, 93], "imshow": [2, 6, 276, 338], "axi": [2, 6, 8, 265, 266, 267, 272, 283, 289, 296, 298, 302, 309, 317, 318, 321, 325, 333], "off": [2, 6], "And": 2, "associ": [2, 7, 44, 45, 48, 57, 66, 70, 269, 277, 283, 309, 317, 333, 339], "dataload": [2, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 49, 58], "batch_siz": [2, 8, 33, 38, 64, 66, 67, 70, 176, 190, 191, 193, 218, 219, 220, 221], "256": [2, 51, 54, 86, 175, 176, 190, 191, 217, 218, 219, 220], "train_load": 2, "shuffl": [2, 8, 33, 38], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 26, 32, 33, 38, 44, 45, 63, 79, 103, 104, 136, 170, 174, 267], "resnet": [2, 10, 48, 57, 104, 107, 108, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 134], "18": [2, 4, 48, 57, 108, 118, 119, 123, 128, 129], "architectur": [2, 8, 10, 44, 45, 47, 48, 49, 57, 103, 104, 105, 106, 107, 108, 109, 111, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 174, 180, 181, 192, 193, 194, 212, 213, 214, 221, 223, 232], "f": [2, 6, 44, 45, 47, 49, 180, 192, 213, 214], "paper": [2, 47, 49, 106, 111], "g": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 52, 55, 57, 66, 70, 107, 108, 122, 123, 267], "layer": [2, 44, 45, 47, 48, 49, 51, 52, 54, 55, 57, 105, 106, 107, 108, 109, 111, 122, 123, 124, 125, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263], "mlp": [2, 44, 45, 47, 48, 49, 51, 52, 54, 55, 57, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "relu": [2, 47, 48, 49, 51, 52, 54, 55, 57, 115, 180, 192, 210, 211, 212, 213, 214, 215, 216], "activ": [2, 47, 48, 49, 57, 175, 176, 180, 190, 191, 192, 193, 213, 214, 217, 218, 219, 220, 221], "hidden": [2, 47, 48, 49, 52, 55, 57, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "note": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 98, 105, 109, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 292], "up": [2, 18, 24, 47, 49, 179, 180, 192, 204, 213, 214, 272, 274, 282, 287, 305, 316, 329], "simclrv2": [2, 47, 49], "author": [2, 47, 49, 58], "mention": [2, 47, 49], "boost": [2, 47, 49], "why": [2, 5], "four": 2, "dimens": [2, 5, 47, 48, 49, 57, 177, 208, 222], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 77, 78, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 57, 84, 102, 136, 165, 166, 174, 178, 205, 268], "observ": 2, "u": [2, 6, 47, 49, 165, 166, 180, 192, 212, 213, 214], "compar": [2, 47, 49], "neg": 2, "lead": [2, 33, 38], "smoother": 2, "loss": [2, 8, 10, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 58, 64, 65, 66, 67, 68, 69, 70, 134, 171, 172, 173], "gradient": [2, 33, 38, 44, 45, 47, 48, 49, 57], "case": [2, 33, 38, 44, 45, 47, 48, 49, 57, 58, 61, 62, 65, 68, 75, 76, 267], "experienc": 2, "good": 2, "result": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 75, 76, 77, 78, 91, 98, 241, 291], "hidden_dim": [2, 47, 49, 52, 53, 55, 56, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "128": [2, 48, 51, 52, 53, 54, 55, 56, 57, 105, 109, 175, 176, 190, 191, 217, 218, 219, 220], "encod": [2, 33, 38, 44, 45, 47, 48, 49, 57, 170, 174, 176, 180, 190, 191, 192, 193, 213, 214, 218, 219, 220, 221], "none": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 58, 61, 62, 66, 70, 72, 73, 75, 76, 77, 78, 84, 101, 102, 107, 108, 120, 121, 122, 123, 138, 140, 141, 143, 146, 147, 149, 151, 164, 165, 166, 167, 168, 169, 171, 172, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 212, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 261, 265, 266, 267, 280, 281, 290, 292, 309, 311, 312, 314, 315, 322, 323, 333, 336], "num_class": [2, 44, 45, 194, 195, 196, 197, 198, 199, 200, 201, 202, 232, 233, 234, 235, 236, 237, 238, 239, 240], "4": [2, 4, 5, 7, 8, 9, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 48, 57, 77, 78, 106, 107, 108, 111, 122, 123, 192, 203, 214, 244, 245, 246, 247, 250, 251, 252, 255, 256, 257, 258, 261, 262, 263, 272, 274, 277, 280, 281, 287, 290, 305, 314, 315, 322, 329, 335, 339, 341], "latent_s": [2, 44, 45, 47, 49], "fc": [2, 44, 45], "out_featur": [2, 51, 54], "ident": [2, 33, 38, 107, 108, 122, 123], "save_weights_onli": 2, "mode": [2, 11, 33, 38, 44, 45, 47, 48, 49, 57, 58, 65, 68, 210, 267], "max": [2, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 257, 258], "monitor": [2, 33, 38, 48, 57], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 18, 24, 33, 38, 44, 45, 48, 57], "trainer_param": [2, 33, 38], "default_root_dir": 2, "acceler": [2, 33, 38, 44, 45], "max_epoch": [2, 33, 38, 44, 45, 47, 48, 49, 57], "lr": [2, 8, 44, 45, 47, 48, 49, 57], "5e": [2, 48, 57], "temperatur": [2, 44, 45, 47, 48, 49, 57, 64, 66, 67, 70, 178, 205], "07": 2, "weight_decai": [2, 8, 44, 45, 47, 48, 49, 57], "1e": [2, 8, 17, 23, 48, 57, 272, 277, 339], "random_st": [2, 33, 38, 44, 45, 47, 49], "42": [2, 4, 6, 8, 77, 78, 276, 277, 280, 289, 290, 309, 314, 321, 322, 333, 338, 339], "print": [2, 4, 5, 6, 8, 77, 78, 82, 86, 100, 179, 181, 193, 194, 204, 221, 223, 232, 288, 301, 304, 305, 306, 307, 320, 324, 328, 329, 330, 331], "found": [2, 5, 27, 28, 29, 30, 31, 33, 38, 48, 57, 101], "pretrain": [2, 47, 49], "weight_fil": [2, 84, 102], "fitted_": 2, "fit": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 48, 57, 65, 68, 101, 267], "deploi": [2, 44, 45], "downstream": [2, 44, 45, 47, 49], "task": [2, 44, 45, 47, 49, 72, 73, 107, 108, 122, 123], "see": [2, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 57, 58, 64, 66, 67, 70, 98, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 143, 149, 165, 166, 267, 296, 298], "well": [2, 33, 38, 44, 45, 47, 49, 66, 70], "littl": [2, 44, 45], "verifi": [2, 44, 45, 101], "whether": [2, 18, 24, 33, 38, 44, 45, 84, 102], "represent": [2, 44, 45, 47, 48, 49, 57, 105, 109, 143, 149, 174, 178, 190, 191, 193, 205, 219, 220, 221, 267, 283, 309, 317, 333, 335], "featur": [2, 10, 17, 18, 23, 24, 44, 45, 47, 48, 49, 57, 66, 70, 106, 107, 108, 111, 122, 123, 163, 180, 192, 210, 211, 212, 213, 214, 215, 216, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 267], "word": [2, 44, 45], "singl": [2, 27, 30, 33, 38, 44, 45, 47, 48, 49, 57, 340], "map": [2, 5, 6, 28, 31, 33, 38, 44, 45, 47, 48, 49, 57, 107, 108, 122, 123, 249, 250, 253, 260, 261, 265, 266, 274, 287, 308, 332], "predict": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 51, 54, 75, 76, 177, 181, 194, 208, 223, 232], "base": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 64, 65, 66, 67, 68, 69, 70, 80, 81, 83, 84, 85, 86, 98, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 164, 165, 166, 167, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 272, 291, 292, 302, 303, 308, 325, 326, 332], "network": [2, 47, 48, 49, 57, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 217, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "chang": [2, 48, 57, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267], "dure": [2, 33, 38, 44, 45, 141, 147], "process": [2, 11, 33, 38, 44, 45, 179, 204], "h": [2, 47, 49, 52, 55, 65, 66, 68, 70, 173, 222], "necessari": 2, "further": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "worri": 2, "too": [2, 267], "about": [2, 58, 309, 333], "veri": [2, 5, 44, 45], "few": 2, "henc": 2, "expect": [2, 8, 27, 28, 29, 30, 31, 48, 57, 58, 165, 166], "even": [2, 84, 102], "assum": [2, 44, 45, 138, 139, 151, 152, 272], "alreadi": [2, 84, 102], "been": [2, 33, 38, 44, 45, 47, 48, 49, 57], "vector": [2, 17, 23, 47, 48, 49, 57, 66, 70, 302, 325], "dynam": [2, 44, 45, 58, 60, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "so": [2, 5, 44, 45, 107, 108, 122, 123], "here": [2, 5, 33, 38, 44, 45, 47, 49, 58, 296, 298], "within": [2, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "second": [2, 4, 5, 6, 7, 8, 48, 51, 54, 57, 64, 66, 67, 70, 75, 76], "did": [2, 5], "ani": [2, 33, 38, 44, 45, 47, 48, 49, 57, 74, 165, 166, 288, 320], "signific": [2, 33, 38], "gain": 2, "test": [2, 5, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38], "while": [2, 5, 33, 38, 44, 45, 47, 48, 49, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "800": 2, "64": [2, 4, 33, 38, 77, 78, 106, 107, 108, 111, 120, 121, 122, 123, 175, 176, 177, 190, 191, 193, 206, 208, 217, 218, 219, 220, 221], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 33, 38, 44, 45, 48, 57, 66, 70, 75, 76, 77, 78, 80, 81, 105, 106, 107, 108, 109, 111, 122, 123, 138, 141, 147, 150, 151, 156, 157, 160, 164, 167, 168, 169, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254, 265, 266, 276, 280, 281, 290, 301, 304, 305, 306, 308, 314, 315, 322, 324, 328, 329, 330, 332, 338], "len": [2, 4, 5, 6, 8, 192, 193, 194, 214, 221, 232, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 282, 301, 306, 316, 324, 330], "froozen": 2, "e": [2, 6, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 58, 61, 65, 66, 68, 70, 75, 76, 106, 107, 108, 111, 122, 123, 267, 276, 338], "output": [2, 18, 24, 33, 38, 44, 45, 48, 57, 58, 61, 72, 73, 75, 76, 77, 78, 83, 85, 140, 141, 146, 147, 175, 177, 180, 192, 208, 210, 211, 212, 213, 214, 215, 216, 217, 222, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 291, 292], "new_model": 2, "sequenti": [2, 44, 45, 51, 54, 113, 114, 302, 325], "normal_": 2, "mean": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 49, 62, 77, 78, 177, 192, 208, 210, 214, 247, 258, 267, 289, 321], "std": [2, 267], "01": [2, 9, 341], "bia": [2, 51, 54, 243, 254], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 105, 109, 192, 214], "evalu": [2, 6, 65, 68, 253], "everi": [2, 33, 38, 47, 48, 49, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 279, 313], "earli": [2, 33, 38], "stop": [2, 33, 38, 48, 57, 302, 325], "low": [2, 48, 57, 156], "frequenc": [2, 48, 57], "ensur": [2, 73, 161], "despit": 2, "thei": [2, 5, 8, 83, 85], "smaller": [2, 17, 23], "20": [2, 4, 6, 7, 8, 138, 151], "50": [2, 4, 130, 131, 132, 133], "200": 2, "give": [2, 10, 33, 38], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 15, 16, 17, 21, 22, 23, 33, 38, 44, 45, 47, 48, 49, 57, 58, 72, 73, 75, 76, 77, 78, 107, 108, 122, 123, 212, 267, 268], "classif": [2, 6, 8, 15, 17, 18, 21, 23, 24, 33, 38, 48, 57, 66, 70, 164, 167, 168, 169, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "test_load": 2, "val_acc": 2, "check_val_every_n_epoch": [2, 33, 38, 48, 57], "3": [2, 4, 5, 7, 8, 9, 18, 24, 48, 57, 58, 77, 78, 83, 85, 98, 106, 107, 108, 111, 122, 123, 140, 141, 143, 146, 147, 149, 164, 165, 166, 167, 168, 169, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 203, 204, 213, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 294, 295, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 338, 339, 341], "pred": [2, 8, 44, 45], "shape": [2, 5, 6, 8, 15, 16, 17, 21, 22, 23, 48, 57, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 181, 192, 193, 194, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 288, 289, 304, 320, 321, 328], "acc": [2, 33, 38], "argmax": [2, 8], "float": [2, 4, 8, 17, 19, 23, 25, 33, 38, 44, 45, 47, 48, 49, 57, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 155, 160, 171, 172, 177, 208, 212, 265, 266, 270, 271, 272, 275, 277, 337, 339], "accuraci": [2, 8, 15, 17, 21, 23, 33, 38, 44, 45, 47, 49], "2f": 2, "_pretrained_filenam": 2, "path": [2, 27, 28, 30, 31, 58, 84, 102, 140, 141, 146, 147, 180, 192, 213, 214, 292, 293, 297, 299, 300, 302, 311, 312, 325], "join": 2, "isfil": 2, "save": [2, 58, 299, 300], "state_dict": 2, "one": [2, 5, 47, 48, 49, 51, 52, 54, 55, 57, 58, 69, 72, 73, 77, 78, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 141, 147, 154, 162, 175, 178, 205, 206, 207, 209, 212, 217, 248, 249, 250, 259, 260, 261, 277, 339], "would": [2, 47, 49, 77, 78], "improv": [2, 107, 108, 122, 123], "classifi": [2, 15, 21, 34, 39], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 27, 28, 29, 30, 31, 44, 45, 141, 147, 165, 166, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254], "dimension": [2, 47, 48, 49, 57], "With": 2, "achiev": 2, "80": [2, 4, 77, 78], "increas": [2, 290, 322], "suggest": 2, "exponenti": [2, 48, 57, 65, 66, 68, 70], "could": [2, 5, 47, 48, 49, 57], "finetun": [2, 47, 49], "adapt": [2, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 141, 147, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "indic": [2, 33, 38, 48, 57, 75, 76, 138, 151, 210, 215, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 272, 280, 281, 282, 283, 289, 290, 302, 308, 314, 315, 316, 317, 321, 322, 325, 332, 334], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "clear": [2, 18, 24], "its": [2, 48, 57, 95, 96, 107, 108, 122, 123, 292, 302, 325], "count": 2, "1000": [2, 33, 38], "fair": 2, "ones": [2, 48, 57], "becaus": [2, 5, 47, 49, 267], "distribut": [2, 33, 38, 47, 49, 176, 193, 218, 221], "notic": 2, "ad": [2, 180, 192, 213, 214], "restrict": 2, "oper": [2, 33, 38, 44, 45, 47, 49, 212, 267], "125": 2, "1250": 2, "done": [2, 33, 38, 292], "recogn": 2, "object": [2, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 58, 61, 80, 81, 83, 84, 85, 86, 98, 100, 102, 137, 150, 155, 156, 160, 171, 172, 265, 266, 267, 268, 291, 292], "check": [2, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 30, 33, 38, 58, 71, 72, 98, 99, 100, 101], "patch": [2, 47, 49, 141, 147, 165, 166, 177, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 303, 308, 310, 326, 332], "belong": [2, 72], "chosen": [2, 17, 23, 33, 38], "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 60, 61, 62, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 143, 145, 146, 147, 149, 150, 154, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 173, 174, 175, 176, 178, 180, 190, 191, 192, 205, 206, 207, 209, 212, 213, 214, 217, 218, 219, 220, 222, 241, 248, 249, 250, 253, 259, 260, 261, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "almost": [2, 6], "strongli": 2, "iter": [2, 17, 23, 33, 38, 44, 45, 47, 49, 222], "train_transform": 2, "sigma": [2, 4, 48, 52, 55, 57, 66, 70, 140, 141, 142, 146, 147, 148], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 77, 78, 107, 108, 122, 123, 302, 325], "less": 2, "leverag": [2, 48, 57], "amount": 2, "generaliz": 2, "sole": [2, 33, 38], "par": 2, "tenth": 2, "experiment": [2, 58], "limit": 2, "recent": 2, "work": [2, 5, 27, 30, 48, 57, 58, 140, 141, 146, 147, 222, 267], "ting": [2, 178, 205], "chen": [2, 64, 67, 178, 205], "et": [2, 47, 48, 49, 57, 64, 67, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 177, 180, 192, 208, 213, 214], "al": [2, 47, 48, 49, 57, 64, 67, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 177, 180, 192, 208, 213, 214], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": [2, 17, 23], "come": [2, 47, 49], "close": [2, 5, 48, 57], "approach": [2, 11], "combin": [2, 138, 151], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 107, 108, 122, 123, 175, 217], "year": 2, "great": [2, 47, 49], "includ": [2, 10, 16, 19, 22, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 49, 163, 165, 166], "distil": 2, "byol": 2, "redund": [2, 72], "reduct": [2, 33, 38], "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4], "step": [2, 8, 18, 24, 33, 38, 44, 45, 47, 48, 49, 57, 180, 192, 213, 214], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 18, 24, 28, 31, 106, 111, 267, 292], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 296, 298], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8], "c": [4, 5, 7, 17, 23, 83, 85, 173, 279, 282, 302, 303, 313, 316, 325, 326], "ambrois": [4, 5], "numpi": [4, 5, 6, 8, 18, 24, 27, 28, 29, 30, 31, 48, 57, 71, 267, 270, 271, 275, 337], "np": [4, 5, 6, 8, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 273, 286, 289, 321], "surfifi": [4, 5, 6, 7, 8, 9, 10, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341], "min_depth_to_get_n_neighbor": [4, 10, 134, 269, 301, 324], "plot": [4, 5, 6, 7, 8, 10, 134, 265, 266, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "plot_trisurf": [4, 5, 6, 7, 8, 10, 134, 264, 265, 266, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 302, 303, 308, 309, 313, 314, 315, 316, 320, 321, 322, 325, 326, 332, 333, 338, 339], "interv": [4, 10, 48, 57, 134, 136, 150, 153, 156, 160], "vertic": [4, 5, 7, 138, 139, 140, 141, 143, 146, 147, 149, 151, 152, 164, 167, 168, 169, 177, 192, 203, 208, 214, 243, 244, 254, 255, 265, 266, 267, 273, 274, 276, 277, 279, 280, 281, 283, 286, 287, 288, 289, 290, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 338, 339], "triangl": [4, 5, 7, 140, 141, 143, 146, 147, 149, 192, 203, 214, 265, 266, 273, 274, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 294, 295, 299, 300, 302, 303, 307, 308, 309, 310, 313, 314, 315, 316, 317, 320, 321, 322, 325, 326, 331, 332, 333, 334, 335, 339], "order": [4, 5, 6, 7, 8, 33, 38, 48, 57, 58, 77, 78, 140, 141, 146, 147, 165, 166, 175, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 214, 217, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 268, 272, 273, 274, 276, 277, 279, 280, 281, 282, 286, 287, 288, 289, 290, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 338, 339], "neigh": [4, 7, 140, 141, 146, 147, 248, 259, 282, 283, 302, 303, 309, 310, 316, 317, 325, 326, 333], "direct_neighbor": [4, 7, 243, 245, 246, 247, 251, 254, 256, 257, 258, 262, 282, 302, 308, 310, 316, 325, 332], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58, 77, 78, 90, 97, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 278], "aug": 4, "add_axi": 4, "alpha": [4, 5, 16, 19, 22, 25, 265, 266, 270, 271, 274, 275, 287, 337], "arg": [4, 108, 123, 145, 159, 193, 221, 267], "kwarg": [4, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 48, 49, 57, 83, 85, 108, 110, 116, 117, 118, 119, 123, 124, 125, 128, 129, 130, 131, 132, 133, 145, 159, 193, 221, 267], "data": [4, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 65, 66, 68, 70, 72, 73, 74, 75, 76, 80, 81, 84, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 158, 159, 160, 161, 162, 163, 165, 166, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 267, 273, 276, 279, 280, 286, 289, 290, 292, 293, 296, 298, 309, 311, 312, 313, 314, 321, 322, 333, 338], "fig": [4, 5, 7, 265, 266, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "ax": [4, 5, 6, 7, 250, 261, 265, 266, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "subplot": [4, 5, 7, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "subplot_kw": [4, 5, 7, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "3d": [4, 5, 7, 48, 57, 66, 70, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 274, 279, 282, 285, 287, 288, 302, 303, 308, 313, 316, 319, 320, 325, 326, 332], "aspect": [4, 5, 7, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "auto": [4, 5, 7, 33, 38, 58, 62, 170, 174, 274, 279, 282, 287, 288, 302, 303, 308, 313, 316, 320, 325, 326, 332], "flatten": [4, 6, 177, 208, 253], "colorbar": [4, 7, 265, 266, 274, 279, 281, 282, 287, 288, 302, 303, 308, 313, 315, 316, 320, 325, 326, 332], "edgecolor": [4, 5, 265, 266, 274, 287], "white": [4, 142, 148], "linewidth": [4, 7, 265, 266], "red": [4, 7, 279, 282, 302, 303, 313, 316, 325, 326], "blue": [4, 5, 7, 274, 282, 287, 302, 303, 316, 325, 326], "green": [4, 5, 7, 274, 287], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 48, 57, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 159, 161, 164, 165, 166, 167, 168, 169, 210, 215, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 267, 272, 273, 274, 276, 277, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 293, 294, 295, 299, 300, 302, 303, 307, 308, 309, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 326, 331, 332, 333, 334, 335, 338, 339], "patch_siz": [4, 141, 147], "int": [4, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 33, 38, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 68, 70, 77, 78, 80, 81, 105, 106, 107, 108, 109, 111, 119, 122, 123, 124, 125, 129, 131, 133, 138, 139, 140, 141, 146, 147, 150, 151, 152, 153, 160, 164, 165, 166, 167, 168, 169, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 272, 273, 276, 280, 281, 282, 285, 286, 288, 290, 301, 302, 303, 304, 305, 306, 308, 314, 315, 316, 319, 320, 322, 324, 325, 326, 328, 329, 330, 332, 334, 338], "n_patch": [4, 141, 147, 177, 208], "uniform": [4, 48, 57, 75, 76, 77, 78], "phi": [4, 143, 149], "180": 4, "theta": [4, 143, 149], "psi": [4, 143, 149], "controlateral_textur": 4, "prob": [4, 138, 139, 151, 152, 153], "n_vertic": [4, 6, 8, 138, 139, 151, 152, 153, 168, 169, 177, 190, 191, 193, 208, 219, 220, 221, 267, 280, 290, 301, 304, 305, 306, 309, 314, 322, 324, 328, 329, 330, 333], "controlateral_data": [4, 139, 152], "group_textur": 4, "group_data": [4, 138, 151], "n_sampl": [4, 6, 8, 15, 16, 17, 21, 22, 23, 65, 68, 72, 73, 75, 76, 77, 78, 138, 151, 164, 167, 168, 169, 177, 208, 276, 277, 279, 280, 289, 290, 309, 313, 314, 321, 322, 333, 338, 339], "neigh_ind": [4, 138, 151], "groupbi": [4, 138, 151], "n_neighbor": [4, 15, 16, 21, 22, 138, 151], "n_compon": [4, 138, 151], "30": [4, 8, 138, 151], "58": 4, "74": [4, 77, 78], "49": 4, "62": 4, "47": 4, "15": [4, 8, 77, 78], "99": [4, 8, 48, 57], "92": [4, 77, 78], "54": 4, "65": [4, 6, 77, 78], "31": 4, "14": 4, "78": 4, "90": [4, 77, 78], "76": 4, "93": 4, "21": [4, 77, 78], "70": 4, "22": [4, 9, 341], "46": 4, "89": [4, 6, 9, 341], "25": [4, 8, 77, 78], "82": 4, "11": [4, 5], "59": 4, "56": 4, "12": [4, 5, 106, 111, 302, 325], "19": 4, "13": [4, 7], "23": 4, "28": 4, "51": 4, "79": 4, "16": [4, 33, 38, 48, 57, 106, 111, 249, 250, 260, 261], "17": 4, "77": 4, "88": 4, "52": 4, "95": [4, 66, 70, 77, 78], "48": 4, "72": 4, "66": 4, "24": [4, 5, 106, 111], "69": 4, "86": 4, "26": [4, 77, 78], "27": [4, 77, 78], "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 33, 38, 106, 111, 180, 192, 193, 212, 213, 214, 221], "33": 4, "34": [4, 77, 78], "39": 4, "35": [4, 8], "37": 4, "38": 4, "45": [4, 309, 333], "71": 4, "40": [4, 6, 7, 8, 164, 167, 168, 169], "41": 4, "81": 4, "43": 4, "44": [4, 77, 78], "87": 4, "98": 4, "97": 4, "53": 4, "68": [4, 5, 9, 77, 78, 341], "55": [4, 77, 78], "57": 4, "61": [4, 77, 78], "94": [4, 66, 70], "67": 4, "75": [4, 77, 78], "84": 4, "85": [4, 77, 78], "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 137, 144, 155, 158, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "probabl": [4, 65, 68, 137, 138, 139, 151, 152, 153, 155, 157, 268], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "515": [4, 9, 341], "111": 4, "plot_augment": [4, 9, 341], "math": [5, 52, 55, 65, 68], "warn": [5, 33, 38, 48, 57, 58, 94], "scipi": [5, 65, 68, 267, 274, 287], "spatial": [5, 107, 108, 122, 123, 274, 287], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 265, 266], "ico2ico": [5, 10, 134, 269, 274, 277, 287, 339], "build": [5, 7, 48, 57, 58, 77, 78, 140, 141, 146, 147, 150, 160, 179, 204, 267, 302, 303, 308, 310, 311, 312, 323, 325, 326, 332, 335], "refer": [5, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 274, 277, 287, 288, 308, 320, 332, 339], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 58, 163, 311, 312], "freesurf": [5, 179, 204, 294, 299, 308, 311, 332], "try": [5, 15, 16, 19, 21, 22, 25, 267], "find": [5, 15, 16, 17, 19, 21, 22, 23, 25, 58, 74, 272, 274, 279, 282, 287, 289, 313, 316, 321, 323], "optim": [5, 8, 17, 23, 33, 38, 44, 45, 47, 48, 49, 57, 58], "rotat": [5, 143, 149, 274, 283, 287, 309, 317, 333], "modul": [5, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 66, 67, 69, 70, 84, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 134, 135, 136, 140, 146, 175, 176, 177, 178, 179, 180, 181, 190, 191, 192, 193, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "rmse": [5, 77, 78], "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 18, 24, 47, 49, 71, 267], "suppos": 5, "equal": [5, 48, 57, 65, 66, 68, 70, 75, 76], "zero": [5, 6, 47, 49, 75, 76, 107, 108, 122, 123, 141, 147, 181, 192, 193, 194, 214, 215, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 273, 286], "issu": [5, 61], "matric": [5, 267], "That": 5, "previou": 5, "algorithm": [5, 17, 23], "properli": 5, "correspond": [5, 15, 16, 18, 19, 21, 22, 24, 25, 48, 57, 72, 73, 138, 139, 151, 152, 272, 277, 304, 328, 339], "row": [5, 140, 141, 146, 147, 302, 325], "matrix": [5, 15, 16, 17, 21, 22, 23, 48, 57, 65, 66, 68, 70, 138, 151, 267], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": [5, 7, 9, 341], "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 242, 269], "togeth": [5, 268], "place": [5, 62], "comput": [5, 18, 19, 24, 25, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 64, 65, 66, 67, 68, 69, 70, 74, 77, 78, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 173, 178, 205, 206, 207, 209, 212, 222, 248, 249, 250, 259, 260, 261, 267, 283, 292, 309, 317, 318, 333], "small": [5, 47, 48, 49, 57, 105, 109], "subset": [5, 165, 166], "point": [5, 7, 73, 74, 77, 78, 279, 282, 285, 289, 302, 303, 308, 313, 316, 318, 319, 321, 323, 325, 326, 332], "both": [5, 33, 38, 47, 49, 51, 52, 53, 54, 55, 56, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 178, 205, 206, 207, 209, 250, 261, 302, 325], "absolut": [5, 16, 19, 22, 25, 58, 61, 77, 78], "valu": [5, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 57, 58, 66, 70, 72, 73, 77, 78, 83, 85, 98, 100, 140, 141, 146, 147, 165, 166, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 265, 266, 270, 271, 272, 289, 302, 321, 325], "sign": [5, 274, 287], "vertices_of_interest_norm": 5, "search": [5, 282, 302, 316, 325], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 52, 53, 55, 56, 107, 108, 122, 123], "sum": [5, 8], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 33, 38, 44, 45, 47, 49, 84, 102], "depend": [5, 48, 57], "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 33, 38, 48, 57, 69, 77, 78, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 267], "categori": 5, "userwarn": [5, 27, 28, 29, 30, 31], "format": [5, 8, 14, 20, 77, 78, 278, 294, 295, 299, 300], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 48, 57, 77, 78, 341], "simpli": [5, 48, 57], "solv": 5, "outlin": 5, "proper": [5, 27, 28, 30, 31], "anoth": 5, "half": 5, "clearli": 5, "appear": [5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": 5, "coord": [5, 10, 134, 271, 272, 273, 274, 275, 276, 277], "246": 5, "closest": [5, 283, 317], "9190925817849288": 5, "660": [5, 9, 341], "plot_match_icosahedron": [5, 9, 341], "convert": [6, 73, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 213, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 273, 276, 286, 338], "onto": [6, 177, 208, 276, 277, 338, 339], "spheric": [6, 9, 170, 171, 172, 174, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 211, 213, 214, 215, 216, 221, 223, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 249, 250, 253, 260, 261, 269, 270, 271, 273, 275, 276, 285, 286, 302, 319, 325, 337, 338, 341], "evenli": [6, 276, 338], "resampl": [6, 276, 338], "respect": [6, 253, 276, 338], "sin": [6, 276, 338], "elev": [6, 171, 172, 175, 176, 181, 193, 194, 217, 218, 221, 223, 232, 253, 270, 271, 275, 276, 337, 338], "azimuth": [6, 171, 172, 175, 176, 181, 193, 194, 217, 218, 221, 223, 232, 253, 270, 271, 275, 276, 337, 338], "vice": 6, "versa": 6, "dataset": [6, 10, 15, 16, 21, 22, 27, 28, 29, 30, 31, 58, 134, 164, 165, 166, 167, 168, 169, 264, 276, 277, 280, 289, 290, 309, 314, 321, 322, 333, 338, 339], "ico_ord": [6, 8, 140, 141, 146, 147, 165, 166], "n_class": [6, 8, 164, 167, 168, 169, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 276, 277, 280, 289, 290, 309, 314, 321, 322, 333, 338, 339], "ico_vertic": [6, 8, 164, 167, 168, 169], "ico_triangl": [6, 8], "_": [6, 47, 49, 65, 68, 246, 247, 257, 258, 268, 296, 298], "make_classif": [6, 8, 10, 134, 163, 168, 169, 276, 277, 280, 289, 290, 309, 314, 321, 322, 333, 338, 339], "seed": [6, 8, 44, 45, 47, 49, 164, 167, 168, 169, 276, 277, 280, 289, 290, 309, 314, 321, 322, 333, 338, 339], "proj_textur": 6, "text2grid": [6, 10, 134, 269, 270, 271, 273, 275, 276, 286, 337, 338], "proj": [6, 273, 276, 286, 338], "lower": [6, 280, 311, 314], "nearest": [6, 15, 16, 21, 22, 138, 151, 192, 214, 215, 273, 276, 279, 286, 289, 313, 321, 338], "192": [6, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 213, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 273, 276, 286, 338], "text": [6, 7, 47, 49, 65, 66, 68, 70, 77, 78, 82, 90, 95, 96, 97], "grid2text": [6, 10, 134, 269, 270, 271, 273, 275, 276, 286, 337, 338], "is_label": [6, 8, 265, 266, 273, 277, 280, 286, 289, 290, 309, 314, 321, 322, 333, 339], "enabl": [6, 33, 38, 44, 45, 47, 49, 58, 83, 85], "scatter_dens": 6, "y": [6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 48, 57, 66, 70, 168, 169, 267, 270, 271, 273, 275, 276, 277, 280, 286, 289, 290, 309, 314, 321, 322, 333, 337, 338, 339], "labelx": 6, "labe": 6, "scatter": [6, 7, 279, 282, 302, 303, 308, 313, 316, 325, 326, 332], "densiti": [6, 65, 68, 285, 303, 319, 326], "left": [6, 47, 49, 65, 66, 68, 70, 171, 172, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 293], "width": [6, 107, 108, 122, 123, 265, 266], "bottom": 6, "height": [6, 222], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 47, 49, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254, 276, 302, 325, 338], "top": [6, 15, 16, 17, 19, 21, 22, 23, 25, 47, 49], "right": [6, 47, 49, 65, 66, 68, 70, 171, 172, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 293], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": 6, "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 270, 271, 275, 337], "cart2sph": [6, 10, 134, 269, 270, 271, 275, 337], "sin_elev": 6, "circularli": [6, 253], "continu": [6, 48, 57, 66, 70, 72, 73, 253], "circular": [6, 249, 250, 253, 260, 261], "pad": [6, 127, 192, 214, 215, 244, 249, 250, 253, 255, 260, 261], "boundari": [6, 253], "expand_dim": 6, "astyp": 6, "float32": 6, "from_numpi": 6, "pad_textur": 6, "circular_pad": [6, 10, 134, 242, 253], "padd": 6, "conv": [6, 107, 108, 115, 122, 123, 180, 192, 210, 211, 212, 213, 214, 215, 216, 243, 254], "conv2d": [6, 222], "in_channel": [6, 8, 48, 57, 105, 106, 107, 108, 109, 111, 122, 123, 180, 192, 212, 213, 214], "out_channel": [6, 8, 180, 192, 212, 213, 214], "stride": [6, 107, 108, 120, 121, 122, 123, 126, 127, 249, 250, 260, 261], "conv_textur": 6, "194": [6, 181, 182, 183, 184, 185, 186, 187, 188, 189, 223, 224, 225, 226, 227, 228, 229, 230, 231, 249, 260], "792": [6, 9, 341], "plot_project_textur": [6, 9, 341], "get_rectangular_project": [7, 10, 134, 269, 285, 319], "depth": [7, 8, 108, 119, 123, 125, 129, 131, 133, 177, 180, 192, 208, 209, 212, 213, 214, 243, 245, 246, 247, 251, 254, 256, 257, 258, 262, 282, 301, 302, 305, 316, 324, 325, 329], "vidx": 7, "cnt": [7, 279, 282, 302, 303, 308, 313, 316, 325, 326, 332], "enumer": [7, 8, 279, 282, 302, 303, 308, 313, 316, 325, 326, 332], "marker": [7, 279, 282, 302, 303, 308, 313, 316, 325, 326, 332], "str": [7, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 61, 65, 66, 68, 70, 72, 77, 78, 84, 99, 101, 102, 124, 125, 138, 140, 141, 143, 146, 147, 149, 151, 165, 166, 175, 176, 177, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 214, 215, 217, 218, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 247, 258, 267, 278, 283, 292, 293, 294, 295, 297, 299, 300, 309, 311, 312, 317, 333, 336], "3x3": [7, 107, 108, 122, 123, 127, 180, 192, 213, 214], "rectangular": [7, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 285, 303, 319, 326], "sphere": [7, 210, 215, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 285, 303, 307, 318, 319, 323, 326, 327, 331], "zoom": [7, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 259, 282, 285, 303, 316, 319, 326], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": 7, "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 33, 38, 141, 147, 243, 254, 282, 285, 316, 319, 335], "node_rec_neigh": 7, "node_tplane_neigh": 7, "196": [7, 9, 341], "plot_spherical_neighbor": [7, 9, 341], "sphericalunet": [8, 10, 134, 174, 180, 192, 212, 213, 214], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 134, 135, 136, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 208, 213, 214, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 265, 266, 273, 276, 286, 293, 294, 295, 296, 299, 300, 302, 325, 338, 340], "crossentropi": 8, "sgd": [8, 48, 57], "obviou": 8, "classificationdataset": [8, 10, 134, 163, 164, 167], "in_ord": [8, 192, 214], "start_filt": [8, 180, 192, 213, 214], "conv_mod": [8, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "dine": [8, 140, 141, 146, 147, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254, 302, 325], "dine_s": [8, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "up_mod": [8, 192, 214, 215], "transpos": [8, 180, 192, 213, 214, 215, 245, 250, 251, 256, 261, 262], "loss_fn": 8, "crossentropyloss": 8, "momentum": [8, 48, 57], "n_batch": 8, "zero_grad": 8, "backward": [8, 48, 57, 72, 73], "current": [8, 33, 38, 44, 45, 47, 48, 49, 57, 59, 60, 62], "item": [8, 292], "7f": 8, "5d": 8, "eval": [8, 33, 38, 44, 45, 47, 49], "test_loss": 8, "correct": [8, 72, 73, 77, 78], "y_pred": [8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 72, 73, 75, 76, 77, 78], "no_grad": 8, "logit": [8, 64, 67], "softmax": [8, 47, 49], "type": [8, 14, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 57, 58, 59, 72, 73, 74, 107, 108, 122, 123, 143, 149, 150, 160, 192, 214, 215, 247, 258, 283, 302, 309, 317, 325, 333], "append": [8, 18, 24, 33, 38], "concaten": [8, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "error": [8, 16, 19, 22, 25, 33, 38, 44, 45, 77, 78, 98, 101, 267, 291], "n": [8, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 66, 70, 84, 102, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 159, 164, 167, 168, 169, 173, 177, 208, 243, 245, 248, 254, 256, 259, 265, 266, 272, 273, 274, 276, 277, 281, 282, 283, 286, 287, 288, 294, 295, 299, 300, 302, 303, 307, 309, 315, 316, 317, 320, 325, 326, 331, 333, 334, 335, 338, 339], "1f": 8, "avg": 8, "8f": 8, "247491": 8, "036874": 8, "901579": 8, "771230": 8, "667302": 8, "569210": 8, "474525": 8, "399645": 8, "004355": 8, "004450": 8, "004772": 8, "004704": 8, "004043": 8, "003102": 8, "002376": 8, "002160": 8, "000115": 8, "000118": 8, "000122": 8, "000126": 8, "000128": 8, "000129": 8, "000043": 8, "000042": 8, "000040": 8, "000038": 8, "000036": 8, "000034": 8, "000032": 8, "000007": 8, "corresspond": 8, "exactli": 8, "ground": [8, 72, 73, 77, 78], "truth": [8, 72, 73, 77, 78], "380": [8, 9, 341], "295": [8, 9, 341], "plot_unet_segment": [8, 9, 341], "644": [9, 341], "110": [9, 341], "02": [9, 341], "pleas": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "detail": [10, 15, 17, 21, 23, 64, 67, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "raw": [10, 293, 296, 298], "mai": [10, 33, 38, 267], "enough": 10, "guidelin": 10, "deep": [10, 12, 47, 48, 49, 57, 340], "neuroimag": [10, 12, 27, 28, 29, 30, 31, 165, 166, 193, 221], "metric": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 72, 73, 74, 75, 76, 77, 78, 134, 138, 151], "variou": [10, 82, 222], "help": [10, 33, 38, 82], "develop": [10, 11, 82], "volum": [10, 48, 57, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 293, 298, 340], "definit": [10, 58, 65, 68, 103, 104, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 289, 321], "backbon": [10, 48, 57, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 178, 205], "link": 10, "plugin": 10, "helper": [10, 135], "integr": [10, 66, 70, 74, 135, 212], "pytorch": [10, 33, 38, 44, 45, 47, 48, 49, 57, 135, 175, 176, 190, 191, 217, 218, 219, 220, 278, 340], "artifici": [10, 163], "dedic": [10, 242], "content": [10, 27, 30], "fetch_experi": [10, 12, 58, 134], "filter_config": [10, 12, 59, 134], "get_env": [10, 12, 60, 134], "load_interfac": [10, 12, 61, 134], "update_param": [10, 12, 62, 134], "batchtypingcallback": [10, 13, 14, 20, 33, 38, 134], "kneighborsclassifiercvcallback": [10, 13, 15, 21, 134], "kneighborsregressorcvcallback": [10, 13, 16, 22, 134], "logisticregressioncvcallback": [10, 13, 17, 23, 134], "modelprob": [10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 134], "ridgecvcallback": [10, 13, 19, 25, 134], "model_prob": [10, 21, 22, 23, 24, 25, 134], "check_typ": [10, 20, 134], "baseimagedataset": [10, 26, 27, 30, 134], "basenumpydataset": [10, 26, 28, 31, 134], "basedataset": [10, 26, 27, 28, 29, 30, 31, 134], "baseestim": [10, 18, 24, 32, 33, 38, 44, 45, 47, 48, 49, 57, 65, 68, 134], "classifiermixin": [10, 32, 34, 39, 44, 45, 134], "clustermixin": [10, 32, 35, 40, 134], "regressormixin": [10, 32, 36, 41, 134], "transformermixin": [10, 18, 24, 32, 37, 42, 47, 48, 49, 57, 134], "logistic_regress": [10, 45, 134], "yawarecontrastivelearn": [10, 46, 48, 57, 134], "yawar": [10, 53, 56, 57, 134], "projectionhead": [10, 50, 51, 52, 53, 54, 55, 56, 134], "simclrprojectionhead": [10, 50, 52, 55, 134], "yawareprojectionhead": [10, 48, 50, 53, 56, 57, 134], "projection_head": [10, 48, 51, 54, 55, 56, 57, 134], "infonc": [10, 44, 45, 47, 48, 49, 57, 64, 66, 67, 70, 134], "kernelmetr": [10, 48, 57, 63, 65, 66, 68, 70, 134], "yawareinfonc": [10, 48, 57, 63, 66, 70, 134], "yaware_infonc": [10, 48, 57, 68, 69, 70, 134], "pairwisecosinesimilar": [10, 63, 69, 134], "pearson_r": [10, 71, 75, 76, 134], "regression_report": [10, 71, 77, 78, 134], "_regress": [10, 72, 73, 74, 134], "_check_reg_target": [10, 71, 72, 73, 134], "_check_reg_targets_with_floating_dtyp": [10, 71, 72, 73, 134], "_find_matching_floating_dtyp": [10, 71, 72, 73, 74, 134], "regress": [10, 16, 17, 18, 19, 22, 23, 24, 25, 33, 36, 38, 41, 44, 45, 72, 73, 76, 77, 78, 134], "bunch": [10, 58, 83, 85, 134], "print_multicolor": [10, 82, 90, 97, 134], "attr": [10, 82, 87, 99, 134], "fg": [10, 82, 88, 134], "hex": [10, 82, 89, 134], "print_result": [10, 82, 91, 134], "print_subtitl": [10, 82, 92, 134], "print_titl": [10, 82, 93, 134], "print_warn": [10, 82, 94, 134], "random_styl": [10, 82, 95, 134], "styliz": [10, 82, 96, 134], "_availableifdescriptor": [10, 82, 98, 134], "_estimator_i": [10, 82, 99, 134], "available_if": [10, 82, 100, 134], "check_is_fit": [10, 82, 101, 134], "alexnet": [10, 104, 105, 109, 134], "densenet": [10, 104, 106, 110, 111, 117, 134], "resnettrunc": [10, 104, 108, 123, 134], "densenet121": [10, 104, 110, 117, 134], "resnet18_trunc": [10, 104, 119, 129, 134], "resnet50": [10, 104, 107, 108, 122, 123, 130, 132, 134], "resnet50_trunc": [10, 104, 131, 133, 134], "densenet3d": [10, 111, 112, 113, 114, 115, 116, 117, 134], "_denseblock": [10, 104, 112, 134], "_denselay": [10, 104, 113, 134], "_transit": [10, 104, 114, 134], "_bn_function_factori": [10, 104, 115, 134], "_densenet": [10, 104, 116, 134], "alexnet3d": [10, 109, 134], "resnet3d": [10, 48, 57, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134], "basicblock": [10, 104, 107, 108, 120, 122, 123, 134], "bottleneck": [10, 104, 106, 107, 108, 111, 121, 122, 123, 134], "_resnet": [10, 104, 124, 134], "_resnet_trunc": [10, 104, 125, 134], "conv1x1": [10, 104, 126, 134], "conv3x3": [10, 104, 127, 134], "preprocess": [10, 134, 267], "standardscal": [10, 134, 135, 267], "randomcompos": [10, 134, 135, 268], "basetransform": [10, 134, 136, 137, 144, 145, 155, 158, 159], "groupmixup": [10, 134, 136, 138, 151], "hemimixup": [10, 134, 136, 139, 152], "surfblur": [10, 134, 136, 140, 146], "surfcutout": [10, 134, 136, 141, 147], "surfnois": [10, 134, 136, 142, 148], "surfrot": [10, 134, 136, 143, 149], "apply_chained_transform": [10, 134, 136, 145, 159], "multichannel_augment": [10, 134, 136, 154, 162], "mixup": [10, 134, 151, 152, 153], "mixupaugment": [10, 134, 136, 138, 139, 151, 152, 153], "randomaugment": [10, 134, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 153, 154, 155, 156, 162], "listifi": [10, 134, 136, 161], "genericsurfdataset": [10, 134, 163, 165, 166], "_samples_gener": [10, 134, 167, 168], "_gener": [10, 134, 166], "sphericalvaeloss": [10, 134, 170, 171, 172], "vae": [10, 134, 171, 172, 173, 193, 217, 218, 219, 220, 221, 222], "log_likelihood": [10, 134, 170, 173], "hemifusiondecod": [10, 134, 174, 175, 217], "hemifusionencod": [10, 134, 174, 176, 218], "sit": [10, 134, 177, 206, 207, 208, 209], "sphericalbas": [10, 134, 174, 179, 190, 191, 192, 194, 204, 214, 219, 220, 232], "sphericalgunet": [10, 134, 174, 180, 192, 212, 213, 214], "sphericalgvgg": [10, 134, 174, 181, 194, 223, 232], "sphericalgvgg11": [10, 134, 174, 181, 182, 223, 224], "sphericalgvgg11bn": [10, 134, 174, 183, 225], "sphericalgvgg13": [10, 134, 174, 184, 226], "sphericalgvgg13bn": [10, 134, 174, 185, 227], "sphericalgvgg16": [10, 134, 174, 186, 228], "sphericalgvgg16bn": [10, 134, 174, 187, 229], "sphericalgvgg19": [10, 134, 174, 188, 230], "sphericalgvgg19bn": [10, 134, 174, 189, 231], "sphericalhemifusiondecod": [10, 134, 174, 190, 219], "sphericalhemifusionencod": [10, 134, 174, 191, 220], "sphericalva": [10, 134, 174, 193, 221], "sphericalvgg": [10, 134, 174, 181, 194, 223, 232], "sphericalvgg11": [10, 134, 174, 194, 195, 232, 233], "sphericalvgg11bn": [10, 134, 174, 196, 234], "sphericalvgg13": [10, 134, 174, 197, 235], "sphericalvgg13bn": [10, 134, 174, 198, 236], "sphericalvgg16": [10, 134, 174, 199, 237], "sphericalvgg16bn": [10, 134, 174, 200, 238], "sphericalvgg19": [10, 134, 174, 201, 239], "sphericalvgg19bn": [10, 134, 174, 202, 240], "ico": [10, 134, 140, 141, 146, 147, 165, 166, 174, 179, 203, 204, 243, 254], "attent": [10, 134, 174, 177, 206, 208], "feedforward": [10, 134, 174, 207], "compute_output_dim": [10, 134, 174, 222], "vgg": [10, 134, 181, 194, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "class_factori": [10, 134, 174, 241], "downblock": [10, 134, 174, 210], "downgblock": [10, 134, 174, 211], "graphicalunet": [10, 134, 174, 212], "upblock": [10, 134, 174, 215], "upgblock": [10, 134, 174, 216], "icodineconv": [10, 134, 140, 146, 242, 243, 248, 249, 254, 259, 260], "icofixindexupsampl": [10, 134, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 261, 262, 263], "icogenericupconv": [10, 134, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 261, 262, 263], "icomaxindexupsampl": [10, 134, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 261, 262, 263], "icopool": [10, 134, 242, 246, 247, 257, 258], "icorepaconv": [10, 134, 242, 243, 248, 249, 254, 259, 260], "icospmaconv": [10, 134, 222, 242, 243, 248, 249, 254, 259, 260], "icospmaconvtranspos": [10, 134, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 261, 262, 263], "icoupconv": [10, 134, 242, 244, 245, 246, 251, 252, 255, 256, 257, 262, 263], "icoupsampl": [10, 134, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 261, 262, 263], "debug_msg": [10, 134, 269, 278], "downsampl": [10, 120, 121, 134, 165, 166, 179, 204, 210, 211, 215, 245, 246, 247, 251, 256, 257, 258, 262, 269, 279, 280, 281, 289, 290, 311, 313, 314, 315, 321, 322], "downsample_data": [10, 134, 269, 279, 280, 281, 289, 290, 313, 314, 315, 321, 322], "downsample_ico": [10, 134, 269, 279, 280, 281, 289, 290, 313, 314, 315, 321, 322], "find_neighbor": [10, 134, 269, 282, 316], "find_rotation_interpol_coef": [10, 134, 269, 283, 307, 317, 331], "get_logg": [10, 134, 269, 284], "interpol": [10, 134, 143, 149, 192, 214, 215, 244, 252, 255, 263, 265, 266, 269, 273, 276, 279, 280, 281, 283, 286, 289, 290, 307, 309, 313, 314, 315, 317, 321, 322, 331, 333, 338], "interpolate_data": [10, 134, 269, 279, 280, 281, 289, 290, 313, 314, 315, 321, 322], "neighbors_rec": [10, 134, 248, 259, 269, 282, 302, 303, 316, 325, 326], "number_of_ico_vertic": [10, 134, 269, 304, 306, 328, 330], "number_of_neighbor": [10, 134, 269, 301, 305, 324, 329], "order_of_ico_from_vertic": [10, 134, 269, 304, 306, 328, 330], "order_triangl": [10, 134, 269, 307, 331], "patch_tri": [10, 134, 269, 308, 310, 332], "rotate_data": [10, 134, 143, 149, 269, 283, 309, 317, 333], "setup_log": [10, 134, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 336], "sph2cart": [10, 134, 269, 270, 271, 275, 337], "text2ico": [10, 134, 269, 274, 277, 287, 339], "hideprint": [10, 134, 269, 291], "compute_and_stor": [10, 134, 269, 292], "decompose_cifti": [10, 134, 269, 293], "read_freesurf": [10, 134, 269, 294], "read_gifti": [10, 134, 269, 295], "surf_data_from_cifti": [10, 134, 269, 296], "ungzip": [10, 134, 269, 297], "volume_from_cifti": [10, 134, 269, 298], "write_freesurf": [10, 134, 269, 299], "write_gifti": [10, 134, 269, 300], "find_corresponding_ord": [10, 134, 269, 272], "_patch_tri_it": [10, 134, 269, 310], "build_freesurfer_ico": [10, 134, 269, 311], "build_fslr_ref": [10, 134, 269, 312], "get_angle_with_xaxi": [10, 134, 269, 318], "middle_point": [10, 134, 269, 323], "triangles_to_edg": [10, 134, 269, 334], "vertex_adjacency_graph": [10, 134, 269, 335], "walk": 11, "intal": 11, "offici": [11, 74], "releas": 11, "best": [11, 15, 16, 17, 19, 21, 22, 23, 25, 58, 274, 287], "user": [11, 15, 17, 21, 23, 33, 38, 59, 180, 192, 213, 214, 267, 309, 333], "who": 11, "latest": [11, 71, 74], "contribut": 11, "without": [11, 48, 57, 297], "privileg": 11, "pip": 11, "git": 11, "repositori": [11, 84, 102], "github": [11, 174, 296, 298], "com": [11, 174], "deepinsight": 11, "page": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "document": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "explain": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "signatur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "big": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "pictur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "rais": [14, 18, 20, 24, 27, 28, 29, 30, 31, 98, 100, 101, 267], "typeerror": [14, 20, 101], "annot": [14, 20], "traiterror": [14, 20], "incorrect": [14, 20], "notimplementederror": [14, 20], "handl": [14, 20, 48, 57, 84, 102], "on_predict_batch_start": [14, 20], "trainer": [14, 18, 20, 24, 33, 38, 44, 45, 47, 48, 49, 57], "pl_modul": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "batch_idx": [14, 20, 33, 38, 44, 45, 47, 48, 49, 57], "dataloader_idx": [14, 20, 33, 38, 44, 45, 47, 48, 49, 57], "begin": [14, 18, 20, 24], "on_test_batch_start": [14, 20], "on_train_batch_start": [14, 20], "train": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 80, 81, 136, 165, 166], "on_validation_batch_start": [14, 20], "train_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 48, 57], "test_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38], "probe_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "tupl": [15, 16, 18, 19, 21, 22, 24, 25, 44, 45, 47, 48, 49, 51, 54, 57, 58, 59, 84, 102, 106, 107, 111, 122, 124, 125, 156, 157, 161, 203, 249, 250, 253, 260, 261], "cv": [15, 16, 17, 19, 21, 22, 23, 25, 58, 62], "n_job": [15, 16, 17, 21, 22, 23, 308, 332], "score": [15, 16, 17, 19, 21, 22, 23, 25, 75, 76, 77, 78], "balanced_accuraci": [15, 17, 21, 23], "knn": [15, 16, 18, 21, 22, 24], "embed": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 48, 57, 64, 66, 67, 70, 105, 106, 107, 108, 109, 111, 122, 123, 177, 208], "concret": [15, 16, 17, 19, 21, 22, 23, 25, 65, 68], "emb": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "fold": [15, 16, 17, 19, 21, 22, 23, 25], "log": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 57, 66, 70, 171, 172, 173, 177, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 212, 213, 214, 221, 223, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 284, 336], "main": [15, 16, 17, 19, 21, 22, 23, 25, 77, 78], "averag": [15, 16, 17, 19, 21, 22, 23, 25, 75, 76, 77, 78], "across": [15, 17, 21, 23, 33, 38, 77, 78, 138, 139, 151, 152, 177, 208], "support": [15, 17, 21, 23, 33, 38, 44, 45, 47, 49], "unweight": [15, 17, 21, 23], "precis": [15, 17, 21, 23, 33, 38, 48, 57, 74], "recal": [15, 17, 21, 23], "f1": [15, 17, 21, 23], "guid": [15, 17, 21, 23, 267], "report": [15, 17, 21, 23, 77, 78], "yield": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "form": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58, 84, 102, 138, 151], "probe": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58], "default": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 101, 102, 105, 106, 107, 108, 109, 111, 122, 123, 137, 138, 140, 141, 143, 146, 147, 149, 150, 151, 154, 155, 160, 162, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 247, 249, 250, 254, 258, 260, 261, 265, 266, 267, 272, 276, 277, 280, 281, 283, 285, 288, 290, 291, 292, 293, 302, 303, 304, 307, 308, 309, 311, 312, 314, 315, 317, 319, 320, 322, 325, 326, 328, 331, 332, 333, 336, 338, 339], "metric_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "cross": [15, 16, 17, 19, 21, 22, 23, 25, 58, 62, 64, 67, 249, 250, 260, 261], "hyper": [15, 16, 17, 19, 21, 22, 23, 25], "job": [15, 16, 17, 21, 22, 23, 308, 332], "parallel": [15, 16, 17, 21, 22, 23], "unless": [15, 16, 17, 21, 22, 23], "joblib": [15, 16, 17, 21, 22, 23], "parallel_backend": [15, 16, 17, 21, 22, 23], "context": [15, 16, 17, 21, 22, 23, 291], "processor": [15, 16, 17, 21, 22, 23], "complet": [15, 16, 17, 19, 21, 22, 23, 25, 291, 292], "list": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 51, 54, 57, 58, 62, 65, 66, 68, 70, 72, 138, 145, 151, 159, 161, 164, 165, 166, 167, 168, 169, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 280, 281, 282, 289, 290, 314, 315, 316, 321, 322, 334], "option": [15, 16, 17, 19, 21, 22, 23, 25, 48, 51, 54, 57, 66, 70, 75, 76, 77, 78, 140, 141, 146, 147, 171, 172, 175, 176, 179, 190, 191, 204, 217, 218, 219, 220, 265, 266, 267, 280, 281, 288, 290, 291, 307, 308, 314, 315, 320, 322, 331, 332], "scikit": [15, 16, 17, 19, 21, 22, 23, 25, 71], "org": [15, 16, 17, 19, 21, 22, 23, 25, 52, 53, 55, 56, 64, 67, 74, 98, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 296, 298], "model_evalu": [15, 16, 17, 19, 21, 22, 23, 25], "html": [15, 16, 17, 19, 21, 22, 23, 25, 74, 98], "dict": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 59, 60, 61, 62, 77, 78, 83, 85, 140, 141, 146, 147, 165, 166, 179, 204, 241, 268, 282, 283, 302, 316, 317, 325], "addit": [15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 48, 49, 57, 180, 192, 213, 214, 243, 254], "keyword": [15, 16, 17, 19, 21, 22, 23, 25, 48, 57, 72, 73], "argument": [15, 16, 17, 19, 21, 22, 23, 25, 48, 57, 61, 72, 73, 101, 292, 309, 333], "pass": [15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 48, 51, 54, 57, 69, 72, 100, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 267], "constructor": [15, 16, 17, 19, 21, 22, 23, 25], "every_n_train_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "every_n_val_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "prog_bar": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38], "k": [15, 16, 21, 22, 47, 49, 65, 66, 68, 70, 106, 111, 138, 151, 243, 248, 254, 259, 277, 339], "spars": [15, 16, 17, 21, 22, 23, 267], "n_featur": [15, 16, 17, 21, 22, 23, 48, 57, 64, 65, 66, 67, 68, 70, 280, 290, 309, 314, 322, 333], "precomput": [15, 21], "n_output": [15, 16, 21, 22, 72, 73, 75, 76, 77, 78], "target": [15, 16, 17, 21, 22, 23, 27, 28, 29, 30, 31, 72, 73, 77, 78, 165, 166, 274, 277, 287, 339], "log_metr": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "y_true": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 72, 73, 75, 76, 77, 78], "new": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 47, 49, 65, 68, 84, 102, 137, 155, 156, 157, 203, 244, 255, 267], "r2": [16, 19, 22, 25, 77, 78], "regressor": [16, 19, 22, 25, 36, 41, 77, 78, 105, 109], "median": [16, 19, 22, 25, 77, 78], "squar": [16, 19, 22, 25, 77, 78, 175, 217, 222], "r\u00b2": [16, 19, 22, 25], "pearson": [16, 22, 75, 76, 77, 78], "correl": [16, 22, 75, 76, 77, 78, 249, 250, 260, 261], "coeffici": [16, 22, 75, 76, 77, 78, 283, 317], "varianc": [16, 19, 22, 25, 75, 76, 77, 78, 267], "regular": [16, 17, 19, 22, 23, 25, 48, 57, 289, 321], "strength": [16, 17, 19, 22, 23, 25], "ridg": [16, 18, 19, 22, 24, 25], "neg_mean_absolute_error": [16, 19, 22, 25], "neg_mean_squared_error": [16, 19, 22, 25], "max_it": [17, 23], "linear_solv": [17, 23], "lbfg": [17, 23, 48, 57], "logist": [17, 18, 23, 24, 44, 45], "l2": [17, 19, 23, 25], "invers": [17, 23, 64, 67], "grid": [17, 23, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 213, 214, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 273, 276, 285, 286, 303, 319, 326, 338], "logarithm": [17, 23], "1e4": [17, 23], "machin": [17, 23, 58, 84, 102], "specifi": [17, 23, 27, 28, 29, 30, 31, 33, 38, 48, 57, 58, 61, 66, 70, 84, 102, 137, 140, 141, 146, 147, 155, 165, 166, 265, 266, 280, 281, 290, 314, 315, 322], "strenght": [17, 23], "maximum": [17, 23, 47, 49, 265, 266, 308, 332], "taken": [17, 23], "solver": [17, 23], "converg": [17, 23, 47, 49], "liblinear": [17, 23], "newton": [17, 23], "cg": [17, 23], "choleski": [17, 23], "sag": [17, 23], "saga": [17, 23], "problem": [17, 23, 168, 169, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "accord": [17, 23, 107, 108, 122, 123, 302, 325], "on_test_epoch_start": [18, 24], "bool": [18, 24, 33, 38, 75, 76, 77, 78, 84, 99, 102, 106, 107, 108, 111, 122, 123, 137, 154, 155, 162, 165, 166, 171, 172, 175, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 211, 212, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 254, 265, 266, 267, 288, 291, 293, 302, 307, 308, 320, 325, 331, 332], "on_test_epoch_end": [18, 24], "abc": [18, 24], "basic": [18, 24], "logic": [18, 24, 33, 38, 44, 45], "transform_step": [18, 24, 33, 38, 47, 48, 49, 57], "abstract": [18, 24, 33, 38], "should": [18, 24, 33, 38, 44, 45, 48, 57, 69, 75, 76, 84, 100, 102, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 267], "inherit": [18, 24, 33, 38, 58], "disabl": [18, 24, 33, 38, 44, 45, 47, 49], "progress": [18, 24, 33, 38, 44, 45, 47, 48, 49, 57], "bar": [18, 24, 33, 38, 44, 45, 47, 49], "extract_featur": [18, 24], "extract": [18, 24, 47, 48, 49, 57, 297], "By": [18, 24, 33, 38, 44, 45, 48, 57], "linear_prob": [18, 24], "valueerror": [18, 24], "on_train_epoch_end": [18, 24], "access": [18, 24, 83, 85, 241, 292], "cach": [18, 24, 44, 45, 84, 102, 140, 141, 143, 146, 147, 149, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 292], "attribut": [18, 24, 33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 62, 83, 85, 86, 87, 100, 101], "core": [18, 24, 33, 38, 44, 45], "lightningmodul": [18, 24, 33, 38, 48, 57], "them": [18, 24, 48, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 144, 158, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 267, 292, 335], "hook": [18, 24, 33, 38, 48, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "mylightningmodul": [18, 24], "l": [18, 24], "super": [18, 24, 33, 38, 44, 45, 47, 49], "training_step_output": [18, 24], "training_step": [18, 24, 33, 38, 44, 45, 47, 48, 49, 57], "mycallback": [18, 24], "someth": [18, 24], "epoch_mean": [18, 24], "training_epoch_mean": [18, 24], "free": [18, 24], "on_validation_epoch_end": [18, 24, 44, 45], "val": [18, 24, 33, 38], "pearsonr": [19, 25, 77, 78], "multipl": [19, 25, 33, 38, 44, 45, 47, 48, 49, 57, 58, 59, 75, 76, 106, 111, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "multivari": [19, 25], "channel": [27, 28, 29, 30, 31, 105, 106, 107, 108, 109, 111, 122, 123, 137, 154, 155, 162, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263], "subject_in_pattern": [27, 30, 165, 166], "target_map": [27, 28, 29, 30, 31, 165, 166], "mask": [27, 28, 29, 30, 31, 153, 165, 166, 171, 172, 267], "withdraw_subject": [27, 28, 29, 30, 31, 165, 166], "scalabl": [27, 30, 33, 38, 165, 166], "locat": [27, 28, 29, 30, 31, 84, 102, 165, 166, 297], "store": [27, 28, 29, 30, 31, 47, 49, 165, 166, 292, 293, 294, 295, 309, 333], "folder": [27, 30, 143, 149, 165, 166, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "level": [27, 30, 165, 166, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 336], "subject": [27, 28, 29, 30, 31, 138, 139, 151, 152, 165, 166, 267], "identifi": [27, 30, 165, 166, 274, 287], "retriev": [27, 30, 84, 102, 165, 166], "tabular": [27, 28, 29, 30, 31, 165, 166], "optionali": [27, 28, 29, 30, 31, 44, 45, 47, 49, 165, 166, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "dictionari": [27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 77, 78, 83, 85, 86, 140, 141, 146, 147, 165, 166, 302, 325], "replac": [27, 28, 29, 30, 31, 62, 75, 76, 105, 107, 108, 109, 122, 123, 141, 147, 165, 166, 180, 192, 213, 214], "exist": [27, 28, 29, 30, 31, 84, 102, 165, 166, 267, 311, 312], "panda": [27, 28, 29, 30, 31, 138, 151, 165, 166], "datafram": [27, 28, 29, 30, 31, 138, 151, 165, 166], "callabl": [27, 28, 29, 30, 31, 33, 38, 100, 165, 166, 292], "optionnali": [27, 28, 29, 30, 31, 44, 45, 47, 49, 140, 141, 146, 147, 154, 162, 165, 166], "remov": [27, 28, 29, 30, 31, 47, 49, 165, 166, 267], "filenotfounderror": [27, 28, 29, 30, 31], "mandatorri": [27, 28, 29, 30, 31], "keyerror": [27, 28, 29, 30, 31], "mandatori": [27, 28, 29, 30, 31, 268], "kei": [27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 58, 83, 85, 140, 141, 146, 147, 179, 204, 268, 302, 325], "miss": [27, 28, 29, 30, 31, 289, 321], "particip": [27, 28, 29, 30, 31, 165, 166], "tsv": [27, 28, 29, 30, 31, 165, 166], "request": [27, 28, 29, 30, 31, 165, 166, 174, 267], "conta": [27, 28, 29, 30, 31, 165, 166], "idea": [27, 30], "your": [27, 29, 30, 33, 38, 48, 57, 58, 84, 95, 96, 102, 340], "rather": [27, 30], "symlink": [27, 30], "aggreg": [27, 30, 75, 76], "enforc": [27, 30, 48, 57], "reproduc": [27, 30, 33, 38, 44, 45, 47, 49], "persist": [27, 30], "get_checksum": [27, 30], "hash": [27, 30, 84, 102], "get_data": [27, 28, 30, 31], "index": [27, 28, 30, 31, 33, 38, 44, 45, 47, 48, 49, 57, 77, 78, 140, 141, 146, 147, 279, 282, 302, 313, 316, 325, 334], "val_check_interv": [33, 38], "min_epoch": [33, 38], "max_step": [33, 38, 48, 57], "min_step": [33, 38], "enable_checkpoint": [33, 38], "enable_progress_bar": [33, 38], "enable_model_summari": [33, 38], "strategi": [33, 38, 44, 45, 177, 208], "num_nod": [33, 38], "liter": [33, 38], "engin": [33, 38], "float16": [33, 38], "mix": [33, 38], "bf16": [33, 38], "sequenc": [33, 38, 44, 45, 47, 49, 137, 144, 155, 158, 177, 208], "design": [33, 38, 58], "lightn": [33, 38, 48, 57, 340], "interfac": [33, 38, 58, 59, 61, 62, 65, 68, 340], "multi": [33, 38, 44, 45, 47, 49, 154, 162, 177, 208], "capabl": [33, 38], "basicali": [33, 38], "child": [33, 38, 58, 154, 162], "mixin": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "add": [33, 38, 44, 45, 60, 106, 111, 142, 148, 250, 261], "loop": [33, 38], "integ": [33, 38], "often": [33, 38, 48, 57], "fraction": [33, 38], "fix": [33, 38, 244, 255, 265, 266, 327], "onc": [33, 38], "reach": [33, 38], "infinit": [33, 38], "forc": [33, 38, 84, 102], "least": [33, 38], "checkpoint": [33, 38, 106, 111], "configur": [33, 38, 48, 57, 58, 59, 340], "summar": [33, 38], "tpu": [33, 38, 44, 45, 47, 49], "hpu": [33, 38], "mp": [33, 38], "custom": [33, 38, 48, 57, 72, 73, 101], "alias": [33, 38], "listof": [33, 38], "automat": [33, 38, 44, 45, 47, 48, 49, 57, 58, 65, 68, 73, 309, 333], "select": [33, 38, 58, 59, 73], "doubl": [33, 38, 180, 192, 213, 214], "16bit": [33, 38], "bfloat16": [33, 38], "control": [33, 38, 44, 45, 47, 48, 49, 57, 137, 140, 146, 155, 164, 167, 168, 169, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 260, 261, 285, 303, 319, 326], "extra": [33, 38], "tune": [33, 38], "debug": [33, 38, 165, 166, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 278], "boolean": [33, 38], "otherwis": [33, 38, 48, 57, 75, 76, 100, 101, 267], "hparam": [33, 38], "dictionarai": [33, 38, 58], "TO": [33, 38], "BE": [33, 38], "validation_step": [33, 38, 44, 45, 47, 48, 49, 57], "anyth": [33, 38, 44, 45, 47, 49], "interest": [33, 38, 44, 45, 47, 49, 165, 166, 179, 204], "predict_step": [33, 38, 44, 45, 47, 48, 49, 57], "log_dict": [33, 38], "val_dataload": [33, 38, 48, 57], "instruct": [33, 38], "tensor": [33, 38, 44, 45, 47, 48, 49, 51, 54, 57, 64, 66, 67, 70, 171, 172, 173, 175, 176, 177, 181, 190, 191, 193, 194, 208, 215, 217, 218, 219, 220, 221, 223, 232, 253, 278], "logger": [33, 38, 44, 45, 47, 49, 284], "on_step": [33, 38], "on_epoch": [33, 38], "reduce_fx": [33, 38], "enable_graph": [33, 38], "sync_dist": [33, 38], "sync_dist_group": [33, 38], "add_dataloader_idx": [33, 38], "metric_attribut": [33, 38], "rank_zero_onli": [33, 38], "must": [33, 38, 44, 45, 47, 48, 49, 57, 58, 65, 66, 68, 70, 101, 137, 155, 292, 297], "ddp": [33, 38], "determin": [33, 38, 47, 49, 138, 151], "accumul": [33, 38], "over": [33, 38, 47, 49], "detach": [33, 38], "graph": [33, 38, 212, 335], "care": [33, 38, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261, 309, 333], "commun": [33, 38], "overhead": [33, 38], "group": [33, 38, 107, 108, 120, 121, 122, 123, 127, 138, 151, 267], "sync": [33, 38], "uniqu": [33, 38, 272], "infer": [33, 38, 44, 45], "explicitli": [33, 38], "restor": [33, 38, 291], "state": [33, 38, 51, 52, 53, 54, 55, 56, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 174, 175, 178, 193, 205, 206, 207, 209, 217, 221], "torchmetr": [33, 38], "tell": [33, 38], "rank": [33, 38], "won": [33, 38, 44, 45], "abl": [33, 38], "improp": [33, 38], "deadlock": [33, 38], "train_loss": [33, 38], "metriccollect": [33, 38], "test_step": [33, 38], "metric_n": [33, 38], "out": [33, 38, 44, 45, 47, 49, 141, 147, 161, 181, 192, 193, 194, 214, 221, 223, 232], "forward": [33, 38, 44, 45, 51, 54, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 175, 176, 177, 178, 180, 181, 190, 191, 192, 193, 194, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "overrid": [33, 38, 44, 45, 48, 57], "prevent": [33, 38, 44, 45], "oom": [33, 38, 44, 45], "basepredictionwrit": [33, 38, 44, 45], "write": [33, 38, 44, 45, 299, 300], "databas": [33, 38, 44, 45], "spawn": [33, 38, 44, 45], "happen": [33, 38, 44, 45], "ddp_spawn": [33, 38, 44, 45], "produc": [33, 38, 44, 45, 47, 48, 49, 57], "step_output": [33, 38, 44, 45, 47, 49], "skip": [33, 38, 44, 45, 47, 49, 210, 211, 212], "deepspe": [33, 38, 44, 45, 47, 49], "manual": [33, 38, 44, 45, 47, 48, 49, 57], "special": [33, 38, 44, 45, 47, 49, 58], "switch": [33, 38, 44, 45, 47, 48, 49, 57], "accumulate_grad_batch": [33, 38, 44, 45, 47, 49], "intern": [33, 38, 44, 45, 47, 49, 51, 52, 53, 54, 55, 56, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 178, 205, 206, 207, 209], "automatic_optim": [33, 38, 44, 45, 47, 49], "gan": [33, 38, 44, 45, 47, 48, 49, 57], "opt1": [33, 38, 44, 45, 47, 49], "opt2": [33, 38, 44, 45, 47, 49], "decod": [33, 38, 44, 45, 47, 49, 175, 180, 190, 192, 193, 213, 214, 217, 219, 221], "share": [33, 38, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 178, 205, 206, 207, 209], "api": [33, 38, 47, 48, 49, 57, 73, 74], "d": [33, 38, 44, 45, 47, 48, 49, 57, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 213, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 249, 250, 253, 260, 261, 273, 276, 286, 338], "calcul": [33, 38, 44, 45, 47, 48, 49, 57, 65, 66, 68, 70], "put": [33, 38, 44, 45, 47, 49], "At": [33, 38, 44, 45, 47, 49, 192, 214], "goe": [33, 38, 44, 45, 47, 49], "back": [33, 38, 44, 45, 47, 49, 267], "estimator_typ": [34, 35, 36, 37, 39, 40, 41, 42], "tag": [34, 35, 36, 37, 39, 40, 41, 42, 84, 102], "setup": [44, 45, 284, 336], "freez": [44, 45], "freeze_encod": [44, 45], "rate": [44, 45, 47, 48, 49, 57, 164, 167, 168, 169, 177, 208], "adam": [44, 45, 47, 48, 49, 57], "decai": [44, 45, 47, 48, 49, 57], "multisteplr": [44, 45], "schedul": [44, 45, 47, 48, 49, 57, 58], "element": [44, 45, 47, 49], "variabl": [44, 45, 47, 48, 49, 57, 58, 66, 70, 71, 241], "validation_step_output": [44, 45], "dictionnari": [44, 45, 179, 204, 292], "respectivelli": [44, 45], "configure_optim": [44, 45, 47, 48, 49, 57], "declar": [44, 45, 47, 49, 59], "adamw": [44, 45, 47, 48, 49, 57], "cross_entropy_loss": [44, 45], "cross_entropi": [44, 45], "clean": [44, 45], "version": [47, 49, 58, 61, 65, 68, 71, 267], "x_i": [47, 49], "x_j": [47, 49], "maxim": [47, 48, 49, 57], "minim": [47, 48, 49, 57, 301, 324], "part": [47, 49], "head": [47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 105, 109, 177, 206, 208, 209], "cnn": [47, 49, 136], "scnn": [47, 49], "respons": [47, 49], "denot": [47, 49, 51, 54], "finish": [47, 49], "extractor": [47, 49], "z": [47, 49, 175, 176, 193, 217, 218, 221, 270, 271, 273, 275, 276, 286, 337, 338], "shown": [47, 48, 49, 57], "wors": [47, 49], "those": [47, 49, 302, 325], "becom": [47, 49], "invari": [47, 49], "thu": [47, 48, 49, 57], "stage": [47, 49], "z_i": [47, 49], "z_j": [47, 49], "therebi": [47, 49], "propos": [47, 49], "aaron": [47, 49], "van": [47, 49], "den": [47, 49], "oord": [47, 49], "short": [47, 49], "formal": [47, 49], "written": [47, 49], "ell_": [47, 49], "j": [47, 49, 65, 66, 68, 70], "frac": [47, 49, 65, 66, 68, 70], "exp": [47, 49, 66, 70], "sim": [47, 49, 66, 70], "tau": [47, 49, 66, 70], "sum_": [47, 49, 66, 70], "2n": [47, 49], "mathbb": [47, 49], "neq": [47, 49], "z_k": [47, 49], "peak": [47, 49], "bound": [47, 49, 150, 160], "balanc": [47, 49], "influenc": [47, 49], "dissimilar": [47, 48, 49, 57], "versu": [47, 49], "cosin": [47, 48, 49, 57, 65, 66, 68, 70], "cdot": [47, 49], "minimum": [47, 49, 265, 266], "around": [47, 49], "exact": [47, 49], "opposit": [47, 49], "flexibl": [47, 49], "altern": [47, 49], "track": [47, 49], "projector": [47, 49], "cosineannealinglr": [47, 49], "auxiliari": [47, 48, 49, 57, 66, 70], "info_nce_loss": [47, 49], "encoder_kwarg": [48, 57], "projection_head_kwarg": [48, 57], "kernel": [48, 57, 65, 66, 68, 70, 107, 108, 122, 123, 140, 146, 249, 250, 260, 261, 302, 303, 325, 326], "bandwidth": [48, 57, 65, 66, 68, 70], "ndarrai": [48, 57, 65, 66, 68, 70, 75, 76, 168, 169, 267, 270, 271, 275, 337], "optimizer_kwarg": [48, 57], "learning_r": [48, 57], "0001": [48, 57, 272, 277, 339], "lr_schedul": [48, 57], "lrschedul": [48, 57], "reducelronplateau": [48, 57], "lr_scheduler_kwarg": [48, 57], "awar": [48, 57, 66, 70], "visual": [48, 57, 178, 205], "agreement": [48, 57], "view": [48, 57, 64, 66, 67, 70, 307, 331], "consist": [48, 57], "encourag": [48, 57], "ii": [48, 57], "push": [48, 57], "apart": [48, 57], "uninstanti": [48, 57], "although": [48, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "instanti": [48, 57], "op": [48, 57], "hidden_channel": [48, 57, 212], "n_embed": [48, 57, 105, 106, 107, 108, 109, 111, 122, 123], "2048": [48, 52, 53, 55, 56, 57], "unit": [48, 57, 180, 192, 213, 214, 267, 285, 303, 319, 323, 326, 327], "These": [48, 57], "input_dim": [48, 52, 53, 55, 56, 57, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "output_dim": [48, 52, 53, 55, 56, 57, 222], "impli": [48, 57], "wherea": [48, 57], "high": [48, 57, 156], "impos": [48, 57, 58], "sensit": [48, 57], "epanechnikov": [48, 57, 65, 66, 68, 70], "union": [48, 57, 66, 70], "scalar": [48, 57, 65, 66, 68, 70], "diagnon": [48, 57, 66, 70], "1d": [48, 57, 66, 70], "diagon": [48, 57, 65, 66, 68, 70], "2d": [48, 57, 65, 66, 68, 70, 285, 319], "pairwis": [48, 57, 65, 66, 68, 70], "string": [48, 57, 72, 73, 101, 265, 266], "stochast": [48, 57, 175, 193, 217, 221], "descent": [48, 57], "decoupl": [48, 57], "loshchilov": [48, 57], "hutter": [48, 57], "iclr": [48, 57], "2019": [48, 57, 180, 192, 212, 213, 214], "subclass": [48, 57, 69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "beta": [48, 57, 171, 172, 270, 271, 275, 337], "moment": [48, 57, 58], "lrschedulerpltyp": [48, 57], "num_sanity_val_step": [48, 57], "etc": [48, 57], "proxi": [48, 57, 66, 70], "meta": [48, 57, 66, 70, 138, 151, 267], "mri": [48, 57, 66, 70], "dufumi": [48, 57, 66, 70], "miccai": [48, 57, 66, 70], "2021": [48, 53, 56, 57, 66, 70, 105, 109, 193, 221], "neural": [48, 57], "choos": [48, 57], "But": [48, 57], "lr_scheduler_config": [48, 57], "whose": [48, 57], "updat": [48, 57, 60, 267], "val_loss": [48, 57], "strict": [48, 57], "condit": [48, 57, 98], "metric_to_track": [48, 57], "optimizer1": [48, 57], "optimizer2": [48, 57], "scheduler1": [48, 57], "scheduler2": [48, 57], "lambdalr": [48, 57], "made": [48, 57], "metric_v": [48, 57], "thing": [48, 57], "know": [48, 57], "closur": [48, 57], "yourself": [48, 57], "optimizer_step": [48, 57], "parse_batch": [48, 57], "pars": [48, 57], "v1": [48, 57], "v2": [48, 57], "either": [48, 57, 100, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 267], "present": [48, 57, 84, 101, 102], "block": [51, 54, 58, 106, 107, 108, 111, 122, 123, 124, 125, 177, 208, 210, 211, 215, 216], "read": [51, 54, 294, 295], "in_featur": [51, 54], "batch_norm_lay": [51, 54], "non_linearity_lay": [51, 54], "non": [51, 52, 54, 55], "norm": [51, 54, 115], "batchnorm1d": [51, 54], "scriptmodul": [51, 52, 53, 54, 55, 56, 64, 66, 67, 69, 70, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 121, 122, 123, 178, 205, 206, 207, 209], "zi": [52, 55], "w_2": [52, 55], "w_1": [52, 55], "2020": [52, 53, 55, 56, 64, 67], "arxiv": [52, 53, 55, 56, 64, 67, 106, 107, 108, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133, 212], "2002": [52, 55, 64, 67], "05709": [52, 55, 64, 67], "512": [53, 56, 106, 107, 108, 111, 122, 123, 181, 194, 223, 232], "z\u03b82": [53, 56], "vanilla": [53, 56], "multilay": [53, 56], "perceptron": [53, 56], "2106": [53, 56], "08808": [53, 56], "expfil": 58, "selector": [58, 59], "logdir": 58, "verbos": 58, "useful": 58, "date": 58, "reus": [58, 309, 333], "section": 58, "descipt": 58, "scaler": [58, 267], "dl": 58, "environ": [58, 59, 60, 62], "fullfil": 58, "constraint": 58, "interface_occurr": 58, "term": [58, 61, 65, 68, 82], "interface_vers": 58, "__version__": 58, "mismatch": 58, "detect": 58, "connot": 58, "previous": 58, "param": [58, 61, 62], "instanci": 58, "prefix": 58, "filter": [58, 59, 106, 111, 140, 146, 175, 176, 179, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 247, 248, 251, 254, 256, 258, 259, 262], "construct": 58, "hierarch": 58, "properti": [58, 98], "parent": 58, "separ": 58, "architecture_nam": [58, 84, 102], "revis": [58, 84, 102], "hug": [58, 84, 102], "face": [58, 84, 102, 265, 266], "specifid": 58, "appropri": [58, 59, 101], "scheme": [58, 65, 68], "hyperparapet": 58, "defautl": 58, "coupl": 58, "config": 59, "env": [59, 60, 62], "filter_conf": 59, "updated_env": 60, "environemt": 60, "my_modul": 61, "my_class": 61, "exppect": 61, "module": 61, "cl": [61, 177, 208], "updated_param": 62, "param_set": 62, "entropi": [64, 67], "deriv": [64, 67], "icml": [64, 67], "doi": [64, 67, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "48550": [64, 67, 106, 107, 108, 110, 111, 117, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "z1": [64, 66, 67, 70], "z2": [64, 66, 67, 70], "scott": [65, 68], "fast": [65, 68], "kde": [65, 68], "x1": [65, 68, 69, 215, 216], "xn": [65, 68], "w_": [65, 66, 68, 70], "xi": [65, 68], "xj": [65, 68], "geq": [65, 68], "dx": [65, 68], "symmetr": [65, 68, 75, 76], "silverman": [65, 68], "covari": [65, 68], "mathrm": [65, 68], "diag": [65, 68], "distanc": [65, 68, 138, 151, 248, 259], "length": [65, 68, 302, 325], "rosenblatt": [65, 68], "m": [65, 68, 138, 140, 141, 143, 146, 147, 149, 151, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 265, 266, 281, 288, 294, 295, 299, 300, 302, 307, 315, 320, 325, 331, 335], "1956": [65, 68], "remark": [65, 68], "nonparametr": [65, 68], "annal": [65, 68], "mathemat": [65, 68], "statist": [65, 68], "parzen": [65, 68], "1962": [65, 68], "On": [65, 68, 291], "scotts_factor": [65, 68], "factor": [65, 68, 106, 111, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 285, 303, 319, 326], "set_bandwidth": [65, 68], "subsequ": [65, 68], "silverman_factor": [65, 68], "mini": [66, 70], "repres": [66, 70, 265, 266, 334, 335], "w": [66, 70, 173, 222], "ell": [66, 70], "z_1": [66, 70], "z_2": [66, 70], "\u03c4": [66, 70], "y_i": [66, 70], "y_j": [66, 70], "phd": [66, 70], "thesi": [66, 70], "2022": [66, 70, 177, 208], "dot": [66, 70], "product": [66, 70, 340], "n_label": [66, 70], "x2": [69, 215, 216], "overridden": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "recip": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "afterward": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "former": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "latter": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "silent": [69, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 122, 123, 178, 205, 206, 207, 209, 212, 248, 249, 250, 259, 260, 261], "re": 71, "sample_weight": [72, 73, 75, 76, 77, 78, 267], "multioutput": [72, 73, 75, 76], "dtype": [72, 74, 150, 156, 160, 273, 286], "numer": 72, "raw_valu": [72, 73, 75, 76], "uniform_averag": [72, 73, 75, 76], "variance_weight": [72, 73], "accept": [72, 73], "due": [72, 73], "compat": [72, 73, 340], "r2_score": [72, 73], "check_arrai": 72, "type_tru": [72, 73], "multiclass": [72, 73], "type_of_target": [72, 73], "just": [72, 73], "suitabl": [73, 74], "privat": 73, "highest": 74, "promot": 74, "rule": 74, "api_specif": 74, "type_promot": 74, "namespac": 74, "force_finit": [75, 76], "alwai": [75, 76, 84, 102, 267], "perfect": [75, 76], "anti": [75, 76], "flag": [75, 76], "nan": [75, 76], "inf": [75, 76], "constant": [75, 76], "real": [75, 76], "target_nam": [77, 78], "digit": [77, 78], "output_dict": [77, 78], "round": [77, 78], "summari": [77, 78], "mae": [77, 78], "meda": [77, 78], "mse": [77, 78], "pcc": [77, 78], "evar": [77, 78], "arithmet": [77, 78], "equival": [80, 81, 267], "termin": 82, "expos": [83, 85], "value_kei": [83, 85], "b": [83, 85], "avaiabl": [84, 102], "pathlib": [84, 102], "repo": [84, 102], "classmethod": [84, 102, 138, 151, 179, 204], "hf_download": [84, 102], "hf_id": [84, 102], "hf_revis": [84, 102], "force_download": [84, 102], "resum": [84, 102], "id": [84, 102], "commit": [84, 102], "hub_split": [84, 102], "hub_nam": [84, 102], "interpret": [84, 102], "hub_id": [84, 102], "hub_revis": [84, 102], "decalr": [84, 102, 135], "ns_download": [84, 102], "ns_id": [84, 102], "reset": [86, 95, 96], "background": 86, "foreground": [86, 88], "reverse_dict": 86, "revers": [86, 175, 217], "alia": [87, 88, 156, 157, 203, 267], "conveni": [95, 96], "style": [95, 96], "ansi": [95, 96], "fn": 98, "attribute_nam": 98, "descriptor": 98, "protocol": 98, "decor": [98, 100, 154, 162, 292, 309, 333], "attributeerror": [98, 100], "falsei": 98, "hasattr": [98, 100], "doc": 98, "howto": 98, "explan": 98, "deleg": 99, "underli": 99, "truthi": 100, "unavail": 100, "helloifeven": 100, "_x_is_even": 100, "say_hello": 100, "hello": 100, "obj": 100, "msg": [101, 278], "presenc": 101, "trail": 101, "underscor": 101, "except": [101, 267], "messag": [101, 177, 180, 181, 192, 193, 194, 208, 212, 213, 214, 221, 223, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 278], "yet": 101, "substitut": 101, "eg": 101, "sparsifi": 101, "fitt": 101, "abrol": [105, 109], "5281": [105, 109], "zenodo": [105, 109], "4309677": [105, 109], "growth_rat": [106, 111, 112, 113, 116], "block_config": [106, 111, 116], "num_init_featur": [106, 111, 116], "bn_size": [106, 111, 112, 113], "memory_effici": [106, 111, 112, 113], "huang": [106, 110, 111, 117], "2018": [106, 110, 111, 117], "1608": [106, 110, 111, 117], "06993": [106, 110, 111, 117], "pool": [106, 111, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 247, 258], "convolut": [106, 107, 108, 111, 122, 123, 126, 127, 140, 146, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 248, 249, 250, 251, 254, 256, 259, 260, 261, 262], "slower": [106, 111], "pdf": [106, 111], "1707": [106, 111], "06990": [106, 111], "zero_init_residu": [107, 108, 122, 123], "width_per_group": [107, 108, 122, 123], "replace_stride_with_dil": [107, 108, 122, 123], "norm_lay": [107, 108, 120, 121, 122, 123], "initial_kernel_s": [107, 108, 122, 123], "he": [107, 108, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "2015": [107, 108, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "1512": [107, 108, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "03385": [107, 108, 118, 119, 122, 123, 128, 129, 130, 131, 132, 133], "bn": [107, 108, 122, 123, 210, 211, 215, 216], "residu": [107, 108, 122, 123], "branch": [107, 108, 122, 123], "behav": [107, 108, 122, 123], "1706": [107, 108, 122, 123], "02677": [107, 108, 122, 123], "divid": [107, 108, 122, 123], "dilat": [107, 108, 120, 121, 122, 123, 127], "atrou": [107, 108, 122, 123], "preserv": [107, 108, 122, 123], "dens": [107, 108, 122, 123, 175, 217, 267], "batchnorm3d": [107, 108, 122, 123], "truncat": [108, 119, 123, 129, 131, 133], "121": [110, 117], "num_lay": 112, "num_input_featur": [112, 113, 114], "init_featur": 112, "prev_featur": 113, "num_output_featur": 114, "arch": [116, 124, 125], "inplan": [120, 121], "plane": [120, 121, 248, 259, 302, 318, 325], "base_width": [120, 121], "in_plan": [126, 127], "out_plan": [126, 127], "1x1": [126, 192, 214], "center": [135, 267, 282, 302, 303, 307, 316, 318, 325, 326, 331], "inspir": 136, "natur": 136, "init": [137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 156, 158, 164, 167, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 291], "randomize_per_channel": [137, 154, 155, 157, 162], "tranform": [137, 155, 274, 287], "wise": [137, 155, 192, 214], "randomli": [138, 139, 151, 152], "bootstrap": [138, 151], "measur": [138, 139, 143, 149, 151, 152, 153], "vertex": [138, 139, 140, 141, 146, 147, 151, 152, 192, 214, 302, 303, 309, 325, 326, 327, 333, 334, 335], "hemispher": [138, 139, 151, 152, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "curupt": [138, 139, 151, 152, 153], "cortic": [138, 139, 143, 149, 151, 152, 153, 163, 170, 171, 172, 174, 175, 176, 177, 180, 181, 190, 191, 192, 193, 194, 208, 213, 214, 217, 218, 219, 220, 221, 223, 232], "regroup": [138, 151], "pca": [138, 151], "compon": [138, 151, 270, 271, 275, 337], "extern": [138, 151], "popul": [138, 151], "bootstap": [138, 151], "arr": [138, 139, 141, 142, 143, 147, 148, 149, 151, 152], "bootsrap": [138, 151], "controlater": [139, 152], "cachedir": [140, 141, 143, 146, 147, 149, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 292], "speed": [140, 146, 179, 204], "recept": [140, 146], "field": [140, 146, 156, 157, 203], "deviat": [140, 142, 146, 148, 267], "icosahdron": [140, 141, 143, 146, 147, 149], "neighboor": [140, 141, 146, 147, 265, 266], "sufifi": [140, 141, 146, 147], "ie": [140, 141, 146, 147, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "organ": [140, 141, 146, 147, 293, 302, 325], "ring": [140, 141, 146, 147, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 247, 251, 254, 256, 258, 262, 282, 302, 316, 325], "replacement_valu": [141, 147], "connex": [141, 147], "neighborhood": [141, 147, 210, 215, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 285, 301, 303, 319, 324, 326], "ablat": [141, 147], "cutout": [141, 147], "cut": [141, 147], "nois": [142, 148], "barycentr": [143, 149, 283, 307, 309, 317, 331, 333], "angl": [143, 149, 270, 271, 275, 283, 302, 309, 317, 318, 325, 333, 337], "degre": [143, 149, 283, 309, 317, 333], "euler": [143, 149, 283, 309, 317, 333], "smart": [143, 149, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "speedup": [143, 149, 179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "accordingli": [143, 149], "seri": [145, 159], "n_channel": [145, 159, 177, 208], "_data": [145, 159], "uplet": [150, 160, 248, 259, 283, 309, 317, 333], "aplli": 153, "rand_mask": 153, "binari": [153, 171, 172], "corrupt": 153, "multichannel": [154, 162], "multichannelaugment": [154, 162], "applic": [154, 162, 180, 192, 213, 214, 268], "liftifi": 161, "synthet": 163, "gene": [164, 167, 168, 169], "n_max": [165, 166], "target_ico_ord": [165, 166], "regex": [165, 166], "nibabel": [165, 166, 296, 298], "triangular": [165, 166, 265, 266, 308, 310, 332], "purpos": [165, 166], "desir": [165, 166, 301, 324], "assocait": [168, 169], "variat": [170, 174, 193, 221], "svae": [170, 193, 221], "left_mask": [171, 172], "right_mask": [171, 172], "use_ms": [171, 172], "kl": [171, 172], "diverg": [171, 172], "likelihood": [171, 172, 173], "recon": 173, "reconstruct": [173, 175, 193, 217, 221], "relat": [174, 179, 204], "vision": [174, 177, 208, 308, 332], "gmvae": 174, "rest": [174, 193, 221], "fmri": [174, 193, 221], "autoencod": [174, 193, 221], "libilab": 174, "rsfmri": 174, "output_shap": [175, 217, 250, 261], "before_latent_dim": [175, 217], "latent_dim": [175, 176, 178, 190, 191, 193, 205, 217, 218, 219, 220, 221], "conv_flt": [175, 176, 190, 191, 193, 217, 218, 219, 220, 221], "fusion_level": [175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "leakyrelu": [175, 176, 190, 191, 193, 217, 218, 219, 220, 221], "batch_norm": [175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "output_channel": [175, 217], "convnet": [175, 217, 222], "left_recon_x": [175, 193, 217, 221], "input_channel": [175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "right_recon_x": [175, 193, 217, 221], "left_x": [176, 181, 190, 191, 193, 194, 218, 219, 220, 221, 223, 232], "right_x": [176, 181, 190, 191, 193, 194, 218, 219, 220, 221, 223, 232], "q": [176, 193, 218, 221], "mlp_dim": [177, 208, 209], "dim_head": [177, 206, 208, 209], "dropout": [177, 206, 207, 208, 209], "emb_dropout": [177, 208], "msit": [177, 208], "dahan": [177, 208], "simon": [177, 178, 205, 208], "analysi": [177, 208], "midl": [177, 208], "n_verticesi": [177, 208], "trainabl": [177, 208], "msa": [177, 208], "mechan": [177, 208, 267], "feed": [177, 208], "ffn": [177, 208], "expand": [177, 208], "poll": [177, 208], "token": [177, 208], "hidden_lay": [178, 205], "return_logit": [178, 205], "kornblith": [178, 205], "mohammad": [178, 205], "norouzi": [178, 205], "geoffrei": [178, 205], "hinton": [178, 205], "y1": [178, 205], "y2": [178, 205], "input_ord": [179, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "n_layer": [179, 204], "repa_s": [179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "repa_zoom": [179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "dynamic_repa_zoom": [179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 219, 220, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240], "repa": [179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 303, 326], "ico_info": [179, 204], "build_ico_info": [179, 204], "tangent": [179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 259, 285, 302, 318, 319, 325], "tessal": [179, 204, 288, 308, 320, 332], "tessel": [179, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 214, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 308, 332], "icosehedron": [179, 204], "upsampl": [179, 192, 204, 214, 215, 244, 245, 246, 251, 252, 255, 256, 257, 262, 263, 290, 322], "onform": [179, 204], "gride": [180, 181, 211, 213, 216, 223, 273, 286], "net": [180, 192, 212, 213, 214], "built": [180, 192, 213, 214], "upon": [180, 192, 213, 214], "spma": [180, 213], "rectifi": [180, 192, 213, 214], "halv": [180, 192, 213, 214], "zhao": [180, 192, 213, 214], "ipmi": [180, 192, 213, 214], "cfg": [181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "4096": [181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "init_weight": [181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "stand": [181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 268], "wether": [181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "sphericalgvggbas": [182, 183, 184, 185, 186, 187, 188, 189, 224, 225, 226, 227, 228, 229, 230, 231], "interp": [192, 214, 215], "2x2": [192, 214], "maxpad": [192, 214, 215], "shift": [192, 214, 215], "zeropad": [192, 214, 215], "sphericalgva": [193, 221], "vert": [193, 194, 221, 232], "tri": [193, 194, 221, 232, 310], "reparameter": [193, 221], "reparametr": [193, 221], "trick": [193, 221], "sphericalvggbas": [195, 196, 197, 198, 199, 200, 201, 202, 233, 234, 235, 236, 237, 238, 239, 240], "neighbor_indic": [203, 243, 245, 246, 251, 254, 256, 257, 262], "down_indic": [203, 210, 215, 245, 246, 247, 251, 256, 257, 258, 262, 280, 281, 314, 315], "up_indic": [203, 244, 252, 255, 263, 289, 290, 321, 322], "conv_neighbor_indic": 203, "conv_lay": [210, 215], "in_ch": [210, 211, 215, 216], "out_ch": [210, 211, 215, 216], "conv_neigh_indic": [210, 215], "down_neigh_indic": [210, 246, 247, 257, 258], "pool_mod": 210, "discret": [210, 215, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "pool_ratio": 212, "sum_r": 212, "act": 212, "unpool": 212, "hongyang": 212, "gao": 212, "shuiwang": 212, "ji": 212, "ratio": 212, "connect": [212, 335], "summat": 212, "nonlinear": 212, "edge_index": 212, "neigh_indic": [215, 243, 248, 254, 259], "up_neigh_indic": [215, 244, 245, 246, 251, 252, 255, 256, 257, 262, 263], "upsamp": [215, 216], "upconv": [215, 216], "max_pool_indic": [215, 246, 257], "klass_nam": 241, "klass_param": 241, "destination_module_glob": 241, "publicli": 241, "assign": [241, 302, 325], "in_feat": [243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263], "out_feat": [243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263], "formul": [243, 254], "ico2_vertic": [243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263], "ico2_triangl": [243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263], "asarrai": [243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 262, 263, 289, 321], "ico2_x": [243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263], "ico3_vertic": [244, 245, 246, 247, 251, 252, 255, 256, 257, 258, 262, 263], "ico3_triangl": [244, 245, 246, 247, 251, 252, 255, 256, 257, 258, 262, 263], "ico3_x": [244, 245, 246, 247, 251, 252, 255, 256, 257, 258, 262, 263], "slow": [245, 256], "pooling_typ": [246, 247, 257, 258], "rectagular": [248, 259], "neigh_weight": [248, 259], "proj_ico_x": [249, 250, 260, 261], "pad_azimuth": [249, 250, 253, 260, 261], "pad_elev": [249, 250, 253, 260, 261], "zero_pad": [250, 261], "icoconv": [250, 261], "vmin": [265, 266], "vmax": [265, 266], "black": [265, 266], "color_map": [265, 266], "linearsegmentedcolormap": [265, 266], "opac": [265, 266], "Not": [265, 266], "edg": [265, 266, 334, 335], "line": [265, 266], "cm": [265, 266], "coolwarm": [265, 266], "colormap": [265, 266], "sub": 267, "with_mean": 267, "with_std": 267, "sklearn": 267, "scler": 267, "avoid": 267, "inplac": 267, "guarante": 267, "csr": 267, "attempt": 267, "entail": 267, "later": 267, "n_subject": 267, "along": [267, 272], "get_metadata_rout": 267, "metadata": 267, "rout": 267, "inverse_transform": 267, "x_tr": 267, "set_inverse_transform_request": 267, "unchang": 267, "relev": 267, "enable_metadata_rout": 267, "set_config": 267, "metadata_rout": 267, "retain": 267, "insid": 267, "pipelin": 267, "set_partial_fit_request": 267, "partial_fit": 267, "set_transform_request": 267, "sever": 268, "suffix": 268, "coordin": [269, 270, 271, 273, 274, 275, 276, 286, 287, 311, 327, 337, 338], "system": 269, "tool": [269, 340], "cartesian": [270, 271, 275, 337], "array_lik": [270, 271, 275, 337], "radiant": [270, 271, 275, 337], "pi": [270, 271], "r": [270, 271, 275, 337], "ref_arrai": 272, "atol": [272, 277, 339], "toler": [272, 277, 339], "new_ord": 272, "resx": [273, 276, 286, 338], "resi": [273, 276, 286, 338], "ico2_vert": [273, 274, 276, 277, 279, 280, 282, 286, 287, 289, 290, 302, 303, 308, 313, 314, 316, 321, 322, 325, 326, 332, 338, 339], "ico2_tri": [273, 274, 276, 277, 279, 280, 282, 286, 287, 289, 290, 302, 303, 308, 313, 314, 316, 321, 322, 325, 326, 332, 338, 339], "y_grid": [273, 276, 286, 338], "ref_vertic": [274, 277, 287, 339], "ico2_std_vert": [274, 277, 287, 339], "ico2_std_tri": [274, 277, 287, 339], "projecte": [276, 338], "y_std": [277, 339], "target_vertic": [279, 289, 313, 321], "n_dim": [279, 289, 313, 321], "n_queri": [279, 289, 313, 321], "nearest_idx": [279, 313], "ico3_vert": [279, 288, 289, 301, 304, 306, 308, 309, 313, 320, 321, 324, 328, 330, 332, 333], "ico3_tri": [279, 288, 289, 301, 304, 306, 308, 309, 313, 320, 321, 324, 328, 330, 332, 333], "down3to2": [279, 313], "ico3_down_vertic": [279, 313], "consecut": [280, 281, 290, 314, 315, 322], "downsampled_data": [280, 314], "new_n_vertic": [280, 290, 314, 322], "ico4_vert": [280, 281, 290, 314, 315, 322], "ico4_tri": [280, 281, 290, 314, 315, 322], "reshap": [280, 282, 289, 290, 309, 314, 316, 321, 322, 333], "y_down": [280, 314], "squeez": [280, 290, 309, 314, 322, 333], "geometri": [281, 289, 294, 295, 299, 300, 315, 321, 323], "new_vertic": [281, 315], "newli": [281, 315], "icosahedorn": [281, 315], "new_triangl": [281, 315], "ico2_down_vert": [281, 315], "ico2_down_tri": [281, 315], "start_nod": [282, 316], "recurs": [282, 316], "node_neigh": [282, 316], "asssoci": [283, 317], "euclidian": [283, 317], "three": [283, 317], "grid_in_spher": [285, 303, 319, 326], "grid_in_tplan": [285, 319], "mesh": [288, 289, 302, 320, 321, 325, 335], "target_triangl": [289, 321], "interp_indic": [289, 321], "n_feat": [289, 321], "y_up": [289, 290, 321, 322], "upper": [290, 322], "upsampled_data": [290, 322], "hide_err": 291, "secur": 291, "redirect": 291, "manag": 291, "hide": 291, "func": 292, "wrap": 292, "receiv": 292, "directori": 292, "transpar": 292, "overlap": 292, "cifti_fil": 293, "decompos": 293, "cifti": [293, 296, 298], "vol": 293, "surf_left": 293, "surf_right": 293, "surf_fil": [294, 295, 299, 300], "gifti": [295, 300], "surf_nam": 296, "nbviewer": [296, 298], "neurohackademi": [296, 298], "nh2020": [296, 298], "curriculum": [296, 298], "blob": [296, 298], "master": [296, 298], "markiewicz": [296, 298], "gnu": 297, "archiv": 297, "open": 297, "gz": 297, "out_path": 297, "extens": 297, "n_neigh": [301, 305, 324, 329], "remain": [302, 325], "n_vert": [304, 328], "min_order_to_get_n_neighbor": [305, 329], "hi": [306, 330], "clockwise_from_cent": [307, 331], "clockwis": [307, 331], "counter": [307, 331], "reordered_triangl": [307, 331], "reorder": [307, 331], "ico0_vert": [307, 331], "ico0_tri": [307, 331], "clockwise_ico0_tri": [307, 331], "counter_clockwise_ico0_tri": [307, 331], "concurr": [308, 332], "euclidean": [309, 333], "rotated_data": [309, 333], "y_rot": [309, 333], "lower_vertic": 310, "ico_fil": 311, "rescal": 311, "topologi": [311, 312], "ref_fil": 312, "fslr": 312, "point_1": 323, "point_2": 323, "middle_point_cach": 323, "middl": 323, "return_index": 334, "triangles_index": 334, "networkx": 335, "nearbi": 335, "potenti": 335, "smooth": 335, "info": 336, "logfil": 336, "unifi": 340, "analyz": 340, "brain": 340, "advanc": 340, "availbl": 340, "hydra": 340}, "objects": {"nidl.callbacks": [[14, 0, 1, "", "BatchTypingCallback"], [15, 0, 1, "", "KNeighborsClassifierCVCallback"], [16, 0, 1, "", "KNeighborsRegressorCVCallback"], [17, 0, 1, "", "LogisticRegressionCVCallback"], [18, 0, 1, "", "ModelProbing"], [19, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "log_metrics"], [15, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "log_metrics"], [16, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[18, 1, 1, "", "extract_features"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "linear_probing"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "on_test_epoch_end"], [18, 1, 1, "", "on_test_epoch_start"], [18, 1, 1, "", "on_train_epoch_end"], [18, 1, 1, "", "on_validation_epoch_end"], [18, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[20, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[20, 1, 1, "", "on_predict_batch_start"], [20, 1, 1, "", "on_test_batch_start"], [20, 1, 1, "", "on_train_batch_start"], [20, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[21, 0, 1, "", "KNeighborsClassifierCVCallback"], [22, 0, 1, "", "KNeighborsRegressorCVCallback"], [23, 0, 1, "", "LogisticRegressionCVCallback"], [24, 0, 1, "", "ModelProbing"], [25, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log_metrics"], [22, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[24, 1, 1, "", "extract_features"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "linear_probing"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "on_test_epoch_end"], [24, 1, 1, "", "on_test_epoch_start"], [24, 1, 1, "", "on_train_epoch_end"], [24, 1, 1, "", "on_validation_epoch_end"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "predict"]], "nidl.datasets": [[27, 0, 1, "", "BaseImageDataset"], [28, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.BaseImageDataset": [[27, 1, 1, "", "get_checksum"], [27, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[28, 1, 1, "", "get_data"]], "nidl.datasets.base": [[29, 0, 1, "", "BaseDataset"], [30, 0, 1, "", "BaseImageDataset"], [31, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[30, 1, 1, "", "get_checksum"], [30, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[31, 1, 1, "", "get_data"]], "nidl.estimators": [[33, 0, 1, "", "BaseEstimator"], [34, 0, 1, "", "ClassifierMixin"], [35, 0, 1, "", "ClusterMixin"], [36, 0, 1, "", "RegressorMixin"], [37, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[33, 1, 1, "", "fit"], [33, 1, 1, "", "log"], [33, 1, 1, "", "log_dict"], [33, 1, 1, "", "predict"], [33, 1, 1, "", "predict_step"], [33, 1, 1, "", "training_step"], [33, 1, 1, "", "transform"], [33, 1, 1, "", "transform_step"], [33, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[38, 0, 1, "", "BaseEstimator"], [39, 0, 1, "", "ClassifierMixin"], [40, 0, 1, "", "ClusterMixin"], [41, 0, 1, "", "RegressorMixin"], [42, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[38, 1, 1, "", "fit"], [38, 1, 1, "", "log"], [38, 1, 1, "", "log_dict"], [38, 1, 1, "", "predict"], [38, 1, 1, "", "predict_step"], [38, 1, 1, "", "training_step"], [38, 1, 1, "", "transform"], [38, 1, 1, "", "transform_step"], [38, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[44, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[44, 1, 1, "", "configure_optimizers"], [44, 1, 1, "", "cross_entropy_loss"], [44, 1, 1, "", "freeze_encoder"], [44, 1, 1, "", "on_validation_epoch_end"], [44, 1, 1, "", "predict_step"], [44, 1, 1, "", "training_step"], [44, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[45, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[45, 1, 1, "", "configure_optimizers"], [45, 1, 1, "", "cross_entropy_loss"], [45, 1, 1, "", "freeze_encoder"], [45, 1, 1, "", "on_validation_epoch_end"], [45, 1, 1, "", "predict_step"], [45, 1, 1, "", "training_step"], [45, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[47, 0, 1, "", "SimCLR"], [48, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[47, 1, 1, "", "configure_optimizers"], [47, 1, 1, "", "info_nce_loss"], [47, 1, 1, "", "training_step"], [47, 1, 1, "", "transform_step"], [47, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[48, 1, 1, "", "configure_optimizers"], [48, 1, 1, "", "parse_batch"], [48, 1, 1, "", "training_step"], [48, 1, 1, "", "transform_step"], [48, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[49, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[49, 1, 1, "", "configure_optimizers"], [49, 1, 1, "", "info_nce_loss"], [49, 1, 1, "", "training_step"], [49, 1, 1, "", "transform_step"], [49, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[51, 0, 1, "", "ProjectionHead"], [52, 0, 1, "", "SimCLRProjectionHead"], [53, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[51, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[54, 0, 1, "", "ProjectionHead"], [55, 0, 1, "", "SimCLRProjectionHead"], [56, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[54, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[57, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[57, 1, 1, "", "configure_optimizers"], [57, 1, 1, "", "parse_batch"], [57, 1, 1, "", "training_step"], [57, 1, 1, "", "transform_step"], [57, 1, 1, "", "validation_step"]], "nidl.experiment": [[58, 2, 1, "", "fetch_experiment"], [59, 2, 1, "", "filter_config"], [60, 2, 1, "", "get_env"], [61, 2, 1, "", "load_interface"], [62, 2, 1, "", "update_params"]], "nidl.losses": [[64, 0, 1, "", "InfoNCE"], [65, 0, 1, "", "KernelMetric"], [66, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[64, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[65, 1, 1, "", "fit"], [65, 1, 1, "", "pairwise"], [65, 1, 1, "", "scotts_factor"], [65, 1, 1, "", "set_bandwidth"], [65, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[66, 1, 1, "", "forward"]], "nidl.losses.infonce": [[67, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[67, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[68, 0, 1, "", "KernelMetric"], [69, 0, 1, "", "PairwiseCosineSimilarity"], [70, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[68, 1, 1, "", "fit"], [68, 1, 1, "", "pairwise"], [68, 1, 1, "", "scotts_factor"], [68, 1, 1, "", "set_bandwidth"], [68, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[69, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[70, 1, 1, "", "forward"]], "nidl.metrics._regression": [[72, 2, 1, "", "_check_reg_targets"], [73, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [74, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[75, 2, 1, "", "pearson_r"], [78, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[76, 2, 1, "", "pearson_r"], [77, 2, 1, "", "regression_report"]], "nidl.transforms": [[80, 0, 1, "", "ContrastiveTransforms"]], "nidl.transforms.ssl": [[81, 0, 1, "", "ContrastiveTransforms"]], "nidl.utils": [[83, 0, 1, "", "Bunch"], [84, 0, 1, "", "Weights"], [97, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[84, 1, 1, "", "hf_download"], [84, 1, 1, "", "hub_split"], [84, 1, 1, "", "load_pretrained"], [84, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[85, 0, 1, "", "Bunch"]], "nidl.utils.color": [[86, 0, 1, "", "Colored"], [87, 2, 1, "", "attr"], [88, 2, 1, "", "fg"], [89, 2, 1, "", "hex"], [90, 2, 1, "", "print_multicolor"], [91, 2, 1, "", "print_result"], [92, 2, 1, "", "print_subtitle"], [93, 2, 1, "", "print_title"], [94, 2, 1, "", "print_warning"], [95, 2, 1, "", "random_stylize"], [96, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[86, 1, 1, "", "attribute"], [86, 1, 1, "", "background"], [86, 1, 1, "", "foreground"], [86, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[98, 0, 1, "", "_AvailableIfDescriptor"], [99, 2, 1, "", "_estimator_is"], [100, 2, 1, "", "available_if"], [101, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[102, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[102, 1, 1, "", "hf_download"], [102, 1, 1, "", "hub_split"], [102, 1, 1, "", "load_pretrained"], [102, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[105, 0, 1, "", "AlexNet"], [106, 0, 1, "", "DenseNet"], [107, 0, 1, "", "ResNet"], [108, 0, 1, "", "ResNetTruncated"], [110, 2, 1, "", "densenet121"], [118, 2, 1, "", "resnet18"], [119, 2, 1, "", "resnet18_trunc"], [132, 2, 1, "", "resnet50"], [133, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[105, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[106, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[107, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[108, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[109, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[109, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[111, 0, 1, "", "DenseNet"], [112, 0, 1, "", "_DenseBlock"], [113, 0, 1, "", "_DenseLayer"], [114, 0, 1, "", "_Transition"], [115, 2, 1, "", "_bn_function_factory"], [116, 2, 1, "", "_densenet"], [117, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[111, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[112, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[120, 0, 1, "", "BasicBlock"], [121, 0, 1, "", "Bottleneck"], [122, 0, 1, "", "ResNet"], [123, 0, 1, "", "ResNetTruncated"], [124, 2, 1, "", "_resnet"], [125, 2, 1, "", "_resnet_trunc"], [126, 2, 1, "", "conv1x1"], [127, 2, 1, "", "conv3x3"], [128, 2, 1, "", "resnet18"], [129, 2, 1, "", "resnet18_trunc"], [130, 2, 1, "", "resnet50"], [131, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[120, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[121, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[122, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[123, 1, 1, "", "forward"]], "surfify.augmentation": [[137, 0, 1, "", "BaseTransformer"], [138, 0, 1, "", "GroupMixUp"], [139, 0, 1, "", "HemiMixUp"], [140, 0, 1, "", "SurfBlur"], [141, 0, 1, "", "SurfCutOut"], [142, 0, 1, "", "SurfNoise"], [143, 0, 1, "", "SurfRotation"], [144, 0, 1, "", "Transformer"], [145, 2, 1, "", "apply_chained_transforms"], [150, 2, 1, "", "interval"], [154, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[137, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[138, 1, 1, "", "groupby"], [138, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[139, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[140, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[141, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[142, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[143, 1, 1, "", "run"]], "surfify.augmentation.base": [[146, 0, 1, "", "SurfBlur"], [147, 0, 1, "", "SurfCutOut"], [148, 0, 1, "", "SurfNoise"], [149, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[146, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[147, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[148, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[149, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[151, 0, 1, "", "GroupMixUp"], [152, 0, 1, "", "HemiMixUp"], [153, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[151, 1, 1, "", "groupby"], [151, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[152, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[153, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[155, 0, 1, "", "BaseTransformer"], [156, 0, 1, "", "RandomAugmentation"], [157, 0, 1, "", "Transform"], [158, 0, 1, "", "Transformer"], [159, 2, 1, "", "apply_chained_transforms"], [160, 2, 1, "", "interval"], [161, 2, 1, "", "listify"], [162, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[155, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[156, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[156, 3, 1, "", "dtype"], [156, 3, 1, "", "high"], [156, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[157, 3, 1, "", "probability"], [157, 3, 1, "", "randomize_per_channel"], [157, 3, 1, "", "transform"]], "surfify.datasets": [[164, 0, 1, "", "ClassificationDataset"], [165, 0, 1, "", "GenericSurfDataset"], [169, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[166, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[167, 0, 1, "", "ClassificationDataset"], [168, 2, 1, "", "make_classification"]], "surfify.losses": [[171, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[172, 0, 1, "", "SphericalVAELoss"], [173, 2, 1, "", "log_likelihood"]], "surfify.models": [[175, 0, 1, "", "HemiFusionDecoder"], [176, 0, 1, "", "HemiFusionEncoder"], [177, 0, 1, "", "SiT"], [178, 0, 1, "", "SimCLR"], [179, 0, 1, "", "SphericalBase"], [180, 0, 1, "", "SphericalGUNet"], [181, 0, 1, "", "SphericalGVGG"], [182, 0, 1, "", "SphericalGVGG11"], [183, 0, 1, "", "SphericalGVGG11BN"], [184, 0, 1, "", "SphericalGVGG13"], [185, 0, 1, "", "SphericalGVGG13BN"], [186, 0, 1, "", "SphericalGVGG16"], [187, 0, 1, "", "SphericalGVGG16BN"], [188, 0, 1, "", "SphericalGVGG19"], [189, 0, 1, "", "SphericalGVGG19BN"], [190, 0, 1, "", "SphericalHemiFusionDecoder"], [191, 0, 1, "", "SphericalHemiFusionEncoder"], [192, 0, 1, "", "SphericalUNet"], [193, 0, 1, "", "SphericalVAE"], [194, 0, 1, "", "SphericalVGG"], [195, 0, 1, "", "SphericalVGG11"], [196, 0, 1, "", "SphericalVGG11BN"], [197, 0, 1, "", "SphericalVGG13"], [198, 0, 1, "", "SphericalVGG13BN"], [199, 0, 1, "", "SphericalVGG16"], [200, 0, 1, "", "SphericalVGG16BN"], [201, 0, 1, "", "SphericalVGG19"], [202, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[175, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[176, 1, 1, "", "forward"]], "surfify.models.SiT": [[177, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[178, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[179, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[180, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[181, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[190, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[191, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[192, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[193, 1, 1, "", "decode"], [193, 1, 1, "", "encode"], [193, 1, 1, "", "forward"], [193, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[194, 1, 1, "", "forward"]], "surfify.models.base": [[203, 0, 1, "", "Ico"], [204, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[203, 3, 1, "", "conv_neighbor_indices"], [203, 3, 1, "", "down_indices"], [203, 3, 1, "", "neighbor_indices"], [203, 3, 1, "", "order"], [203, 3, 1, "", "triangles"], [203, 3, 1, "", "up_indices"], [203, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[204, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[205, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[205, 1, 1, "", "forward"]], "surfify.models.sit": [[206, 0, 1, "", "Attention"], [207, 0, 1, "", "FeedForward"], [208, 0, 1, "", "SiT"], [209, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[206, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[207, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[208, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[209, 1, 1, "", "forward"]], "surfify.models.unet": [[210, 0, 1, "", "DownBlock"], [211, 0, 1, "", "DownGBlock"], [212, 0, 1, "", "GraphicalUNet"], [213, 0, 1, "", "SphericalGUNet"], [214, 0, 1, "", "SphericalUNet"], [215, 0, 1, "", "UpBlock"], [216, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[210, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[211, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[212, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[213, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[214, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[215, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[216, 1, 1, "", "forward"]], "surfify.models.vae": [[217, 0, 1, "", "HemiFusionDecoder"], [218, 0, 1, "", "HemiFusionEncoder"], [219, 0, 1, "", "SphericalHemiFusionDecoder"], [220, 0, 1, "", "SphericalHemiFusionEncoder"], [221, 0, 1, "", "SphericalVAE"], [222, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[217, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[218, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[219, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[220, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[221, 1, 1, "", "decode"], [221, 1, 1, "", "encode"], [221, 1, 1, "", "forward"], [221, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[223, 0, 1, "", "SphericalGVGG"], [224, 0, 1, "", "SphericalGVGG11"], [225, 0, 1, "", "SphericalGVGG11BN"], [226, 0, 1, "", "SphericalGVGG13"], [227, 0, 1, "", "SphericalGVGG13BN"], [228, 0, 1, "", "SphericalGVGG16"], [229, 0, 1, "", "SphericalGVGG16BN"], [230, 0, 1, "", "SphericalGVGG19"], [231, 0, 1, "", "SphericalGVGG19BN"], [232, 0, 1, "", "SphericalVGG"], [233, 0, 1, "", "SphericalVGG11"], [234, 0, 1, "", "SphericalVGG11BN"], [235, 0, 1, "", "SphericalVGG13"], [236, 0, 1, "", "SphericalVGG13BN"], [237, 0, 1, "", "SphericalVGG16"], [238, 0, 1, "", "SphericalVGG16BN"], [239, 0, 1, "", "SphericalVGG19"], [240, 0, 1, "", "SphericalVGG19BN"], [241, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[223, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[232, 1, 1, "", "forward"]], "surfify.nn": [[243, 0, 1, "", "IcoDiNeConv"], [244, 0, 1, "", "IcoFixIndexUpSample"], [245, 0, 1, "", "IcoGenericUpConv"], [246, 0, 1, "", "IcoMaxIndexUpSample"], [247, 0, 1, "", "IcoPool"], [248, 0, 1, "", "IcoRePaConv"], [249, 0, 1, "", "IcoSpMaConv"], [250, 0, 1, "", "IcoSpMaConvTranspose"], [251, 0, 1, "", "IcoUpConv"], [252, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[243, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[244, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[245, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[246, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[247, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[248, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[249, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[250, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[251, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[252, 1, 1, "", "forward"]], "surfify.nn.functional": [[253, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[254, 0, 1, "", "IcoDiNeConv"], [255, 0, 1, "", "IcoFixIndexUpSample"], [256, 0, 1, "", "IcoGenericUpConv"], [257, 0, 1, "", "IcoMaxIndexUpSample"], [258, 0, 1, "", "IcoPool"], [259, 0, 1, "", "IcoRePaConv"], [260, 0, 1, "", "IcoSpMaConv"], [261, 0, 1, "", "IcoSpMaConvTranspose"], [262, 0, 1, "", "IcoUpConv"], [263, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[254, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[255, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[256, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[257, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[258, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[259, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[260, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[261, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[262, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[263, 1, 1, "", "forward"]], "surfify.plotting": [[265, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[266, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[267, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[267, 1, 1, "", "fit"], [267, 1, 1, "", "get_metadata_routing"], [267, 1, 1, "", "inverse_transform"], [267, 1, 1, "", "set_inverse_transform_request"], [267, 1, 1, "", "set_partial_fit_request"], [267, 1, 1, "", "set_transform_request"], [267, 1, 1, "", "transform"]], "surfify.transforms": [[268, 0, 1, "", "RandomCompose"]], "surfify.utils": [[270, 2, 1, "", "cart2sph"], [278, 2, 1, "", "debug_msg"], [279, 2, 1, "", "downsample"], [280, 2, 1, "", "downsample_data"], [281, 2, 1, "", "downsample_ico"], [282, 2, 1, "", "find_neighbors"], [283, 2, 1, "", "find_rotation_interpol_coefs"], [284, 2, 1, "", "get_logger"], [285, 2, 1, "", "get_rectangular_projection"], [286, 2, 1, "", "grid2text"], [287, 2, 1, "", "ico2ico"], [288, 2, 1, "", "icosahedron"], [289, 2, 1, "", "interpolate"], [290, 2, 1, "", "interpolate_data"], [301, 2, 1, "", "min_depth_to_get_n_neighbors"], [302, 2, 1, "", "neighbors"], [303, 2, 1, "", "neighbors_rec"], [304, 2, 1, "", "number_of_ico_vertices"], [305, 2, 1, "", "number_of_neighbors"], [306, 2, 1, "", "order_of_ico_from_vertices"], [307, 2, 1, "", "order_triangles"], [308, 2, 1, "", "patch_tri"], [309, 2, 1, "", "rotate_data"], [336, 2, 1, "", "setup_logging"], [337, 2, 1, "", "sph2cart"], [338, 2, 1, "", "text2grid"], [339, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[271, 2, 1, "", "cart2sph"], [272, 2, 1, "", "find_corresponding_order"], [273, 2, 1, "", "grid2text"], [274, 2, 1, "", "ico2ico"], [275, 2, 1, "", "sph2cart"], [276, 2, 1, "", "text2grid"], [277, 2, 1, "", "text2ico"]], "surfify.utils.io": [[291, 0, 1, "", "HidePrints"], [292, 2, 1, "", "compute_and_store"], [293, 2, 1, "", "decompose_cifti"], [294, 2, 1, "", "read_freesurfer"], [295, 2, 1, "", "read_gifti"], [296, 2, 1, "", "surf_data_from_cifti"], [297, 2, 1, "", "ungzip"], [298, 2, 1, "", "volume_from_cifti"], [299, 2, 1, "", "write_freesurfer"], [300, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[310, 2, 1, "", "_patch_tri_iter"], [311, 2, 1, "", "build_freesurfer_ico"], [312, 2, 1, "", "build_fslr_ref"], [313, 2, 1, "", "downsample"], [314, 2, 1, "", "downsample_data"], [315, 2, 1, "", "downsample_ico"], [316, 2, 1, "", "find_neighbors"], [317, 2, 1, "", "find_rotation_interpol_coefs"], [318, 2, 1, "", "get_angle_with_xaxis"], [319, 2, 1, "", "get_rectangular_projection"], [320, 2, 1, "", "icosahedron"], [321, 2, 1, "", "interpolate"], [322, 2, 1, "", "interpolate_data"], [323, 2, 1, "", "middle_point"], [324, 2, 1, "", "min_depth_to_get_n_neighbors"], [325, 2, 1, "", "neighbors"], [326, 2, 1, "", "neighbors_rec"], [327, 2, 1, "", "normalize"], [328, 2, 1, "", "number_of_ico_vertices"], [329, 2, 1, "", "number_of_neighbors"], [330, 2, 1, "", "order_of_ico_from_vertices"], [331, 2, 1, "", "order_triangles"], [332, 2, 1, "", "patch_tri"], [333, 2, 1, "", "rotate_data"], [334, 2, 1, "", "triangles_to_edges"], [335, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 242], "comput": [1, 9, 341], "time": [1, 9, 341], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 46, 174], "setup": 2, "data": [2, 6], "augment": [2, 4, 136], "dataset": [2, 8, 26, 163], "train": [2, 8], "logist": 2, "regress": [2, 71], "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 79, 135], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 264], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 174], "segment": 8, "inspect": 8, "model": [8, 174], "predict": 8, "label": 8, "api": [10, 12, 13, 26, 32, 43, 46, 50, 63, 71, 79, 82, 103, 104, 134, 135, 136, 163, 170, 174, 242, 264, 269], "document": [10, 12, 13, 26, 32, 43, 46, 50, 63, 71, 79, 82, 103, 104, 134, 135, 136, 163, 170, 174, 242, 264, 269], "nidl": [10, 11, 12, 13, 26, 32, 43, 46, 50, 63, 71, 79, 82, 103, 104, 134], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "model_prob": 13, "check_typ": 13, "base": [26, 32, 136, 174], "estim": [32, 43, 46, 50], "linear": 43, "logistic_regress": 43, "exampl": [44, 45, 47, 49, 84, 102], "ssl": [46, 50, 79], "yawar": 46, "util": [50, 82, 136, 269], "projection_head": 50, "loss": [63, 170], "infonc": 63, "yaware_infonc": 63, "metric": 71, "_regress": 71, "classif": 71, "color": 82, "valid": 82, "weight": 82, "bunch": 82, "volum": [103, 104], "backbon": 104, "densenet3d": 104, "alexnet3d": 104, "resnet3d": 104, "search": 134, "surfifi": [135, 136, 163, 170, 174, 242, 264, 269], "preprocess": 135, "mixup": 136, "_samples_gener": 163, "_gener": 163, "vae": [170, 174], "sit": 174, "vgg": 174, "nn": 242, "function": 242, "plot": 264, "io": 269, "coord": 269, "sampl": 269}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [341, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of nidl": [[10, "api-documentation-of-nidl"], [12, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[13, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[26, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[26, "nidl-datasets"]], "nidl.datasets.base": [[26, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[32, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[32, "nidl-estimators"]], "nidl.estimators.base": [[32, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[43, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[43, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[43, "nidl-estimators-linear-logistic-regression"]], "Examples": [[44, "examples"], [45, "examples"], [47, "examples"], [49, "examples"], [84, "examples"], [102, "examples"]], "API documentation of nidl.estimators.ssl": [[46, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[46, "nidl-estimators-ssl"]], "nidl.estimators.ssl.yaware": [[46, "nidl-estimators-ssl-yaware"]], "nidl.estimators.ssl.simclr": [[46, "id1"]], "API documentation of nidl.estimators.ssl.utils": [[50, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[50, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[50, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[63, "api-documentation-of-nidl-losses"]], "nidl.losses": [[63, "nidl-losses"]], "nidl.losses.infonce": [[63, "id1"]], "nidl.losses.yaware_infonce": [[63, "nidl-losses-yaware-infonce"]], "API documentation of nidl.metrics": [[71, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[71, "nidl-metrics"]], "nidl.metrics._regression": [[71, "nidl-metrics-regression"]], "nidl.metrics.classification": [[71, "nidl-metrics-classification"]], "nidl.metrics.regression": [[71, "id1"]], "API documentation of nidl.transforms": [[79, "api-documentation-of-nidl-transforms"]], "nidl.transforms": [[79, "nidl-transforms"]], "nidl.transforms.ssl": [[79, "nidl-transforms-ssl"]], "API documentation of nidl.utils": [[82, "api-documentation-of-nidl-utils"]], "nidl.utils": [[82, "nidl-utils"]], "nidl.utils.color": [[82, "nidl-utils-color"]], "nidl.utils.validation": [[82, "nidl-utils-validation"]], "nidl.utils.weights": [[82, "id1"]], "nidl.utils.bunch": [[82, "id2"]], "API documentation of nidl.volume": [[103, "api-documentation-of-nidl-volume"]], "nidl.volume": [[103, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[104, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[104, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[104, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[104, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[104, "nidl-volume-backbones-resnet3d"]], "Search in API documentation of nidl": [[134, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[135, "api-documentation-of-surfify"]], "surfify": [[135, "surfify"]], "surfify.preprocessing": [[135, "surfify-preprocessing"]], "surfify.transforms": [[135, "surfify-transforms"]], "API documentation of surfify.augmentation": [[136, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[136, "surfify-augmentation"]], "surfify.augmentation.base": [[136, "surfify-augmentation-base"]], "surfify.augmentation.mixup": [[136, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[136, "surfify-augmentation-utils"]], "API documentation of surfify.datasets": [[163, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[163, "surfify-datasets"]], "surfify.datasets._samples_generator": [[163, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[163, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[170, "api-documentation-of-surfify-losses"]], "surfify.losses": [[170, "surfify-losses"]], "surfify.losses.vae": [[170, "surfify-losses-vae"]], "API documentation of surfify.models": [[174, "api-documentation-of-surfify-models"]], "surfify.models": [[174, "surfify-models"]], "surfify.models.base": [[174, "surfify-models-base"]], "surfify.models.sit": [[174, "id1"]], "surfify.models.vae": [[174, "surfify-models-vae"]], "surfify.models.vgg": [[174, "surfify-models-vgg"]], "surfify.models.simclr": [[174, "id2"]], "surfify.models.unet": [[174, "surfify-models-unet"]], "API documentation of surfify.nn": [[242, "api-documentation-of-surfify-nn"]], "surfify.nn": [[242, "surfify-nn"]], "surfify.nn.modules": [[242, "surfify-nn-modules"]], "surfify.nn.functional": [[242, "surfify-nn-functional"]], "API documentation of surfify.plotting": [[264, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[264, "surfify-plotting"]], "surfify.plotting.surface": [[264, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[269, "api-documentation-of-surfify-utils"]], "surfify.utils": [[269, "surfify-utils"]], "surfify.utils.io": [[269, "surfify-utils-io"]], "surfify.utils.coord": [[269, "surfify-utils-coord"]], "surfify.utils.sampling": [[269, "surfify-utils-sampling"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[14, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[18, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[19, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[27, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[28, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[28, "nidl.datasets.BaseNumpyDataset.get_data"]], "basedataset (class in nidl.datasets.base)": [[29, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[30, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[30, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[30, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[31, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[31, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "baseestimator (class in nidl.estimators)": [[33, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[34, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[35, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[36, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[37, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[38, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[39, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[40, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[41, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[42, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[44, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[47, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[48, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[49, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[49, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[49, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[49, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[49, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[49, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[51, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[51, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[52, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[53, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[54, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[54, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[55, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[56, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[57, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[58, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[59, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[60, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[61, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[62, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[64, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[64, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[65, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[65, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[65, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[65, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[65, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[65, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[66, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[66, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[67, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[67, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[68, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[68, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[68, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[68, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[68, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[68, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[69, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[69, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[70, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[70, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[72, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[73, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[74, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[75, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[76, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[77, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[78, "nidl.metrics.regression_report"]], "contrastivetransforms (class in nidl.transforms)": [[80, "nidl.transforms.ContrastiveTransforms"]], "contrastivetransforms (class in nidl.transforms.ssl)": [[81, "nidl.transforms.ssl.ContrastiveTransforms"]], "bunch (class in nidl.utils)": [[83, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[84, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[84, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[84, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[84, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[84, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[85, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[86, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[86, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[86, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[86, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[86, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[87, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[88, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[89, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[90, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[91, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[92, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[93, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[94, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[95, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[96, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[97, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[98, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[99, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[100, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[101, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[102, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[102, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[102, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[102, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[102, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[105, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[105, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[106, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[106, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[107, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[107, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[108, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[108, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[109, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[109, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[110, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[111, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[111, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[112, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[112, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[113, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[113, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[114, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[115, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[116, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[117, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[118, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[119, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[120, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[120, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[121, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[121, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[122, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[122, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[123, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[123, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[124, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[125, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[126, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[127, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[132, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[133, "nidl.volume.backbones.resnet50_trunc"]], "basetransformer (class in surfify.augmentation)": [[137, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[137, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[138, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[138, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[138, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[139, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[139, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[140, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[140, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[141, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[141, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[142, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[142, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[143, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[143, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[144, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[145, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[146, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[146, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[147, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[147, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[148, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[148, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[149, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[149, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[150, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[151, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[151, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[151, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[152, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[152, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[153, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[153, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[154, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[155, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[155, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[156, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[156, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[156, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[156, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[156, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[157, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[157, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[157, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[157, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[158, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[159, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[160, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[161, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[162, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[164, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[165, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[166, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[167, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[168, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[169, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[171, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[172, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[173, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[175, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[175, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[176, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[176, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[177, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[177, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[178, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[178, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[179, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[179, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[180, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[180, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[181, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[181, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[182, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[183, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[184, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[185, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[186, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[187, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[188, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[189, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[190, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[190, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[191, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[191, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[192, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[192, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[193, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[193, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[193, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[193, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[193, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[194, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[194, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[195, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[196, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[197, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[198, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[199, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[200, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[201, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[202, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[203, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[203, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[204, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[204, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[205, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[205, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[206, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[206, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[207, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[207, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[208, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[208, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[209, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[209, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[210, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[210, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[211, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[211, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[212, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[212, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[213, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[213, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[214, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[214, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[215, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[215, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[216, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[216, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[217, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[217, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[218, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[218, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[219, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[219, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[220, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[220, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[221, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[221, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[221, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[221, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[221, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[222, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[223, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[223, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[224, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[225, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[226, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[227, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[228, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[229, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[230, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[231, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[232, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[232, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[233, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[234, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[235, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[236, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[237, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[238, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[239, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[240, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[241, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[243, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[243, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[244, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[244, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[245, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[245, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[246, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[246, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[247, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[247, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[248, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[248, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[249, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[249, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[250, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[250, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[251, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[251, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[252, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[252, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[253, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[254, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[254, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[255, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[255, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[256, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[256, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[257, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[257, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[258, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[258, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[259, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[259, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[260, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[260, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[261, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[261, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[262, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[262, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[263, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[263, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[265, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[266, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[267, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[267, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[268, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[270, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[271, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[272, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[273, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[274, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[275, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[276, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[277, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[278, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[279, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[280, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[281, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[282, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[283, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[284, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[285, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[286, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[287, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[288, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[289, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[290, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[291, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[292, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[293, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[294, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[295, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[296, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[297, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[298, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[299, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[300, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[301, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[302, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[303, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[304, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[305, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[306, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[307, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[308, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[309, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[310, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[311, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[312, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[313, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[314, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[315, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[316, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[317, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[318, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[319, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[320, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[321, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[322, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[323, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[324, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[325, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[326, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[327, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[328, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[329, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[330, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[331, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[332, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[333, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[334, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[335, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[336, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[337, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[338, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[339, "surfify.utils.text2ico"]]}})
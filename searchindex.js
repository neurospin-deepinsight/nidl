Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/model_probing", "auto_gallery/openbhb", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "auto_gallery/yaware_openbhb", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.ClassificationProbingCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.MultiTaskEstimator", "generated/nidl.callbacks.MultitaskModelProbing", "generated/nidl.callbacks.RegressionProbingCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.ClassificationProbingCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RegressionProbingCallback", "generated/nidl.callbacks.multitask_probing.MultiTaskEstimator", "generated/nidl.callbacks.multitask_probing.MultitaskModelProbing", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.ImageDataFrameDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset", "generated/nidl.datasets.pandas_dataset.default_image_loader", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/model_probing.rst", "auto_gallery/openbhb.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "auto_gallery/yaware_openbhb.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.ClassificationProbingCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.MultiTaskEstimator.rst", "generated/nidl.callbacks.MultitaskModelProbing.rst", "generated/nidl.callbacks.RegressionProbingCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.ClassificationProbingCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RegressionProbingCallback.rst", "generated/nidl.callbacks.multitask_probing.MultiTaskEstimator.rst", "generated/nidl.callbacks.multitask_probing.MultitaskModelProbing.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.ImageDataFrameDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset.rst", "generated/nidl.datasets.pandas_dataset.default_image_loader.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Model probing callback of embedding estimators", "Presentation of the OpenBHB dataset and baseline models for age and sex predictions", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "Weakly Supervised Contrastive Learning with y-Aware", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 3, 13, 19, 20, 25, 27, 41, 46, 52, 53, 54, 55, 56, 57, 59, 62, 65, 73, 76, 88, 92, 106, 108, 110, 160, 162, 215, 246, 305, 379], "supervis": [0, 1, 3, 13, 32, 33, 37, 38, 52, 53, 54, 55, 56, 57, 59, 62, 65, 88, 92, 110, 379], "contrast": [0, 3, 33, 37, 52, 53, 55, 56, 57, 60, 61, 63, 64, 65, 74, 78, 88, 92, 110, 160, 162, 203, 204, 216, 243, 379], "learn": [0, 3, 13, 15, 18, 20, 22, 24, 26, 27, 33, 37, 52, 53, 55, 56, 57, 60, 61, 63, 64, 65, 74, 78, 79, 88, 92, 110, 113, 114, 117, 119, 160, 162, 212, 216, 231, 243, 259, 281, 292, 378, 379], "simclr": [0, 3, 13, 52, 53, 55, 57, 60, 61, 63, 64, 88, 92, 110, 172, 216, 243, 379], "weakli": [0, 3, 33, 37, 56, 65, 88, 379], "y": [0, 2, 3, 8, 10, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 37, 38, 56, 65, 74, 78, 88, 150, 151, 154, 155, 206, 207, 305, 308, 309, 311, 313, 314, 315, 318, 324, 327, 328, 347, 352, 359, 360, 371, 375, 376, 377, 379], "awar": [0, 3, 33, 37, 56, 65, 74, 78, 88, 379], "present": [0, 3, 33, 37, 56, 65, 92, 109, 110, 379], "openbhb": [0, 3, 13, 33, 37, 172, 379], "dataset": [0, 3, 8, 13, 19, 21, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 66, 172, 202, 203, 204, 205, 206, 207, 302, 314, 315, 318, 327, 328, 347, 352, 359, 360, 371, 376, 377, 379], "baselin": [0, 3, 33, 37, 379], "model": [0, 3, 4, 13, 18, 19, 22, 24, 25, 26, 28, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65, 66, 88, 90, 92, 110, 115, 116, 118, 125, 130, 131, 172, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 379], "ag": [0, 3, 12, 32, 33, 37, 38, 379], "sex": [0, 3, 33, 37, 379], "predict": [0, 3, 4, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 37, 41, 46, 52, 53, 55, 57, 59, 62, 83, 84, 215, 219, 232, 246, 261, 270, 379], "probe": [0, 3, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 55, 56, 57, 65, 66, 88, 379], "callback": [0, 3, 4, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65, 88, 172, 379], "embed": [0, 3, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 55, 56, 57, 65, 72, 74, 75, 78, 88, 113, 114, 115, 116, 117, 119, 130, 131, 215, 246, 379], "estim": [0, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 73, 76, 80, 81, 85, 86, 88, 107, 109, 172, 305, 312, 325, 379], "neighbor": [0, 1, 5, 6, 11, 12, 13, 166, 167, 169, 170, 172, 176, 178, 179, 184, 185, 189, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 253, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 286, 289, 292, 294, 295, 296, 297, 300, 307, 311, 314, 317, 320, 321, 324, 327, 339, 340, 341, 343, 347, 351, 354, 355, 359, 362, 363, 364, 367, 371, 373, 376, 379], "unet": [0, 5, 11, 13, 172, 218, 230, 248, 249, 250, 251, 252, 253, 254, 379], "segment": [0, 2, 5, 11, 115, 116, 130, 131, 160, 162, 379], "project": [0, 2, 5, 6, 7, 9, 11, 12, 14, 30, 35, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 181, 187, 215, 246, 312, 315, 317, 320, 323, 325, 326, 340, 341, 346, 351, 354, 356, 357, 358, 361, 363, 364, 370, 377, 379], "textur": [0, 5, 6, 11, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 213, 214, 219, 228, 229, 231, 232, 255, 256, 257, 258, 259, 261, 270, 303, 304, 311, 314, 315, 318, 324, 327, 328, 347, 352, 359, 360, 371, 376, 377, 379], "icosahedron": [0, 5, 6, 8, 9, 10, 11, 13, 172, 178, 179, 181, 184, 185, 187, 202, 205, 206, 207, 212, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 252, 253, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 311, 312, 314, 315, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 376, 377, 379], "match": [0, 1, 5, 11, 31, 36, 165, 167, 168, 170, 310, 315, 377, 379], "augment": [0, 5, 11, 13, 30, 31, 34, 35, 36, 52, 53, 55, 56, 57, 65, 66, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 166, 167, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 379], "download": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 33, 37, 90, 92, 110], "all": [0, 1, 2, 4, 7, 19, 20, 25, 27, 30, 32, 33, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 59, 62, 65, 77, 82, 83, 84, 85, 86, 88, 89, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 152, 156, 165, 168, 216, 218, 230, 243, 244, 245, 247, 250, 251, 252, 286, 287, 288, 297, 298, 299, 379], "exampl": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 19, 25, 32, 38, 41, 46, 59, 62, 85, 86, 91, 93, 108, 153, 157, 160, 162, 166, 169, 217, 219, 230, 231, 232, 242, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 376, 377, 379], "python": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 15, 106], "sourc": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 228, 229, 230, 231, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 270, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "code": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 17, 23, 55, 57, 66, 69, 103, 104], "auto_gallery_python": 0, "zip": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 335], "jupyt": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "notebook": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "auto_gallery_jupyt": 0, "galleri": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379], "gener": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 29, 30, 33, 35, 37, 41, 46, 52, 53, 55, 56, 57, 65, 88, 89, 150, 152, 154, 156, 191, 201, 202, 205, 206, 207, 212, 314, 320, 335, 337, 338, 349, 350, 354, 376], "sphinx": [0, 1, 2, 4, 6, 7, 8, 9, 10, 12], "go": [1, 2, 4, 6, 7, 8, 9, 10, 12], "end": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 56, 65, 103, 104, 109], "full": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 41, 46, 83, 84, 166, 167, 169, 170, 319, 353], "thi": [1, 2, 4, 7, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "show": [1, 2, 4, 6, 7, 8, 9, 10, 12, 85, 86, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "you": [1, 4, 7, 12, 14, 17, 19, 23, 25, 30, 32, 33, 35, 37, 38, 41, 46, 52, 53, 56, 65, 66, 67, 92, 110, 305], "how": [1, 2, 4, 6, 7, 9, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "investig": [1, 12], "given": [1, 4, 18, 19, 22, 24, 25, 26, 33, 37, 55, 56, 57, 65, 74, 78, 88, 92, 109, 110, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 211, 213, 255, 305, 330, 347, 371, 372, 373], "an": [1, 2, 4, 8, 9, 10, 14, 18, 19, 21, 22, 24, 25, 26, 28, 32, 38, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 66, 68, 69, 91, 92, 93, 106, 108, 109, 110, 115, 116, 130, 131, 150, 154, 178, 179, 184, 185, 188, 191, 192, 194, 198, 200, 217, 218, 230, 242, 251, 252, 281, 292, 305, 311, 314, 315, 319, 324, 326, 328, 339, 342, 343, 344, 347, 353, 358, 360, 361, 362, 366, 367, 368, 371, 376, 377], "barlow": [1, 4], "twin": [1, 4], "us": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "notion": 1, "A": [1, 4, 6, 7, 8, 9, 10, 20, 27, 30, 31, 33, 34, 35, 36, 37, 52, 53, 55, 56, 57, 60, 61, 63, 64, 65, 92, 110, 174, 203, 204, 212, 216, 243, 306], "standard": [1, 2, 4, 12, 74, 78, 145, 146, 147, 148, 161, 163, 178, 180, 184, 186, 217, 218, 230, 242, 251, 252, 305, 326, 329, 346, 358, 370], "machin": [1, 66, 92, 110], "e": [1, 4, 8, 14, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 69, 73, 74, 76, 78, 83, 84, 88, 114, 115, 116, 119, 130, 131, 150, 154, 166, 169, 305, 314, 376], "g": [1, 4, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 60, 63, 65, 74, 78, 115, 116, 130, 131, 150, 154, 166, 169, 305], "linear": [1, 4, 12, 13, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 73, 74, 76, 78, 113, 117, 152, 156, 166, 167, 169, 170, 172, 215, 218, 230, 246, 251, 252, 253], "svm": 1, "i": [1, 2, 4, 7, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "evalu": [1, 2, 4, 8, 21, 28, 73, 76, 291], "task": [1, 2, 4, 12, 20, 21, 27, 28, 32, 38, 52, 53, 55, 57, 80, 81, 115, 116, 130, 131], "being": [1, 2, 4], "fit": [1, 4, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 41, 46, 56, 65, 73, 76, 109, 305], "It": [1, 2, 4, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "allow": [1, 2, 4, 7, 17, 23, 31, 36, 66, 67, 305, 330, 347, 371], "user": [1, 14, 18, 19, 24, 25, 41, 46, 67, 218, 230, 251, 252, 305, 347, 371], "understand": [1, 55, 57], "what": [1, 4, 56, 65, 66, 69], "concept": 1, "ar": [1, 2, 4, 7, 8, 10, 12, 17, 19, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 67, 82, 83, 84, 85, 86, 88, 89, 91, 93, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 160, 162, 166, 167, 169, 170, 174, 203, 204, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 291, 305, 310, 314, 327, 340, 347, 349, 359, 363, 371, 373, 376], "ha": [1, 2, 4, 7, 19, 25, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 85, 86, 114, 115, 116, 119, 130, 131, 146, 148, 160, 161, 162, 163, 218, 230, 251, 252, 305], "been": [1, 2, 4, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65], "first": [1, 2, 4, 7, 8, 10, 12, 33, 37, 55, 56, 57, 59, 62, 65, 72, 74, 75, 78, 83, 84, 114, 115, 116, 119, 130, 131, 213, 215, 218, 230, 246, 248, 249, 251, 252, 255, 347, 371], "introduc": [1, 2], "guillaum": 1, "alain": 1, "yoshua": 1, "bengio": 1, "2017": [1, 150, 154], "1": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 88, 89, 91, 93, 108, 113, 114, 115, 116, 117, 119, 128, 129, 130, 131, 134, 135, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 166, 167, 169, 170, 175, 176, 179, 185, 189, 193, 194, 195, 202, 205, 206, 207, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 248, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 287, 288, 289, 292, 294, 295, 296, 298, 299, 300, 303, 304, 305, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 349, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 373, 376, 377], "intern": [1, 41, 46, 52, 53, 59, 60, 61, 62, 63, 64, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 166, 167, 169, 170, 216, 243, 244, 245, 247], "behavior": 1, "deep": [1, 2, 13, 15, 55, 56, 57, 65, 160, 162, 378], "neural": [1, 56, 65, 150, 154], "network": [1, 4, 56, 65, 150, 154, 212, 213, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "along": [1, 2, 33, 37, 151, 155, 305, 310], "differ": [1, 2, 4, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 55, 56, 57, 65, 66, 166, 169, 179, 185, 203, 204, 217, 218, 230, 242, 251, 252], "layer": [1, 4, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 113, 114, 115, 116, 117, 119, 130, 131, 132, 133, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 250, 251, 252, 253, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301], "techniqu": [1, 4, 12, 152, 156, 166, 167, 169, 170, 373], "aim": [1, 12], "answer": 1, "question": [1, 4], "like": [1, 2, 4, 20, 21, 27, 28, 41, 46, 52, 53, 56, 65, 66, 80, 81, 83, 84, 85, 86, 115, 116, 130, 131, 250, 305, 306], "intermedi": 1, "inform": [1, 2, 4, 12, 30, 31, 34, 35, 36, 66, 74, 78, 203, 204, 212, 217, 242], "contain": [1, 2, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 91, 93, 203, 204, 217, 242, 260, 303, 304, 330, 346, 370], "Then": [1, 7, 12], "adapt": [1, 4, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 179, 185, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "benchmark": [1, 2, 4], "vision": [1, 32, 38, 212, 215, 246, 346, 370], "dino": 1, "dinov2": 1, "classic": [1, 4, 230, 252, 253], "imagenet": [1, 4], "cifar": 1, "implement": [1, 4, 19, 21, 25, 28, 41, 46, 52, 53, 60, 61, 63, 64, 72, 73, 74, 75, 76, 78, 79, 88, 89, 106, 151, 155, 178, 184, 212, 215, 216, 231, 243, 246, 250, 259], "k": [1, 12, 55, 57, 73, 74, 76, 78, 114, 119, 176, 189, 281, 286, 292, 297, 315, 377], "nearest": [1, 8, 152, 156, 166, 167, 169, 170, 176, 189, 230, 252, 253, 311, 314, 317, 324, 327, 351, 359, 376], "ouput": 1, "classifi": [1, 4, 18, 20, 24, 27, 42, 47], "iclr": [1, 56, 65], "workshop": 1, "requir": [1, 2, 4, 12, 41, 46, 52, 53, 56, 65, 73, 76, 79, 153, 157], "some": [1, 4, 9, 12, 13, 41, 46, 52, 53, 55, 56, 57, 65, 66, 68, 73, 76, 115, 116, 130, 131, 182, 183, 196, 197, 201, 305, 373], "packag": [1, 4, 7, 12, 14], "besid": [1, 4, 12], "nidl": [1, 2, 4, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 378], "let": [1, 2, 4, 12], "": [1, 2, 4, 7, 9, 12, 21, 22, 26, 28, 32, 33, 37, 38, 41, 46, 56, 65, 73, 76, 83, 84, 109, 150, 154, 166, 169, 177, 178, 179, 181, 184, 185, 187, 190, 202, 205, 206, 207, 213, 214, 218, 228, 229, 230, 248, 251, 252, 253, 255, 256, 257, 258, 281, 292, 317, 320, 330, 340, 341, 345, 346, 351, 354, 363, 364, 369, 370], "start": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 115, 116, 130, 131, 179, 185, 320, 354], "import": [1, 2, 4, 6, 7, 8, 9, 10, 12, 32, 38, 66, 68, 69, 85, 86, 91, 93, 108, 153, 157, 160, 162, 166, 169, 201, 217, 219, 230, 231, 232, 242, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 376, 377], "our": [1, 4, 7, 12, 52, 53], "librari": [1, 4, 12], "below": [1, 4, 12, 56, 65, 66], "o": [1, 4, 7, 9, 307, 317, 320, 340, 341, 346, 351, 354, 363, 364, 370], "re": [1, 79], "matplotlib": [1, 2, 4, 6, 7, 8, 9, 10, 12, 303, 304, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "pyplot": [1, 2, 4, 6, 7, 8, 9, 10, 12, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "plt": [1, 2, 4, 6, 7, 8, 9, 10, 12, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "numpi": [1, 2, 6, 7, 8, 10, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 56, 65, 79, 89, 160, 162, 165, 166, 168, 169, 171, 305, 308, 309, 313, 375], "np": [1, 2, 6, 7, 8, 10, 12, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 311, 324, 327, 359], "torch": [1, 4, 8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 32, 38, 41, 46, 55, 56, 57, 65, 72, 74, 75, 78, 88, 89, 92, 110, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 212, 219, 230, 231, 232, 250, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "nn": [1, 4, 8, 10, 13, 41, 46, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 72, 74, 75, 77, 78, 92, 110, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 172, 178, 184, 213, 214, 216, 228, 229, 243, 244, 245, 247, 248, 250, 253, 255, 256, 257, 258, 260, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "function": [1, 2, 4, 7, 8, 10, 13, 15, 17, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 52, 53, 56, 60, 63, 65, 66, 67, 68, 69, 70, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 160, 161, 162, 163, 172, 174, 178, 179, 181, 183, 184, 185, 187, 188, 192, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 211, 212, 213, 214, 216, 218, 228, 229, 230, 243, 244, 245, 247, 250, 251, 252, 255, 256, 257, 258, 260, 279, 286, 287, 288, 291, 297, 298, 299, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "func": [1, 330], "from": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 72, 73, 75, 76, 83, 84, 85, 86, 91, 93, 108, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 146, 148, 150, 152, 153, 154, 156, 157, 160, 162, 166, 169, 176, 179, 185, 189, 203, 204, 213, 217, 218, 219, 230, 231, 232, 242, 251, 252, 255, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 376, 377, 379], "sklearn": [1, 2, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 305], "linear_model": [1, 2, 12], "logisticregress": [1, 2, 4, 13, 51, 52, 53, 172], "ridg": 1, "tensorboard": 1, "backend": [1, 4], "event_process": 1, "event_accumul": 1, "util": [1, 2, 4, 6, 7, 8, 9, 10, 12, 13, 18, 19, 21, 22, 24, 25, 26, 28, 56, 59, 60, 61, 62, 63, 64, 65, 80, 81, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 172, 178, 179, 181, 184, 185, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 230, 231, 232, 252, 259, 270, 280, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 302, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "dataload": [1, 4, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 55, 56, 57, 65, 66], "torchvis": [1, 4, 12, 56, 65, 89, 150, 152, 154, 156], "transform": [1, 4, 7, 12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 50, 66, 87, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 182, 183, 192, 193, 195, 196, 197, 200, 203, 204, 212, 213, 215, 246, 247, 255, 305, 306, 308, 309, 312, 313, 325, 346, 370, 375], "op": [1, 12, 56, 65], "mlp": [1, 4, 12, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "make_grid": [1, 4], "model_prob": [1, 3, 13, 24, 25, 26, 172, 379], "classificationprobingcallback": [1, 13, 16, 18, 24, 172], "multitask_prob": [1, 13, 27, 28, 172], "multitaskmodelprob": [1, 13, 16, 21, 28, 172], "ssl": [1, 4, 12, 13, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 172], "yawarecontrastivelearn": [1, 12, 13, 54, 56, 65, 172], "multiviewstransform": [1, 4, 12, 13, 15, 88, 172], "we": [1, 2, 4, 7, 8, 10, 12, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65, 73, 76, 107, 150, 152, 154, 156, 279, 291, 334, 336], "defin": [1, 2, 4, 12, 30, 31, 32, 34, 35, 36, 38, 41, 46, 52, 53, 59, 60, 62, 63, 66, 67, 77, 83, 84, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 166, 169, 176, 189, 191, 194, 203, 204, 216, 218, 230, 243, 244, 245, 247, 250, 251, 252, 253, 254, 279, 286, 287, 288, 297, 298, 299, 303, 304, 306, 323, 326, 332, 333, 337, 338, 357, 358], "global": [1, 4, 12, 18, 21, 24, 28, 66, 150, 154, 279], "paramet": [1, 4, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 108, 109, 110, 113, 114, 115, 116, 117, 119, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "throughout": [1, 12], "data_dir": [1, 4, 12, 92, 110], "tmp": [1, 2, 4, 12], "batch_siz": [1, 4, 10, 12, 41, 46, 72, 74, 75, 78, 214, 228, 229, 231, 256, 257, 258, 259], "128": [1, 4, 12, 56, 59, 60, 61, 62, 63, 64, 65, 113, 117, 166, 169, 213, 214, 228, 229, 255, 256, 257, 258], "num_work": [1, 4, 12], "10": [1, 2, 4, 6, 7, 9, 10, 11, 12, 33, 37, 56, 65, 72, 75, 85, 86, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 219, 230, 232, 252, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370, 379], "latent_s": [1, 4, 12, 52, 53, 55, 57], "32": [1, 6, 12, 41, 46, 114, 119, 218, 230, 231, 250, 251, 252, 259], "For": [1, 2, 4, 12, 32, 38, 41, 46, 52, 53, 109, 160, 162, 166, 167, 169, 170, 260, 340, 363], "illustr": 1, "purpos": [1, 203, 204], "focu": [1, 4, 12], "handwritten": 1, "digit": [1, 85, 86], "60k": 1, "imag": [1, 4, 8, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 52, 53, 55, 56, 57, 65, 151, 152, 153, 155, 156, 157, 160, 162, 166, 167, 169, 170, 174, 203, 204, 211, 314, 331, 376], "10k": 1, "test": [1, 4, 7, 10, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 46], "size": [1, 4, 8, 9, 10, 55, 56, 57, 65, 74, 78, 113, 114, 115, 116, 117, 119, 130, 131, 145, 147, 150, 152, 154, 156, 160, 162, 165, 166, 168, 169, 176, 177, 179, 185, 189, 190, 191, 203, 204, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 287, 288, 291, 297, 298, 299, 320, 323, 341, 346, 348, 354, 357, 364, 370], "28x28": 1, "pixel": [1, 4], "each": [1, 2, 4, 7, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 33, 35, 37, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 66, 85, 86, 114, 115, 116, 119, 130, 131, 150, 152, 153, 154, 156, 157, 160, 161, 162, 163, 165, 168, 176, 178, 179, 184, 185, 189, 192, 200, 202, 205, 206, 207, 211, 213, 214, 215, 217, 218, 228, 229, 230, 242, 246, 250, 251, 252, 255, 256, 257, 258, 305, 320, 321, 340, 341, 347, 354, 355, 363, 364, 371], "0": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 17, 23, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 72, 73, 74, 75, 76, 78, 79, 83, 84, 85, 86, 89, 108, 115, 116, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 165, 166, 167, 168, 169, 170, 179, 181, 185, 187, 194, 195, 215, 231, 241, 244, 245, 246, 247, 250, 259, 282, 287, 288, 293, 298, 299, 303, 304, 310, 312, 315, 317, 320, 325, 340, 341, 345, 346, 347, 351, 354, 363, 364, 369, 370, 371, 373, 377, 379], "9": [1, 2, 4, 6, 7, 56, 65, 85, 86, 209, 210, 379], "rather": [1, 30, 35], "small": [1, 2, 7, 12, 33, 37, 56, 65, 113, 117, 161, 163], "scale": [1, 2, 4, 8, 10, 12, 33, 37, 41, 46, 52, 53, 72, 73, 74, 75, 76, 78, 150, 152, 154, 156, 160, 161, 162, 163, 173, 202, 205, 206, 207, 305, 314, 315, 318, 323, 327, 328, 341, 347, 352, 357, 359, 360, 364, 371, 376, 377], "compar": [1, 2, 4, 12], "modern": 1, "suffici": [1, 4], "logist": [1, 52, 53], "evolv": 1, "becom": 1, "more": [1, 2, 4, 12, 18, 24, 30, 31, 32, 34, 35, 36, 38, 55, 56, 57, 65, 114, 119, 152, 156, 165, 168, 173, 203, 204, 378], "linearli": 1, "separ": [1, 21, 28, 32, 38, 66, 160, 161, 162, 163], "class": [1, 4, 8, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 329], "load": [1, 4, 10, 12, 13, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 46, 66, 69, 70, 92, 110, 201, 203, 204, 334, 336], "These": [1, 2, 33, 37, 56, 65], "scale_transform": [1, 4], "compos": [1, 4, 12, 66, 215, 246, 306, 340, 363], "totensor": [1, 4], "normal": [1, 2, 4, 13, 41, 46, 52, 53, 56, 59, 62, 65, 72, 73, 75, 76, 115, 116, 130, 131, 150, 154, 160, 161, 162, 163, 172, 173, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 305, 307, 356, 365], "5": [1, 2, 4, 6, 8, 9, 10, 11, 12, 85, 86, 153, 157, 160, 162, 181, 187, 217, 218, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 250, 251, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 297, 323, 340, 341, 357, 363, 364, 379], "train_xy_dataset": 1, "true": [1, 2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 37, 38, 41, 46, 56, 65, 80, 81, 85, 86, 92, 98, 103, 104, 105, 108, 110, 114, 119, 150, 154, 175, 192, 193, 200, 209, 210, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 289, 292, 294, 295, 296, 300, 303, 304, 305, 311, 312, 315, 318, 320, 324, 325, 340, 345, 352, 354, 363, 369, 377], "test_xy_dataset": 1, "fals": [1, 2, 4, 6, 8, 9, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 41, 46, 52, 53, 56, 65, 83, 84, 85, 86, 92, 106, 108, 110, 114, 115, 116, 119, 120, 121, 130, 131, 150, 154, 203, 204, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 248, 249, 250, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 303, 304, 305, 312, 317, 319, 320, 325, 326, 327, 328, 329, 331, 334, 336, 340, 341, 345, 346, 347, 351, 353, 354, 358, 359, 360, 363, 364, 369, 370, 371, 372], "To": [1, 4, 7, 12, 19, 25, 30, 35, 41, 46, 52, 53, 80], "perform": [1, 2, 4, 12, 18, 19, 22, 24, 25, 26, 41, 46, 52, 53, 55, 56, 57, 65, 77, 109, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 176, 189, 216, 243, 244, 245, 247, 250, 285, 286, 287, 288, 296, 297, 298, 299, 305], "need": [1, 2, 4, 7, 8, 41, 46, 56, 65, 66, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 291, 297, 298, 299], "set": [1, 2, 4, 7, 12, 20, 27, 33, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 65, 66, 70, 73, 74, 76, 78, 83, 84, 88, 94, 160, 162, 165, 167, 168, 170, 179, 181, 185, 187, 201, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 249, 250, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 306, 317, 327, 331, 351, 359], "creat": [1, 4, 12, 106, 160, 162, 166, 169, 188, 194, 195, 198, 201, 203, 204, 241, 279], "multipl": [1, 21, 22, 26, 28, 32, 33, 37, 38, 41, 46, 52, 53, 56, 65, 66, 67, 83, 84, 88, 114, 119, 150, 153, 154, 157, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "view": [1, 2, 55, 56, 57, 65, 72, 74, 75, 78, 88, 345, 369], "same": [1, 2, 4, 7, 12, 21, 28, 33, 37, 41, 46, 55, 56, 57, 65, 66, 67, 74, 78, 80, 81, 87, 88, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 310, 312, 325, 330, 335, 340, 363], "sinc": [1, 4, 7, 8, 12, 41, 46, 55, 56, 57, 65, 77, 83, 84, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 160, 162, 166, 167, 169, 170, 216, 243, 244, 245, 247, 250, 286, 287, 288, 291, 297, 298, 299], "work": [1, 4, 7, 12, 30, 32, 35, 38, 56, 65, 66, 166, 169, 178, 179, 184, 185, 260, 305], "grayscal": [1, 4], "random": [1, 4, 6, 12, 41, 46, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 166, 169, 175, 179, 185, 191, 192, 193, 194, 200, 202, 205, 206, 207], "resiz": [1, 4, 13, 89, 152, 156, 167, 170, 172], "crop": [1, 4, 152, 156, 165, 168], "gaussian": [1, 4, 12, 56, 65, 73, 74, 76, 78, 145, 146, 147, 148, 152, 156, 166, 167, 169, 170, 178, 180, 184, 186, 202, 205, 206, 207], "blur": [1, 4, 145, 147, 178, 184], "reduc": [1, 2, 4, 12, 41, 46, 80, 115, 116, 130, 131, 176, 189, 215, 246, 318, 319, 321, 352, 353, 355], "kernel": [1, 12, 56, 65, 73, 74, 76, 78, 115, 116, 130, 131, 145, 147, 166, 167, 169, 170, 178, 184, 287, 288, 298, 299, 340, 341, 363, 364], "3x3": [1, 9, 115, 116, 130, 131, 135, 218, 230, 251, 252], "onli": [1, 2, 4, 7, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "contrast_transform": [1, 4, 12], "randomresizedcrop": [1, 4, 13, 89, 149, 152, 156, 172], "28": [1, 6], "gaussianblur": [1, 4], "kernel_s": [1, 4, 8, 287, 288, 298, 299], "3": [1, 2, 4, 6, 7, 9, 10, 19, 25, 56, 65, 66, 85, 86, 91, 93, 106, 114, 115, 116, 119, 130, 131, 145, 147, 150, 154, 166, 167, 169, 170, 178, 179, 181, 184, 185, 187, 202, 203, 204, 205, 206, 207, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 241, 242, 251, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 312, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 376, 377], "custom": [1, 41, 46, 56, 65, 80, 81, 109], "return": [1, 2, 12, 19, 20, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 106, 108, 110, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 197, 198, 199, 200, 203, 204, 206, 207, 211, 213, 214, 215, 217, 219, 228, 229, 231, 232, 242, 246, 255, 256, 257, 258, 259, 260, 261, 270, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377], "without": [1, 2, 12, 14, 55, 56, 57, 65, 85, 86, 151, 155, 160, 162, 335], "label": [1, 2, 4, 8, 12, 18, 19, 22, 24, 25, 26, 32, 33, 37, 38, 52, 53, 55, 56, 57, 65, 74, 78, 151, 153, 155, 157, 166, 167, 169, 170, 206, 207, 303, 304], "sslmnist": 1, "def": [1, 2, 6, 8, 12, 19, 25, 41, 46, 52, 53, 56, 65, 108], "__getitem__": [1, 33, 37], "index": [1, 2, 30, 31, 35, 36, 41, 46, 52, 53, 55, 56, 57, 65, 85, 86, 151, 155, 178, 179, 184, 185, 317, 320, 340, 351, 354, 363, 372], "img": [1, 4, 32, 38], "_": [1, 8, 12, 32, 38, 284, 285, 295, 296, 306, 334, 336], "super": [1, 19, 25, 41, 46, 52, 53], "ssl_dataset": 1, "n_view": [1, 4, 12, 88], "2": [1, 2, 4, 6, 7, 9, 10, 12, 19, 25, 56, 65, 66, 73, 74, 76, 78, 79, 83, 84, 85, 86, 91, 93, 108, 115, 116, 130, 131, 145, 147, 151, 155, 166, 169, 188, 194, 195, 198, 202, 205, 206, 207, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 308, 309, 311, 312, 314, 315, 317, 318, 319, 320, 323, 324, 325, 327, 328, 339, 340, 341, 346, 351, 352, 353, 354, 357, 359, 360, 362, 363, 364, 370, 372, 376, 377], "test_ssl_dataset": 1, "And": [1, 4], "final": [1, 4, 10, 12, 33, 37, 55, 56, 57, 61, 64, 65, 113, 117, 230, 252], "loader": [1, 4, 10, 39], "train_xy_load": 1, "shuffl": [1, 4, 10, 12, 41, 46], "drop_last": [1, 4], "pin_memori": [1, 4], "test_xy_load": 1, "train_ssl_load": 1, "test_ssl_load": 1, "befor": [1, 4, 32, 38, 109, 152, 156, 218, 230, 251, 252, 288, 299, 305], "show_imag": 1, "titl": [1, 2, 4, 8, 100, 101], "none": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 66, 69, 70, 74, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 109, 110, 115, 116, 128, 129, 130, 131, 151, 153, 155, 157, 160, 161, 162, 163, 166, 169, 171, 176, 178, 179, 181, 184, 185, 187, 189, 202, 203, 204, 205, 206, 207, 209, 210, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 250, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 288, 299, 303, 304, 305, 318, 319, 328, 330, 347, 349, 350, 352, 353, 360, 361, 371, 374], "nrow": [1, 4], "8": [1, 2, 4, 6, 8, 10, 11, 12, 33, 37, 41, 46, 52, 53, 85, 86, 161, 163, 166, 167, 169, 170, 230, 244, 252, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 379], "grid": [1, 2, 12, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 311, 314, 323, 324, 341, 357, 364, 376], "pad_valu": [1, 4], "figur": [1, 2, 4, 8, 303, 304], "figsiz": [1, 2, 4, 6, 7, 8, 9, 12, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "imshow": [1, 4, 8, 314, 376], "permut": [1, 4, 7, 177, 190, 310, 312, 325], "cpu": [1, 4, 19, 25, 41, 46], "axi": [1, 4, 8, 10, 151, 153, 155, 157, 165, 168, 303, 304, 305, 310, 321, 327, 334, 336, 340, 347, 355, 356, 359, 363, 371], "off": [1, 4, 8], "origin": [1, 2, 4, 8, 12, 152, 156, 160, 161, 162, 163, 166, 169, 174, 211, 305], "next": [1, 2, 4, 7, 41, 46, 52, 53, 330], "iter": [1, 4, 41, 46, 52, 53, 260], "augmented_view": 1, "view1": 1, "view2": 1, "fig": [1, 2, 6, 7, 9, 12, 303, 304, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "ax": [1, 2, 6, 7, 8, 9, 12, 151, 153, 155, 157, 288, 299, 303, 304, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "subplot": [1, 2, 6, 7, 9, 12, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "6": [1, 2, 4, 6, 12, 33, 37, 56, 65, 85, 86, 91, 93, 231, 232, 241, 259, 270, 340, 346, 363, 370], "4": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 19, 25, 56, 65, 73, 76, 85, 86, 114, 115, 116, 119, 130, 131, 151, 153, 155, 157, 166, 167, 169, 170, 230, 241, 252, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 299, 300, 301, 310, 312, 315, 318, 319, 325, 328, 343, 352, 353, 360, 367, 373, 377, 379], "rang": [1, 2, 4, 6, 7, 10, 41, 46, 145, 146, 147, 148, 150, 152, 154, 156, 160, 162, 308, 309, 343, 367], "cmap": [1, 2, 12], "grai": [1, 2, 9, 12, 33, 37], "set_titl": [1, 2, 12], "f": [1, 2, 4, 8, 12, 52, 53, 55, 57, 160, 162, 218, 230, 251, 252], "item": [1, 2, 10, 12, 32, 38, 330], "tight_layout": [1, 2, 6, 12], "can": [1, 2, 4, 7, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 61, 64, 65, 66, 73, 76, 89, 107, 146, 148, 150, 154, 161, 163, 175, 182, 193, 196, 203, 204, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 260, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 329, 330], "now": [1, 2, 4, 7, 10, 12, 115, 116, 130, 131, 160, 162, 260], "The": [1, 2, 4, 7, 12, 18, 19, 21, 22, 24, 25, 26, 28, 30, 32, 33, 35, 37, 38, 41, 46, 52, 53, 55, 56, 57, 60, 63, 65, 66, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 88, 89, 109, 146, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 178, 180, 181, 184, 186, 187, 212, 213, 214, 215, 218, 228, 229, 230, 231, 246, 250, 251, 252, 255, 256, 257, 258, 259, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 305, 308, 309, 329, 330], "everi": [1, 4, 41, 46, 56, 65, 77, 89, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 317, 351], "epoch": [1, 4, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 56, 65], "log": [1, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 55, 56, 57, 65, 74, 78, 209, 210, 211, 215, 217, 218, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 250, 251, 252, 259, 261, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 322, 374], "default": [1, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 52, 53, 55, 56, 57, 65, 66, 69, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 92, 109, 110, 113, 114, 115, 116, 117, 119, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 166, 167, 169, 170, 175, 176, 178, 179, 181, 184, 185, 187, 188, 189, 192, 193, 198, 200, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 285, 287, 288, 292, 296, 298, 299, 303, 304, 305, 310, 314, 315, 318, 319, 321, 323, 326, 328, 329, 330, 331, 340, 341, 342, 345, 346, 347, 349, 350, 352, 353, 355, 357, 358, 360, 363, 364, 366, 369, 370, 371, 374, 376, 377], "max_it": [1, 2, 12], "200": [1, 4], "every_n_train_epoch": [1, 18, 19, 21, 22, 24, 25, 26, 28], "simpl": [1, 2, 4, 6, 7, 9, 10, 12, 55, 57, 59, 60, 61, 62, 63, 64, 113, 117, 150, 152, 154, 156, 216, 243, 312, 325, 373], "lenet": 1, "architectur": [1, 4, 10, 13, 52, 53, 55, 56, 57, 65, 111, 112, 113, 114, 115, 116, 117, 119, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 212, 218, 219, 230, 231, 232, 250, 251, 252, 259, 261, 270], "encod": [1, 4, 12, 41, 46, 52, 53, 55, 56, 57, 65, 208, 212, 214, 218, 228, 229, 230, 231, 251, 252, 256, 257, 258, 259], "few": [1, 4], "output": [1, 4, 19, 21, 25, 28, 41, 46, 52, 53, 56, 65, 66, 69, 80, 81, 83, 84, 85, 86, 87, 89, 91, 93, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 178, 179, 184, 185, 213, 215, 218, 230, 246, 248, 249, 250, 251, 252, 253, 254, 255, 260, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 329, 330], "dimens": [1, 4, 7, 12, 55, 56, 57, 65, 89, 145, 147, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 167, 168, 170, 215, 246, 260], "which": [1, 2, 4, 12, 18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 41, 46, 52, 53, 55, 56, 57, 61, 64, 65, 74, 78, 109, 115, 116, 130, 131, 146, 148, 151, 155, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 305, 310, 320, 347, 354, 371], "approxim": [1, 166, 167, 169, 170], "30": [1, 6, 10, 32, 38, 176, 189], "time": [1, 4, 6, 7, 8, 9, 10, 12, 21, 28, 55, 56, 57, 65, 73, 76, 88, 150, 152, 154, 156, 347, 371], "smaller": [1, 4], "input": [1, 2, 4, 10, 12, 17, 18, 19, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 68, 73, 74, 76, 78, 81, 82, 83, 84, 87, 88, 89, 92, 110, 113, 114, 115, 116, 117, 119, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 197, 199, 203, 204, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 305, 310, 311, 314, 315, 324, 330, 332, 333, 348, 376, 377], "larger": [1, 4], "than": [1, 4, 12, 41, 46, 55, 57], "number": [1, 4, 7, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 37, 41, 46, 52, 53, 56, 65, 73, 74, 76, 78, 83, 84, 85, 86, 88, 113, 114, 115, 116, 117, 119, 130, 131, 150, 154, 176, 179, 185, 188, 189, 194, 195, 198, 202, 205, 206, 207, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 250, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 303, 304, 314, 318, 319, 328, 339, 342, 343, 344, 346, 352, 353, 360, 362, 366, 367, 368, 370, 376], "lenetencod": 1, "modul": [1, 2, 7, 13, 19, 25, 41, 46, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 74, 75, 77, 78, 89, 92, 110, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 132, 133, 172, 173, 174, 178, 184, 213, 214, 215, 216, 217, 218, 219, 228, 229, 230, 231, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "__init__": [1, 19, 25, 41, 46, 52, 53, 108], "conv1": 1, "conv2d": [1, 8, 260], "stride": [1, 8, 115, 116, 128, 129, 130, 131, 134, 135, 287, 288, 298, 299], "pad": [1, 8, 135, 165, 168, 230, 252, 253, 282, 287, 288, 291, 293, 298, 299], "pool1": 1, "avgpool2d": 1, "conv2": 1, "16": [1, 6, 12, 41, 46, 56, 65, 114, 119, 287, 288, 298, 299], "pool2": 1, "fc1": 1, "120": 1, "fc2": 1, "84": [1, 6], "fc3": 1, "forward": [1, 19, 25, 41, 46, 52, 53, 59, 62, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 213, 214, 215, 216, 218, 219, 228, 229, 230, 231, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "x": [1, 2, 4, 8, 9, 10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 38, 55, 57, 59, 62, 73, 76, 88, 108, 113, 114, 115, 116, 117, 119, 128, 129, 130, 131, 151, 155, 160, 161, 162, 163, 206, 207, 211, 214, 215, 218, 219, 228, 229, 230, 231, 232, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 308, 309, 311, 313, 314, 315, 318, 324, 327, 328, 340, 347, 352, 356, 359, 360, 363, 371, 375, 376, 377], "relu": [1, 4, 56, 59, 60, 61, 62, 63, 64, 65, 123, 218, 230, 248, 249, 250, 251, 252, 253, 254], "limit": [1, 4, 12], "sake": [1, 12], "becaus": [1, 4, 7, 55, 57, 305], "enough": [1, 13], "check": [1, 2, 4, 17, 18, 23, 24, 30, 32, 35, 38, 41, 46, 66, 79, 80, 87, 88, 89, 106, 107, 108, 109, 151, 152, 155, 156, 166, 169, 171], "evolut": 1, "geometri": [1, 2, 89, 319, 327, 332, 333, 337, 338, 353, 359, 361], "across": [1, 2, 20, 27, 33, 37, 41, 46, 85, 86, 145, 147, 150, 152, 154, 156, 165, 168, 176, 177, 189, 190, 215, 246], "random_st": [1, 4, 12, 41, 46, 52, 53, 55, 57], "42": [1, 4, 6, 8, 10, 12, 85, 86, 314, 315, 318, 327, 328, 347, 352, 359, 360, 371, 376, 377], "limit_train_batch": 1, "100": [1, 4, 6, 9, 10, 160, 162, 317, 320, 340, 341, 346, 349, 351, 354, 363, 364, 370], "max_epoch": [1, 4, 12, 41, 46, 52, 53, 55, 56, 57, 65], "temperatur": [1, 4, 12, 52, 53, 55, 56, 57, 65, 72, 74, 75, 78, 216, 243], "hidden_dim": [1, 4, 12, 55, 57, 60, 61, 63, 64, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "64": [1, 4, 6, 12, 41, 46, 85, 86, 114, 115, 116, 119, 128, 129, 130, 131, 153, 157, 160, 162, 166, 169, 213, 214, 215, 228, 229, 231, 244, 246, 255, 256, 257, 258, 259], "lr": [1, 4, 10, 52, 53, 55, 56, 57, 65, 151, 153, 155, 157], "1e": [1, 4, 10, 12, 56, 65, 161, 163, 310, 315, 377], "weight_decai": [1, 4, 10, 52, 53, 55, 56, 57, 65], "enable_checkpoint": [1, 12, 41, 46], "kei": [1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 91, 93, 178, 179, 184, 185, 217, 242, 306, 340, 363], "part": [1, 55, 56, 57, 65], "after": [1, 4, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 55, 56, 57, 65, 73, 76, 115, 116, 130, 131, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 251, 252, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "store": [1, 21, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 55, 57, 203, 204, 330, 331, 332, 333, 347, 371], "lightning_log": 1, "folder": [1, 30, 35, 181, 187, 203, 204, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "thei": [1, 2, 4, 7, 10, 12, 33, 37, 55, 57, 91, 93], "accuraci": [1, 2, 4, 10, 18, 21, 24, 28, 41, 46, 52, 53], "balanc": [1, 18, 21, 24, 28, 33, 37], "f1": [1, 18, 21, 24, 28], "score": [1, 2, 18, 20, 21, 22, 24, 26, 27, 28, 83, 84, 85, 86], "weight": [1, 2, 4, 13, 18, 21, 24, 28, 33, 37, 52, 53, 55, 56, 57, 65, 66, 73, 74, 76, 78, 80, 81, 83, 84, 85, 86, 92, 110, 172, 176, 189, 209, 210, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 321, 327, 341, 347, 355, 359, 364, 371], "macro": [1, 18, 21, 24, 28], "precis": [1, 18, 21, 24, 28, 41, 46, 56, 65, 82], "recal": [1, 18, 21, 24, 28], "get_last_log_vers": 1, "logs_dir": 1, "version": [1, 32, 33, 37, 38, 55, 57, 66, 69, 73, 76, 79, 305], "d": [1, 12, 41, 46, 52, 53, 56, 65, 73, 76, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 251, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 287, 288, 291, 298, 299, 311, 314, 324, 376], "listdir": 1, "r": [1, 12, 21, 22, 26, 28, 73, 76, 308, 309, 313, 375], "version_": 1, "append": [1, 2, 10, 19, 25, 41, 46], "int": [1, 6, 18, 19, 21, 22, 24, 25, 26, 28, 30, 33, 35, 37, 41, 46, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 76, 78, 85, 86, 88, 89, 113, 114, 115, 116, 117, 119, 127, 130, 131, 132, 133, 137, 139, 141, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 170, 176, 177, 178, 179, 184, 185, 188, 189, 190, 191, 198, 202, 203, 204, 205, 206, 207, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 310, 311, 314, 318, 319, 320, 323, 324, 326, 328, 339, 340, 341, 342, 343, 344, 346, 352, 353, 354, 357, 358, 360, 362, 363, 364, 366, 367, 368, 370, 372, 376], "group": [1, 41, 46, 115, 116, 128, 129, 130, 131, 135, 176, 189, 305], "max": [1, 2, 4, 12, 150, 154, 160, 162, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 295, 296], "els": [1, 4, 12, 32, 38], "log_dir": 1, "ea": 1, "eventaccumul": 1, "reload": 1, "balanced_accuraci": 1, "f1_weight": 1, "f1_macro": 1, "precision_macro": 1, "recall_macro": 1, "scalar": [1, 56, 65, 73, 74, 76, 78, 89, 152, 156, 166, 167, 169, 170], "m": [1, 2, 73, 76, 176, 178, 179, 181, 184, 185, 187, 189, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 303, 304, 319, 326, 332, 333, 337, 338, 340, 345, 353, 358, 363, 369, 373], "replac": [1, 2, 30, 31, 33, 34, 35, 36, 37, 70, 83, 84, 113, 115, 116, 117, 130, 131, 150, 154, 179, 185, 203, 204, 218, 230, 251, 252], "onc": [1, 21, 28, 41, 46, 55, 57], "plot": [1, 6, 7, 8, 9, 10, 12, 13, 172, 303, 304, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "them": [1, 2, 12, 19, 25, 56, 65, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 182, 196, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 305, 330, 373], "step": [1, 2, 4, 10, 12, 19, 25, 41, 46, 52, 53, 55, 56, 57, 65, 218, 230, 251, 252], "increas": [1, 4, 328, 360], "event": 1, "valu": [1, 2, 7, 17, 21, 23, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 56, 65, 66, 73, 74, 76, 78, 80, 81, 85, 86, 89, 91, 93, 106, 108, 145, 146, 147, 148, 150, 154, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 178, 179, 184, 185, 203, 204, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 303, 304, 308, 309, 310, 327, 340, 359, 363], "xlabel": [1, 2], "nb": 1, "batch": [1, 4, 10, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 74, 78, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "ylabel": [1, 2], "legend": [1, 12], "observ": [1, 2, 4, 12], "see": [1, 4, 30, 31, 34, 35, 36, 52, 53, 56, 65, 66, 72, 74, 75, 78, 106, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 165, 166, 167, 168, 169, 170, 181, 187, 203, 204, 305, 334, 336], "steadili": 1, "reach": [1, 41, 46], "80": [1, 4, 6, 85, 86], "quit": [1, 4], "good": [1, 4, 152, 156, 166, 167, 169, 170], "have": [1, 2, 4, 7, 8, 12, 17, 21, 23, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 146, 148, 161, 163, 330, 340, 363], "previous": [1, 66], "seen": 1, "case": [1, 4, 32, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 69, 70, 73, 76, 83, 84, 150, 151, 152, 153, 154, 155, 156, 157, 305], "where": [1, 4, 8, 12, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 55, 56, 57, 60, 61, 63, 64, 65, 66, 73, 74, 76, 78, 92, 110, 160, 161, 162, 163, 166, 169, 203, 204, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 303, 304, 306, 314, 373, 376], "one": [1, 4, 7, 12, 21, 28, 32, 38, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 77, 80, 81, 85, 86, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 145, 147, 150, 152, 154, 156, 166, 169, 179, 185, 192, 200, 213, 216, 243, 244, 245, 247, 250, 255, 286, 287, 288, 297, 298, 299, 315, 377], "monitor": [1, 4, 41, 46, 56, 65], "also": [1, 4, 12, 13, 30, 31, 34, 35, 36, 52, 53, 56, 65, 85, 86, 106, 201, 203, 204, 330, 378], "mix": [1, 20, 27, 41, 46], "could": [1, 4, 7, 56, 65, 151, 153, 155, 157], "sever": [1, 88, 306], "target": [1, 2, 12, 20, 21, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 80, 81, 85, 86, 160, 162, 165, 166, 167, 168, 169, 170, 203, 204, 312, 315, 325, 377], "variabl": [1, 52, 53, 56, 65, 66, 74, 78, 79, 279], "should": [1, 19, 21, 25, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 77, 83, 84, 88, 89, 92, 108, 110, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 161, 163, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 305], "decod": [1, 2, 41, 46, 52, 53, 213, 218, 228, 230, 231, 251, 252, 255, 257, 259], "brain": [1, 12, 33, 37, 160, 162, 378], "refer": [1, 2, 7, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "detail": [1, 2, 13, 18, 24, 55, 57, 72, 75, 89, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 152, 156], "neuroimag": [1, 2, 12, 13, 15, 30, 31, 33, 34, 35, 36, 37, 203, 204, 231, 259], "relev": [1, 2, 12, 41, 46, 305], "consid": [1, 4, 7, 12, 30, 31, 32, 34, 35, 36, 38, 52, 53, 73, 76, 179, 185, 203, 204, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292], "matter": [1, 2, 12, 33, 37], "csf": [1, 33, 37], "volum": [1, 2, 12, 13, 33, 37, 56, 65, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 331, 336, 378], "region": [1, 12, 33, 37], "interest": [1, 2, 12, 41, 46, 52, 53, 203, 204, 217, 242], "neuromorphometr": [1, 12, 33, 37], "atla": [1, 12, 33, 37], "subject": [1, 2, 12, 30, 31, 34, 35, 36, 176, 177, 189, 190, 203, 204, 305], "vbm_roi": [1, 2, 12, 33, 37], "modal": [1, 12, 33, 37], "tabular": [1, 12, 30, 31, 34, 35, 36, 203, 204], "still": [1, 2, 4, 305], "well": [1, 4, 41, 46, 52, 53, 151, 153, 155, 157], "suit": 1, "veri": [1, 4, 7, 52, 53, 150, 154, 166, 167, 169, 170], "light": 1, "raw": [1, 13, 33, 37, 331, 334, 336], "284": [1, 12, 33, 37], "vector": [1, 4, 12, 33, 37, 55, 56, 57, 65, 74, 78, 340, 363], "target_transform": [1, 32, 33, 37, 38], "arrai": [1, 2, 6, 7, 19, 20, 21, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 56, 65, 73, 74, 76, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 151, 155, 160, 161, 162, 163, 166, 169, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 197, 199, 202, 203, 204, 205, 206, 207, 248, 253, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 303, 304, 305, 310, 311, 312, 314, 315, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 331, 332, 333, 337, 338, 340, 341, 345, 346, 347, 351, 352, 353, 355, 356, 357, 358, 359, 360, 363, 364, 369, 370, 371, 372, 373, 376, 377], "femal": [1, 33, 37], "lambda": [1, 12, 32, 38], "flatten": [1, 2, 6, 8, 12, 55, 56, 57, 65, 215, 246, 291], "stream": [1, 2, 33, 37], "split": [1, 2, 4, 12, 30, 31, 33, 34, 35, 36, 37, 203, 204], "val": [1, 2, 12, 19, 25, 33, 37, 41, 46], "mask": [1, 12, 30, 31, 34, 35, 36, 160, 161, 162, 163, 191, 203, 204, 209, 210, 305], "nois": [1, 12, 146, 148, 180, 186], "auxiliari": [1, 56, 65, 74, 78], "mask_prob": [1, 12], "noise_std": [1, 12], "rand": [1, 12, 166, 169], "shape": [1, 2, 4, 7, 8, 10, 12, 20, 21, 27, 28, 33, 37, 56, 65, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 219, 230, 231, 232, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 326, 327, 342, 358, 359, 366], "astyp": [1, 8, 12, 166, 169], "float32": [1, 8, 12, 166, 169], "randn": [1, 12, 153, 157], "As": [1, 4, 10, 12], "compress": [1, 12], "latent": [1, 4, 55, 56, 57, 65, 213, 214, 215, 228, 229, 231, 246, 255, 256, 257, 258, 259], "space": [1, 2, 4, 8, 12, 33, 37, 55, 56, 57, 61, 64, 65, 113, 114, 115, 116, 117, 119, 130, 131, 151, 155, 166, 167, 169, 170, 213, 214, 215, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 252, 255, 256, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 323, 357], "in_channel": [1, 8, 10, 12, 56, 65, 113, 114, 115, 116, 117, 119, 130, 131, 218, 230, 250, 251, 252], "hidden_channel": [1, 12, 56, 65, 250], "bandwidth": [1, 12, 56, 65, 73, 74, 76, 78], "varianc": [1, 12, 21, 22, 26, 28, 83, 84, 85, 86, 161, 163, 305], "sigma": [1, 4, 6, 12, 56, 60, 63, 65, 73, 74, 76, 78, 145, 146, 147, 148, 161, 163, 166, 167, 169, 170, 178, 179, 180, 184, 185, 186], "projection_head_kwarg": [1, 12, 56, 65], "input_dim": [1, 12, 56, 60, 61, 63, 64, 65, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "output_dim": [1, 12, 56, 60, 61, 63, 64, 65, 260], "learning_r": [1, 12, 56, 65], "add": [1, 2, 41, 46, 52, 53, 68, 114, 119, 146, 148, 180, 186, 288, 299], "r2": [1, 12, 37, 85, 86], "coeffici": [1, 12, 83, 84, 85, 86, 321, 355], "determin": [1, 41, 46, 176, 189], "explain": [1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "evar": [1, 85, 86], "pearson": [1, 21, 22, 26, 28, 83, 84, 85, 86], "correl": [1, 83, 84, 85, 86, 287, 288, 298, 299], "pcc": [1, 85, 86], "last": [1, 4, 33, 37, 115, 116, 130, 131, 213, 255], "lightn": [1, 41, 46, 56, 65, 378], "integ": [1, 33, 37, 41, 46], "file": [1, 2, 3, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 66, 92, 110, 203, 204, 331, 332, 333, 335, 337, 338, 374, 378, 379], "task0": 1, "correlact": 1, "task1": [1, 21, 28], "fetch": [1, 7, 13, 33, 37, 66, 201, 349, 350], "two": [1, 2, 4, 7, 12, 33, 37, 52, 53, 55, 56, 57, 59, 62, 65, 74, 78, 145, 146, 147, 148, 310, 312, 325, 340, 363], "plot_task": 1, "task_prefix": 1, "task_metr": 1, "startswith": 1, "set_xlabel": [1, 2, 8, 12], "set_ylabel": [1, 2, 8, 12], "In": [1, 2, 4, 12, 32, 38, 41, 46, 52, 53, 56, 65, 70, 73, 76, 89, 150, 151, 152, 153, 154, 155, 156, 157, 218, 230, 251, 252, 279], "shown": [1, 56, 65], "avail": [1, 2, 4, 12, 33, 37, 41, 46, 52, 53, 56, 65, 66, 85, 86, 92, 108, 110, 152, 156, 166, 167, 169, 170], "singl": [1, 4, 30, 32, 33, 35, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 88, 378], "multi": [1, 2, 12, 19, 20, 21, 25, 27, 28, 33, 37, 41, 46, 52, 53, 55, 57, 88, 192, 200, 215, 246], "regular": [1, 56, 65, 150, 154, 327, 359], "interv": [1, 6, 13, 56, 65, 172, 174, 188, 191, 194, 198], "provid": [1, 2, 4, 30, 31, 32, 34, 35, 36, 38, 41, 46, 55, 57, 145, 147, 151, 153, 155, 157, 166, 169, 181, 187, 203, 204, 280, 305, 321, 347, 355, 371, 378], "insight": [1, 4], "suitabl": [1, 81, 82], "downstream": [1, 4, 12, 52, 53, 55, 57], "memori": [1, 2, 4, 6, 7, 8, 9, 10, 12, 19, 21, 25, 28, 31, 36, 114, 119, 151, 155, 305, 330], "usag": [1, 2, 4, 6, 7, 8, 9, 10, 12], "mb": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 379], "ipynb": [1, 2, 4, 6, 7, 8, 9, 10, 12, 334, 336], "py": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 379], "larg": [2, 4, 33, 37, 305], "site": [2, 7, 33, 37], "mri": [2, 12, 33, 37, 56, 61, 64, 65, 74, 78, 160, 162], "design": [2, 41, 46, 66], "data": [2, 6, 10, 13, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 61, 64, 65, 66, 73, 74, 76, 78, 80, 81, 82, 83, 84, 87, 88, 89, 92, 110, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 196, 197, 198, 199, 200, 201, 203, 204, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 305, 311, 314, 317, 318, 324, 327, 328, 330, 331, 334, 336, 347, 349, 350, 351, 352, 359, 360, 371, 376], "demonstr": 2, "serv": [2, 55, 57], "entri": 2, "point": [2, 7, 9, 12, 81, 82, 85, 86, 317, 320, 323, 327, 340, 341, 346, 351, 354, 356, 357, 359, 361, 363, 364, 370], "potenti": [2, 153, 157, 373], "bia": [2, 4, 59, 62, 281, 292], "dufumi": [2, 12, 33, 37, 56, 61, 64, 65, 74, 78], "et": [2, 4, 12, 56, 60, 61, 63, 64, 65, 72, 74, 75, 78, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 160, 162, 166, 167, 169, 170, 215, 218, 230, 246, 251, 252], "al": [2, 4, 12, 56, 60, 61, 63, 64, 65, 72, 74, 75, 78, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 160, 162, 166, 167, 169, 170, 215, 218, 230, 246, 251, 252], "debias": [2, 33, 37], "2022": [2, 33, 37, 74, 78, 215, 246], "http": [2, 4, 14, 33, 37, 56, 60, 61, 63, 64, 65, 72, 74, 75, 78, 82, 106, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 150, 154, 212, 334, 336], "www": 2, "sciencedirect": 2, "com": [2, 14, 212], "scienc": 2, "articl": 2, "pii": 2, "s1053811922007522": 2, "run": [2, 4, 6, 7, 8, 9, 10, 12, 18, 19, 21, 22, 24, 25, 26, 28, 56, 65, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 346, 370], "nibabel": [2, 32, 33, 37, 38, 151, 153, 155, 157, 166, 169, 203, 204, 334, 336], "panda": [2, 30, 31, 32, 34, 35, 36, 38, 176, 189, 203, 204], "pd": [2, 32, 38], "seaborn": 2, "sn": 2, "nilearn": 2, "metric": [2, 12, 13, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 55, 56, 57, 65, 80, 81, 82, 83, 84, 85, 86, 172, 176, 189], "accuracy_scor": 2, "r2_score": [2, 12, 80, 81], "pipelin": [2, 305], "make_pipelin": 2, "preprocess": [2, 12, 13, 33, 37, 89, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 305], "standardscal": [2, 13, 172, 173, 305], "healthi": [2, 33, 37], "anatom": [2, 151, 153, 155, 157], "n_": 2, "train": [2, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 41, 46, 52, 53, 55, 56, 57, 65, 66, 152, 156, 166, 167, 169, 170, 174, 203, 204], "3227": [2, 33, 37], "757": [2, 33, 37], "valid": [2, 4, 13, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 70, 89, 106, 107, 108, 109, 172], "demograph": 2, "about": [2, 4, 66, 347, 371], "acquisit": 2, "magnet": 2, "field": [2, 178, 184, 194, 195, 241], "strength": 2, "root": [2, 4, 14, 21, 22, 26, 28, 30, 31, 33, 34, 35, 36, 37, 85, 86, 203, 204], "quasiraw": [2, 33, 37], "fs_desikan_roi": [2, 12, 33, 37], "fs_destrieux_roi": [2, 33, 37], "fs_xhemi": [2, 33, 37], "take": [2, 4, 32, 33, 37, 38, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 260, 286, 287, 288, 297, 298, 299], "look": [2, 4, 12, 320, 354], "ll": 2, "densiti": [2, 8, 12, 73, 76, 323, 341, 357, 364], "map": [2, 4, 7, 8, 12, 31, 33, 36, 37, 41, 46, 52, 53, 55, 56, 57, 61, 64, 65, 115, 116, 130, 131, 166, 167, 169, 170, 287, 288, 291, 298, 299, 303, 304, 312, 325, 346, 370], "comput": [2, 7, 19, 21, 22, 25, 26, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 72, 73, 74, 75, 76, 77, 78, 82, 85, 86, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 160, 161, 162, 163, 211, 216, 243, 244, 245, 247, 250, 260, 286, 287, 288, 297, 298, 299, 305, 321, 330, 347, 355, 356, 371], "cat12": [2, 33, 37], "toolbox": 2, "involv": 2, "tissu": [2, 33, 37], "mni": 2, "result": [2, 4, 12, 18, 21, 22, 24, 26, 28, 83, 84, 99, 106, 166, 167, 169, 170, 279, 329], "wise": [2, 175, 193, 230, 252], "reflect": [2, 12, 165, 168], "local": [2, 4, 33, 37, 66, 70, 92, 110], "t1": [2, 33, 37], "scan": [2, 12, 33, 37, 160, 162], "basic": 2, "correct": [2, 10, 80, 81, 85, 86, 89], "skull": 2, "strip": 2, "spatial": [2, 7, 13, 89, 115, 116, 130, 131, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 312, 325], "heavi": 2, "smooth": [2, 373], "goal": 2, "retain": [2, 305], "much": [2, 4, 12, 114, 119], "possibl": [2, 7, 12, 41, 46, 52, 53, 92, 110, 165, 168], "close": [2, 4, 7, 12, 55, 56, 57, 65], "while": [2, 4, 7, 12, 41, 46, 52, 53, 55, 56, 57, 65, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 160, 162, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "physic": [2, 166, 167, 169, 170], "all_mod": 2, "info": [2, 165, 168, 374], "get": [2, 4, 19, 25, 32, 33, 37, 38, 166, 169, 305, 339, 342, 343, 344, 362, 366, 367, 368, 373], "img_vbm": 2, "select": [2, 41, 46, 66, 67, 81, 150, 154], "channel": [2, 30, 31, 34, 35, 36, 113, 114, 115, 116, 117, 119, 130, 131, 145, 147, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 175, 192, 193, 200, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301], "nii_img": 2, "nifti1imag": [2, 32, 33, 37, 38], "affin": [2, 151, 153, 155, 157, 166, 169], "ey": [2, 166, 169], "print": [2, 4, 6, 7, 8, 10, 32, 33, 37, 38, 85, 86, 90, 94, 108, 166, 169, 217, 219, 231, 232, 242, 259, 261, 270, 326, 339, 342, 343, 344, 345, 358, 362, 366, 367, 368, 369], "plot_anat": 2, "img_quasiraw": 2, "onto": [2, 8, 12, 215, 246, 314, 315, 376, 377], "featur": [2, 4, 12, 13, 19, 25, 33, 37, 52, 53, 55, 56, 57, 61, 64, 65, 73, 74, 76, 78, 114, 115, 116, 119, 130, 131, 201, 218, 230, 248, 249, 250, 251, 252, 253, 254, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 305], "averag": [2, 12, 20, 22, 26, 27, 83, 84, 85, 86], "within": [2, 4, 12, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "142": [2, 33, 37], "correspond": [2, 7, 19, 20, 25, 27, 33, 37, 56, 65, 80, 81, 151, 155, 176, 177, 189, 190, 310, 315, 342, 366, 377], "structur": [2, 4, 7, 41, 46, 85, 86], "extract": [2, 12, 19, 25, 32, 33, 37, 38, 55, 56, 57, 65, 335], "independ": 2, "hemispher": [2, 33, 37, 176, 177, 189, 190, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "millilit": 2, "ml": 2, "map_roi_on_neuromorphometrics_atla": 2, "roi_valu": 2, "atlas_data": 2, "get_fdata": 2, "atlas_label": 2, "brain_map": 2, "zeros_lik": 2, "idx_map": 2, "name": [2, 4, 12, 18, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 56, 65, 66, 69, 85, 86, 92, 109, 110, 213, 214, 228, 229, 255, 256, 257, 258, 279, 303, 304, 305, 316, 330], "idx": [2, 4, 6, 9, 30, 31, 35, 36, 320, 340, 346, 354, 363, 370], "enumer": [2, 9, 10, 12, 317, 320, 340, 341, 346, 351, 354, 363, 364, 370], "clean": [2, 52, 53], "up": [2, 4, 19, 25, 217, 218, 230, 242, 251, 252, 310, 312, 320, 325, 343, 354, 367], "remov": [2, 30, 31, 33, 34, 35, 36, 37, 161, 163, 203, 204, 305], "_gm_vol": 2, "suffix": [2, 306], "get_vbm_roi_label": [2, 33, 37], "get_neuromorphometrics_atla": [2, 33, 37], "plot_stat_map": 2, "plasma": 2, "appeal": 2, "sequenti": [2, 4, 52, 53, 59, 62, 121, 122, 340, 363], "colormap": [2, 303, 304], "draw_cross": 2, "colorbar": [2, 6, 9, 12, 303, 304, 312, 317, 319, 320, 325, 326, 340, 341, 346, 351, 353, 354, 358, 363, 364, 370], "includ": [2, 4, 13, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 89, 201, 203, 204], "cortic": [2, 12, 33, 37, 176, 177, 181, 187, 189, 190, 191, 201, 208, 209, 210, 212, 213, 214, 215, 218, 219, 228, 229, 230, 231, 232, 246, 251, 252, 255, 256, 257, 258, 259, 261, 270], "thick": [2, 12, 33, 37], "area": [2, 12, 150, 152, 154, 156], "curvatur": [2, 12, 33, 37], "over": [2, 41, 46, 153, 157], "predefin": 2, "desikan": [2, 12, 33, 37], "killiani": [2, 12], "34": [2, 6, 33, 37, 85, 86], "per": [2, 4, 21, 22, 26, 28, 30, 32, 33, 35, 37, 38, 115, 116, 130, 131, 145, 147, 151, 155, 160, 161, 162, 163], "74": [2, 6, 33, 37, 85, 86], "exclud": [2, 33, 37], "medial": 2, "wall": 2, "repres": [2, 74, 78, 303, 304, 372, 373], "summari": [2, 85, 86], "morphologi": 2, "cortex": 2, "addit": [2, 32, 38, 41, 46, 52, 53, 55, 56, 57, 65, 87, 88, 89, 150, 154, 218, 230, 251, 252, 281, 292], "xhemi": 2, "cross": [2, 66, 70, 72, 75, 287, 288, 298, 299], "163842": [2, 33, 37], "vertic": [2, 6, 7, 9, 33, 37, 176, 177, 178, 179, 181, 184, 185, 187, 189, 190, 202, 205, 206, 207, 215, 230, 241, 246, 252, 281, 282, 292, 293, 303, 304, 305, 311, 312, 314, 315, 317, 318, 319, 321, 324, 325, 326, 327, 328, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 376, 377], "merg": 2, "homolog": 2, "both": [2, 7, 12, 21, 28, 33, 37, 41, 46, 59, 60, 61, 62, 63, 64, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 216, 243, 244, 245, 247, 288, 299, 340, 363], "analysi": [2, 73, 76, 160, 162, 215, 246], "asymmetri": 2, "improv": [2, 4, 12, 55, 57, 115, 116, 130, 131, 150, 154], "statist": [2, 73, 76, 150, 154, 161, 163], "power": 2, "combin": [2, 4, 176, 189], "left": [2, 8, 33, 37, 73, 74, 76, 78, 151, 153, 155, 157, 160, 162, 209, 210, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 331], "right": [2, 8, 33, 37, 73, 74, 76, 78, 151, 153, 155, 157, 160, 162, 209, 210, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 331], "follow": [2, 4, 12, 19, 25, 32, 33, 37, 38, 59, 61, 62, 64, 66, 73, 76, 82, 85, 86, 160, 161, 162, 163], "fsaverage5": 2, "higher": [2, 4, 41, 46], "resolut": [2, 4, 115, 116, 130, 131, 160, 162, 203, 204, 218, 230, 251, 252], "done": [2, 4, 41, 46, 330], "similarli": [2, 4], "mesh": [2, 33, 37, 326, 327, 340, 358, 359, 363, 373], "map_freesurfer_destrieux_data": 2, "hemi": 2, "fsaverag": 2, "fetch_atlas_surf_destrieux": 2, "verbos": [2, 66], "fs_label": 2, "utf": 2, "map_hemi": 2, "map_": 2, "vertex": [2, 176, 177, 178, 179, 184, 185, 189, 190, 230, 252, 340, 341, 347, 363, 364, 365, 371, 372, 373], "vertex_data": 2, "dtype": [2, 80, 82, 188, 194, 198, 311, 324], "float": [2, 4, 6, 10, 20, 27, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 193, 198, 209, 210, 215, 246, 250, 303, 304, 308, 309, 310, 313, 315, 375, 377], "roi_nam": 2, "surface_area": 2, "get_fs_roi_feature_nam": [2, 33, 37], "surface_area_mm": 2, "gray_matter_volume_mm": 2, "average_thickness_mm": 2, "integrated_rectified_mean_curvature_mm": 2, "get_fs_label": [2, 33, 37], "symmetr": [2, 33, 37, 73, 76, 83, 84, 165, 168], "fs_surfac": 2, "fs_volum": 2, "fs_thick": 2, "fs_curv": 2, "surface_vertex": 2, "volume_vertex": 2, "thickness_vertex": 2, "curv_vertex": 2, "prepar": [2, 4], "mm": [2, 166, 169], "gm": [2, 12, 33, 37], "mean": [2, 4, 12, 19, 21, 22, 25, 26, 28, 41, 46, 52, 53, 70, 85, 86, 146, 148, 150, 152, 154, 156, 161, 163, 165, 168, 215, 230, 246, 248, 252, 285, 296, 305, 327, 359], "fetch_surf_fsaverag": 2, "inflated_left": 2, "infl_left": 2, "sulc_left": 2, "12": [2, 6, 7, 12, 114, 119, 340, 363], "subplot_kw": [2, 6, 7, 9, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "3d": [2, 6, 7, 9, 12, 32, 33, 37, 38, 56, 61, 64, 65, 74, 78, 89, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 312, 317, 320, 323, 325, 326, 340, 341, 346, 351, 354, 357, 358, 363, 364, 370], "dat": 2, "plot_surf": 2, "surf_map": 2, "later": [2, 305], "bg_map": 2, "subplots_adjust": 2, "wspace": 2, "25": [2, 6, 10, 32, 38, 85, 86], "lh": [2, 33, 37], "curv": 2, "fold": 2, "pattern": [2, 4, 8, 30, 31, 34, 35, 36, 203, 204, 291], "arbitrari": [2, 150, 154], "unit": [2, 56, 65, 161, 163, 218, 230, 251, 252, 305, 323, 341, 357, 361, 364, 365], "neg": [2, 4], "sulci": 2, "posit": [2, 4, 41, 46, 73, 76, 88, 89], "gyri": 2, "sulc": 2, "sulcal": [2, 33, 37], "depth": [2, 9, 10, 33, 37, 116, 127, 131, 133, 137, 139, 141, 215, 218, 230, 246, 247, 250, 251, 252, 281, 283, 284, 285, 289, 292, 294, 295, 296, 300, 320, 339, 340, 343, 354, 362, 363, 367], "indic": [2, 4, 12, 33, 37, 41, 46, 56, 65, 83, 84, 151, 155, 176, 189, 248, 253, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 310, 318, 319, 320, 321, 327, 328, 340, 346, 352, 353, 354, 355, 359, 360, 363, 370, 372], "millimit": 2, "get_fs_xhemi_feature_nam": [2, 33, 37], "fs_sulc": 2, "dark": 2, "explor": [2, 4], "three": [2, 150, 152, 154, 156, 321, 355], "represent": [2, 4, 19, 21, 25, 28, 33, 37, 52, 53, 55, 56, 57, 60, 61, 63, 64, 65, 113, 117, 181, 187, 212, 216, 228, 229, 231, 243, 257, 258, 259, 305, 321, 347, 355, 371, 373], "sbm": [2, 12, 33, 37], "68": [2, 6, 12, 33, 37, 85, 86], "148": [2, 33, 37], "modality_nam": 2, "dataset_train": 2, "dataset_v": 2, "extract_features_and_target": 2, "y_age": 2, "y_sex": 2, "x_train": 2, "y_train_ag": 2, "y_train_sex": 2, "x_test": 2, "y_test_ag": 2, "y_test_sex": 2, "min": [2, 12, 150, 154, 160, 162], "distribut": [2, 4, 12, 19, 25, 41, 46, 55, 57, 146, 148, 150, 154, 214, 231, 256, 259], "n": [2, 10, 41, 46, 55, 57, 73, 74, 76, 78, 92, 110, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 197, 202, 205, 206, 207, 211, 215, 246, 281, 283, 286, 292, 294, 297, 303, 304, 310, 311, 312, 314, 315, 319, 320, 321, 324, 325, 326, 332, 333, 337, 338, 340, 341, 345, 347, 353, 354, 355, 358, 363, 364, 369, 371, 372, 373, 376, 377], "seri": [2, 32, 38, 183, 197], "value_count": 2, "r\u00b2": [2, 12, 21, 22, 26, 28], "v": [2, 12, 33, 37], "color": [2, 4, 9, 12, 13, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 172, 303, 304], "tab": 2, "blue": [2, 6, 7, 9, 312, 320, 325, 340, 341, 354, 363, 364], "green": [2, 6, 7, 9, 312, 325], "orang": [2, 9, 12], "15": [2, 6, 10, 12, 85, 86], "sharex": [2, 12], "sharei": [2, 12], "ridge_model": 2, "alpha": [2, 6, 7, 12, 166, 167, 169, 170, 303, 304, 308, 309, 312, 313, 325, 375], "y_pred_ag": 2, "scatterplot": 2, "edgecolor": [2, 6, 7, 303, 304, 312, 325], "line": [2, 303, 304], "lineplot": 2, "red": [2, 6, 9, 317, 320, 340, 341, 351, 354, 363, 364], "linestyl": 2, "nr\u00b2": 2, "2f": [2, 4, 12], "suptitl": [2, 12], "fontsiz": [2, 12], "14": [2, 6, 12], "02": [2, 11, 12, 150, 154, 379], "logreg_model": 2, "1000": [2, 4, 41, 46], "y_pred_sex": 2, "acc": [2, 4, 41, 46], "barplot": 2, "palett": 2, "ylim": 2, "text": [2, 8, 9, 55, 57, 73, 74, 76, 78, 85, 86, 90, 98, 103, 104, 105, 160, 162], "abov": [2, 4], "bar": [2, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53], "center": [2, 33, 37, 173, 305, 320, 340, 341, 345, 354, 356, 363, 364, 369], "give": [2, 4, 13, 41, 46, 166, 167, 169, 170], "best": [2, 14, 66, 166, 167, 169, 170, 312, 325], "highli": [2, 4], "nevertheless": 2, "would": [2, 4], "whether": [2, 4, 18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 89, 92, 110], "complementari": 2, "exercis": 2, "reader": 2, "00": [3, 11, 85, 86, 379], "000": [3, 4, 379], "total": [3, 6, 7, 8, 9, 10, 11, 114, 115, 116, 119, 130, 131, 379], "execut": [3, 11, 330, 379], "auto_galleri": [3, 11], "mem": [3, 11, 379], "simclr_stl10": [3, 4, 379], "yaware_openbhb": [3, 12, 379], "uvadlc": 4, "readthedoc": 4, "io": [4, 13, 172, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "tutori": [4, 12, 14], "closer": [4, 12, 56, 65], "sometim": [4, 91, 93], "call": [4, 17, 19, 23, 25, 30, 31, 34, 35, 36, 41, 46, 52, 53, 56, 65, 73, 76, 77, 80, 89, 109, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 151, 153, 155, 157, 203, 204, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 330, 347, 371], "unsupervis": [4, 32, 38], "describ": [4, 60, 61, 63, 64, 66, 378], "scenario": 4, "accompani": 4, "wai": [4, 12, 340, 363, 378], "howev": [4, 12, 166, 167, 169, 170], "lot": 4, "other": [4, 7, 41, 46, 52, 53, 55, 57, 66, 305, 315, 377], "descript": [4, 166, 167, 169, 170], "certain": [4, 320, 343, 354, 367], "cluster": [4, 41, 43, 46, 48, 56, 65], "popular": [4, 13, 201], "method": [4, 13, 17, 19, 23, 25, 30, 33, 35, 37, 41, 46, 56, 65, 73, 74, 76, 78, 81, 89, 91, 92, 93, 107, 108, 110, 160, 162, 166, 167, 169, 170, 173, 201, 215, 217, 218, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 251, 252, 253, 254, 259, 261, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 305, 347, 371], "appli": [4, 7, 8, 12, 19, 25, 32, 33, 37, 38, 52, 53, 55, 56, 57, 59, 61, 62, 64, 65, 73, 76, 88, 89, 92, 110, 115, 116, 130, 131, 145, 147, 152, 153, 156, 157, 160, 161, 162, 163, 165, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 193, 194, 196, 197, 215, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 291, 312, 323, 325, 341, 357, 364], "stl10": 4, "pytorch_lightn": [4, 19, 25], "pl": 4, "collect": 4, "ordereddict": [4, 52, 53], "copi": [4, 30, 35, 305], "deepcopi": 4, "learningratemonitor": [4, 56, 65], "modelcheckpoint": [4, 41, 46], "datadir": 4, "checkpointdir": 4, "saved_model": 4, "cpu_count": 4, "num_imag": 4, "cudnn": 4, "determinst": 4, "devic": [4, 41, 46, 52, 53, 55, 56, 57, 65], "gpu": [4, 19, 25, 41, 46, 52, 53, 55, 56, 57, 65], "cuda": 4, "is_avail": 4, "mani": [4, 7, 33, 37, 41, 46, 56, 65, 114, 115, 116, 119, 130, 131], "pre": [4, 12], "If": [4, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 56, 65, 73, 74, 76, 78, 82, 85, 86, 88, 89, 92, 109, 110, 115, 116, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 305, 330, 347, 371], "make": [4, 12, 19, 25, 41, 46, 55, 57, 108, 150, 154, 279], "sure": 4, "disk": [4, 32, 33, 37, 38, 41, 46, 52, 53], "load_pretrain": [4, 92, 110], "makedir": 4, "exist_ok": 4, "hf": [4, 33, 37, 66, 92, 110], "hub": [4, 66, 92, 110], "neurospin": [4, 14, 92, 110], "resnet18": [4, 13, 56, 65, 112, 126, 136, 172], "filepath": [4, 92, 110], "pt": 4, "effici": [4, 114, 119], "sampl": [4, 10, 12, 13, 20, 27, 32, 33, 37, 38, 41, 46, 55, 56, 57, 65, 73, 74, 76, 78, 80, 81, 83, 84, 85, 86, 145, 146, 147, 148, 150, 152, 154, 156, 172, 201, 202, 205, 206, 207, 211, 213, 214, 218, 219, 230, 231, 232, 248, 251, 252, 253, 255, 256, 259, 261, 270, 283, 284, 285, 289, 291, 294, 295, 296, 300, 314, 341, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376], "easiest": 4, "do": [4, 7, 19, 25, 41, 46, 52, 53, 55, 56, 57, 65, 305], "when": [4, 12, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 80, 81, 82, 85, 86, 89, 92, 108, 110, 151, 153, 155, 157, 160, 162, 303, 304, 305, 310, 315, 330, 345, 369, 377], "twice": 4, "framework": [4, 41, 46, 55, 56, 57, 60, 61, 63, 64, 65, 216, 243], "easili": [4, 7], "extend": [4, 81, 91, 93], "most": [4, 303, 304], "usual": [4, 88], "obtain": 4, "specif": [4, 13, 176, 177, 189, 190, 218, 230, 251, 252, 279, 342, 366], "want": [4, 14, 92, 110], "choic": [4, 66, 152, 156, 166, 167, 169, 170], "crucial": 4, "hyperparamet": [4, 12, 41, 46], "directli": [4, 41, 46, 56, 65, 85, 86, 150, 154, 174], "affect": [4, 41, 46], "might": [4, 41, 46, 52, 53, 56, 65, 151, 155], "overal": 4, "experi": [4, 13, 66, 67, 68, 69, 70, 172, 378], "horizont": [4, 8], "flip": [4, 151, 153, 155, 157], "distort": 4, "comparison": [4, 12, 166, 167, 169, 170], "effect": [4, 12, 115, 116, 130, 131, 166, 169, 305], "jitter": 4, "slightli": 4, "instead": [4, 12, 77, 80, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 305], "bright": 4, "satur": 4, "hue": 4, "better": [4, 55, 57], "wa": 4, "faster": [4, 12, 330], "stabl": 4, "instanc": [4, 7, 32, 38, 41, 46, 56, 65, 77, 82, 109, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 175, 193, 194, 195, 216, 241, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "vari": 4, "benefici": [4, 52, 53], "t": [4, 8, 12, 41, 46, 52, 53, 60, 61, 63, 64, 150, 152, 154, 156], "reli": 4, "anymor": 4, "distinguish": 4, "between": [4, 7, 12, 33, 37, 56, 65, 72, 73, 74, 75, 76, 78, 83, 84, 89, 150, 152, 154, 156, 166, 167, 169, 170, 176, 177, 189, 190, 303, 304, 310, 312, 325, 340, 349, 363, 373], "randomhorizontalflip": 4, "96": [4, 6, 288, 299, 311, 324], "randomappli": 4, "colorjitt": 4, "p": [4, 73, 76, 87, 89, 171], "randomgrayscal": 4, "discuss": 4, "cifar10": 4, "airplan": 4, "bird": 4, "car": 4, "cat": [4, 32, 38], "deer": 4, "dog": [4, 32, 38], "hors": 4, "monkei": 4, "ship": 4, "truck": 4, "500": 4, "addition": 4, "unlabel": 4, "similar": [4, 7, 12, 55, 56, 57, 61, 64, 65, 73, 74, 76, 78, 150, 154], "wider": 4, "anim": 4, "vehicl": 4, "ideal": [4, 12], "showcas": 4, "benefit": 4, "offer": [4, 152, 156, 166, 167, 169, 170], "luckili": 4, "through": [4, 14, 18, 19, 22, 24, 25, 26, 42, 43, 44, 45, 47, 48, 49, 50, 59, 62], "keep": [4, 33, 37, 203, 204], "mind": 4, "rel": [4, 30, 31, 32, 34, 35, 36, 38, 150, 152, 154, 156], "consider": 4, "3gb": 4, "bit": [4, 56, 65], "initi": [4, 33, 37, 56, 59, 60, 61, 62, 63, 64, 65, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "unlabeled_data": 4, "via": [4, 33, 37, 52, 53, 347, 371], "train_data_contrast": 4, "pair": [4, 41, 46, 55, 56, 57, 65, 74, 78, 153, 157, 203, 204], "stack": [4, 19, 25], "dim": [4, 10, 12, 56, 65, 77, 166, 169, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "img_grid": 4, "associ": [4, 9, 33, 37, 52, 53, 56, 65, 74, 78, 307, 315, 321, 347, 355, 371, 377], "256": [4, 59, 62, 94, 213, 214, 228, 229, 255, 256, 257, 258], "train_load": 4, "val_load": 4, "common": [4, 13, 16, 29, 40, 41, 46, 52, 53, 71, 111, 112, 174, 208, 212, 305], "resnet": [4, 13, 56, 65, 112, 115, 116, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 172], "18": [4, 6, 56, 65, 116, 126, 127, 131, 136, 137, 160, 162], "paper": [4, 12, 114, 119], "activ": [4, 56, 60, 63, 65, 213, 214, 218, 228, 229, 230, 231, 251, 252, 255, 256, 257, 258, 259], "hidden": [4, 56, 60, 61, 63, 64, 65, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "note": [4, 30, 31, 33, 34, 35, 36, 37, 41, 46, 52, 53, 56, 65, 66, 73, 76, 88, 106, 113, 117, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 330], "simclrv2": 4, "author": [4, 66], "mention": 4, "boost": 4, "why": [4, 7], "four": 4, "deeper": 4, "overfit": 4, "u": [4, 8, 145, 146, 147, 148, 160, 162, 203, 204, 218, 230, 250, 251, 252], "lead": [4, 41, 46], "smoother": 4, "loss": [4, 10, 13, 19, 25, 41, 46, 52, 53, 55, 56, 57, 61, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 172, 209, 210, 211], "gradient": [4, 12, 41, 46, 52, 53, 56, 65], "experienc": 4, "num_class": [4, 52, 53, 232, 233, 234, 235, 236, 237, 238, 239, 240, 270, 271, 272, 273, 274, 275, 276, 277, 278], "fc": [4, 52, 53], "out_featur": [4, 59, 62], "ident": [4, 13, 15, 41, 46, 87, 115, 116, 130, 131, 151, 153, 155, 157, 166, 169, 172], "save_weights_onli": 4, "mode": [4, 14, 19, 25, 41, 46, 52, 53, 56, 65, 66, 73, 76, 165, 168, 248, 305], "val_acc_top5": 4, "logging_interv": 4, "trainer_param": [4, 41, 46], "default_root_dir": 4, "acceler": [4, 41, 46, 52, 53], "5e": [4, 56, 65], "07": 4, "found": [4, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 56, 65, 109], "pretrain": [4, 55, 57], "weight_fil": [4, 92, 110], "fitted_": 4, "deploi": [4, 52, 53], "littl": [4, 52, 53], "verifi": [4, 52, 53, 89, 109], "word": [4, 52, 53], "base": [4, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 91, 92, 93, 94, 106, 110, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 202, 203, 204, 205, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 310, 329, 330, 340, 341, 346, 363, 364, 370], "chang": [4, 32, 38, 56, 65, 89, 166, 169, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305], "dure": [4, 33, 37, 41, 46, 52, 53, 55, 57, 152, 156, 166, 167, 169, 170, 179, 185], "process": [4, 12, 14, 41, 46, 52, 53, 217, 242], "h": [4, 60, 63, 73, 74, 76, 78, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 211, 260], "necessari": 4, "further": [4, 13, 18, 19, 21, 22, 24, 25, 26, 28], "worri": 4, "too": [4, 33, 37, 305], "henc": 4, "expect": [4, 10, 30, 31, 33, 34, 35, 36, 37, 41, 46, 56, 65, 66, 152, 156, 165, 168, 203, 204], "even": [4, 92, 110], "assum": [4, 32, 38, 52, 53, 73, 76, 151, 153, 155, 157, 166, 169, 176, 177, 189, 190, 310], "alreadi": [4, 33, 37, 88, 89, 92, 110], "dynam": [4, 52, 53, 66, 68, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "so": [4, 7, 52, 53, 115, 116, 130, 131], "here": [4, 7, 12, 41, 46, 52, 53, 55, 56, 57, 65, 66, 73, 76, 88, 334, 336], "second": [4, 6, 7, 8, 9, 10, 56, 59, 62, 65, 72, 74, 75, 78, 83, 84], "did": [4, 7], "ani": [4, 12, 32, 33, 37, 38, 39, 41, 46, 52, 53, 55, 56, 57, 65, 82, 87, 88, 89, 146, 148, 150, 152, 154, 156, 160, 162, 203, 204, 326, 358], "signific": [4, 41, 46], "gain": 4, "800": 4, "train_img_data": 4, "test_img_data": 4, "len": [4, 6, 7, 8, 10, 12, 230, 231, 232, 252, 259, 270, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 320, 339, 344, 354, 362, 368], "froozen": 4, "new_model": 4, "normal_": 4, "std": [4, 12, 146, 148, 161, 163, 305], "01": [4, 11, 379], "zero_": 4, "requires_grad_": 4, "earli": [4, 41, 46], "stop": [4, 41, 46, 56, 65, 340, 363], "low": [4, 33, 37, 56, 65, 194], "frequenc": [4, 56, 65], "ensur": [4, 81, 199], "despit": 4, "20": [4, 6, 8, 9, 10, 160, 162, 176, 189], "50": [4, 6, 138, 139, 140, 141], "intuit": 4, "transfer": [4, 55, 57], "recognit": 4, "classif": [4, 8, 10, 12, 18, 20, 21, 24, 27, 28, 41, 46, 55, 56, 57, 61, 64, 65, 74, 78, 202, 205, 206, 207, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "test_load": 4, "val_acc": 4, "check_val_every_n_epoch": [4, 41, 46, 56, 65], "pred": [4, 10, 52, 53], "argmax": [4, 10], "_pretrained_filenam": 4, "path": [4, 30, 31, 32, 33, 35, 36, 37, 38, 39, 66, 92, 110, 178, 179, 184, 185, 218, 230, 251, 252, 330, 331, 335, 337, 338, 340, 349, 350, 363], "join": 4, "isfil": 4, "save": [4, 66, 337, 338], "state_dict": 4, "60": [4, 6], "correctli": 4, "impress": 4, "dimension": [4, 12, 55, 56, 57, 65], "With": 4, "achiev": [4, 55, 57], "suggest": [4, 12], "exponenti": [4, 56, 65, 73, 74, 76, 78], "finetun": 4, "advantag": 4, "straightforward": 4, "clear": [4, 19, 25], "its": [4, 12, 20, 27, 33, 37, 56, 65, 87, 89, 103, 104, 115, 116, 130, 131, 160, 162, 166, 169, 330, 340, 363], "count": 4, "fair": 4, "ones": [4, 56, 65], "notic": 4, "ad": [4, 12, 55, 56, 57, 65, 161, 163, 218, 230, 251, 252], "restrict": 4, "oper": [4, 41, 46, 52, 53, 250, 305], "125": 4, "1250": 4, "recogn": 4, "object": [4, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 66, 69, 91, 92, 93, 94, 106, 108, 110, 175, 188, 193, 194, 198, 209, 210, 303, 304, 305, 306, 329, 330], "patch": [4, 179, 185, 203, 204, 215, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 341, 346, 348, 364, 370], "belong": [4, 80], "chosen": [4, 41, 46], "weaker": 4, "almost": [4, 8, 161, 163], "strongli": 4, "train_transform": 4, "train_img_aug_data": 4, "2e": 4, "scratch": 4, "73": [4, 6], "7": [4, 6, 11, 12, 33, 37, 85, 86, 115, 116, 130, 131, 340, 363, 379], "less": 4, "leverag": [4, 12, 56, 65], "amount": 4, "generaliz": 4, "sole": [4, 41, 46], "par": 4, "tenth": 4, "experiment": [4, 66], "recent": 4, "ting": [4, 55, 57, 216, 243], "chen": [4, 55, 57, 60, 61, 63, 64, 72, 75, 216, 243], "trend": 4, "seem": [4, 7], "stronger": 4, "come": 4, "approach": [4, 12, 14], "beyond": 4, "khosla": 4, "moreov": 4, "year": [4, 33, 37], "great": 4, "distil": 4, "byol": 4, "redund": [4, 80], "reduct": [4, 12, 41, 46], "There": 4, "domain": [4, 6, 33, 37], "ahead": 4, "credit": [6, 7, 8, 9, 10], "grigi": [6, 8, 9, 10, 33, 37], "c": [6, 7, 9, 12, 33, 37, 91, 93, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 211, 317, 320, 340, 341, 351, 354, 363, 364], "ambrois": [6, 7, 33, 37], "surfifi": [6, 7, 8, 9, 10, 11, 13, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379], "min_depth_to_get_n_neighbor": [6, 13, 172, 307, 339, 362], "plot_trisurf": [6, 7, 8, 9, 10, 13, 172, 302, 303, 304, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 340, 341, 346, 347, 351, 352, 353, 354, 358, 359, 360, 363, 364, 370, 371, 376, 377], "triangl": [6, 7, 9, 178, 179, 181, 184, 185, 187, 230, 241, 252, 303, 304, 311, 312, 315, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 332, 333, 337, 338, 340, 341, 345, 346, 347, 348, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 369, 370, 371, 372, 373, 377], "order": [6, 7, 8, 9, 10, 12, 41, 46, 56, 65, 66, 85, 86, 88, 151, 155, 166, 167, 169, 170, 178, 179, 184, 185, 203, 204, 213, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 255, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 303, 304, 306, 310, 311, 312, 314, 315, 317, 318, 319, 320, 324, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 376, 377], "neigh": [6, 9, 178, 179, 184, 185, 286, 297, 320, 321, 340, 341, 347, 348, 354, 355, 363, 364, 371], "direct_neighbor": [6, 9, 281, 283, 284, 285, 289, 292, 294, 295, 296, 300, 320, 340, 346, 348, 354, 363, 370], "max_depth": 6, "ceil": 6, "displai": [6, 8, 9, 10, 13, 18, 19, 21, 22, 24, 25, 26, 28, 66, 85, 86, 98, 105, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 316], "aug": 6, "add_axi": 6, "arg": [6, 88, 89, 116, 131, 183, 197, 231, 259, 305], "kwarg": [6, 41, 46, 52, 53, 55, 56, 57, 65, 87, 88, 89, 91, 93, 116, 118, 124, 125, 126, 127, 131, 132, 133, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 183, 197, 231, 259, 305], "aspect": [6, 7, 9, 150, 152, 154, 156, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "auto": [6, 7, 9, 41, 46, 66, 70, 208, 212, 312, 317, 320, 325, 326, 340, 341, 346, 351, 354, 358, 363, 364, 370], "white": [6, 180, 186], "linewidth": [6, 9, 303, 304], "_textur": 6, "patch_siz": [6, 179, 185], "n_patch": [6, 179, 185, 215, 246], "uniform": [6, 56, 65, 83, 84, 85, 86], "phi": [6, 181, 187], "180": 6, "theta": [6, 181, 187], "psi": [6, 181, 187], "controlateral_textur": 6, "prob": [6, 176, 177, 189, 190, 191], "n_vertic": [6, 8, 10, 176, 177, 189, 190, 191, 206, 207, 215, 228, 229, 231, 246, 257, 258, 259, 305, 318, 328, 339, 342, 343, 344, 347, 352, 360, 362, 366, 367, 368, 371], "controlateral_data": [6, 177, 190], "group_textur": 6, "group_data": [6, 176, 189], "n_sampl": [6, 8, 10, 20, 21, 27, 28, 73, 76, 80, 81, 83, 84, 85, 86, 176, 189, 202, 205, 206, 207, 215, 246, 314, 315, 317, 318, 327, 328, 347, 351, 352, 359, 360, 371, 376, 377], "neigh_ind": [6, 176, 189], "groupbi": [6, 176, 189], "n_neighbor": [6, 12, 176, 189], "n_compon": [6, 12, 176, 189], "58": 6, "49": 6, "62": 6, "47": 6, "99": [6, 10, 56, 65, 160, 162], "92": [6, 85, 86], "54": 6, "65": [6, 8, 85, 86], "31": 6, "78": 6, "90": [6, 8, 85, 86, 153, 157], "76": 6, "93": [6, 33, 37], "21": [6, 85, 86], "70": 6, "22": [6, 11, 379], "46": 6, "89": [6, 11, 379], "82": 6, "11": [6, 7], "59": 6, "56": 6, "19": [6, 33, 37], "13": [6, 9], "23": 6, "51": 6, "79": 6, "17": 6, "77": 6, "88": [6, 33, 37], "52": 6, "95": [6, 74, 78, 85, 86], "48": 6, "72": 6, "66": [6, 11, 379], "24": [6, 7, 114, 119], "69": 6, "86": [6, 160, 162], "26": [6, 85, 86], "27": [6, 85, 86], "29": [6, 7], "83": 6, "63": 6, "36": 6, "33": [6, 150, 152, 154, 156], "39": 6, "35": [6, 10], "37": 6, "38": [6, 33, 37], "45": [6, 347, 371], "71": 6, "40": [6, 8, 9, 10, 202, 205, 206, 207], "41": 6, "81": 6, "43": 6, "44": [6, 85, 86], "87": [6, 11, 379], "98": 6, "97": 6, "53": 6, "55": [6, 85, 86], "57": 6, "61": [6, 85, 86], "94": [6, 74, 78], "67": [6, 7], "75": [6, 85, 86, 152, 156], "85": [6, 85, 86], "91": 6, "aug1": 6, "aug2": 6, "aug3": 6, "tran": 6, "regist": [6, 33, 37, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 175, 182, 193, 196, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "probabl": [6, 33, 37, 73, 76, 89, 151, 153, 155, 157, 175, 176, 177, 189, 190, 191, 193, 195, 306], "script": [6, 7, 8, 9, 10], "minut": [6, 7, 8, 9, 10], "430": [6, 11, 379], "plot_augment": [6, 11, 379], "math": [7, 160, 162], "warn": [7, 33, 37, 41, 46, 56, 65, 66, 102], "scipi": [7, 73, 76, 305, 312, 325], "mpl_toolkit": 7, "mplot3d": 7, "axes3d": [7, 303, 304], "ico2ico": [7, 13, 172, 307, 312, 315, 325, 377], "build": [7, 9, 56, 65, 66, 85, 86, 178, 179, 184, 185, 188, 198, 217, 242, 305, 340, 341, 346, 348, 349, 350, 361, 363, 364, 370, 373], "vertices_norm": 7, "triangles_norm": 7, "standard_ico": [7, 8, 10, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 312, 315, 325, 326, 346, 358, 370, 377], "642": [7, 8, 10], "1280": [7, 8, 10], "freesurf": [7, 33, 37, 217, 242, 332, 337, 346, 349, 370], "try": [7, 305], "find": [7, 66, 82, 310, 312, 317, 320, 325, 327, 351, 354, 359, 361], "optim": [7, 10, 41, 46, 52, 53, 55, 56, 57, 65, 66], "rotat": [7, 153, 157, 181, 187, 312, 321, 325, 347, 355, 371], "rmse": [7, 85, 86], "align_vector": 7, "54571598073452": 7, "okai": 7, "doe": [7, 19, 25, 79, 305], "suppos": 7, "equal": [7, 55, 56, 57, 65, 74, 78, 83, 84, 145, 147, 150, 154], "zero": [7, 8, 32, 38, 83, 84, 115, 116, 130, 131, 179, 185, 219, 230, 231, 232, 252, 253, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 311, 324], "issu": [7, 69], "matric": [7, 305], "That": 7, "previou": [7, 12], "algorithm": 7, "properli": 7, "row": [7, 12, 178, 179, 184, 185, 340, 363], "matrix": [7, 56, 65, 73, 74, 76, 78, 151, 153, 155, 157, 166, 169, 176, 189, 305], "52573111": 7, "85065081": 7, "96386126": 7, "2664047": 7, "91298249": 7, "39960705": 7, "08232358": 7, "8944": 7, "4472": 7, "2764": 7, "8507": 7, "1815": 7, "296": 7, "9378": 7, "0272": 7, "3462": 7, "0692": 7, "213": 7, "9746": 7, "sufac": [7, 13, 280, 307], "togeth": [7, 12, 306], "place": [7, 70], "subset": [7, 203, 204], "absolut": [7, 12, 21, 22, 26, 28, 66, 69, 85, 86], "sign": [7, 312, 325], "vertices_of_interest_norm": 7, "search": [7, 320, 340, 354, 363], "coords_of_interest": 7, "idx_of_interest": 7, "ab": [7, 56, 60, 61, 63, 64, 65, 74, 78, 115, 116, 130, 131, 150, 154], "sum": [7, 10], "vertices_of_interest": 7, "fs_row_idx": 7, "break": 7, "depend": [7, 33, 37, 56, 65, 89], "various": 7, "until": 7, "itertool": 7, "n_permut": 7, "factori": 7, "best_rms": 7, "best_rot": 7, "catch_warn": 7, "simplefilt": 7, "ignor": [7, 41, 46, 55, 56, 57, 65, 77, 85, 86, 87, 88, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 151, 153, 155, 157, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 305], "categori": 7, "userwarn": [7, 30, 31, 34, 35, 36], "format": [7, 10, 17, 23, 85, 86, 89, 151, 153, 155, 157, 166, 169, 316, 332, 333, 337, 338], "as_matrix": 7, "52575203": 7, "85063788": 7, "971395685383565e": 7, "05": [7, 11, 56, 65, 85, 86, 379], "simpli": [7, 56, 65], "solv": [7, 20, 27], "outlin": 7, "proper": [7, 30, 31, 32, 35, 36, 38], "anoth": [7, 12], "half": 7, "clearli": 7, "appear": [7, 12, 18, 21, 22, 24, 26, 28], "opt": 7, "hostedtoolcach": 7, "x64": 7, "lib": 7, "python3": 7, "coord": [7, 13, 172, 309, 310, 311, 312, 313, 314, 315], "246": 7, "closest": [7, 321, 355], "9190925817849288": 7, "700": [7, 11, 379], "plot_match_icosahedron": [7, 11, 379], "convert": [8, 81, 166, 169, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 251, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 311, 314, 324, 376], "spheric": [8, 11, 208, 209, 210, 212, 217, 218, 219, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 249, 251, 252, 253, 254, 259, 261, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 287, 288, 291, 298, 299, 307, 308, 309, 311, 313, 314, 323, 324, 340, 357, 363, 375, 376, 379], "evenli": [8, 314, 376], "resampl": [8, 13, 89, 152, 156, 166, 167, 169, 170, 172, 314, 376], "respect": [8, 12, 152, 156, 166, 169, 291, 314, 376], "sin": [8, 314, 376], "elev": [8, 209, 210, 213, 214, 219, 231, 232, 255, 256, 259, 261, 270, 291, 308, 309, 313, 314, 375, 376], "azimuth": [8, 209, 210, 213, 214, 219, 231, 232, 255, 256, 259, 261, 270, 291, 308, 309, 313, 314, 375, 376], "vice": 8, "versa": 8, "ico_ord": [8, 10, 178, 179, 184, 185, 203, 204], "n_class": [8, 10, 202, 205, 206, 207, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 314, 315, 318, 327, 328, 347, 352, 359, 360, 371, 376, 377], "ico_vertic": [8, 10, 202, 205, 206, 207], "ico_triangl": [8, 10], "make_classif": [8, 10, 13, 172, 201, 206, 207, 314, 315, 318, 327, 328, 347, 352, 359, 360, 371, 376, 377], "seed": [8, 10, 52, 53, 55, 57, 202, 205, 206, 207, 314, 315, 318, 327, 328, 347, 352, 359, 360, 371, 376, 377], "proj_textur": 8, "text2grid": [8, 13, 172, 307, 308, 309, 311, 313, 314, 324, 375, 376], "proj": [8, 311, 314, 324, 376], "lower": [8, 12, 152, 156, 318, 349, 352], "192": [8, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 251, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 311, 314, 324, 376], "grid2text": [8, 13, 172, 307, 308, 309, 311, 313, 314, 324, 375, 376], "is_label": [8, 10, 303, 304, 311, 315, 318, 324, 327, 328, 347, 352, 359, 360, 371, 377], "enabl": [8, 33, 37, 41, 46, 52, 53, 66, 91, 93], "scatter_dens": 8, "labelx": 8, "labe": 8, "scatter": [8, 9, 12, 317, 320, 340, 341, 346, 351, 354, 363, 364, 370], "width": [8, 115, 116, 130, 131, 303, 304], "bottom": 8, "height": [8, 260], "005": 8, "rect_scatt": 8, "rect_histx": 8, "rect_histi": 8, "ax_scatt": 8, "tick_param": 8, "direct": [8, 166, 169, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 314, 340, 363, 376], "top": [8, 18, 21, 22, 24, 26, 28], "ax_histx": 8, "ax_histi": 8, "bin": 8, "hist": 8, "orient": [8, 151, 153, 155, 157, 166, 169], "set_xlim": 8, "get_xlim": 8, "set_ylim": 8, "get_ylim": 8, "radiu": [8, 308, 309, 313, 375], "cart2sph": [8, 13, 172, 307, 308, 309, 313, 375], "sin_elev": 8, "circularli": [8, 291], "continu": [8, 12, 21, 28, 56, 61, 64, 65, 74, 78, 80, 81, 291], "circular": [8, 287, 288, 291, 298, 299], "boundari": [8, 291], "expand_dim": 8, "from_numpi": [8, 166, 169], "pad_textur": 8, "circular_pad": [8, 13, 172, 280, 291], "padd": 8, "conv": [8, 115, 116, 123, 130, 131, 218, 230, 248, 249, 250, 251, 252, 253, 254, 281, 292], "out_channel": [8, 10, 218, 230, 250, 251, 252], "conv_textur": 8, "194": [8, 9, 11, 219, 220, 221, 222, 223, 224, 225, 226, 227, 261, 262, 263, 264, 265, 266, 267, 268, 269, 287, 298, 379], "807": [8, 11, 379], "plot_project_textur": [8, 11, 379], "get_rectangular_project": [9, 13, 172, 307, 323, 357], "vidx": 9, "cnt": [9, 317, 320, 340, 341, 346, 351, 354, 363, 364, 370], "marker": [9, 317, 320, 340, 341, 346, 351, 354, 363, 364, 370], "str": [9, 18, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 52, 53, 55, 56, 57, 65, 66, 67, 69, 73, 74, 76, 78, 80, 85, 86, 92, 107, 109, 110, 132, 133, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 170, 176, 178, 179, 181, 184, 185, 187, 189, 203, 204, 213, 214, 215, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 252, 253, 255, 256, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 296, 305, 316, 321, 330, 331, 332, 333, 335, 337, 338, 347, 349, 350, 355, 371, 374], "rectangular": [9, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 323, 341, 357, 364], "sphere": [9, 248, 253, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 323, 341, 345, 356, 357, 361, 364, 365, 369], "zoom": [9, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 297, 320, 323, 341, 354, 357, 364], "purpl": 9, "brown": 9, "pink": 9, "oliv": 9, "cyan": 9, "yellow": 9, "tan": 9, "salmon": 9, "violet": 9, "steelblu": [9, 12], "lime": 9, "navi": 9, "node": [9, 41, 46, 179, 185, 281, 292, 320, 323, 354, 357, 373], "node_rec_neigh": 9, "node_tplane_neigh": 9, "279": [9, 11, 379], "plot_spherical_neighbor": [9, 11, 379], "sphericalunet": [10, 13, 172, 212, 218, 230, 250, 251, 252], "genrat": 10, "n_epoch": 10, "surfac": [10, 12, 13, 33, 37, 172, 173, 174, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 246, 251, 252, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 303, 304, 311, 314, 324, 331, 332, 333, 334, 337, 338, 340, 363, 376, 378], "crossentropi": 10, "sgd": [10, 56, 65], "obviou": 10, "classificationdataset": [10, 13, 172, 201, 202, 205], "in_ord": [10, 230, 252], "start_filt": [10, 218, 230, 251, 252], "conv_mod": [10, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "dine": [10, 178, 179, 184, 185, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 340, 363], "dine_s": [10, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "up_mod": [10, 230, 252, 253], "transpos": [10, 218, 230, 251, 252, 253, 283, 288, 289, 294, 299, 300], "loss_fn": 10, "crossentropyloss": 10, "momentum": [10, 56, 65], "n_batch": 10, "zero_grad": 10, "backward": [10, 56, 65, 80, 81], "current": [10, 21, 28, 33, 37, 41, 46, 52, 53, 55, 56, 57, 65, 67, 68, 70, 89, 151, 155], "7f": 10, "5d": 10, "eval": [10, 41, 46, 52, 53], "test_loss": 10, "y_pred": [10, 12, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 80, 81, 83, 84, 85, 86], "no_grad": 10, "logit": [10, 72, 75], "softmax": 10, "type": [10, 17, 23, 32, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 65, 66, 67, 80, 81, 82, 87, 88, 89, 115, 116, 130, 131, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 181, 187, 188, 198, 230, 252, 253, 285, 296, 321, 340, 347, 355, 363, 371], "concaten": [10, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "error": [10, 12, 21, 22, 26, 28, 33, 37, 41, 46, 52, 53, 85, 86, 106, 109, 161, 163, 305, 329], "1f": 10, "avg": 10, "8f": 10, "172314": 10, "769450": 10, "650121": 10, "563239": 10, "482882": 10, "402503": 10, "333962": 10, "272850": 10, "009751": 10, "010415": 10, "010725": 10, "010330": 10, "009308": 10, "008083": 10, "007240": 10, "007059": 10, "000597": 10, "000324": 10, "000173": 10, "000099": 10, "000063": 10, "000048": 10, "000043": 10, "000047": 10, "000286": 10, "000264": 10, "000236": 10, "000205": 10, "000176": 10, "000150": 10, "000128": 10, "000110": 10, "000045": 10, "corresspond": 10, "exactli": 10, "ground": [10, 21, 28, 80, 81, 85, 86], "truth": [10, 21, 28, 80, 81, 85, 86], "473": [10, 11, 379], "565": 10, "plot_unet_segment": [10, 11, 379], "690": [11, 379], "564": [11, 379], "weak": 12, "guid": [12, 18, 24, 305], "bring": 12, "push": [12, 55, 56, 57, 65], "apart": [12, 55, 56, 57, 65], "dissimilar": [12, 56, 65], "enhanc": 12, "qualiti": [12, 152, 156, 166, 167, 169, 170], "diseas": 12, "md": 12, "regress": [12, 13, 20, 21, 22, 26, 27, 28, 41, 44, 46, 49, 52, 53, 55, 57, 80, 81, 84, 85, 86, 172], "knn": 12, "voxel": [12, 33, 37, 89, 150, 151, 154, 155, 160, 161, 162, 163, 166, 169], "morphometri": [12, 33, 37], "vbm": [12, 33, 37], "templat": [12, 33, 37], "footprint": 12, "roi": 12, "whole": [12, 33, 37, 160, 161, 162, 163], "individu": 12, "proxi": [12, 56, 61, 64, 65, 74, 78], "meta": [12, 20, 27, 56, 61, 64, 65, 74, 78, 176, 189, 305], "miccai": [12, 56, 61, 64, 65, 74, 78], "2021": [12, 55, 56, 57, 61, 64, 65, 74, 78, 113, 117, 160, 162, 231, 259], "linearregress": 12, "manifold": 12, "mean_absolute_error": 12, "kneighborsregressor": 12, "dataloader_ssl_vbm": 12, "dataloader_ssl_vbm_test": 12, "sbm_channel": 12, "sbm_transform": 12, "vbm_transform": 12, "dataloader_ssl_sbm": 12, "dataloader_ssl_sbm_test": 12, "don": [12, 150, 152, 154, 156], "dataloader_vbm_train": 12, "dataloader_vbm_test": 12, "dataloader_sbm_train": 12, "dataloader_sbm_test": 12, "hack": 12, "avoid": [12, 21, 28, 161, 163, 305], "instanti": [12, 56, 65, 166, 169], "impos": [12, 56, 65, 66], "272": 12, "vbm_encod": 12, "sbm_encod": 12, "vbm_model": 12, "sbm_model": 12, "wide": 12, "pairwis": [12, 56, 65, 73, 74, 76, 78], "distanc": [12, 73, 76, 176, 189, 286, 297], "preserv": [12, 115, 116, 130, 131, 150, 154, 166, 167, 169, 170], "z_train_vbm": 12, "z_test_vbm": 12, "z_train_sbm": 12, "z_test_sbm": 12, "y_train_vbm": 12, "y_test_vbm": 12, "y_train_sbm": 12, "y_test_sbm": 12, "accord": [12, 33, 37, 115, 116, 130, 131, 160, 162, 340, 363], "plot_mds_side_by_sid": 12, "z_vbm": 12, "z_sbm": 12, "y_vbm": 12, "y_sbm": 12, "side": 12, "n_init": 12, "300": 12, "z_vbm_md": 12, "fit_transform": 12, "z_sbm_md": 12, "sc1": 12, "viridi": 12, "sc2": 12, "report": [12, 18, 21, 24, 28, 85, 86], "evaluate_and_predict": 12, "z_train": 12, "z_test": 12, "y_train": 12, "y_test": 12, "mae": [12, 85, 86], "plot_comparison": 12, "dict": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 91, 93, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 178, 179, 184, 185, 203, 204, 217, 242, 279, 306, 320, 321, 340, 354, 355, 363], "n_model": 12, "n_modal": 12, "model_nam": 12, "col": 12, "lw": 12, "nmae": 12, "organ": [12, 178, 179, 184, 185, 331, 340, 363], "mai": [12, 13, 41, 46, 305], "captur": 12, "relat": [12, 212, 217, 242], "context": [12, 329], "confirm": 12, "outperform": 12, "pleas": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "guidelin": 13, "variou": [13, 90, 260], "help": [13, 41, 46, 90], "develop": [13, 14, 90], "definit": [13, 66, 73, 76, 111, 112, 208, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 327, 359], "backbon": [13, 56, 65, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 172, 216, 243], "intens": [13, 89, 145, 146, 147, 148, 160, 161, 162, 163, 172], "link": 13, "plugin": 13, "helper": [13, 173], "integr": [13, 74, 78, 82, 173, 250], "pytorch": [13, 41, 46, 52, 53, 56, 65, 173, 213, 214, 228, 229, 255, 256, 257, 258, 316, 378], "artifici": [13, 150, 154, 201], "dedic": [13, 280], "content": [13, 30, 35], "fetch_experi": [13, 15, 66, 172], "filter_config": [13, 15, 67, 172], "get_env": [13, 15, 68, 172], "load_interfac": [13, 15, 69, 172], "update_param": [13, 15, 70, 172], "batchtypingcallback": [13, 16, 17, 23, 41, 46, 172], "modelprob": [13, 16, 18, 19, 21, 22, 24, 25, 26, 28, 172], "multitaskestim": [13, 16, 20, 21, 27, 28, 172], "regressionprobingcallback": [13, 16, 22, 26, 172], "check_typ": [13, 23, 172], "baseimagedataset": [13, 29, 30, 35, 172], "basenumpydataset": [13, 29, 31, 36, 172], "imagedataframedataset": [13, 29, 32, 38, 172], "pandas_dataset": [13, 32, 38, 39, 172], "default_image_load": [13, 29, 32, 38, 39, 172], "basedataset": [13, 29, 30, 31, 34, 35, 36, 172], "baseestim": [13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 40, 41, 46, 52, 53, 55, 56, 57, 65, 73, 76, 172], "classifiermixin": [13, 40, 42, 47, 52, 53, 172], "clustermixin": [13, 40, 43, 48, 172], "regressormixin": [13, 40, 44, 49, 172], "transformermixin": [13, 19, 25, 40, 45, 50, 55, 56, 57, 65, 172], "logistic_regress": [13, 53, 172], "yawar": [13, 61, 64, 65, 172], "projectionhead": [13, 58, 59, 60, 61, 62, 63, 64, 172], "simclrprojectionhead": [13, 58, 60, 63, 172], "yawareprojectionhead": [13, 56, 58, 61, 64, 65, 172], "projection_head": [13, 56, 59, 62, 63, 64, 65, 172], "infonc": [13, 52, 53, 55, 56, 57, 65, 72, 74, 75, 78, 172], "kernelmetr": [13, 56, 65, 71, 73, 74, 76, 78, 172], "yawareinfonc": [13, 56, 65, 71, 74, 78, 172], "yaware_infonc": [13, 56, 65, 76, 77, 78, 172], "pairwisecosinesimilar": [13, 71, 77, 172], "pearson_r": [13, 79, 83, 84, 172], "regression_report": [13, 79, 85, 86, 172], "_regress": [13, 80, 81, 82, 172], "_check_reg_target": [13, 79, 80, 81, 172], "_check_reg_targets_with_floating_dtyp": [13, 79, 80, 81, 172], "_find_matching_floating_dtyp": [13, 79, 80, 81, 82, 172], "bunch": [13, 66, 91, 93, 172], "print_multicolor": [13, 90, 98, 105, 172], "attr": [13, 90, 95, 107, 172], "fg": [13, 90, 96, 172], "hex": [13, 90, 97, 172], "print_result": [13, 90, 99, 172], "print_subtitl": [13, 90, 100, 172], "print_titl": [13, 90, 101, 172], "print_warn": [13, 90, 102, 172], "random_styl": [13, 90, 103, 172], "styliz": [13, 90, 104, 172], "_availableifdescriptor": [13, 90, 106, 172], "_estimator_i": [13, 90, 107, 172], "available_if": [13, 90, 108, 172], "check_is_fit": [13, 90, 109, 172], "alexnet": [13, 112, 113, 117, 172], "densenet": [13, 112, 114, 118, 119, 125, 172], "resnettrunc": [13, 112, 116, 131, 172], "densenet121": [13, 112, 118, 125, 172], "resnet18_trunc": [13, 112, 127, 137, 172], "resnet50": [13, 112, 115, 116, 130, 131, 138, 140, 172], "resnet50_trunc": [13, 112, 139, 141, 172], "alexnet3d": [13, 117, 172], "resnet3d": [13, 56, 65, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 172], "basicblock": [13, 112, 115, 116, 128, 130, 131, 172], "bottleneck": [13, 112, 114, 115, 116, 119, 129, 130, 131, 172], "_resnet": [13, 112, 132, 172], "_resnet_trunc": [13, 112, 133, 172], "conv1x1": [13, 112, 134, 172], "conv3x3": [13, 112, 135, 172], "densenet3d": [13, 119, 120, 121, 122, 123, 124, 125, 172], "_denseblock": [13, 112, 120, 172], "_denselay": [13, 112, 121, 172], "_transit": [13, 112, 122, 172], "_bn_function_factori": [13, 112, 123, 172], "_densenet": [13, 112, 124, 172], "volume_transform": [13, 171, 172], "volumetransform": [13, 142, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172], "randomgaussianblur": [13, 89, 144, 145, 147, 172], "randomgaussiannois": [13, 89, 144, 146, 148, 172], "random_nois": [13, 148, 172], "random_blur": [13, 147, 172], "randomeras": [13, 89, 149, 150, 154, 172], "randomflip": [13, 89, 149, 151, 155, 172], "randomrot": [13, 89, 149, 153, 157, 172], "random_eras": [13, 154, 172], "random_flip": [13, 155, 172], "random_resized_crop": [13, 156, 172], "random_rot": [13, 157, 172], "robustresc": [13, 89, 159, 160, 162, 172], "znormal": [13, 89, 159, 161, 163, 172], "z_normal": [13, 163, 172], "rescal": [13, 160, 162, 172, 349], "croporpad": [13, 89, 164, 165, 168, 172], "crop_or_pad": [13, 168, 172], "randomcompos": [13, 172, 173, 306], "basetransform": [13, 172, 174, 175, 182, 183, 193, 196, 197], "groupmixup": [13, 172, 174, 176, 189], "hemimixup": [13, 172, 174, 177, 190], "surfblur": [13, 172, 174, 178, 184], "surfcutout": [13, 172, 174, 179, 185], "surfnois": [13, 172, 174, 180, 186], "surfrot": [13, 172, 174, 181, 187], "apply_chained_transform": [13, 172, 174, 183, 197], "multichannel_augment": [13, 172, 174, 192, 200], "mixup": [13, 172, 189, 190, 191], "mixupaugment": [13, 172, 174, 176, 177, 189, 190, 191], "randomaugment": [13, 172, 174, 175, 178, 179, 180, 181, 184, 185, 186, 187, 191, 192, 193, 194, 200], "listifi": [13, 172, 174, 199], "genericsurfdataset": [13, 172, 201, 203, 204], "_samples_gener": [13, 172, 205, 206], "_gener": [13, 172, 204], "sphericalvaeloss": [13, 172, 208, 209, 210], "vae": [13, 172, 209, 210, 211, 231, 255, 256, 257, 258, 259, 260], "log_likelihood": [13, 172, 208, 211], "hemifusiondecod": [13, 172, 212, 213, 255], "hemifusionencod": [13, 172, 212, 214, 256], "sit": [13, 172, 215, 244, 245, 246, 247], "sphericalbas": [13, 172, 212, 217, 228, 229, 230, 232, 242, 252, 257, 258, 270], "sphericalgunet": [13, 172, 212, 218, 230, 250, 251, 252], "sphericalgvgg": [13, 172, 212, 219, 232, 261, 270], "sphericalgvgg11": [13, 172, 212, 219, 220, 261, 262], "sphericalgvgg11bn": [13, 172, 212, 221, 263], "sphericalgvgg13": [13, 172, 212, 222, 264], "sphericalgvgg13bn": [13, 172, 212, 223, 265], "sphericalgvgg16": [13, 172, 212, 224, 266], "sphericalgvgg16bn": [13, 172, 212, 225, 267], "sphericalgvgg19": [13, 172, 212, 226, 268], "sphericalgvgg19bn": [13, 172, 212, 227, 269], "sphericalhemifusiondecod": [13, 172, 212, 228, 257], "sphericalhemifusionencod": [13, 172, 212, 229, 258], "sphericalva": [13, 172, 212, 231, 259], "sphericalvgg": [13, 172, 212, 219, 232, 261, 270], "sphericalvgg11": [13, 172, 212, 232, 233, 270, 271], "sphericalvgg11bn": [13, 172, 212, 234, 272], "sphericalvgg13": [13, 172, 212, 235, 273], "sphericalvgg13bn": [13, 172, 212, 236, 274], "sphericalvgg16": [13, 172, 212, 237, 275], "sphericalvgg16bn": [13, 172, 212, 238, 276], "sphericalvgg19": [13, 172, 212, 239, 277], "sphericalvgg19bn": [13, 172, 212, 240, 278], "attent": [13, 172, 212, 215, 244, 246], "feedforward": [13, 172, 212, 245], "vgg": [13, 172, 219, 232, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "class_factori": [13, 172, 212, 279], "compute_output_dim": [13, 172, 212, 260], "downblock": [13, 172, 212, 248], "downgblock": [13, 172, 212, 249], "graphicalunet": [13, 172, 212, 250], "upblock": [13, 172, 212, 253], "upgblock": [13, 172, 212, 254], "ico": [13, 172, 178, 179, 184, 185, 203, 204, 212, 217, 241, 242, 281, 292], "icodineconv": [13, 172, 178, 184, 280, 281, 286, 287, 292, 297, 298], "icofixindexupsampl": [13, 172, 280, 282, 283, 284, 288, 289, 290, 293, 294, 295, 299, 300, 301], "icogenericupconv": [13, 172, 280, 282, 283, 284, 288, 289, 290, 293, 294, 295, 299, 300, 301], "icomaxindexupsampl": [13, 172, 280, 282, 283, 284, 288, 289, 290, 293, 294, 295, 299, 300, 301], "icopool": [13, 172, 280, 284, 285, 295, 296], "icorepaconv": [13, 172, 280, 281, 286, 287, 292, 297, 298], "icospmaconv": [13, 172, 260, 280, 281, 286, 287, 292, 297, 298], "icospmaconvtranspos": [13, 172, 280, 282, 283, 284, 288, 289, 290, 293, 294, 295, 299, 300, 301], "icoupconv": [13, 172, 280, 282, 283, 284, 289, 290, 293, 294, 295, 300, 301], "icoupsampl": [13, 172, 280, 282, 283, 284, 288, 289, 290, 293, 294, 295, 299, 300, 301], "debug_msg": [13, 172, 307, 316], "downsampl": [13, 128, 129, 172, 203, 204, 217, 242, 248, 249, 253, 283, 284, 285, 289, 294, 295, 296, 300, 307, 317, 318, 319, 327, 328, 349, 351, 352, 353, 359, 360], "downsample_data": [13, 172, 307, 317, 318, 319, 327, 328, 351, 352, 353, 359, 360], "downsample_ico": [13, 172, 307, 317, 318, 319, 327, 328, 351, 352, 353, 359, 360], "find_neighbor": [13, 172, 307, 320, 354], "find_rotation_interpol_coef": [13, 172, 307, 321, 345, 355, 369], "get_logg": [13, 172, 307, 322], "interpol": [13, 152, 156, 166, 167, 169, 170, 172, 181, 187, 230, 252, 253, 282, 290, 293, 301, 303, 304, 307, 311, 314, 317, 318, 319, 321, 324, 327, 328, 345, 347, 351, 352, 353, 355, 359, 360, 369, 371, 376], "interpolate_data": [13, 172, 307, 317, 318, 319, 327, 328, 351, 352, 353, 359, 360], "neighbors_rec": [13, 172, 286, 297, 307, 320, 340, 341, 354, 363, 364], "number_of_ico_vertic": [13, 172, 307, 342, 344, 366, 368], "number_of_neighbor": [13, 172, 307, 339, 343, 362, 367], "order_of_ico_from_vertic": [13, 172, 307, 342, 344, 366, 368], "order_triangl": [13, 172, 307, 345, 369], "patch_tri": [13, 172, 307, 346, 348, 370], "rotate_data": [13, 172, 181, 187, 307, 321, 347, 355, 371], "setup_log": [13, 172, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 374], "sph2cart": [13, 172, 307, 308, 309, 313, 375], "text2ico": [13, 172, 307, 312, 315, 325, 377], "find_corresponding_ord": [13, 172, 307, 310], "_patch_tri_it": [13, 172, 307, 348], "build_freesurfer_ico": [13, 172, 307, 349], "build_fslr_ref": [13, 172, 307, 350], "get_angle_with_xaxi": [13, 172, 307, 356], "middle_point": [13, 172, 307, 361], "triangles_to_edg": [13, 172, 307, 372], "vertex_adjacency_graph": [13, 172, 307, 373], "hideprint": [13, 172, 307, 329], "compute_and_stor": [13, 172, 307, 330], "decompose_cifti": [13, 172, 307, 331], "read_freesurf": [13, 172, 307, 332], "read_gifti": [13, 172, 307, 333], "surf_data_from_cifti": [13, 172, 307, 334], "ungzip": [13, 172, 307, 335], "volume_from_cifti": [13, 172, 307, 336], "write_freesurf": [13, 172, 307, 337], "write_gifti": [13, 172, 307, 338], "walk": 14, "intal": 14, "offici": [14, 82], "releas": 14, "who": 14, "latest": [14, 79, 82], "contribut": 14, "privileg": 14, "pip": 14, "git": 14, "repositori": [14, 33, 37, 92, 110], "github": [14, 212, 334, 336], "deepinsight": 14, "page": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "document": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "signatur": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "big": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "pictur": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "rais": [17, 19, 23, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 88, 89, 106, 108, 109, 171, 305], "typeerror": [17, 23, 32, 38, 109], "annot": [17, 23], "traiterror": [17, 23], "incorrect": [17, 23, 32, 38], "notimplementederror": [17, 23], "handl": [17, 19, 23, 25, 55, 56, 57, 65, 88, 92, 110, 145, 147, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170], "on_predict_batch_start": [17, 23], "trainer": [17, 19, 23, 25, 41, 46, 52, 53, 55, 56, 57, 65], "pl_modul": [17, 18, 19, 21, 22, 23, 24, 25, 26, 28], "batch_idx": [17, 23, 41, 46, 52, 53, 55, 56, 57, 65], "dataloader_idx": [17, 23, 41, 46, 52, 53, 55, 56, 57, 65], "begin": [17, 19, 23, 25], "on_test_batch_start": [17, 23], "on_train_batch_start": [17, 23], "on_validation_batch_start": [17, 23], "train_dataload": [18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 55, 56, 57, 65], "test_dataload": [18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 55, 56, 57, 65], "probe_nam": [18, 21, 22, 24, 26, 28], "every_n_val_epoch": [18, 19, 21, 22, 24, 25, 26, 28], "on_test_epoch_start": [18, 19, 21, 22, 24, 25, 26, 28], "on_test_epoch_end": [18, 19, 21, 22, 24, 25, 26, 28], "prog_bar": [18, 19, 21, 22, 24, 25, 26, 28, 41, 46], "concret": [18, 22, 24, 26, 73, 76], "emb": [18, 19, 22, 24, 25, 26], "main": [18, 21, 22, 24, 26, 28, 85, 86], "yield": [18, 19, 21, 22, 24, 25, 26, 28], "form": [18, 19, 21, 22, 24, 25, 26, 28, 33, 37, 66, 92, 110, 176, 189], "scikit": [18, 20, 22, 24, 26, 27, 79], "metric_nam": [18, 21, 22, 24, 26, 28], "probe_class_nam": [18, 22, 24, 26], "disabl": [18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53], "bool": [18, 19, 21, 22, 24, 25, 26, 28, 32, 33, 37, 38, 41, 46, 83, 84, 85, 86, 92, 107, 110, 114, 115, 116, 119, 130, 131, 150, 154, 175, 192, 193, 200, 203, 204, 209, 210, 213, 214, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 249, 250, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 292, 303, 304, 305, 326, 329, 331, 340, 345, 346, 358, 363, 369, 370], "progress": [18, 19, 21, 22, 24, 25, 26, 28, 41, 46, 52, 53, 56, 65], "log_metr": [18, 19, 21, 22, 24, 25, 26, 28], "y_true": [18, 19, 21, 22, 24, 25, 26, 28, 80, 81, 83, 84, 85, 86], "abc": [19, 25, 89], "logic": [19, 25, 41, 46, 52, 53, 89], "transform_step": [19, 25, 41, 46, 55, 56, 57, 65], "pass": [19, 25, 32, 38, 41, 46, 56, 59, 62, 65, 77, 80, 108, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 305], "abstract": [19, 25, 41, 46, 89], "inherit": [19, 25, 41, 46, 66], "must": [19, 25, 32, 38, 41, 46, 52, 53, 55, 56, 57, 65, 66, 73, 74, 76, 78, 89, 109, 145, 147, 151, 155, 160, 161, 162, 163, 166, 167, 169, 170, 175, 193, 330, 335], "static": [19, 25, 89, 166, 169], "adapt_dataloader_for_ddp": [19, 25], "wrap": [19, 20, 25, 27, 330], "distributedsampl": [19, 25], "ddp": [19, 25, 41, 46], "extract_featur": [19, 25], "By": [19, 25, 32, 38, 41, 46, 52, 53, 56, 65], "tupl": [19, 25, 33, 37, 52, 53, 55, 56, 57, 59, 62, 65, 66, 67, 92, 110, 114, 115, 119, 130, 132, 133, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 165, 166, 167, 168, 169, 170, 194, 195, 199, 241, 287, 288, 291, 298, 299], "z": [19, 25, 60, 63, 150, 151, 154, 155, 161, 163, 213, 214, 231, 255, 256, 259, 308, 309, 311, 313, 314, 324, 375, 376], "on_train_epoch_end": [19, 25], "access": [19, 25, 32, 33, 37, 38, 91, 93, 279, 330], "cach": [19, 25, 52, 53, 92, 110, 178, 179, 181, 184, 185, 187, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 330], "attribut": [19, 25, 32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 70, 91, 93, 94, 95, 108, 109], "core": [19, 25, 32, 38, 41, 46, 52, 53], "lightningmodul": [19, 25, 41, 46, 56, 65], "hook": [19, 25, 41, 46, 56, 65, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "mylightningmodul": [19, 25], "l": [19, 25, 150, 154, 160, 162], "training_step_output": [19, 25], "training_step": [19, 25, 41, 46, 52, 53, 55, 56, 57, 65], "mycallback": [19, 25], "someth": [19, 25], "epoch_mean": [19, 25], "training_epoch_mean": [19, 25], "free": [19, 25], "on_validation_epoch_end": [19, 25, 52, 53], "new": [19, 25, 41, 46, 73, 76, 92, 110, 151, 155, 166, 167, 169, 170, 175, 193, 194, 195, 241, 282, 293, 305], "valueerror": [19, 25, 32, 38, 88, 89, 171], "list": [20, 21, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 55, 56, 57, 59, 62, 65, 66, 70, 73, 74, 76, 78, 80, 88, 176, 183, 189, 197, 199, 202, 203, 204, 205, 206, 207, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 318, 319, 320, 327, 328, 352, 353, 354, 359, 360, 372], "problem": [20, 27, 206, 207, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "regressor": [20, 22, 26, 27, 44, 49, 85, 86, 113, 117], "column": [20, 27, 32, 38], "n_featur": [20, 27, 56, 65, 72, 73, 74, 75, 76, 78, 318, 328, 347, 352, 360, 371], "n_task": [20, 21, 27, 28], "multitask": [21, 28], "categor": [21, 28, 166, 167, 169, 170], "task_name_i": [21, 28], "length": [21, 28, 33, 37, 340, 363], "task2": [21, 28], "log_classification_metr": [21, 28], "task_nam": [21, 28], "log_regression_metr": [21, 28], "median": [21, 22, 26, 28, 85, 86, 165, 168], "squar": [21, 22, 26, 28, 85, 86, 213, 255, 260], "multivari": [22, 26, 73, 76], "subject_in_pattern": [30, 35, 203, 204], "target_map": [30, 31, 34, 35, 36, 203, 204], "withdraw_subject": [30, 31, 34, 35, 36, 203, 204], "scalabl": [30, 35, 41, 46, 203, 204], "locat": [30, 31, 34, 35, 36, 92, 110, 203, 204, 335], "level": [30, 35, 203, 204, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 250, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 374], "identifi": [30, 35, 203, 204, 312, 325], "retriev": [30, 33, 35, 37, 92, 110, 203, 204], "optionali": [30, 31, 34, 35, 36, 52, 53, 55, 57, 203, 204, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "dictionari": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 52, 53, 56, 65, 85, 86, 91, 93, 94, 178, 179, 184, 185, 203, 204, 340, 363], "specifi": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 56, 65, 66, 69, 85, 86, 89, 92, 110, 151, 152, 155, 156, 166, 169, 175, 178, 179, 184, 185, 193, 203, 204, 303, 304, 318, 319, 328, 352, 353, 360], "exist": [30, 31, 34, 35, 36, 92, 110, 203, 204, 305, 349, 350], "datafram": [30, 31, 32, 34, 35, 36, 38, 176, 189, 203, 204], "callabl": [30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 46, 88, 108, 160, 161, 162, 163, 203, 204, 330], "optionnali": [30, 31, 34, 35, 36, 52, 53, 178, 179, 184, 185, 192, 200, 203, 204], "filenotfounderror": [30, 31, 34, 35, 36], "mandatorri": [30, 31, 34, 35, 36], "keyerror": [30, 31, 34, 35, 36], "mandatori": [30, 31, 34, 35, 36, 306], "miss": [30, 31, 33, 34, 35, 36, 37, 327, 359], "particip": [30, 31, 33, 34, 35, 36, 37, 203, 204], "tsv": [30, 31, 32, 33, 34, 35, 36, 37, 38, 203, 204], "request": [30, 31, 33, 34, 35, 36, 37, 151, 155, 203, 204, 212, 305], "conta": [30, 31, 34, 35, 36, 203, 204], "idea": [30, 35, 55, 57], "your": [30, 34, 35, 41, 46, 56, 65, 66, 92, 103, 104, 110, 378], "symlink": [30, 35], "aggreg": [30, 33, 35, 37, 83, 84], "enforc": [30, 35, 56, 65], "reproduc": [30, 35, 41, 46, 52, 53, 55, 57], "persist": [30, 35], "get_checksum": [30, 35], "hash": [30, 35, 92, 110], "get_data": [30, 31, 35, 36], "rootdir": [32, 38], "df": [32, 38], "frame": [32, 38], "image_col": [32, 38], "image_path": [32, 38], "label_col": [32, 38], "checksum_col": [32, 38], "return_none_if_no_label": [32, 38], "image_load": [32, 38], "is_valid_label": [32, 38], "read_csv_kwarg": [32, 38], "option": [32, 38, 55, 56, 57, 59, 62, 65, 74, 78, 83, 84, 85, 86, 89, 178, 179, 184, 185, 209, 210, 213, 214, 217, 228, 229, 242, 255, 256, 257, 258, 303, 304, 305, 318, 319, 326, 328, 329, 345, 346, 352, 353, 358, 360, 369, 370], "checksum": [32, 38], "fly": [32, 33, 37, 38], "alongsid": [32, 38], "least": [32, 38, 41, 46], "csv": [32, 33, 37, 38], "string": [32, 33, 37, 38, 56, 65, 80, 81, 109, 303, 304], "tensor": [32, 38, 41, 46, 52, 53, 55, 56, 57, 59, 62, 65, 72, 74, 75, 78, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 209, 210, 211, 213, 214, 215, 219, 228, 229, 231, 232, 246, 253, 255, 256, 257, 258, 259, 261, 270, 291, 316], "empti": [32, 38], "otherwis": [32, 33, 37, 38, 41, 46, 56, 65, 83, 84, 88, 108, 109, 151, 153, 155, 157, 305], "accept": [32, 38, 80, 81, 89], "extens": [32, 38, 150, 154, 335], "support": [32, 33, 37, 38, 41, 46, 52, 53, 89], "pil": [32, 38], "jpg": [32, 38], "png": [32, 38], "bmp": [32, 38], "etc": [32, 38, 56, 65], "npy": [32, 38], "npz": [32, 38], "medic": [32, 38, 160, 162, 166, 167, 169, 170], "nii": [32, 33, 37, 38], "gz": [32, 33, 37, 38, 335], "filter": [32, 38, 66, 67, 114, 119, 145, 147, 178, 184, 213, 214, 217, 218, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 285, 286, 289, 292, 294, 296, 297, 300], "out": [32, 33, 37, 38, 41, 46, 52, 53, 179, 185, 199, 219, 230, 231, 232, 252, 259, 261, 270], "invalid": [32, 38], "nan": [32, 38, 83, 84], "boolean": [32, 38, 41, 46, 160, 161, 162, 163], "keyword": [32, 38, 55, 56, 57, 65, 80, 81, 87, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170], "argument": [32, 38, 55, 56, 57, 65, 69, 80, 81, 87, 88, 89, 109, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 330, 347, 371], "read_csv": [32, 38], "colomn": [32, 38], "image1": [32, 38], "image2": [32, 38], "mypath": [32, 38], "mri1": [32, 38], "mri2": [32, 38], "diagnosi": [32, 38], "patient": [32, 38], "control": [32, 33, 37, 38, 41, 46, 52, 53, 55, 56, 57, 65, 175, 178, 184, 193, 202, 205, 206, 207, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 287, 288, 298, 299, 323, 341, 357, 364], "image_mri": [32, 38], "label_mri": [32, 38], "age_mri": [32, 38], "nifti1": [32, 38], "apply_target_transform": [32, 38], "apply_transform": [32, 38, 87, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170], "max_work": [33, 37], "r1": 33, "open": [33, 37, 335], "consist": [33, 37, 55, 56, 57, 61, 64, 65, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170], "t1w": [33, 37], "public": [33, 37], "ixi": [33, 37], "abid": [33, 37], "ii": [33, 37, 56, 65], "corr": [33, 37], "gsp": [33, 37], "mpi": [33, 37], "leipzig": [33, 37], "nar": [33, 37], "npc": [33, 37], "rbp": [33, 37], "were": [33, 37], "acquir": [33, 37], "worldwid": [33, 37], "north": [33, 37], "america": [33, 37], "europ": [33, 37], "china": [33, 37], "male": [33, 37], "uniformli": [33, 37], "spm": [33, 37], "quasi": [33, 37], "hous": [33, 37], "minim": [33, 37, 55, 56, 57, 65, 339, 362], "entir": [33, 37], "350gb": [33, 37], "recommend": [33, 37], "intend": [33, 37], "portion": [33, 37, 152, 156], "directori": [33, 37, 330], "multimod": [33, 37], "121": [33, 37, 118, 125], "145": [33, 37], "182": [33, 37], "218": [33, 37], "destrieux": [33, 37], "fsaverage7": [33, 37], "internal_v": [33, 37], "external_v": [33, 37], "union": [33, 37, 56, 65, 74, 78], "scanner": [33, 37], "lazili": [33, 37], "hug": [33, 37, 66, 92, 110], "face": [33, 37, 66, 92, 110, 303, 304], "demand": [33, 37], "concurr": [33, 37, 346, 370], "thread": [33, 37], "429": [33, 37], "1d": [33, 37, 56, 65, 74, 78], "exclus": [33, 37], "huggingfac": [33, 37], "either": [33, 37, 56, 65, 108, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 305], "lazi": [33, 37], "immedi": [33, 37], "b": [33, 37, 56, 61, 64, 65, 73, 74, 76, 78, 91, 93, 145, 146, 147, 148, 160, 162, 166, 167, 169, 170], "victor": [33, 37], "j": [33, 37, 55, 57, 73, 74, 76, 78], "frouin": [33, 37], "duchesnai": [33, 37], "254": [33, 37], "119121": [33, 37], "doi": [33, 37, 72, 75, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "org": [33, 37, 56, 60, 61, 63, 64, 65, 72, 74, 75, 78, 82, 106, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 150, 154, 334, 336], "1016": [33, 37], "119637": [33, 37], "download_dataset_split": [33, 37], "increment": [33, 37], "make_dataset": [33, 37], "eventu": [33, 37, 150, 153, 154, 157], "download_fil": [33, 37], "filenam": [33, 37], "get_cat12_templ": [33, 37], "nifti": [33, 37], "tpm": [33, 37], "mni152": [33, 37], "resourc": [33, 37], "cat12vbm_spac": [33, 37], "mni152_desc": [33, 37], "gm_tpm": [33, 37], "resp": [33, 37], "rh": [33, 37], "divid": [33, 37, 115, 116, 130, 131], "json": [33, 37], "automat": [33, 37, 41, 46, 52, 53, 56, 65, 66, 73, 76, 81, 347, 371], "abbrevi": [33, 37], "under": [33, 37], "get_quasiraw_templ": [33, 37], "quasiraw_spac": [33, 37], "brain_t1w": [33, 37], "construct": [33, 37, 66], "unimod": [33, 37], "configur": [33, 37, 41, 46, 56, 65, 66, 67, 160, 162, 378], "id": [33, 37, 92, 110], "metadata": [33, 37, 166, 169, 305], "im": 39, "val_check_interv": [41, 46], "min_epoch": [41, 46], "max_step": [41, 46, 56, 65], "min_step": [41, 46], "enable_progress_bar": [41, 46], "enable_model_summari": [41, 46], "strategi": [41, 46, 52, 53, 215, 246], "num_nod": [41, 46], "liter": [41, 46], "engin": [41, 46], "float16": [41, 46], "bf16": [41, 46], "sequenc": [41, 46, 52, 53, 55, 57, 88, 175, 182, 193, 196, 215, 246], "interfac": [41, 46, 66, 67, 69, 70, 73, 76, 378], "capabl": [41, 46], "basicali": [41, 46], "child": [41, 46, 66, 192, 200], "mixin": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "loop": [41, 46], "often": [41, 46, 56, 65], "fraction": [41, 46], "fix": [41, 46, 282, 293, 303, 304, 365], "infinit": [41, 46], "forc": [41, 46, 92, 110], "checkpoint": [41, 46, 114, 119], "summar": [41, 46], "tpu": [41, 46, 52, 53], "hpu": [41, 46], "mp": [41, 46], "alias": [41, 46], "listof": [41, 46], "doubl": [41, 46, 218, 230, 251, 252], "16bit": [41, 46], "bfloat16": [41, 46], "extra": [41, 46, 55, 56, 57, 65], "tune": [41, 46], "debug": [41, 46, 203, 204, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 316], "hparam": [41, 46], "dictionarai": [41, 46, 66], "TO": [41, 46], "BE": [41, 46], "validation_step": [41, 46, 52, 53, 55, 56, 57, 65], "anyth": [41, 46, 52, 53], "predict_step": [41, 46, 52, 53], "log_dict": [41, 46], "val_dataload": [41, 46, 55, 56, 57, 65], "instruct": [41, 46], "logger": [41, 46, 52, 53, 322], "on_step": [41, 46], "on_epoch": [41, 46], "reduce_fx": [41, 46], "enable_graph": [41, 46], "sync_dist": [41, 46], "sync_dist_group": [41, 46], "add_dataloader_idx": [41, 46], "metric_attribut": [41, 46], "rank_zero_onli": [41, 46], "accumul": [41, 46], "detach": [41, 46], "graph": [41, 46, 250, 373], "care": [41, 46, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299, 347, 371], "commun": [41, 46], "overhead": [41, 46], "sync": [41, 46], "uniqu": [41, 46, 310], "infer": [41, 46, 52, 53, 55, 56, 57, 65], "explicitli": [41, 46], "restor": [41, 46, 329], "state": [41, 46, 59, 60, 61, 62, 63, 64, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 212, 213, 216, 231, 243, 244, 245, 247, 255, 259], "torchmetr": [41, 46], "tell": [41, 46], "rank": [41, 46], "won": [41, 46, 52, 53], "abl": [41, 46], "improp": [41, 46], "deadlock": [41, 46], "train_loss": [41, 46], "metriccollect": [41, 46], "test_step": [41, 46], "metric_n": [41, 46], "overrid": [41, 46, 52, 53, 56, 65], "prevent": [41, 46, 52, 53], "oom": [41, 46, 52, 53], "basepredictionwrit": [41, 46, 52, 53], "write": [41, 46, 52, 53, 337, 338], "databas": [41, 46, 52, 53], "spawn": [41, 46, 52, 53], "happen": [41, 46, 52, 53], "ddp_spawn": [41, 46, 52, 53], "produc": [41, 46, 52, 53, 56, 65, 166, 167, 169, 170], "step_output": [41, 46, 52, 53], "skip": [41, 46, 52, 53, 248, 249, 250], "deepspe": [41, 46, 52, 53], "manual": [41, 46, 52, 53, 56, 65], "special": [41, 46, 52, 53, 66], "switch": [41, 46, 52, 53, 56, 65], "accumulate_grad_batch": [41, 46, 52, 53], "automatic_optim": [41, 46, 52, 53], "gan": [41, 46, 52, 53, 56, 65], "opt1": [41, 46, 52, 53], "opt2": [41, 46, 52, 53], "gather": [41, 46, 55, 56, 57, 65], "share": [41, 46, 59, 60, 61, 62, 63, 64, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 151, 155, 216, 243, 244, 245, 247], "api": [41, 46, 81, 82], "calcul": [41, 46, 52, 53, 56, 65, 73, 74, 76, 78], "put": [41, 46, 52, 53], "At": [41, 46, 52, 53, 230, 252], "goe": [41, 46, 52, 53], "back": [41, 46, 52, 53, 305], "estimator_typ": [42, 43, 44, 45, 47, 48, 49, 50], "tag": [42, 43, 44, 45, 47, 48, 49, 50, 92, 110], "setup": [52, 53, 322, 374], "freez": [52, 53], "freeze_encod": [52, 53], "rate": [52, 53, 55, 56, 57, 65, 202, 205, 206, 207, 215, 246], "adam": [52, 53, 55, 56, 57, 65], "decai": [52, 53, 55, 56, 57, 65], "multisteplr": [52, 53], "schedul": [52, 53, 55, 56, 57, 65, 66], "element": [52, 53, 151, 155], "validation_step_output": [52, 53], "dictionnari": [52, 53, 217, 242, 330], "respectivelli": [52, 53], "configure_optim": [52, 53, 55, 56, 57, 65], "declar": [52, 53, 55, 57, 67], "adamw": [52, 53, 55, 56, 57, 65], "cross_entropy_loss": [52, 53], "cross_entropi": [52, 53], "r3": 55, "reus": [55, 57, 66, 347, 371], "cnn": [55, 57, 174], "head": [55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 113, 117, 215, 244, 246, 247], "z_i": [55, 57], "z_j": [55, 57], "maxim": [55, 56, 57, 65], "r4": 55, "r5": 55, "ell_": [55, 57], "frac": [55, 57, 73, 74, 76, 78, 160, 161, 162, 163, 166, 169], "exp": [55, 57, 74, 78], "sim": [55, 57, 74, 78, 145, 146, 147, 148], "tau": [55, 57, 74, 78], "sum_": [55, 57, 74, 78], "neq": [55, 57], "2n": [55, 57], "z_k": [55, 57], "measur": [55, 57, 176, 177, 181, 187, 189, 190, 191], "cosin": [55, 56, 57, 65, 73, 74, 76, 78, 152, 156, 166, 167, 169, 170], "sharp": [55, 57], "r6": 55, "discard": [55, 57], "extractor": [55, 57], "those": [55, 57, 340, 363], "projector": [55, 57], "cosineannealinglr": [55, 57], "simon": [55, 57, 215, 216, 243, 246], "kornblith": [55, 57, 216, 243], "mohammad": [55, 57, 216, 243], "norouzi": [55, 57, 216, 243], "geoffrei": [55, 57, 216, 243], "hinton": [55, 57, 216, 243], "visual": [55, 56, 57, 60, 61, 63, 64, 65, 73, 76, 216, 243], "icml": [55, 57, 60, 61, 63, 64, 72, 75], "2020": [55, 57, 60, 61, 63, 64, 72, 75, 150, 154], "aaron": [55, 57], "van": [55, 57], "den": [55, 57], "oord": [55, 57], "yazh": [55, 57], "li": [55, 57, 150, 154], "oriol": [55, 57], "vinyal": [55, 57], "arxiv": [55, 56, 57, 60, 61, 63, 64, 65, 72, 74, 75, 78, 114, 115, 116, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141, 150, 154, 250], "2018": [55, 57, 114, 118, 119, 125], "sohn": [55, 57], "kihyuk": [55, 57], "nip": [55, 57], "2016": [55, 57], "feng": [55, 57], "wang": [55, 57], "huap": [55, 57], "liu": [55, 57], "behaviour": [55, 57], "cvpr": [55, 57], "all_gather_and_flatten": [55, 56, 57, 65], "edg": [55, 56, 57, 65, 165, 168, 303, 304, 372, 373], "all_gath": [55, 56, 57, 65], "v1": [55, 56, 57, 65], "v2": [55, 56, 57, 65], "importantli": [55, 56, 57, 65], "encoder_kwarg": [56, 65], "ndarrai": [56, 65, 73, 74, 76, 78, 83, 84, 88, 89, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 206, 207, 305, 308, 309, 313, 375], "optimizer_kwarg": [56, 65], "0001": [56, 65, 310, 315, 377], "lr_schedul": [56, 65], "lrschedul": [56, 65], "reducelronplateau": [56, 65], "lr_scheduler_kwarg": [56, 65], "r7": 56, "agreement": [56, 65], "encourag": [56, 65], "uninstanti": [56, 65], "although": [56, 65, 77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "n_embed": [56, 65, 113, 114, 115, 116, 117, 119, 130, 131], "2048": [56, 60, 61, 63, 64, 65], "impli": [56, 65], "wherea": [56, 65], "high": [56, 65, 166, 167, 169, 170, 194], "sensit": [56, 65], "epanechnikov": [56, 65, 73, 74, 76, 78], "diagnon": [56, 65, 74, 78], "diagon": [56, 65, 73, 74, 76, 78], "2d": [56, 65, 73, 74, 76, 78, 150, 152, 153, 154, 156, 157, 323, 357], "stochast": [56, 65, 88, 213, 231, 255, 259], "descent": [56, 65], "decoupl": [56, 65], "loshchilov": [56, 65], "hutter": [56, 65], "2019": [56, 65, 218, 230, 250, 251, 252], "subclass": [56, 65, 77, 88, 89, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "beta": [56, 65, 209, 210, 308, 309, 313, 375], "moment": [56, 65, 66], "lrschedulerpltyp": [56, 65], "num_sanity_val_step": [56, 65], "2106": [56, 61, 64, 65, 74, 78], "08808": [56, 61, 64, 65, 74, 78], "choos": [56, 65], "But": [56, 65], "lr_scheduler_config": [56, 65], "whose": [56, 65], "updat": [56, 65, 68, 305], "val_loss": [56, 65], "thu": [56, 65], "strict": [56, 65], "condit": [56, 65, 106], "metric_to_track": [56, 65], "optimizer1": [56, 65], "optimizer2": [56, 65], "scheduler1": [56, 65], "scheduler2": [56, 65], "lambdalr": [56, 65], "made": [56, 65], "metric_v": [56, 65], "thing": [56, 65], "know": [56, 65, 89], "lbfg": [56, 65], "closur": [56, 65], "yourself": [56, 65], "optimizer_step": [56, 65], "parse_batch": [56, 65], "pars": [56, 65, 87, 88, 89], "r8": 57, "r9": 57, "r10": 57, "r11": 57, "block": [59, 62, 66, 114, 115, 116, 119, 130, 131, 132, 133, 215, 246, 248, 249, 253, 254], "denot": [59, 62], "read": [59, 62, 332, 333], "in_featur": [59, 62], "batch_norm_lay": [59, 62], "non_linearity_lay": [59, 62], "non": [59, 60, 61, 62, 63, 64, 161, 163], "norm": [59, 62, 123], "batchnorm1d": [59, 62], "scriptmodul": [59, 60, 61, 62, 63, 64, 72, 74, 75, 77, 78, 113, 114, 115, 116, 117, 119, 120, 121, 122, 128, 129, 130, 131, 216, 243, 244, 245, 247], "r12": 60, "multilay": [60, 61, 63, 64], "perceptron": [60, 61, 63, 64], "mathbf": [60, 63], "w_2": [60, 63], "cdot": [60, 63, 73, 76], "w_1": [60, 63], "2002": [60, 61, 63, 64, 72, 75], "05709": [60, 61, 63, 64, 72, 75], "512": [61, 64, 114, 115, 116, 119, 130, 131, 219, 232, 261, 270], "z_": [61, 64], "theta_2": [61, 64], "r13": 61, "r14": 61, "typic": [61, 64, 151, 153, 155, 157, 166, 169], "r15": 63, "r16": 64, "r17": 64, "r18": 65, "expfil": 66, "selector": [66, 67], "cv": [66, 70], "logdir": 66, "useful": 66, "date": 66, "section": 66, "descipt": 66, "scaler": [66, 305], "dl": 66, "environ": [66, 67, 68, 70], "fullfil": 66, "constraint": 66, "interface_occurr": 66, "term": [66, 69, 73, 76, 90], "interface_vers": 66, "__version__": 66, "mismatch": 66, "detect": 66, "connot": 66, "param": [66, 69, 70], "instanci": 66, "prefix": 66, "hierarch": 66, "properti": [66, 106], "parent": 66, "architecture_nam": [66, 92, 110], "revis": [66, 92, 110], "specifid": 66, "appropri": [66, 67, 109], "scheme": 66, "hyperparapet": 66, "defautl": 66, "coupl": 66, "config": 67, "env": [67, 68, 70], "filter_conf": 67, "updated_env": 68, "environemt": 68, "my_modul": 69, "my_class": 69, "exppect": 69, "module": 69, "cl": [69, 215, 246], "updated_param": 70, "param_set": 70, "entropi": [72, 75], "deriv": [72, 75], "48550": [72, 75, 114, 115, 116, 118, 119, 125, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "invers": [72, 75], "z1": [72, 74, 75, 78], "z2": [72, 74, 75, 78], "scott": [73, 76], "fast": [73, 76, 166, 167, 169, 170], "w": [73, 74, 76, 78, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 211, 260], "kde": [73, 76], "r19": 73, "r20": 73, "x_1": [73, 76], "x_n": [73, 76], "mathbb": [73, 76], "w_": [73, 74, 76, 78], "x_i": [73, 76, 160, 161, 162, 163], "x_j": [73, 76], "ge": [73, 76], "dx": [73, 76], "rule": [73, 76, 82], "r21": 73, "silverman": [73, 76], "r22": 73, "covari": [73, 76], "propto": [73, 76], "mathrm": [73, 76], "diag": [73, 76], "hat": [73, 76], "ldot": [73, 76], "univari": [73, 76], "decorrel": [73, 76], "numer": [73, 76, 80, 161, 163], "stabil": [73, 76, 161, 163], "thumb": [73, 76], "rosenblatt": [73, 76], "1956": [73, 76], "remark": [73, 76], "nonparametr": [73, 76], "annal": [73, 76], "mathemat": [73, 76], "parzen": [73, 76], "1962": [73, 76], "On": [73, 76, 329], "1992": [73, 76], "theori": [73, 76], "practic": [73, 76], "wilei": [73, 76], "1986": [73, 76], "monograph": [73, 76], "scotts_factor": [73, 76], "factor": [73, 76, 114, 119, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 323, 341, 357, 364], "set_bandwidth": [73, 76], "subsequ": [73, 76], "silverman_factor": [73, 76], "r23": 74, "mini": [74, 78], "z_1": [74, 78], "z_2": [74, 78], "ell": [74, 78], "y_i": [74, 78], "y_j": [74, 78], "phd": [74, 78], "thesi": [74, 78], "dot": [74, 78], "product": [74, 78, 378], "n_label": [74, 78], "r24": 76, "r25": 76, "r26": 76, "r27": 76, "x1": [77, 253, 254], "x2": [77, 253, 254], "overridden": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "recip": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "afterward": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "former": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "latter": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "silent": [77, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 131, 216, 243, 244, 245, 247, 250, 286, 287, 288, 297, 298, 299], "r28": 78, "sample_weight": [80, 81, 83, 84, 85, 86, 305], "multioutput": [80, 81, 83, 84], "n_output": [80, 81, 83, 84, 85, 86], "raw_valu": [80, 81, 83, 84], "uniform_averag": [80, 81, 83, 84], "variance_weight": [80, 81], "due": [80, 81], "compat": [80, 81, 378], "check_arrai": 80, "type_tru": [80, 81], "multiclass": [80, 81], "type_of_target": [80, 81], "just": [80, 81], "privat": 81, "highest": 82, "promot": 82, "api_specif": 82, "type_promot": 82, "html": [82, 106], "namespac": 82, "force_finit": [83, 84], "alwai": [83, 84, 89, 92, 110, 151, 155, 305], "perfect": [83, 84], "anti": [83, 84], "flag": [83, 84], "inf": [83, 84], "constant": [83, 84, 160, 161, 162, 163, 165, 168], "real": [83, 84], "target_nam": [85, 86], "output_dict": [85, 86], "round": [85, 86], "pearsonr": [85, 86], "meda": [85, 86], "mse": [85, 86], "arithmet": [85, 86], "data_pars": [87, 88, 89], "elsewher": 88, "parse_data": [88, 89, 171], "actual": 89, "compliant": 89, "conjonct": 89, "nd": [89, 150, 152, 154, 156], "gamma": 89, "todo": 89, "randombright": 89, "biasfield": 89, "typetransforminput": 89, "parse_prob": 89, "termin": 90, "expos": [91, 93], "value_kei": [91, 93], "avaiabl": [92, 110], "pathlib": [92, 110], "repo": [92, 110], "classmethod": [92, 110, 176, 189, 217, 242], "hf_download": [92, 110], "hf_id": [92, 110], "hf_revis": [92, 110], "force_download": [92, 110], "resum": [92, 110], "commit": [92, 110], "hub_split": [92, 110], "hub_nam": [92, 110], "interpret": [92, 110, 166, 169], "hub_id": [92, 110], "hub_revis": [92, 110], "decalr": [92, 110, 173], "ns_download": [92, 110], "ns_id": [92, 110], "reset": [94, 103, 104], "background": 94, "foreground": [94, 96], "reverse_dict": 94, "revers": [94, 151, 155, 213, 255], "alia": [95, 96, 166, 167, 169, 170, 194, 195, 241, 305], "conveni": [103, 104], "style": [103, 104], "ansi": [103, 104], "fn": 106, "attribute_nam": 106, "descriptor": 106, "protocol": 106, "decor": [106, 108, 192, 200, 330, 347, 371], "attributeerror": [106, 108], "falsei": 106, "hasattr": [106, 108], "doc": 106, "howto": 106, "explan": 106, "deleg": 107, "underli": 107, "truthi": 108, "unavail": 108, "helloifeven": 108, "_x_is_even": 108, "say_hello": 108, "hello": 108, "obj": 108, "msg": [109, 316], "presenc": 109, "trail": 109, "underscor": 109, "except": [109, 305], "messag": [109, 215, 218, 219, 230, 231, 232, 246, 250, 251, 252, 259, 261, 270, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 316], "yet": 109, "substitut": 109, "eg": 109, "sparsifi": 109, "fitt": 109, "abrol": [113, 117], "5281": [113, 117], "zenodo": [113, 117], "4309677": [113, 117], "growth_rat": [114, 119, 120, 121, 124], "block_config": [114, 119, 124], "num_init_featur": [114, 119, 124], "bn_size": [114, 119, 120, 121], "memory_effici": [114, 119, 120, 121], "huang": [114, 118, 119, 125], "1608": [114, 118, 119, 125], "06993": [114, 118, 119, 125], "pool": [114, 119, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 285, 296], "convolut": [114, 115, 116, 119, 130, 131, 134, 135, 150, 154, 178, 184, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300], "slower": [114, 119, 166, 167, 169, 170], "pdf": [114, 119], "1707": [114, 119], "06990": [114, 119], "zero_init_residu": [115, 116, 130, 131], "width_per_group": [115, 116, 130, 131], "replace_stride_with_dil": [115, 116, 130, 131], "norm_lay": [115, 116, 128, 129, 130, 131], "initial_kernel_s": [115, 116, 130, 131], "he": [115, 116, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "2015": [115, 116, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "1512": [115, 116, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "03385": [115, 116, 126, 127, 130, 131, 136, 137, 138, 139, 140, 141], "bn": [115, 116, 130, 131, 248, 249, 253, 254], "residu": [115, 116, 130, 131], "branch": [115, 116, 130, 131], "behav": [115, 116, 130, 131], "1706": [115, 116, 130, 131], "02677": [115, 116, 130, 131], "dilat": [115, 116, 128, 129, 130, 131, 135], "atrou": [115, 116, 130, 131], "dens": [115, 116, 130, 131, 213, 255, 305], "batchnorm3d": [115, 116, 130, 131], "truncat": [116, 127, 131, 137, 139, 141], "num_lay": 120, "num_input_featur": [120, 121, 122], "init_featur": 120, "prev_featur": 121, "num_output_featur": 122, "arch": [124, 132, 133], "inplan": [128, 129], "plane": [128, 129, 153, 157, 286, 297, 340, 356, 363], "base_width": [128, 129], "in_plan": [134, 135], "out_plan": [134, 135], "1x1": [134, 230, 252], "deviat": [145, 146, 147, 148, 161, 163, 178, 180, 184, 186, 305], "mathcal": [145, 146, 147, 148], "six": [145, 147], "a_1": [145, 147], "b_1": [145, 147], "a_2": [145, 147], "b_2": [145, 147], "a_3": [145, 147], "b_3": [145, 147], "sigma_i": [145, 147], "a_i": [145, 147], "b_i": [145, 147], "mu": [146, 148, 161, 163], "ratio": [150, 152, 154, 156, 250], "num_iter": [150, 154], "inplac": [150, 154, 305], "randomli": [150, 153, 154, 157, 176, 177, 189, 190], "eras": [150, 154], "box": [150, 154], "r29": 150, "cutout": [150, 154, 179, 185], "r30": 150, "proport": [150, 154], "against": [150, 154], "modifi": [150, 154, 167, 170], "geometr": [150, 152, 154, 156], "particular": [150, 152, 154, 156], "zhong": [150, 154], "zheng": [150, 154], "kang": [150, 154], "yang": [150, 154], "aaai": [150, 154], "confer": [150, 154], "intellig": [150, 154], "1708": [150, 154], "04896": [150, 154], "devri": [150, 154], "taylor": [150, 154], "04552": [150, 154], "flip_prob": [151, 155], "ap": [151, 153, 155, 157], "antero": [151, 153, 155, 157], "posterior": [151, 153, 155, 157], "inferior": [151, 153, 155, 157], "ra": [151, 153, 155, 157, 166, 169], "never": [151, 155, 167, 170], "get_index_from_anat_label": [151, 155], "anterior": [151, 155], "superior": [151, 155], "4x4": [151, 155], "target_shap": [152, 156, 165, 167, 168, 170], "08": [152, 156, 161, 163], "upper": [152, 156, 328, 360], "bound": [152, 156, 188, 198], "bspline": [152, 156, 166, 167, 169, 170], "cubic": [152, 156, 166, 167, 169, 170], "label_gaussian": [152, 156, 166, 167, 169, 170], "ham": [152, 156, 166, 167, 169, 170], "welch": [152, 156, 166, 167, 169, 170], "lanczo": [152, 156, 166, 167, 169, 170], "blackman": [152, 156, 166, 167, 169, 170], "itk": [152, 156, 166, 167, 169, 170], "compromis": [152, 156, 166, 167, 169, 170], "speed": [152, 156, 166, 167, 169, 170, 178, 184, 217, 242], "solid": [152, 156, 166, 167, 169, 170], "rotation_prob": [153, 157], "degre": [153, 157, 181, 187, 321, 347, 355, 371], "around": [153, 157], "r31": 154, "r32": 154, "out_min_max": [160, 162], "percentil": [160, 162], "masking_fn": [160, 161, 162, 163], "robust": [160, 162, 166, 167, 169, 170], "outlier": [160, 162], "clip": [160, 162], "inter": [160, 162], "quantil": [160, 162], "p_l": [160, 162], "p_u": [160, 162], "o_": [160, 162], "p_": [160, 162], "quad": [160, 162], "ext": [160, 162], "percentag": [160, 162], "synthseg": [160, 162], "r33": 160, "nnunet": [160, 162], "r34": 160, "insid": [160, 162, 305], "cutoff": [160, 162], "taken": [160, 161, 162, 163], "minimum": [160, 162, 165, 168, 303, 304], "convent": [160, 162], "billot": [160, 162], "2023": [160, 162], "retrain": [160, 162], "102789": [160, 162], "isense": [160, 162], "nnu": [160, 162], "net": [160, 162, 218, 230, 250, 251, 252], "biomed": [160, 162], "natur": [160, 162, 174], "203": [160, 162], "211": [160, 162], "loc": [160, 162], "ep": [161, 163], "epsilon": [161, 163], "determinist": [161, 163], "r35": 162, "r36": 162, "padding_mod": [165, 168], "constant_valu": [165, 168], "maximum": [165, 168, 303, 304, 346, 370], "4d": [166, 169, 171], "coordin": [166, 169, 307, 308, 309, 311, 312, 313, 314, 324, 325, 349, 365, 375, 376], "simpleitk": [166, 167, 169, 170], "s_w": [166, 169], "s_h": [166, 169], "s_d": [166, 169], "offlin": [166, 167, 169, 170], "poorer": [166, 167, 169, 170], "r37": 166, "spline": [166, 167, 169, 170], "window": [166, 167, 169, 170], "meijer": [166, 167, 169, 170], "1999": [166, 167, 169, 170], "quantit": [166, 167, 169, 170], "dummi": [166, 169], "1mm": [166, 169], "2mm": [166, 169], "isotrop": [166, 169], "image_torch": [166, 169], "resampled_torch": [166, 169], "as_sitk": [166, 169], "from_sitk": [166, 169], "get_sitk_metadata_from_ras_affin": [166, 169], "lp": [166, 169], "implicit": [167, 170], "r38": 167, "r39": 169, "r40": 170, "inspir": 174, "init": [175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 202, 205, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 329], "randomize_per_channel": [175, 192, 193, 195, 200], "tranform": [175, 193, 312, 325], "bootstrap": [176, 189], "curupt": [176, 177, 189, 190, 191], "regroup": [176, 189], "pca": [176, 189], "compon": [176, 189, 308, 309, 313, 375], "extern": [176, 189], "popul": [176, 189], "bootstap": [176, 189], "arr": [176, 177, 179, 180, 181, 185, 186, 187, 189, 190], "bootsrap": [176, 189], "controlater": [177, 190], "cachedir": [178, 179, 181, 184, 185, 187, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 330], "recept": [178, 184], "icosahdron": [178, 179, 181, 184, 185, 187], "neighboor": [178, 179, 184, 185, 303, 304], "sufifi": [178, 179, 184, 185], "ie": [178, 179, 184, 185, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "ring": [178, 179, 184, 185, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 285, 289, 292, 294, 296, 300, 320, 340, 354, 363], "replacement_valu": [179, 185], "connex": [179, 185], "neighborhood": [179, 185, 248, 253, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 323, 339, 341, 357, 362, 364], "ablat": [179, 185], "cut": [179, 185], "barycentr": [181, 187, 321, 345, 347, 355, 369, 371], "angl": [181, 187, 308, 309, 313, 321, 340, 347, 355, 356, 363, 371, 375], "euler": [181, 187, 321, 347, 355, 371], "smart": [181, 187, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "speedup": [181, 187, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "accordingli": [181, 187], "n_channel": [183, 197, 215, 246], "_data": [183, 197], "uplet": [188, 198, 286, 297, 321, 347, 355, 371], "aplli": 191, "rand_mask": 191, "binari": [191, 209, 210], "corrupt": 191, "multichannel": [192, 200], "multichannelaugment": [192, 200], "applic": [192, 200, 218, 230, 251, 252, 306], "liftifi": 199, "synthet": 201, "gene": [202, 205, 206, 207], "n_max": [203, 204], "target_ico_ord": [203, 204], "regex": [203, 204], "triangular": [203, 204, 303, 304, 346, 348, 370], "desir": [203, 204, 339, 362], "assocait": [206, 207], "variat": [208, 212, 231, 259], "svae": [208, 231, 259], "left_mask": [209, 210], "right_mask": [209, 210], "use_ms": [209, 210], "kl": [209, 210], "diverg": [209, 210], "likelihood": [209, 210, 211], "recon": 211, "reconstruct": [211, 213, 231, 255, 259], "gmvae": 212, "rest": [212, 231, 259], "fmri": [212, 231, 259], "autoencod": [212, 231, 259], "libilab": 212, "rsfmri": 212, "output_shap": [213, 255, 288, 299], "before_latent_dim": [213, 255], "latent_dim": [213, 214, 216, 228, 229, 231, 243, 255, 256, 257, 258, 259], "conv_flt": [213, 214, 228, 229, 231, 255, 256, 257, 258, 259], "fusion_level": [213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "leakyrelu": [213, 214, 228, 229, 231, 255, 256, 257, 258, 259], "batch_norm": [213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "output_channel": [213, 255], "convnet": [213, 255, 260], "left_recon_x": [213, 231, 255, 259], "input_channel": [213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "right_recon_x": [213, 231, 255, 259], "left_x": [214, 219, 228, 229, 231, 232, 256, 257, 258, 259, 261, 270], "right_x": [214, 219, 228, 229, 231, 232, 256, 257, 258, 259, 261, 270], "q": [214, 231, 256, 259], "mlp_dim": [215, 246, 247], "dim_head": [215, 244, 246, 247], "dropout": [215, 244, 245, 246, 247], "emb_dropout": [215, 246], "msit": [215, 246], "dahan": [215, 246], "midl": [215, 246], "n_verticesi": [215, 246], "trainabl": [215, 246], "msa": [215, 246], "mechan": [215, 246, 305], "feed": [215, 246], "ffn": [215, 246], "expand": [215, 246], "poll": [215, 246], "token": [215, 246], "hidden_lay": [216, 243], "return_logit": [216, 243], "y1": [216, 243], "y2": [216, 243], "input_ord": [217, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "n_layer": [217, 242], "repa_s": [217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "repa_zoom": [217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "dynamic_repa_zoom": [217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 257, 258, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278], "repa": [217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 341, 364], "ico_info": [217, 242], "build_ico_info": [217, 242], "tangent": [217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 297, 323, 340, 356, 357, 363], "tessal": [217, 242, 326, 346, 358, 370], "tessel": [217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 252, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 346, 370], "icosehedron": [217, 242], "upsampl": [217, 230, 242, 252, 253, 282, 283, 284, 289, 290, 293, 294, 295, 300, 301, 328, 360], "onform": [217, 242], "gride": [218, 219, 249, 251, 254, 261, 311, 324], "built": [218, 230, 251, 252], "upon": [218, 230, 251, 252], "spma": [218, 251], "rectifi": [218, 230, 251, 252], "halv": [218, 230, 251, 252], "zhao": [218, 230, 251, 252], "ipmi": [218, 230, 251, 252], "cfg": [219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "4096": [219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "init_weight": [219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "stand": [219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 306], "wether": [219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "sphericalgvggbas": [220, 221, 222, 223, 224, 225, 226, 227, 262, 263, 264, 265, 266, 267, 268, 269], "interp": [230, 252, 253], "2x2": [230, 252], "maxpad": [230, 252, 253], "shift": [230, 252, 253], "zeropad": [230, 252, 253], "sphericalgva": [231, 259], "vert": [231, 232, 259, 270], "tri": [231, 232, 259, 270, 348], "reparameter": [231, 259], "reparametr": [231, 259], "trick": [231, 259], "sphericalvggbas": [233, 234, 235, 236, 237, 238, 239, 240, 271, 272, 273, 274, 275, 276, 277, 278], "neighbor_indic": [241, 281, 283, 284, 289, 292, 294, 295, 300], "down_indic": [241, 248, 253, 283, 284, 285, 289, 294, 295, 296, 300, 318, 319, 352, 353], "up_indic": [241, 282, 290, 293, 301, 327, 328, 359, 360], "conv_neighbor_indic": 241, "conv_lay": [248, 253], "in_ch": [248, 249, 253, 254], "out_ch": [248, 249, 253, 254], "conv_neigh_indic": [248, 253], "down_neigh_indic": [248, 284, 285, 295, 296], "pool_mod": 248, "discret": [248, 253, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "pool_ratio": 250, "sum_r": 250, "act": 250, "unpool": 250, "hongyang": 250, "gao": 250, "shuiwang": 250, "ji": 250, "connect": [250, 373], "summat": 250, "nonlinear": 250, "edge_index": 250, "neigh_indic": [253, 281, 286, 292, 297], "up_neigh_indic": [253, 282, 283, 284, 289, 290, 293, 294, 295, 300, 301], "upsamp": [253, 254], "upconv": [253, 254], "max_pool_indic": [253, 284, 295], "klass_nam": 279, "klass_param": 279, "destination_module_glob": 279, "publicli": 279, "assign": [279, 340, 363], "in_feat": [281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301], "out_feat": [281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301], "formul": [281, 292], "ico2_vertic": [281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301], "ico2_triangl": [281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301], "asarrai": [281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 300, 301, 327, 359], "ico2_x": [281, 282, 283, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301], "ico3_vertic": [282, 283, 284, 285, 289, 290, 293, 294, 295, 296, 300, 301], "ico3_triangl": [282, 283, 284, 285, 289, 290, 293, 294, 295, 296, 300, 301], "ico3_x": [282, 283, 284, 285, 289, 290, 293, 294, 295, 296, 300, 301], "slow": [283, 294], "pooling_typ": [284, 285, 295, 296], "rectagular": [286, 297], "neigh_weight": [286, 297], "proj_ico_x": [287, 288, 298, 299], "pad_azimuth": [287, 288, 291, 298, 299], "pad_elev": [287, 288, 291, 298, 299], "zero_pad": [288, 299], "icoconv": [288, 299], "vmin": [303, 304], "vmax": [303, 304], "black": [303, 304], "color_map": [303, 304], "linearsegmentedcolormap": [303, 304], "opac": [303, 304], "Not": [303, 304], "cm": [303, 304], "coolwarm": [303, 304], "sub": 305, "with_mean": 305, "with_std": 305, "scler": 305, "guarante": 305, "spars": 305, "csr": 305, "attempt": 305, "entail": 305, "equival": 305, "n_subject": 305, "get_metadata_rout": 305, "rout": 305, "inverse_transform": 305, "x_tr": 305, "set_inverse_transform_request": 305, "unchang": 305, "enable_metadata_rout": 305, "set_config": 305, "metadata_rout": 305, "set_partial_fit_request": 305, "partial_fit": 305, "set_transform_request": 305, "system": 307, "tool": [307, 378], "cartesian": [308, 309, 313, 375], "array_lik": [308, 309, 313, 375], "radiant": [308, 309, 313, 375], "pi": [308, 309], "ref_arrai": 310, "atol": [310, 315, 377], "toler": [310, 315, 377], "new_ord": 310, "resx": [311, 314, 324, 376], "resi": [311, 314, 324, 376], "ico2_vert": [311, 312, 314, 315, 317, 318, 320, 324, 325, 327, 328, 340, 341, 346, 351, 352, 354, 359, 360, 363, 364, 370, 376, 377], "ico2_tri": [311, 312, 314, 315, 317, 318, 320, 324, 325, 327, 328, 340, 341, 346, 351, 352, 354, 359, 360, 363, 364, 370, 376, 377], "y_grid": [311, 314, 324, 376], "ref_vertic": [312, 315, 325, 377], "ico2_std_vert": [312, 315, 325, 377], "ico2_std_tri": [312, 315, 325, 377], "projecte": [314, 376], "y_std": [315, 377], "target_vertic": [317, 327, 351, 359], "n_dim": [317, 327, 351, 359], "n_queri": [317, 327, 351, 359], "nearest_idx": [317, 351], "ico3_vert": [317, 326, 327, 339, 342, 344, 346, 347, 351, 358, 359, 362, 366, 368, 370, 371], "ico3_tri": [317, 326, 327, 339, 342, 344, 346, 347, 351, 358, 359, 362, 366, 368, 370, 371], "down3to2": [317, 351], "ico3_down_vertic": [317, 351], "consecut": [318, 319, 328, 352, 353, 360], "downsampled_data": [318, 352], "new_n_vertic": [318, 328, 352, 360], "ico4_vert": [318, 319, 328, 352, 353, 360], "ico4_tri": [318, 319, 328, 352, 353, 360], "reshap": [318, 320, 327, 328, 347, 352, 354, 359, 360, 371], "y_down": [318, 352], "squeez": [318, 328, 347, 352, 360, 371], "new_vertic": [319, 353], "newli": [319, 353], "icosahedorn": [319, 353], "new_triangl": [319, 353], "ico2_down_vert": [319, 353], "ico2_down_tri": [319, 353], "start_nod": [320, 354], "recurs": [320, 354], "node_neigh": [320, 354], "asssoci": [321, 355], "euclidian": [321, 355], "grid_in_spher": [323, 341, 357, 364], "grid_in_tplan": [323, 357], "target_triangl": [327, 359], "interp_indic": [327, 359], "n_feat": [327, 359], "y_up": [327, 328, 359, 360], "upsampled_data": [328, 360], "hide_err": 329, "secur": 329, "redirect": 329, "manag": 329, "complet": [329, 330], "hide": 329, "receiv": 330, "transpar": 330, "overlap": 330, "cifti_fil": 331, "decompos": 331, "cifti": [331, 334, 336], "vol": 331, "surf_left": 331, "surf_right": 331, "surf_fil": [332, 333, 337, 338], "gifti": [333, 338], "surf_nam": 334, "nbviewer": [334, 336], "neurohackademi": [334, 336], "nh2020": [334, 336], "curriculum": [334, 336], "blob": [334, 336], "master": [334, 336], "markiewicz": [334, 336], "gnu": 335, "archiv": 335, "out_path": 335, "n_neigh": [339, 343, 362, 367], "remain": [340, 363], "n_vert": [342, 366], "min_order_to_get_n_neighbor": [343, 367], "hi": [344, 368], "clockwise_from_cent": [345, 369], "clockwis": [345, 369], "counter": [345, 369], "reordered_triangl": [345, 369], "reorder": [345, 369], "ico0_vert": [345, 369], "ico0_tri": [345, 369], "clockwise_ico0_tri": [345, 369], "counter_clockwise_ico0_tri": [345, 369], "n_job": [346, 370], "job": [346, 370], "euclidean": [347, 371], "rotated_data": [347, 371], "y_rot": [347, 371], "lower_vertic": 348, "ico_fil": 349, "topologi": [349, 350], "ref_fil": 350, "fslr": 350, "point_1": 361, "point_2": 361, "middle_point_cach": 361, "middl": 361, "return_index": 372, "triangles_index": 372, "networkx": 373, "nearbi": 373, "logfil": 374, "unifi": 378, "analyz": 378, "advanc": 378, "availbl": 378, "hydra": 378}, "objects": {"nidl.callbacks": [[17, 0, 1, "", "BatchTypingCallback"], [18, 0, 1, "", "ClassificationProbingCallback"], [19, 0, 1, "", "ModelProbing"], [20, 0, 1, "", "MultiTaskEstimator"], [21, 0, 1, "", "MultitaskModelProbing"], [22, 0, 1, "", "RegressionProbingCallback"]], "nidl.callbacks.BatchTypingCallback": [[17, 1, 1, "", "on_predict_batch_start"], [17, 1, 1, "", "on_test_batch_start"], [17, 1, 1, "", "on_train_batch_start"], [17, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.ClassificationProbingCallback": [[18, 1, 1, "", "log_metrics"]], "nidl.callbacks.ModelProbing": [[19, 1, 1, "", "adapt_dataloader_for_ddp"], [19, 1, 1, "", "extract_features"], [19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "on_test_epoch_end"], [19, 1, 1, "", "on_test_epoch_start"], [19, 1, 1, "", "on_train_epoch_end"], [19, 1, 1, "", "on_validation_epoch_end"], [19, 1, 1, "", "predict"], [19, 1, 1, "", "probing"]], "nidl.callbacks.MultiTaskEstimator": [[20, 1, 1, "", "fit"], [20, 1, 1, "", "predict"], [20, 1, 1, "", "score"]], "nidl.callbacks.MultitaskModelProbing": [[21, 1, 1, "", "log_classification_metrics"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "log_regression_metrics"]], "nidl.callbacks.RegressionProbingCallback": [[22, 1, 1, "", "log_metrics"]], "nidl.callbacks.check_typing": [[23, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[23, 1, 1, "", "on_predict_batch_start"], [23, 1, 1, "", "on_test_batch_start"], [23, 1, 1, "", "on_train_batch_start"], [23, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[24, 0, 1, "", "ClassificationProbingCallback"], [25, 0, 1, "", "ModelProbing"], [26, 0, 1, "", "RegressionProbingCallback"]], "nidl.callbacks.model_probing.ClassificationProbingCallback": [[24, 1, 1, "", "log_metrics"]], "nidl.callbacks.model_probing.ModelProbing": [[25, 1, 1, "", "adapt_dataloader_for_ddp"], [25, 1, 1, "", "extract_features"], [25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "on_test_epoch_end"], [25, 1, 1, "", "on_test_epoch_start"], [25, 1, 1, "", "on_train_epoch_end"], [25, 1, 1, "", "on_validation_epoch_end"], [25, 1, 1, "", "predict"], [25, 1, 1, "", "probing"]], "nidl.callbacks.model_probing.RegressionProbingCallback": [[26, 1, 1, "", "log_metrics"]], "nidl.callbacks.multitask_probing": [[27, 0, 1, "", "MultiTaskEstimator"], [28, 0, 1, "", "MultitaskModelProbing"]], "nidl.callbacks.multitask_probing.MultiTaskEstimator": [[27, 1, 1, "", "fit"], [27, 1, 1, "", "predict"], [27, 1, 1, "", "score"]], "nidl.callbacks.multitask_probing.MultitaskModelProbing": [[28, 1, 1, "", "log_classification_metrics"], [28, 1, 1, "", "log_metrics"], [28, 1, 1, "", "log_regression_metrics"]], "nidl.datasets": [[30, 0, 1, "", "BaseImageDataset"], [31, 0, 1, "", "BaseNumpyDataset"], [32, 0, 1, "", "ImageDataFrameDataset"], [33, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[30, 1, 1, "", "get_checksum"], [30, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[31, 1, 1, "", "get_data"]], "nidl.datasets.ImageDataFrameDataset": [[32, 1, 1, "", "apply_target_transform"], [32, 1, 1, "", "apply_transform"]], "nidl.datasets.OpenBHB": [[33, 1, 1, "", "download_dataset_split"], [33, 1, 1, "", "download_file"], [33, 1, 1, "", "get_cat12_template"], [33, 1, 1, "", "get_fs_labels"], [33, 1, 1, "", "get_fs_roi_feature_names"], [33, 1, 1, "", "get_fs_xhemi_feature_names"], [33, 1, 1, "", "get_neuromorphometrics_atlas"], [33, 1, 1, "", "get_quasiraw_template"], [33, 1, 1, "", "get_vbm_roi_labels"], [33, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[34, 0, 1, "", "BaseDataset"], [35, 0, 1, "", "BaseImageDataset"], [36, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[35, 1, 1, "", "get_checksum"], [35, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[36, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[37, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[37, 1, 1, "", "download_dataset_split"], [37, 1, 1, "", "download_file"], [37, 1, 1, "", "get_cat12_template"], [37, 1, 1, "", "get_fs_labels"], [37, 1, 1, "", "get_fs_roi_feature_names"], [37, 1, 1, "", "get_fs_xhemi_feature_names"], [37, 1, 1, "", "get_neuromorphometrics_atlas"], [37, 1, 1, "", "get_quasiraw_template"], [37, 1, 1, "", "get_vbm_roi_labels"], [37, 1, 1, "", "make_dataset"]], "nidl.datasets.pandas_dataset": [[38, 0, 1, "", "ImageDataFrameDataset"], [39, 2, 1, "", "default_image_loader"]], "nidl.datasets.pandas_dataset.ImageDataFrameDataset": [[38, 1, 1, "", "apply_target_transform"], [38, 1, 1, "", "apply_transform"]], "nidl.estimators": [[41, 0, 1, "", "BaseEstimator"], [42, 0, 1, "", "ClassifierMixin"], [43, 0, 1, "", "ClusterMixin"], [44, 0, 1, "", "RegressorMixin"], [45, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[41, 1, 1, "", "fit"], [41, 1, 1, "", "log"], [41, 1, 1, "", "log_dict"], [41, 1, 1, "", "predict"], [41, 1, 1, "", "predict_step"], [41, 1, 1, "", "training_step"], [41, 1, 1, "", "transform"], [41, 1, 1, "", "transform_step"], [41, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[46, 0, 1, "", "BaseEstimator"], [47, 0, 1, "", "ClassifierMixin"], [48, 0, 1, "", "ClusterMixin"], [49, 0, 1, "", "RegressorMixin"], [50, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[46, 1, 1, "", "fit"], [46, 1, 1, "", "log"], [46, 1, 1, "", "log_dict"], [46, 1, 1, "", "predict"], [46, 1, 1, "", "predict_step"], [46, 1, 1, "", "training_step"], [46, 1, 1, "", "transform"], [46, 1, 1, "", "transform_step"], [46, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[52, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[52, 1, 1, "", "configure_optimizers"], [52, 1, 1, "", "cross_entropy_loss"], [52, 1, 1, "", "freeze_encoder"], [52, 1, 1, "", "on_validation_epoch_end"], [52, 1, 1, "", "predict_step"], [52, 1, 1, "", "training_step"], [52, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[53, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[53, 1, 1, "", "configure_optimizers"], [53, 1, 1, "", "cross_entropy_loss"], [53, 1, 1, "", "freeze_encoder"], [53, 1, 1, "", "on_validation_epoch_end"], [53, 1, 1, "", "predict_step"], [53, 1, 1, "", "training_step"], [53, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[55, 0, 1, "", "SimCLR"], [56, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[55, 1, 1, "", "all_gather_and_flatten"], [55, 1, 1, "", "configure_optimizers"], [55, 1, 1, "", "training_step"], [55, 1, 1, "", "transform_step"], [55, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[56, 1, 1, "", "all_gather_and_flatten"], [56, 1, 1, "", "configure_optimizers"], [56, 1, 1, "", "parse_batch"], [56, 1, 1, "", "training_step"], [56, 1, 1, "", "transform_step"], [56, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[57, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[57, 1, 1, "", "all_gather_and_flatten"], [57, 1, 1, "", "configure_optimizers"], [57, 1, 1, "", "training_step"], [57, 1, 1, "", "transform_step"], [57, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[59, 0, 1, "", "ProjectionHead"], [60, 0, 1, "", "SimCLRProjectionHead"], [61, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[59, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[62, 0, 1, "", "ProjectionHead"], [63, 0, 1, "", "SimCLRProjectionHead"], [64, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[62, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[65, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[65, 1, 1, "", "all_gather_and_flatten"], [65, 1, 1, "", "configure_optimizers"], [65, 1, 1, "", "parse_batch"], [65, 1, 1, "", "training_step"], [65, 1, 1, "", "transform_step"], [65, 1, 1, "", "validation_step"]], "nidl.experiment": [[66, 2, 1, "", "fetch_experiment"], [67, 2, 1, "", "filter_config"], [68, 2, 1, "", "get_env"], [69, 2, 1, "", "load_interface"], [70, 2, 1, "", "update_params"]], "nidl.losses": [[72, 0, 1, "", "InfoNCE"], [73, 0, 1, "", "KernelMetric"], [74, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[72, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[73, 1, 1, "", "fit"], [73, 1, 1, "", "pairwise"], [73, 1, 1, "", "scotts_factor"], [73, 1, 1, "", "set_bandwidth"], [73, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[74, 1, 1, "", "forward"]], "nidl.losses.infonce": [[75, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[75, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[76, 0, 1, "", "KernelMetric"], [77, 0, 1, "", "PairwiseCosineSimilarity"], [78, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[76, 1, 1, "", "fit"], [76, 1, 1, "", "pairwise"], [76, 1, 1, "", "scotts_factor"], [76, 1, 1, "", "set_bandwidth"], [76, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[77, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[78, 1, 1, "", "forward"]], "nidl.metrics._regression": [[80, 2, 1, "", "_check_reg_targets"], [81, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [82, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[83, 2, 1, "", "pearson_r"], [86, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[84, 2, 1, "", "pearson_r"], [85, 2, 1, "", "regression_report"]], "nidl.transforms": [[87, 0, 1, "", "Identity"], [88, 0, 1, "", "MultiViewsTransform"], [89, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[87, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[88, 1, 1, "", "apply_transform"], [88, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[89, 1, 1, "", "apply_transform"], [89, 1, 1, "", "parse_data"], [89, 1, 1, "", "parse_probability"]], "nidl.utils": [[91, 0, 1, "", "Bunch"], [92, 0, 1, "", "Weights"], [105, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[92, 1, 1, "", "hf_download"], [92, 1, 1, "", "hub_split"], [92, 1, 1, "", "load_pretrained"], [92, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[93, 0, 1, "", "Bunch"]], "nidl.utils.color": [[94, 0, 1, "", "Colored"], [95, 2, 1, "", "attr"], [96, 2, 1, "", "fg"], [97, 2, 1, "", "hex"], [98, 2, 1, "", "print_multicolor"], [99, 2, 1, "", "print_result"], [100, 2, 1, "", "print_subtitle"], [101, 2, 1, "", "print_title"], [102, 2, 1, "", "print_warning"], [103, 2, 1, "", "random_stylize"], [104, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[94, 1, 1, "", "attribute"], [94, 1, 1, "", "background"], [94, 1, 1, "", "foreground"], [94, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[106, 0, 1, "", "_AvailableIfDescriptor"], [107, 2, 1, "", "_estimator_is"], [108, 2, 1, "", "available_if"], [109, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[110, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[110, 1, 1, "", "hf_download"], [110, 1, 1, "", "hub_split"], [110, 1, 1, "", "load_pretrained"], [110, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[113, 0, 1, "", "AlexNet"], [114, 0, 1, "", "DenseNet"], [115, 0, 1, "", "ResNet"], [116, 0, 1, "", "ResNetTruncated"], [118, 2, 1, "", "densenet121"], [126, 2, 1, "", "resnet18"], [127, 2, 1, "", "resnet18_trunc"], [140, 2, 1, "", "resnet50"], [141, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[114, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[115, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[116, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[117, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[117, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[119, 0, 1, "", "DenseNet"], [120, 0, 1, "", "_DenseBlock"], [121, 0, 1, "", "_DenseLayer"], [122, 0, 1, "", "_Transition"], [123, 2, 1, "", "_bn_function_factory"], [124, 2, 1, "", "_densenet"], [125, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[119, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[120, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[121, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[128, 0, 1, "", "BasicBlock"], [129, 0, 1, "", "Bottleneck"], [130, 0, 1, "", "ResNet"], [131, 0, 1, "", "ResNetTruncated"], [132, 2, 1, "", "_resnet"], [133, 2, 1, "", "_resnet_trunc"], [134, 2, 1, "", "conv1x1"], [135, 2, 1, "", "conv3x3"], [136, 2, 1, "", "resnet18"], [137, 2, 1, "", "resnet18_trunc"], [138, 2, 1, "", "resnet50"], [139, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[128, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[129, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[130, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[131, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[145, 0, 1, "", "RandomGaussianBlur"], [146, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[145, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[146, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[147, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[147, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[148, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[148, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[150, 0, 1, "", "RandomErasing"], [151, 0, 1, "", "RandomFlip"], [152, 0, 1, "", "RandomResizedCrop"], [153, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[150, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[151, 1, 1, "", "apply_transform"], [151, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[152, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[153, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[154, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[154, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[155, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[155, 1, 1, "", "apply_transform"], [155, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[156, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[156, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[157, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[157, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[160, 0, 1, "", "RobustRescaling"], [161, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[160, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[161, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[162, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[162, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[163, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[163, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[165, 0, 1, "", "CropOrPad"], [166, 0, 1, "", "Resample"], [167, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[165, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[166, 1, 1, "", "apply_transform"], [166, 1, 1, "", "as_sitk"], [166, 1, 1, "", "from_sitk"], [166, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[167, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[168, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[168, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[169, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[169, 1, 1, "", "apply_transform"], [169, 1, 1, "", "as_sitk"], [169, 1, 1, "", "from_sitk"], [169, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[170, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[170, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[171, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[171, 1, 1, "", "parse_data"]], "surfify.augmentation": [[175, 0, 1, "", "BaseTransformer"], [176, 0, 1, "", "GroupMixUp"], [177, 0, 1, "", "HemiMixUp"], [178, 0, 1, "", "SurfBlur"], [179, 0, 1, "", "SurfCutOut"], [180, 0, 1, "", "SurfNoise"], [181, 0, 1, "", "SurfRotation"], [182, 0, 1, "", "Transformer"], [183, 2, 1, "", "apply_chained_transforms"], [188, 2, 1, "", "interval"], [192, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[175, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[176, 1, 1, "", "groupby"], [176, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[177, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[178, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[179, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[180, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[181, 1, 1, "", "run"]], "surfify.augmentation.base": [[184, 0, 1, "", "SurfBlur"], [185, 0, 1, "", "SurfCutOut"], [186, 0, 1, "", "SurfNoise"], [187, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[184, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[185, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[186, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[187, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[189, 0, 1, "", "GroupMixUp"], [190, 0, 1, "", "HemiMixUp"], [191, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[189, 1, 1, "", "groupby"], [189, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[190, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[191, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[193, 0, 1, "", "BaseTransformer"], [194, 0, 1, "", "RandomAugmentation"], [195, 0, 1, "", "Transform"], [196, 0, 1, "", "Transformer"], [197, 2, 1, "", "apply_chained_transforms"], [198, 2, 1, "", "interval"], [199, 2, 1, "", "listify"], [200, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[193, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[194, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[194, 3, 1, "", "dtype"], [194, 3, 1, "", "high"], [194, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[195, 3, 1, "", "probability"], [195, 3, 1, "", "randomize_per_channel"], [195, 3, 1, "", "transform"]], "surfify.datasets": [[202, 0, 1, "", "ClassificationDataset"], [203, 0, 1, "", "GenericSurfDataset"], [207, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[204, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[205, 0, 1, "", "ClassificationDataset"], [206, 2, 1, "", "make_classification"]], "surfify.losses": [[209, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[210, 0, 1, "", "SphericalVAELoss"], [211, 2, 1, "", "log_likelihood"]], "surfify.models": [[213, 0, 1, "", "HemiFusionDecoder"], [214, 0, 1, "", "HemiFusionEncoder"], [215, 0, 1, "", "SiT"], [216, 0, 1, "", "SimCLR"], [217, 0, 1, "", "SphericalBase"], [218, 0, 1, "", "SphericalGUNet"], [219, 0, 1, "", "SphericalGVGG"], [220, 0, 1, "", "SphericalGVGG11"], [221, 0, 1, "", "SphericalGVGG11BN"], [222, 0, 1, "", "SphericalGVGG13"], [223, 0, 1, "", "SphericalGVGG13BN"], [224, 0, 1, "", "SphericalGVGG16"], [225, 0, 1, "", "SphericalGVGG16BN"], [226, 0, 1, "", "SphericalGVGG19"], [227, 0, 1, "", "SphericalGVGG19BN"], [228, 0, 1, "", "SphericalHemiFusionDecoder"], [229, 0, 1, "", "SphericalHemiFusionEncoder"], [230, 0, 1, "", "SphericalUNet"], [231, 0, 1, "", "SphericalVAE"], [232, 0, 1, "", "SphericalVGG"], [233, 0, 1, "", "SphericalVGG11"], [234, 0, 1, "", "SphericalVGG11BN"], [235, 0, 1, "", "SphericalVGG13"], [236, 0, 1, "", "SphericalVGG13BN"], [237, 0, 1, "", "SphericalVGG16"], [238, 0, 1, "", "SphericalVGG16BN"], [239, 0, 1, "", "SphericalVGG19"], [240, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[213, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[214, 1, 1, "", "forward"]], "surfify.models.SiT": [[215, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[216, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[217, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[218, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[219, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[228, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[229, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[230, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[231, 1, 1, "", "decode"], [231, 1, 1, "", "encode"], [231, 1, 1, "", "forward"], [231, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[232, 1, 1, "", "forward"]], "surfify.models.base": [[241, 0, 1, "", "Ico"], [242, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[241, 3, 1, "", "conv_neighbor_indices"], [241, 3, 1, "", "down_indices"], [241, 3, 1, "", "neighbor_indices"], [241, 3, 1, "", "order"], [241, 3, 1, "", "triangles"], [241, 3, 1, "", "up_indices"], [241, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[242, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[243, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[243, 1, 1, "", "forward"]], "surfify.models.sit": [[244, 0, 1, "", "Attention"], [245, 0, 1, "", "FeedForward"], [246, 0, 1, "", "SiT"], [247, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[244, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[245, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[246, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[247, 1, 1, "", "forward"]], "surfify.models.unet": [[248, 0, 1, "", "DownBlock"], [249, 0, 1, "", "DownGBlock"], [250, 0, 1, "", "GraphicalUNet"], [251, 0, 1, "", "SphericalGUNet"], [252, 0, 1, "", "SphericalUNet"], [253, 0, 1, "", "UpBlock"], [254, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[248, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[249, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[250, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[251, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[252, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[253, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[254, 1, 1, "", "forward"]], "surfify.models.vae": [[255, 0, 1, "", "HemiFusionDecoder"], [256, 0, 1, "", "HemiFusionEncoder"], [257, 0, 1, "", "SphericalHemiFusionDecoder"], [258, 0, 1, "", "SphericalHemiFusionEncoder"], [259, 0, 1, "", "SphericalVAE"], [260, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[255, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[256, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[257, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[258, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[259, 1, 1, "", "decode"], [259, 1, 1, "", "encode"], [259, 1, 1, "", "forward"], [259, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[261, 0, 1, "", "SphericalGVGG"], [262, 0, 1, "", "SphericalGVGG11"], [263, 0, 1, "", "SphericalGVGG11BN"], [264, 0, 1, "", "SphericalGVGG13"], [265, 0, 1, "", "SphericalGVGG13BN"], [266, 0, 1, "", "SphericalGVGG16"], [267, 0, 1, "", "SphericalGVGG16BN"], [268, 0, 1, "", "SphericalGVGG19"], [269, 0, 1, "", "SphericalGVGG19BN"], [270, 0, 1, "", "SphericalVGG"], [271, 0, 1, "", "SphericalVGG11"], [272, 0, 1, "", "SphericalVGG11BN"], [273, 0, 1, "", "SphericalVGG13"], [274, 0, 1, "", "SphericalVGG13BN"], [275, 0, 1, "", "SphericalVGG16"], [276, 0, 1, "", "SphericalVGG16BN"], [277, 0, 1, "", "SphericalVGG19"], [278, 0, 1, "", "SphericalVGG19BN"], [279, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[261, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[270, 1, 1, "", "forward"]], "surfify.nn": [[281, 0, 1, "", "IcoDiNeConv"], [282, 0, 1, "", "IcoFixIndexUpSample"], [283, 0, 1, "", "IcoGenericUpConv"], [284, 0, 1, "", "IcoMaxIndexUpSample"], [285, 0, 1, "", "IcoPool"], [286, 0, 1, "", "IcoRePaConv"], [287, 0, 1, "", "IcoSpMaConv"], [288, 0, 1, "", "IcoSpMaConvTranspose"], [289, 0, 1, "", "IcoUpConv"], [290, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[281, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[282, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[283, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[284, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[285, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[286, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[287, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[288, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[289, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[290, 1, 1, "", "forward"]], "surfify.nn.functional": [[291, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[292, 0, 1, "", "IcoDiNeConv"], [293, 0, 1, "", "IcoFixIndexUpSample"], [294, 0, 1, "", "IcoGenericUpConv"], [295, 0, 1, "", "IcoMaxIndexUpSample"], [296, 0, 1, "", "IcoPool"], [297, 0, 1, "", "IcoRePaConv"], [298, 0, 1, "", "IcoSpMaConv"], [299, 0, 1, "", "IcoSpMaConvTranspose"], [300, 0, 1, "", "IcoUpConv"], [301, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[292, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[293, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[294, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[295, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[296, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[297, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[298, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[299, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[300, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[301, 1, 1, "", "forward"]], "surfify.plotting": [[303, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[304, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[305, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[305, 1, 1, "", "fit"], [305, 1, 1, "", "get_metadata_routing"], [305, 1, 1, "", "inverse_transform"], [305, 1, 1, "", "set_inverse_transform_request"], [305, 1, 1, "", "set_partial_fit_request"], [305, 1, 1, "", "set_transform_request"], [305, 1, 1, "", "transform"]], "surfify.transforms": [[306, 0, 1, "", "RandomCompose"]], "surfify.utils": [[308, 2, 1, "", "cart2sph"], [316, 2, 1, "", "debug_msg"], [317, 2, 1, "", "downsample"], [318, 2, 1, "", "downsample_data"], [319, 2, 1, "", "downsample_ico"], [320, 2, 1, "", "find_neighbors"], [321, 2, 1, "", "find_rotation_interpol_coefs"], [322, 2, 1, "", "get_logger"], [323, 2, 1, "", "get_rectangular_projection"], [324, 2, 1, "", "grid2text"], [325, 2, 1, "", "ico2ico"], [326, 2, 1, "", "icosahedron"], [327, 2, 1, "", "interpolate"], [328, 2, 1, "", "interpolate_data"], [339, 2, 1, "", "min_depth_to_get_n_neighbors"], [340, 2, 1, "", "neighbors"], [341, 2, 1, "", "neighbors_rec"], [342, 2, 1, "", "number_of_ico_vertices"], [343, 2, 1, "", "number_of_neighbors"], [344, 2, 1, "", "order_of_ico_from_vertices"], [345, 2, 1, "", "order_triangles"], [346, 2, 1, "", "patch_tri"], [347, 2, 1, "", "rotate_data"], [374, 2, 1, "", "setup_logging"], [375, 2, 1, "", "sph2cart"], [376, 2, 1, "", "text2grid"], [377, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[309, 2, 1, "", "cart2sph"], [310, 2, 1, "", "find_corresponding_order"], [311, 2, 1, "", "grid2text"], [312, 2, 1, "", "ico2ico"], [313, 2, 1, "", "sph2cart"], [314, 2, 1, "", "text2grid"], [315, 2, 1, "", "text2ico"]], "surfify.utils.io": [[329, 0, 1, "", "HidePrints"], [330, 2, 1, "", "compute_and_store"], [331, 2, 1, "", "decompose_cifti"], [332, 2, 1, "", "read_freesurfer"], [333, 2, 1, "", "read_gifti"], [334, 2, 1, "", "surf_data_from_cifti"], [335, 2, 1, "", "ungzip"], [336, 2, 1, "", "volume_from_cifti"], [337, 2, 1, "", "write_freesurfer"], [338, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[348, 2, 1, "", "_patch_tri_iter"], [349, 2, 1, "", "build_freesurfer_ico"], [350, 2, 1, "", "build_fslr_ref"], [351, 2, 1, "", "downsample"], [352, 2, 1, "", "downsample_data"], [353, 2, 1, "", "downsample_ico"], [354, 2, 1, "", "find_neighbors"], [355, 2, 1, "", "find_rotation_interpol_coefs"], [356, 2, 1, "", "get_angle_with_xaxis"], [357, 2, 1, "", "get_rectangular_projection"], [358, 2, 1, "", "icosahedron"], [359, 2, 1, "", "interpolate"], [360, 2, 1, "", "interpolate_data"], [361, 2, 1, "", "middle_point"], [362, 2, 1, "", "min_depth_to_get_n_neighbors"], [363, 2, 1, "", "neighbors"], [364, 2, 1, "", "neighbors_rec"], [365, 2, 1, "", "normalize"], [366, 2, 1, "", "number_of_ico_vertices"], [367, 2, 1, "", "number_of_neighbors"], [368, 2, 1, "", "order_of_ico_from_vertices"], [369, 2, 1, "", "order_triangles"], [370, 2, 1, "", "patch_tri"], [371, 2, 1, "", "rotate_data"], [372, 2, 1, "", "triangles_to_edges"], [373, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 5], "case": [0, 5], "spheric": [0, 5, 6, 9], "modul": [0, 5, 280], "model": [1, 2, 10, 12, 212], "probe": 1, "callback": [1, 16], "embed": 1, "estim": [1, 40, 51, 54, 58], "setup": [1, 4, 12], "unsupervis": 1, "contrast": [1, 4, 12], "learn": [1, 2, 4, 12], "mnist": 1, "dataset": [1, 2, 4, 10, 12, 29, 201], "data": [1, 4, 8, 12], "augment": [1, 4, 6, 12, 143, 144, 149, 174], "simclr": [1, 4, 54, 212], "train": [1, 4, 10, 12], "classif": [1, 2, 79], "visual": [1, 2, 12], "metric": [1, 79], "dure": 1, "y": [1, 12], "awar": [1, 12], "represent": [1, 12], "ag": [1, 2], "sex": [1, 2], "predict": [1, 2, 10], "openbhb": [1, 2, 12, 29], "cl": 1, "multitask": 1, "regress": [1, 2, 4, 79], "conclus": [1, 4], "present": 2, "baselin": [2, 4], "load": [2, 8], "packag": 2, "plot": [2, 302], "modal": 2, "whole": 2, "brain": 2, "voxel": 2, "base": [2, 29, 40, 174, 212], "morphometri": 2, "vbm": 2, "quasi": 2, "raw": 2, "imag": 2, "roi": 2, "neuromorphometr": 2, "atla": 2, "surfac": [2, 8, 302], "measur": 2, "from": 2, "freesurf": 2, "region": 2, "destrieux": 2, "fine": 2, "grain": 2, "fsaverage7": 2, "templat": 2, "fit": 2, "machin": 2, "ridg": 2, "logist": [2, 4], "comput": [3, 11, 379], "time": [3, 11, 379], "self": 4, "supervis": [4, 12], "surfcutout": 6, "surfnois": 6, "surfblur": 6, "surfrot": 6, "hemimixup": 6, "groupmixup": 6, "group": 6, "transform": [6, 15, 142, 143, 144, 149, 158, 159, 164, 173], "icosahedron": 7, "match": 7, "project": 8, "textur": 8, "3": 8, "d": 8, "2": 8, "grid": 8, "uniformli": 8, "distribut": 8, "locat": 8, "integr": 8, "deep": 8, "neural": 8, "network": 8, "neighbor": 9, "direct": 9, "rectagular": 9, "tangent": 9, "plane": 9, "unet": [10, 212], "segment": 10, "inspect": 10, "label": 10, "weakli": 12, "evalu": 12, "api": [13, 15, 16, 29, 40, 51, 54, 58, 71, 79, 90, 111, 112, 142, 143, 144, 149, 158, 159, 164, 172, 173, 174, 201, 208, 212, 280, 302, 307], "document": [13, 15, 16, 29, 40, 51, 54, 58, 71, 79, 90, 111, 112, 142, 143, 144, 149, 158, 159, 164, 172, 173, 174, 201, 208, 212, 280, 302, 307], "nidl": [13, 14, 15, 16, 29, 40, 51, 54, 58, 71, 79, 90, 111, 112, 142, 143, 144, 149, 158, 159, 164, 172], "instal": 14, "stabl": 14, "version": 14, "current": 14, "experi": 15, "check_typ": 16, "multitask_prob": 16, "model_prob": 16, "exampl": [24, 28, 33, 37, 52, 53, 55, 56, 57, 65, 88, 92, 110], "pandas_dataset": 29, "linear": 51, "logistic_regress": 51, "ssl": [54, 58], "yawar": 54, "util": [58, 90, 174, 307], "projection_head": 58, "loss": [71, 208], "yaware_infonc": 71, "infonc": 71, "_regress": 79, "weight": 90, "bunch": 90, "color": 90, "valid": 90, "volum": [111, 112, 142, 143, 144, 149, 158, 159, 164], "backbon": 112, "alexnet3d": 112, "resnet3d": 112, "densenet3d": 112, "volume_transform": 142, "intens": [144, 159], "random_nois": 144, "random_blur": 144, "spatial": [149, 164], "random_eras": 149, "random_flip": 149, "random_resized_crop": 149, "random_rot": 149, "preprocess": [158, 159, 164, 173], "z_normal": 159, "rescal": 159, "resiz": 164, "resampl": 164, "crop_or_pad": 164, "search": 172, "surfifi": [173, 174, 201, 208, 212, 280, 302, 307], "mixup": 174, "_samples_gener": 201, "_gener": 201, "vae": [208, 212], "sit": 212, "vgg": 212, "nn": 280, "function": 280, "coord": 307, "sampl": 307, "io": 307}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [5, "spherical-modules-use-cases"]], "Model probing callback of embedding estimators": [[1, "model-probing-callback-of-embedding-estimators"]], "Setup": [[1, "setup"], [4, "setup"], [12, "setup"]], "Unsupervised Contrastive Learning on MNIST": [[1, "unsupervised-contrastive-learning-on-mnist"]], "Dataset and data augmentations for contrastive learning": [[1, "dataset-and-data-augmentations-for-contrastive-learning"]], "SimCLR training with classification probing callback": [[1, "simclr-training-with-classification-probing-callback"]], "Visualization of the classification metrics during training": [[1, "visualization-of-the-classification-metrics-during-training"]], "Probing of y-Aware representation on age and sex prediction": [[1, "probing-of-y-aware-representation-on-age-and-sex-prediction"]], "OpenBHB dataset and data augmentations": [[1, "openbhb-dataset-and-data-augmentations"]], "y-Aware CL training with multitask probing callback": [[1, "y-aware-cl-training-with-multitask-probing-callback"]], "Visualization of the classification and regression metrics during training": [[1, "visualization-of-the-classification-and-regression-metrics-during-training"]], "Conclusions": [[1, "conclusions"]], "Presentation of the OpenBHB dataset and baseline models for age and sex predictions": [[2, "presentation-of-the-openbhb-dataset-and-baseline-models-for-age-and-sex-predictions"]], "Load the packages": [[2, "load-the-packages"]], "Load the OpenBHB dataset and plot the modalities": [[2, "load-the-openbhb-dataset-and-plot-the-modalities"]], "Plot whole-brain Voxel-Based Morphometry (VBM) and Quasi-Raw images": [[2, "plot-whole-brain-voxel-based-morphometry-vbm-and-quasi-raw-images"]], "Plot VBM-ROI on the Neuromorphometrics atlas": [[2, "plot-vbm-roi-on-the-neuromorphometrics-atlas"]], "Plot Surface-Based Measures from FreeSurfer": [[2, "plot-surface-based-measures-from-freesurfer"]], "Visualize regional measures on the Destrieux atlas": [[2, "visualize-regional-measures-on-the-destrieux-atlas"]], "Visualize fine-grained measures on the fsaverage7 template": [[2, "visualize-fine-grained-measures-on-the-fsaverage7-template"]], "Fit machine learning models for age and sex prediction": [[2, "fit-machine-learning-models-for-age-and-sex-prediction"]], "Age prediction with Ridge regression": [[2, "age-prediction-with-ridge-regression"]], "Sex classification with logistic regression": [[2, "sex-classification-with-logistic-regression"]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [379, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[4, "self-supervised-contrastive-learning-with-simclr"]], "Data Augmentation for Contrastive Learning": [[4, "data-augmentation-for-contrastive-learning"]], "Dataset": [[4, "dataset"]], "Training": [[4, "training"]], "Logistic Regression": [[4, "logistic-regression"]], "Baseline": [[4, "baseline"]], "Conclusion": [[4, "conclusion"]], "Spherical augmentations": [[6, "spherical-augmentations"]], "SurfCutOut": [[6, "surfcutout"]], "SurfNoise": [[6, "surfnoise"]], "SurfBlur": [[6, "surfblur"]], "SurfRotation": [[6, "surfrotation"]], "HemiMixUp": [[6, "hemimixup"]], "GroupMixUp": [[6, "groupmixup"]], "GroupMixUp group": [[6, "groupmixup-group"]], "Transformer": [[6, "transformer"]], "Icosahedron matching": [[7, "icosahedron-matching"]], "Project texture": [[8, "project-texture"]], "Load data": [[8, "load-data"]], "3-D surface to 2-D grid projection": [[8, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[8, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[8, "uniformly-distributed-locations"]], "Integration in deep neural network": [[8, "integration-in-deep-neural-network"]], "Spherical neighbors": [[9, "spherical-neighbors"]], "Direct Neighbor": [[9, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[9, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[10, "unet-segmentation"]], "Inspect dataset": [[10, "inspect-dataset"]], "Train the model": [[10, "train-the-model"]], "Inspect the predicted labels": [[10, "inspect-the-predicted-labels"]], "Weakly Supervised Contrastive Learning with y-Aware": [[12, "weakly-supervised-contrastive-learning-with-y-aware"]], "OpenBHB datasets and data augmentations for Contrastive Learning": [[12, "openbhb-datasets-and-data-augmentations-for-contrastive-learning"]], "Training of y-Aware Contrastive Learning models": [[12, "training-of-y-aware-contrastive-learning-models"]], "Visualization and evaluation of the learned representations": [[12, "visualization-and-evaluation-of-the-learned-representations"]], "API documentation of nidl": [[13, "api-documentation-of-nidl"], [15, "api-documentation-of-nidl"]], "Installing nidl": [[14, "installing-nidl"]], "Installing a stable version": [[14, "installing-a-stable-version"]], "Installing the current version": [[14, "installing-the-current-version"]], "nidl": [[15, "nidl"]], "nidl.transforms": [[15, "nidl-transforms"]], "nidl.experiment": [[15, "nidl-experiment"]], "API documentation of nidl.callbacks": [[16, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[16, "nidl-callbacks"]], "nidl.callbacks.check_typing": [[16, "nidl-callbacks-check-typing"]], "nidl.callbacks.multitask_probing": [[16, "nidl-callbacks-multitask-probing"]], "nidl.callbacks.model_probing": [[16, "nidl-callbacks-model-probing"]], "Examples": [[24, "examples"], [28, "examples"], [33, "examples"], [37, "examples"], [52, "examples"], [53, "examples"], [55, "examples"], [56, "examples"], [57, "examples"], [65, "examples"], [88, "examples"], [92, "examples"], [110, "examples"]], "API documentation of nidl.datasets": [[29, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[29, "nidl-datasets"]], "nidl.datasets.pandas_dataset": [[29, "nidl-datasets-pandas-dataset"]], "nidl.datasets.openbhb": [[29, "id1"]], "nidl.datasets.base": [[29, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[40, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[40, "nidl-estimators"]], "nidl.estimators.base": [[40, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[51, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[51, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[51, "nidl-estimators-linear-logistic-regression"]], "API documentation of nidl.estimators.ssl": [[54, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[54, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[54, "id1"]], "nidl.estimators.ssl.yaware": [[54, "nidl-estimators-ssl-yaware"]], "API documentation of nidl.estimators.ssl.utils": [[58, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[58, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[58, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[71, "api-documentation-of-nidl-losses"]], "nidl.losses": [[71, "nidl-losses"]], "nidl.losses.yaware_infonce": [[71, "nidl-losses-yaware-infonce"]], "nidl.losses.infonce": [[71, "id1"]], "API documentation of nidl.metrics": [[79, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[79, "nidl-metrics"]], "nidl.metrics.classification": [[79, "nidl-metrics-classification"]], "nidl.metrics.regression": [[79, "nidl-metrics-regression"]], "nidl.metrics._regression": [[79, "id1"]], "API documentation of nidl.utils": [[90, "api-documentation-of-nidl-utils"]], "nidl.utils": [[90, "nidl-utils"]], "nidl.utils.weights": [[90, "id1"]], "nidl.utils.bunch": [[90, "id2"]], "nidl.utils.color": [[90, "nidl-utils-color"]], "nidl.utils.validation": [[90, "nidl-utils-validation"]], "API documentation of nidl.volume": [[111, "api-documentation-of-nidl-volume"]], "nidl.volume": [[111, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[112, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[112, "nidl-volume-backbones"]], "nidl.volume.backbones.alexnet3d": [[112, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[112, "nidl-volume-backbones-resnet3d"]], "nidl.volume.backbones.densenet3d": [[112, "nidl-volume-backbones-densenet3d"]], "API documentation of nidl.volume.transforms": [[142, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[142, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[142, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[143, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[143, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[144, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[144, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[144, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[144, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[149, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[149, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[149, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[149, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[149, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[149, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "API documentation of nidl.volume.transforms.preprocessing": [[158, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[158, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[159, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[159, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[159, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[159, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[164, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[164, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[164, "id1"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[164, "id2"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[164, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "Search in API documentation of nidl": [[172, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[173, "api-documentation-of-surfify"]], "surfify": [[173, "surfify"]], "surfify.preprocessing": [[173, "surfify-preprocessing"]], "surfify.transforms": [[173, "surfify-transforms"]], "API documentation of surfify.augmentation": [[174, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[174, "surfify-augmentation"]], "surfify.augmentation.mixup": [[174, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[174, "surfify-augmentation-utils"]], "surfify.augmentation.base": [[174, "surfify-augmentation-base"]], "API documentation of surfify.datasets": [[201, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[201, "surfify-datasets"]], "surfify.datasets._samples_generator": [[201, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[201, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[208, "api-documentation-of-surfify-losses"]], "surfify.losses": [[208, "surfify-losses"]], "surfify.losses.vae": [[208, "surfify-losses-vae"]], "API documentation of surfify.models": [[212, "api-documentation-of-surfify-models"]], "surfify.models": [[212, "surfify-models"]], "surfify.models.sit": [[212, "id1"]], "surfify.models.vgg": [[212, "surfify-models-vgg"]], "surfify.models.simclr": [[212, "id2"]], "surfify.models.vae": [[212, "surfify-models-vae"]], "surfify.models.unet": [[212, "surfify-models-unet"]], "surfify.models.base": [[212, "surfify-models-base"]], "API documentation of surfify.nn": [[280, "api-documentation-of-surfify-nn"]], "surfify.nn": [[280, "surfify-nn"]], "surfify.nn.modules": [[280, "surfify-nn-modules"]], "surfify.nn.functional": [[280, "surfify-nn-functional"]], "API documentation of surfify.plotting": [[302, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[302, "surfify-plotting"]], "surfify.plotting.surface": [[302, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[307, "api-documentation-of-surfify-utils"]], "surfify.utils": [[307, "surfify-utils"]], "surfify.utils.coord": [[307, "surfify-utils-coord"]], "surfify.utils.sampling": [[307, "surfify-utils-sampling"]], "surfify.utils.io": [[307, "surfify-utils-io"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[17, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "classificationprobingcallback (class in nidl.callbacks)": [[18, "nidl.callbacks.ClassificationProbingCallback"]], "log_metrics() (nidl.callbacks.classificationprobingcallback method)": [[18, "nidl.callbacks.ClassificationProbingCallback.log_metrics"]], "modelprobing (class in nidl.callbacks)": [[19, "nidl.callbacks.ModelProbing"]], "adapt_dataloader_for_ddp() (nidl.callbacks.modelprobing static method)": [[19, "nidl.callbacks.ModelProbing.adapt_dataloader_for_ddp"]], "extract_features() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.fit"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.predict"]], "probing() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.probing"]], "multitaskestimator (class in nidl.callbacks)": [[20, "nidl.callbacks.MultiTaskEstimator"]], "fit() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.fit"]], "predict() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.predict"]], "score() (nidl.callbacks.multitaskestimator method)": [[20, "nidl.callbacks.MultiTaskEstimator.score"]], "multitaskmodelprobing (class in nidl.callbacks)": [[21, "nidl.callbacks.MultitaskModelProbing"]], "log_classification_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_classification_metrics"]], "log_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_metrics"]], "log_regression_metrics() (nidl.callbacks.multitaskmodelprobing method)": [[21, "nidl.callbacks.MultitaskModelProbing.log_regression_metrics"]], "regressionprobingcallback (class in nidl.callbacks)": [[22, "nidl.callbacks.RegressionProbingCallback"]], "log_metrics() (nidl.callbacks.regressionprobingcallback method)": [[22, "nidl.callbacks.RegressionProbingCallback.log_metrics"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[23, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "classificationprobingcallback (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ClassificationProbingCallback"]], "log_metrics() (nidl.callbacks.model_probing.classificationprobingcallback method)": [[24, "nidl.callbacks.model_probing.ClassificationProbingCallback.log_metrics"]], "modelprobing (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.ModelProbing"]], "adapt_dataloader_for_ddp() (nidl.callbacks.model_probing.modelprobing static method)": [[25, "nidl.callbacks.model_probing.ModelProbing.adapt_dataloader_for_ddp"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.fit"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.predict"]], "probing() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.probing"]], "regressionprobingcallback (class in nidl.callbacks.model_probing)": [[26, "nidl.callbacks.model_probing.RegressionProbingCallback"]], "log_metrics() (nidl.callbacks.model_probing.regressionprobingcallback method)": [[26, "nidl.callbacks.model_probing.RegressionProbingCallback.log_metrics"]], "multitaskestimator (class in nidl.callbacks.multitask_probing)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator"]], "fit() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.fit"]], "predict() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.predict"]], "score() (nidl.callbacks.multitask_probing.multitaskestimator method)": [[27, "nidl.callbacks.multitask_probing.MultiTaskEstimator.score"]], "multitaskmodelprobing (class in nidl.callbacks.multitask_probing)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing"]], "log_classification_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_classification_metrics"]], "log_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_metrics"]], "log_regression_metrics() (nidl.callbacks.multitask_probing.multitaskmodelprobing method)": [[28, "nidl.callbacks.multitask_probing.MultitaskModelProbing.log_regression_metrics"]], "baseimagedataset (class in nidl.datasets)": [[30, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[30, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[30, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[31, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[31, "nidl.datasets.BaseNumpyDataset.get_data"]], "imagedataframedataset (class in nidl.datasets)": [[32, "nidl.datasets.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.imagedataframedataset method)": [[32, "nidl.datasets.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.imagedataframedataset method)": [[32, "nidl.datasets.ImageDataFrameDataset.apply_transform"]], "openbhb (class in nidl.datasets)": [[33, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[33, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[34, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[35, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[35, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[35, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[36, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[36, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[37, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[37, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "imagedataframedataset (class in nidl.datasets.pandas_dataset)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[38, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_transform"]], "default_image_loader() (in module nidl.datasets.pandas_dataset)": [[39, "nidl.datasets.pandas_dataset.default_image_loader"]], "baseestimator (class in nidl.estimators)": [[41, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[41, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[42, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[43, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[44, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[45, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[46, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[46, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[47, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[48, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[49, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[50, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[52, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[52, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[53, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[55, "nidl.estimators.ssl.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr method)": [[55, "nidl.estimators.ssl.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[55, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr method)": [[55, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[55, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[55, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[56, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[57, "nidl.estimators.ssl.simclr.SimCLR"]], "all_gather_and_flatten() (nidl.estimators.ssl.simclr.simclr method)": [[57, "nidl.estimators.ssl.simclr.SimCLR.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[57, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[57, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[57, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[57, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[59, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[59, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[60, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[61, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[62, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[62, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[63, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[64, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "all_gather_and_flatten() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.all_gather_and_flatten"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[65, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[66, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[67, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[68, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[69, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[70, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[72, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[72, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[73, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[73, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[73, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[73, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[73, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[73, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[74, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[74, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[75, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[75, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[76, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[76, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[76, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[76, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[76, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[76, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[77, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[77, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[78, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[78, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[80, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[81, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[82, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[83, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[84, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[85, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[86, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[87, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[87, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[88, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[88, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[88, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[89, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[89, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[89, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[89, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[91, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[92, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[92, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[92, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[92, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[92, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[93, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[94, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[94, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[94, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[94, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[94, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[95, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[96, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[97, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[98, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[99, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[100, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[101, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[102, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[103, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[104, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[105, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[106, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[107, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[108, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[109, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[110, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[110, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[110, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[110, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[110, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[113, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[113, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[114, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[114, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[115, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[115, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[116, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[116, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[117, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[117, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[118, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[119, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[119, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[120, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[120, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[121, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[121, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[122, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[123, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[124, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[125, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[126, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[127, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[128, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[129, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[130, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[131, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[132, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[134, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[135, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[136, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[137, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[138, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[139, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[140, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[141, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[145, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[145, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[146, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[146, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[147, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[147, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[148, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[148, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[152, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[152, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[153, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[153, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[154, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[154, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[155, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[155, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[155, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[156, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[156, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[157, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[157, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[160, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[160, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[161, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[161, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[162, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[162, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[163, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[163, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[165, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[165, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[166, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[167, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[167, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[168, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[168, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[169, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[169, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[169, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[169, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[169, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[170, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[170, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[171, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[171, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[175, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[175, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[176, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[176, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[176, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[177, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[177, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[178, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[178, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[179, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[179, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[180, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[180, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[181, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[181, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[182, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[183, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[184, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[184, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[185, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[185, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[186, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[186, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[187, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[187, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[188, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[189, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[189, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[189, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[190, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[190, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[191, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[191, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[192, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[193, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[194, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[194, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[194, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[195, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[195, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[195, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[195, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[196, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[197, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[198, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[199, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[200, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[202, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[203, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[204, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[205, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[206, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[207, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[209, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[210, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[211, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[213, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[213, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[214, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[214, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[215, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[215, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[216, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[216, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[217, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[217, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[218, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[218, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[219, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[219, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[220, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[221, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[222, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[223, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[224, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[225, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[226, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[227, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[228, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[228, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[229, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[229, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[230, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[230, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[231, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[231, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[231, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[231, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[231, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[232, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[232, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[233, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[234, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[235, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[236, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[237, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[238, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[239, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[240, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[241, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[241, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[242, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[242, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[243, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[243, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[244, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[244, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[245, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[245, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[246, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[246, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[247, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[247, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[248, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[248, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[249, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[249, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[250, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[250, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[251, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[251, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[252, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[252, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[253, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[253, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[254, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[254, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[255, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[255, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[256, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[256, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[257, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[257, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[258, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[258, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[259, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[259, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[259, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[259, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[259, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[260, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[261, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[261, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[262, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[263, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[264, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[265, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[270, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[273, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[274, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[275, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[276, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[277, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[278, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[279, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[281, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[281, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[282, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[282, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[283, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[283, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[284, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[284, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[285, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[285, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[286, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[286, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[287, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[287, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[288, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[288, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[289, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[289, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[290, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[290, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[291, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[292, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[292, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[293, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[293, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[294, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[294, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[295, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[295, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[296, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[296, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[297, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[297, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[298, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[298, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[299, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[299, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[300, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[300, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[301, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[301, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[303, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[304, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[305, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[305, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[306, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[308, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[309, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[310, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[311, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[312, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[313, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[314, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[315, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[316, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[317, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[318, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[319, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[320, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[321, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[322, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[323, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[324, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[325, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[326, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[327, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[328, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[329, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[330, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[331, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[332, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[333, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[334, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[335, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[336, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[337, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[338, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[339, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[340, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[341, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[342, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[343, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[344, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[345, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[346, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[347, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[348, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[349, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[350, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[351, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[352, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[368, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[369, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[370, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[371, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[372, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[373, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[374, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[375, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[376, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[377, "surfify.utils.text2ico"]]}})
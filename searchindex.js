Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms", "generated/nidl.transforms.ContrastiveTransforms", "generated/nidl.transforms.ssl.ContrastiveTransforms", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.rst", "generated/nidl.transforms.ContrastiveTransforms.rst", "generated/nidl.transforms.ssl.ContrastiveTransforms.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.transforms</em>", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 1, 10, 18, 24, 33, 38, 44, 45, 46, 47, 48, 65, 66, 67, 70, 84, 86, 88, 163, 194, 253, 327], "supervis": [0, 1, 10, 44, 45, 46, 47, 48, 65, 66, 67, 70, 88, 327], "contrast": [0, 1, 44, 45, 47, 48, 70, 88, 151, 152, 164, 191, 327], "learn": [0, 1, 10, 12, 15, 16, 17, 19, 21, 22, 23, 25, 44, 45, 47, 48, 57, 65, 66, 67, 70, 88, 91, 92, 95, 97, 160, 164, 179, 191, 207, 229, 240, 326, 327], "simclr": [0, 1, 10, 44, 45, 47, 48, 70, 88, 120, 164, 191, 327], "neighbor": [0, 3, 4, 9, 10, 15, 16, 21, 22, 120, 124, 126, 127, 132, 133, 137, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 201, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 237, 240, 242, 243, 244, 245, 248, 255, 259, 262, 265, 268, 269, 272, 275, 287, 288, 289, 291, 295, 299, 302, 303, 307, 310, 311, 312, 315, 319, 321, 324, 327], "unet": [0, 3, 9, 10, 120, 166, 178, 196, 197, 198, 199, 200, 201, 202, 327], "segment": [0, 3, 9, 93, 94, 108, 109, 327], "project": [0, 3, 4, 5, 7, 9, 11, 27, 30, 47, 48, 49, 129, 135, 163, 194, 260, 263, 265, 268, 271, 273, 274, 288, 289, 294, 299, 302, 304, 305, 306, 309, 311, 312, 318, 325, 327], "textur": [0, 3, 4, 9, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 161, 162, 167, 176, 177, 179, 180, 203, 204, 205, 206, 207, 209, 218, 251, 252, 259, 262, 263, 266, 272, 275, 276, 295, 300, 307, 308, 319, 324, 325, 327], "icosahedron": [0, 3, 4, 6, 7, 8, 9, 10, 120, 126, 127, 129, 132, 133, 135, 150, 153, 154, 155, 160, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 200, 201, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 259, 260, 262, 263, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 324, 325, 327], "match": [0, 3, 9, 28, 31, 258, 263, 325, 327], "augment": [0, 3, 9, 10, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 66, 67, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 327], "download": [0, 2, 4, 5, 6, 7, 8, 68, 70, 88], "all": [0, 2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 166, 178, 191, 192, 193, 195, 198, 199, 200, 234, 235, 236, 245, 246, 247, 327], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 18, 24, 33, 38, 63, 64, 66, 67, 69, 71, 86, 165, 167, 178, 179, 180, 190, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 324, 325, 327], "python": [0, 2, 4, 5, 6, 7, 8, 10, 12, 84], "sourc": [0, 2, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 218, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "code": [0, 2, 4, 5, 6, 7, 8, 14, 20, 49, 52, 81, 82], "auto_gallery_python": 0, "zip": [0, 2, 4, 5, 6, 7, 8, 283], "jupyt": [0, 2, 4, 5, 6, 7, 8], "notebook": [0, 2, 4, 5, 6, 7, 8], "auto_gallery_jupyt": 0, "galleri": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327], "gener": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 30, 33, 38, 44, 45, 47, 48, 139, 149, 150, 153, 154, 155, 160, 262, 268, 283, 285, 286, 297, 298, 302, 324], "sphinx": [0, 2, 4, 5, 6, 7, 8], "00": [1, 9, 63, 64, 327], "000": [1, 2, 327], "total": [1, 4, 5, 6, 7, 8, 9, 92, 93, 94, 97, 108, 109, 327], "execut": [1, 9, 278, 327], "1": [1, 2, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 55, 56, 61, 62, 63, 64, 69, 71, 86, 91, 92, 93, 94, 95, 97, 106, 107, 108, 109, 112, 113, 123, 124, 127, 133, 137, 141, 142, 143, 150, 153, 154, 155, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 235, 236, 237, 240, 242, 243, 244, 246, 247, 248, 251, 252, 253, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 297, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 321, 324, 325, 327], "file": [1, 9, 27, 28, 29, 30, 31, 49, 70, 88, 151, 152, 279, 280, 281, 283, 285, 286, 322, 326, 327], "from": [1, 2, 4, 5, 6, 7, 8, 9, 11, 15, 16, 18, 21, 22, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 55, 56, 61, 62, 63, 64, 69, 71, 86, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 124, 127, 133, 137, 151, 152, 161, 165, 166, 167, 178, 179, 180, 190, 199, 200, 203, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 324, 325, 327], "auto_galleri": [1, 9], "mem": [1, 9, 327], "mb": [1, 2, 4, 5, 6, 7, 8, 9, 327], "simclr_stl10": [1, 2, 327], "py": [1, 2, 4, 5, 6, 7, 8, 9, 327], "0": [1, 2, 4, 5, 6, 7, 8, 9, 14, 19, 20, 25, 33, 38, 44, 45, 47, 48, 49, 55, 56, 57, 61, 62, 63, 64, 86, 93, 94, 108, 109, 127, 129, 133, 135, 142, 143, 163, 179, 189, 192, 193, 194, 195, 198, 207, 230, 235, 236, 241, 246, 247, 251, 252, 258, 260, 263, 265, 268, 273, 288, 289, 293, 294, 295, 299, 302, 311, 312, 317, 318, 319, 321, 325, 327], "go": [2, 4, 5, 6, 7, 8], "end": [2, 4, 5, 6, 7, 8, 18, 24, 33, 38, 44, 45, 47, 48, 81, 82, 87], "full": [2, 4, 5, 6, 7, 8, 10, 33, 38, 61, 62, 267, 301], "http": [2, 11, 15, 16, 17, 19, 21, 22, 23, 25, 55, 56, 60, 84, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 160, 282, 284], "uvadlc": 2, "readthedoc": 2, "io": [2, 10, 120, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "In": [2, 33, 38, 44, 45, 47, 48, 53, 66, 67, 166, 178, 199, 200, 227], "thi": [2, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "tutori": [2, 11], "we": [2, 5, 6, 8, 44, 45, 47, 48, 66, 67, 85, 227, 239, 282, 284], "take": [2, 47, 48, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 208, 234, 235, 236, 245, 246, 247], "closer": [2, 47, 48], "look": [2, 47, 48, 268, 302], "also": [2, 10, 27, 28, 29, 30, 31, 44, 45, 47, 48, 63, 64, 84, 149, 151, 152, 278, 326], "sometim": [2, 69, 71], "call": [2, 14, 18, 20, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 58, 66, 67, 87, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 151, 152, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 278, 295, 319], "unsupervis": 2, "describ": [2, 17, 23, 47, 48, 49, 326], "scenario": 2, "where": [2, 6, 17, 18, 23, 24, 27, 28, 29, 30, 31, 47, 48, 49, 70, 88, 151, 152, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240, 251, 252, 254, 262, 321, 324], "have": [2, 5, 6, 14, 20, 33, 38, 44, 45, 47, 48, 278, 288, 311], "given": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 70, 87, 88, 159, 161, 203, 253, 278, 295, 319, 320, 321], "input": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 49, 51, 59, 60, 61, 62, 66, 67, 70, 88, 91, 92, 93, 94, 95, 97, 108, 109, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 145, 147, 151, 152, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 258, 259, 262, 263, 272, 278, 280, 281, 296, 324, 325], "accompani": 2, "label": [2, 6, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 44, 45, 154, 155, 251, 252], "classic": [2, 178, 200, 201], "wai": [2, 66, 67, 288, 311, 326], "howev": 2, "still": [2, 253], "contain": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 69, 71, 151, 152, 165, 190, 208, 251, 252, 278, 294, 318], "lot": 2, "inform": [2, 27, 28, 29, 30, 31, 49, 151, 152, 160, 165, 190], "which": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 87, 93, 94, 108, 109, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 253, 258, 268, 295, 302, 319], "can": [2, 5, 18, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 85, 123, 130, 141, 144, 151, 152, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 208, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 277, 278], "how": [2, 4, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "ar": [2, 5, 6, 8, 14, 17, 19, 20, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 60, 61, 62, 69, 71, 122, 151, 152, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 239, 253, 258, 262, 275, 288, 295, 297, 307, 311, 319, 321, 324], "imag": [2, 6, 27, 28, 29, 30, 31, 44, 45, 47, 48, 66, 67, 122, 151, 152, 159, 262, 279, 324], "differ": [2, 5, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 66, 67, 127, 133, 151, 152, 165, 166, 178, 190, 199, 200], "each": [2, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 33, 38, 44, 45, 47, 48, 49, 63, 64, 66, 67, 92, 93, 94, 97, 108, 109, 124, 126, 127, 132, 133, 137, 140, 148, 150, 153, 154, 155, 159, 161, 162, 163, 165, 166, 176, 177, 178, 190, 194, 198, 199, 200, 203, 204, 205, 206, 253, 268, 269, 288, 289, 295, 302, 303, 311, 312, 319], "other": [2, 5, 33, 38, 44, 45, 47, 48, 49, 253, 263, 325], "what": [2, 49, 52], "pattern": [2, 6, 27, 28, 29, 30, 31, 151, 152, 239], "descript": 2, "certain": [2, 268, 291, 302, 315], "cluster": [2, 33, 35, 38, 40], "To": [2, 5, 18, 24, 27, 30, 33, 38, 44, 45, 47, 48, 58], "get": [2, 18, 24, 47, 48, 253, 287, 290, 291, 292, 310, 314, 315, 316, 321], "an": [2, 6, 7, 8, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 49, 51, 52, 66, 67, 69, 70, 71, 84, 86, 87, 88, 93, 94, 108, 109, 126, 127, 132, 133, 136, 139, 140, 142, 146, 148, 165, 166, 178, 190, 199, 200, 229, 240, 253, 259, 262, 263, 267, 272, 274, 276, 287, 290, 291, 292, 295, 301, 306, 308, 309, 310, 314, 315, 316, 319, 324, 325], "insight": 2, "question": 2, "implement": [2, 18, 24, 33, 38, 44, 45, 47, 48, 55, 56, 57, 84, 126, 132, 160, 163, 164, 179, 191, 194, 198, 207], "popular": [2, 10, 149], "simpl": [2, 4, 5, 7, 8, 47, 48, 91, 95, 164, 191, 260, 273, 321], "method": [2, 10, 14, 18, 20, 24, 27, 30, 33, 38, 59, 69, 70, 71, 85, 86, 88, 121, 149, 163, 165, 166, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 199, 200, 201, 202, 207, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 253, 295, 319], "appli": [2, 5, 6, 18, 24, 44, 45, 47, 48, 66, 67, 70, 88, 93, 94, 108, 109, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 141, 142, 144, 145, 163, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 239, 260, 271, 273, 289, 305, 312], "stl10": 2, "requir": [2, 33, 38, 44, 45, 47, 48, 57], "some": [2, 7, 10, 33, 38, 44, 45, 47, 48, 49, 51, 93, 94, 108, 109, 130, 131, 144, 145, 149, 253, 321], "packag": [2, 5, 11], "besid": 2, "nidl": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 326], "let": [2, 47, 48], "": [2, 5, 7, 18, 24, 33, 38, 47, 48, 61, 62, 87, 125, 126, 127, 129, 132, 133, 135, 138, 150, 153, 154, 155, 161, 162, 166, 176, 177, 178, 196, 199, 200, 201, 203, 204, 205, 206, 229, 240, 265, 268, 278, 288, 289, 293, 294, 299, 302, 311, 312, 317, 318], "first": [2, 5, 6, 8, 55, 56, 61, 62, 92, 93, 94, 97, 108, 109, 161, 163, 166, 178, 194, 196, 197, 199, 200, 203, 295, 319], "start": [2, 18, 24, 93, 94, 108, 109, 127, 133, 268, 302], "import": [2, 4, 5, 6, 7, 8, 47, 48, 49, 51, 52, 63, 64, 69, 71, 86, 149, 165, 167, 178, 179, 180, 190, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 324, 325], "our": [2, 5, 44, 45], "standard": [2, 126, 128, 132, 134, 165, 166, 178, 190, 199, 200, 253, 274, 277, 294, 306, 318], "librari": 2, "below": [2, 47, 48, 49], "o": [2, 5, 7, 255, 265, 268, 288, 289, 294, 299, 302, 311, 312, 318], "matplotlib": [2, 4, 5, 6, 7, 8, 251, 252, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "pyplot": [2, 4, 5, 6, 7, 8, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "plt": [2, 4, 5, 6, 7, 8, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "pytorch_lightn": [2, 18, 24], "pl": 2, "torch": [2, 6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 55, 56, 70, 88, 160, 167, 178, 179, 180, 198, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "nn": [2, 6, 8, 10, 33, 38, 44, 45, 47, 48, 55, 56, 70, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 120, 126, 132, 161, 162, 164, 176, 177, 191, 192, 193, 195, 196, 198, 201, 203, 204, 205, 206, 208, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "util": [2, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58, 59, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 120, 126, 127, 129, 132, 133, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 178, 179, 180, 200, 207, 218, 228, 229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "torchvis": 2, "collect": 2, "ordereddict": [2, 44, 45], "copi": [2, 27, 30, 253], "deepcopi": 2, "weight": [2, 10, 15, 17, 21, 23, 44, 45, 47, 48, 49, 58, 59, 61, 62, 63, 64, 70, 88, 120, 124, 137, 157, 158, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 269, 275, 289, 295, 303, 307, 312, 319], "estim": [2, 4, 5, 6, 7, 8, 10, 18, 19, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 58, 59, 63, 64, 85, 87, 120, 253, 260, 273], "ssl": [2, 10, 47, 48, 67, 120], "linear": [2, 10, 18, 24, 44, 45, 91, 95, 120, 163, 166, 178, 194, 199, 200, 201], "logisticregress": [2, 10, 17, 23, 43, 44, 45, 120], "callback": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 120], "learningratemonitor": 2, "modelcheckpoint": [2, 33, 38], "transform": [2, 5, 10, 27, 28, 29, 30, 31, 33, 37, 38, 42, 47, 48, 49, 66, 67, 120, 122, 123, 130, 131, 140, 141, 143, 144, 145, 148, 151, 152, 160, 161, 163, 194, 195, 203, 253, 254, 256, 257, 260, 261, 273, 294, 318, 323], "defin": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 61, 62, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 124, 137, 139, 142, 151, 152, 164, 166, 178, 191, 192, 193, 195, 198, 199, 200, 201, 202, 227, 234, 235, 236, 245, 246, 247, 251, 252, 254, 271, 274, 280, 281, 285, 286, 305, 306], "global": [2, 15, 17, 21, 23, 49, 227], "paramet": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 66, 67, 70, 86, 87, 88, 91, 92, 93, 94, 95, 97, 108, 109, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "datadir": 2, "tmp": 2, "checkpointdir": 2, "saved_model": 2, "num_work": 2, "cpu_count": 2, "num_imag": 2, "6": [2, 4, 63, 64, 69, 71, 179, 180, 189, 207, 218, 288, 294, 311, 318, 327], "backend": 2, "cudnn": 2, "determinst": 2, "true": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 58, 59, 63, 64, 70, 76, 81, 82, 83, 86, 88, 92, 97, 123, 140, 141, 148, 157, 158, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 237, 240, 242, 243, 244, 248, 251, 252, 253, 259, 260, 263, 266, 268, 272, 273, 288, 293, 300, 302, 311, 317, 325], "benchmark": 2, "fals": [2, 4, 6, 7, 18, 24, 33, 38, 44, 45, 47, 48, 61, 62, 63, 64, 70, 84, 86, 88, 92, 93, 94, 97, 98, 99, 108, 109, 151, 152, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 196, 197, 198, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 251, 252, 253, 260, 265, 267, 268, 273, 274, 275, 276, 277, 279, 282, 284, 288, 289, 293, 294, 295, 299, 301, 302, 306, 307, 308, 311, 312, 317, 318, 319, 320], "devic": [2, 33, 38, 44, 45], "gpu": [2, 33, 38, 44, 45, 47, 48], "cuda": 2, "is_avail": 2, "els": 2, "cpu": [2, 33, 38], "As": [2, 8, 47, 48], "mani": [2, 5, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 47, 48, 92, 93, 94, 97, 108, 109], "befor": [2, 47, 48, 87, 166, 178, 199, 200, 236, 247, 253], "provid": [2, 27, 28, 29, 30, 31, 33, 38, 129, 135, 151, 152, 228, 253, 269, 295, 303, 319, 326], "pre": 2, "model": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 68, 70, 88, 93, 94, 96, 103, 108, 109, 120, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], "If": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 60, 63, 64, 70, 87, 88, 93, 94, 108, 109, 253, 278, 295, 319], "you": [2, 5, 11, 14, 18, 20, 24, 27, 30, 33, 38, 44, 45, 47, 48, 49, 50, 70, 88, 253], "run": [2, 4, 5, 6, 7, 8, 15, 16, 17, 18, 21, 22, 23, 24, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 294, 318], "local": [2, 49, 53, 70, 88], "make": [2, 18, 24, 33, 38, 86, 227], "sure": 2, "suffici": 2, "disk": [2, 33, 38, 44, 45], "space": [2, 6, 47, 48, 91, 92, 93, 94, 95, 97, 108, 109, 161, 162, 163, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 200, 203, 204, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 271, 305], "avail": [2, 33, 38, 44, 45, 49, 63, 64, 70, 86, 88], "load_pretrain": [2, 70, 88], "makedir": 2, "exist_ok": 2, "name": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 49, 52, 63, 64, 70, 87, 88, 161, 162, 176, 177, 203, 204, 205, 206, 227, 251, 252, 253, 264, 278], "hf": [2, 49, 70, 88], "hub": [2, 49, 70, 88], "neurospin": [2, 11, 70, 88], "resnet18": [2, 10, 90, 104, 114, 120], "data_dir": [2, 70, 88], "filepath": [2, 70, 88], "pt": 2, "allow": [2, 5, 14, 20, 28, 31, 47, 48, 49, 50, 66, 67, 253, 278, 295, 319], "effici": [2, 66, 67, 92, 97], "need": [2, 5, 6, 33, 38, 47, 48, 49, 66, 67, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 239, 245, 246, 247], "prepar": [2, 66, 67], "load": [2, 8, 10, 27, 28, 30, 31, 33, 38, 49, 52, 53, 66, 67, 70, 88, 149, 151, 152, 282, 284], "sampl": [2, 8, 10, 17, 23, 33, 38, 58, 59, 61, 62, 63, 64, 66, 67, 120, 149, 150, 153, 154, 155, 159, 161, 162, 166, 167, 178, 179, 180, 196, 199, 200, 201, 203, 204, 207, 209, 218, 231, 232, 233, 237, 239, 242, 243, 244, 248, 262, 289, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324], "two": [2, 5, 44, 45, 47, 48, 66, 67, 258, 260, 273, 288, 311], "random": [2, 4, 33, 38, 66, 67, 123, 127, 133, 139, 140, 141, 142, 148, 150, 153, 154, 155], "batch": [2, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 66, 67, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 199, 200, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "The": [2, 5, 18, 24, 27, 30, 33, 38, 44, 45, 47, 48, 49, 55, 56, 58, 59, 61, 62, 63, 64, 66, 67, 87, 126, 128, 129, 132, 134, 135, 160, 161, 162, 163, 166, 176, 177, 178, 179, 194, 198, 199, 200, 203, 204, 205, 206, 207, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 253, 256, 257, 277, 278], "easiest": [2, 66, 67], "do": [2, 5, 18, 24, 33, 38, 44, 45, 47, 48, 66, 67, 253], "i": [2, 5, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326], "creat": [2, 66, 67, 84, 136, 142, 143, 146, 149, 151, 152, 189, 227], "when": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 58, 59, 60, 63, 64, 66, 67, 70, 86, 88, 251, 252, 253, 258, 263, 278, 293, 317, 325], "being": [2, 66, 67], "set": [2, 5, 15, 16, 21, 22, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 53, 61, 62, 66, 67, 72, 127, 129, 133, 135, 149, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 254, 265, 275, 279, 299, 307], "twice": [2, 66, 67], "class": [2, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 65, 66, 67, 68, 69, 70, 71, 72, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 277], "contrastivetransform": [2, 10, 65, 66, 67, 120], "framework": [2, 33, 38, 164, 191], "easili": [2, 5], "extend": [2, 59, 69, 71], "more": [2, 15, 17, 21, 23, 27, 28, 29, 30, 31, 66, 67, 92, 97, 121, 151, 152, 326], "posit": [2, 33, 38, 66, 67], "than": [2, 33, 38, 47, 48], "same": [2, 5, 33, 38, 47, 48, 49, 50, 58, 59, 63, 64, 258, 260, 273, 278, 283, 288, 311], "most": [2, 251, 252], "usual": [2, 47, 48], "obtain": [2, 47, 48], "us": [2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326], "onli": [2, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "def": [2, 4, 6, 18, 24, 33, 38, 44, 45, 47, 48, 86], "__init__": [2, 18, 24, 33, 38, 44, 45, 47, 48, 86], "base_transform": 2, "n_view": [2, 66, 67], "2": [2, 4, 5, 7, 8, 15, 16, 18, 21, 22, 24, 49, 57, 61, 62, 63, 64, 66, 67, 69, 71, 86, 93, 94, 108, 109, 136, 142, 143, 146, 150, 153, 154, 155, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 256, 257, 259, 260, 262, 263, 265, 266, 267, 268, 271, 272, 273, 275, 276, 287, 288, 289, 294, 299, 300, 301, 302, 305, 307, 308, 310, 311, 312, 318, 320, 324, 325], "__call__": 2, "x": [2, 6, 7, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 47, 48, 86, 91, 92, 93, 94, 95, 97, 106, 107, 108, 109, 154, 155, 159, 162, 163, 166, 167, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 257, 259, 261, 262, 263, 266, 272, 275, 276, 288, 295, 300, 304, 307, 308, 311, 319, 323, 324, 325], "return": [2, 18, 24, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 70, 84, 86, 88, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 146, 147, 148, 151, 152, 154, 155, 159, 161, 162, 163, 165, 167, 176, 177, 179, 180, 190, 194, 203, 204, 205, 206, 207, 208, 209, 218, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325], "rang": [2, 4, 5, 8, 33, 38, 256, 257, 291, 315], "next": [2, 5, 33, 38, 44, 45, 47, 48, 278], "specif": [2, 10, 124, 125, 137, 138, 166, 178, 199, 200, 227, 290, 314], "want": [2, 11, 47, 48, 70, 88], "choic": [2, 49], "crucial": 2, "hyperparamet": [2, 33, 38, 47, 48], "sinc": [2, 5, 6, 47, 48, 61, 62, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 239, 245, 246, 247], "directli": [2, 33, 38, 122], "affect": [2, 33, 38], "latent": [2, 161, 162, 163, 176, 177, 179, 194, 203, 204, 205, 206, 207], "structur": [2, 5, 33, 38, 63, 64], "might": [2, 33, 38, 44, 45, 47, 48], "overal": 2, "experi": [2, 10, 49, 50, 51, 52, 53, 120, 326], "5": [2, 4, 6, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 63, 64, 129, 135, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 198, 199, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 245, 271, 288, 289, 305, 311, 312], "follow": [2, 18, 24, 47, 48, 49, 60, 63, 64], "origin": [2, 6, 47, 48, 122, 159, 253], "horizont": [2, 6], "flip": 2, "crop": 2, "resiz": 2, "color": [2, 7, 10, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 120, 251, 252], "distort": 2, "grayscal": 2, "gaussian": [2, 126, 128, 132, 134, 150, 153, 154, 155], "blur": [2, 126, 132], "comparison": 2, "reduc": [2, 33, 38, 58, 93, 94, 108, 109, 124, 137, 163, 194, 266, 267, 269, 300, 301, 303], "effect": [2, 93, 94, 108, 109, 253], "jitter": 2, "slightli": 2, "instead": [2, 58, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 253], "8": [2, 4, 6, 8, 9, 33, 38, 44, 45, 63, 64, 178, 192, 200, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 327], "bright": 2, "satur": 2, "hue": 2, "better": 2, "perform": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 87, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 124, 137, 164, 191, 192, 193, 195, 198, 233, 234, 235, 236, 244, 245, 246, 247, 253], "wa": [2, 47, 48], "faster": [2, 278], "stabl": 2, "instanc": [2, 5, 33, 38, 60, 87, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 123, 141, 142, 143, 164, 189, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "scale": [2, 6, 8, 17, 23, 33, 38, 44, 45, 55, 56, 121, 150, 153, 154, 155, 253, 262, 263, 266, 271, 275, 276, 289, 295, 300, 305, 307, 308, 312, 319, 324, 325], "highli": 2, "vari": 2, "benefici": [2, 44, 45], "t": [2, 6, 33, 38, 44, 45], "reli": 2, "anymor": 2, "distinguish": 2, "between": [2, 5, 17, 23, 47, 48, 55, 56, 61, 62, 124, 125, 137, 138, 251, 252, 258, 260, 273, 288, 297, 311, 321], "contrast_transform": 2, "compos": [2, 49, 66, 67, 163, 194, 254, 288, 311], "randomhorizontalflip": 2, "randomresizedcrop": 2, "size": [2, 6, 7, 8, 47, 48, 91, 92, 93, 94, 95, 97, 108, 109, 124, 125, 127, 133, 137, 138, 139, 151, 152, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 239, 245, 246, 247, 268, 271, 289, 294, 296, 302, 305, 312, 318], "96": [2, 4, 9, 236, 247, 259, 272, 327], "randomappli": 2, "colorjitt": 2, "p": 2, "randomgrayscal": 2, "gaussianblur": 2, "kernel_s": [2, 6, 235, 236, 246, 247], "9": [2, 4, 5, 63, 64, 157, 158], "totensor": 2, "normal": [2, 10, 33, 38, 44, 45, 47, 48, 55, 56, 93, 94, 108, 109, 120, 121, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 253, 255, 304, 313], "after": [2, 18, 24, 33, 38, 44, 45, 47, 48, 93, 94, 108, 109, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 199, 200, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "discuss": 2, "techniqu": [2, 321], "now": [2, 5, 8, 47, 48, 93, 94, 108, 109, 208], "focu": 2, "similarli": 2, "cifar10": 2, "10": [2, 4, 5, 7, 8, 9, 15, 16, 17, 19, 21, 22, 23, 25, 55, 56, 63, 64, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 167, 178, 180, 200, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318, 327], "airplan": 2, "bird": 2, "car": 2, "cat": 2, "deer": 2, "dog": 2, "hors": 2, "monkei": 2, "ship": 2, "truck": 2, "higher": [2, 33, 38], "resolut": [2, 93, 94, 108, 109, 151, 152, 166, 178, 199, 200], "pixel": 2, "500": 2, "per": [2, 19, 25, 27, 30, 93, 94, 108, 109], "addition": 2, "much": [2, 92, 97], "larger": [2, 47, 48], "100": [2, 4, 7, 8, 17, 23, 265, 268, 288, 289, 294, 297, 299, 302, 311, 312, 318], "unlabel": 2, "similar": [2, 5, 47, 48], "wider": [2, 47, 48], "anim": 2, "vehicl": 2, "ideal": 2, "showcas": 2, "benefit": 2, "offer": 2, "luckili": 2, "through": [2, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 34, 35, 36, 37, 39, 40, 41, 42], "keep": [2, 151, 152], "mind": 2, "rel": [2, 17, 23, 27, 28, 29, 30, 31], "larg": [2, 253], "ha": [2, 5, 33, 38, 44, 45, 47, 48, 63, 64, 92, 93, 94, 97, 108, 109, 166, 178, 199, 200, 253], "consider": [2, 47, 48], "3gb": 2, "bit": 2, "time": [2, 4, 5, 6, 7, 8, 295, 319], "For": [2, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 48, 87, 208, 288, 311], "initi": [2, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "loader": [2, 8], "abov": 2, "unlabeled_data": 2, "via": [2, 44, 45, 295, 319], "train_data_contrast": 2, "valid": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 53, 84, 85, 86, 87, 120], "root": [2, 11, 16, 19, 22, 25, 27, 28, 29, 30, 31, 63, 64, 151, 152], "split": [2, 27, 28, 29, 30, 31, 47, 48, 151, 152], "pair": [2, 33, 38, 151, 152], "img": 2, "stack": [2, 18, 24], "idx": [2, 4, 7, 27, 28, 30, 31, 268, 288, 294, 302, 311, 318], "dim": [2, 8, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "img_grid": 2, "make_grid": 2, "nrow": 2, "pad_valu": 2, "permut": [2, 5, 125, 138, 258, 260, 273], "figur": [2, 6, 251, 252], "figsiz": [2, 4, 5, 6, 7, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "titl": [2, 6, 78, 79], "imshow": [2, 6, 262, 324], "axi": [2, 6, 8, 251, 252, 253, 258, 269, 275, 282, 284, 288, 295, 303, 304, 307, 311, 319], "off": [2, 6], "And": 2, "associ": [2, 7, 44, 45, 255, 263, 269, 295, 303, 319, 325], "dataload": [2, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49], "batch_siz": [2, 8, 33, 38, 55, 56, 162, 176, 177, 179, 204, 205, 206, 207], "256": [2, 72, 161, 162, 176, 177, 203, 204, 205, 206], "train_load": 2, "shuffl": [2, 8, 33, 38], "drop_last": 2, "pin_memori": 2, "val_load": 2, "common": [2, 10, 13, 26, 32, 33, 38, 44, 45, 54, 65, 89, 90, 122, 156, 160, 253], "resnet": [2, 10, 90, 93, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 120], "18": [2, 4, 94, 104, 105, 109, 114, 115], "architectur": [2, 8, 10, 44, 45, 47, 48, 89, 90, 91, 92, 93, 94, 95, 97, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 160, 166, 167, 178, 179, 180, 198, 199, 200, 207, 209, 218], "f": [2, 6, 44, 45, 47, 48, 166, 178, 199, 200], "paper": [2, 47, 48, 92, 97], "g": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 93, 94, 108, 109, 253], "layer": [2, 44, 45, 47, 48, 91, 92, 93, 94, 95, 97, 108, 109, 110, 111, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 198, 199, 200, 201, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249], "mlp": [2, 44, 45, 47, 48, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "relu": [2, 47, 48, 101, 166, 178, 196, 197, 198, 199, 200, 201, 202], "activ": [2, 47, 48, 161, 162, 166, 176, 177, 178, 179, 199, 200, 203, 204, 205, 206, 207], "hidden": [2, 47, 48, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "note": [2, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 84, 91, 95, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 278], "up": [2, 18, 24, 47, 48, 165, 166, 178, 190, 199, 200, 258, 260, 268, 273, 291, 302, 315], "simclrv2": [2, 47, 48], "author": [2, 47, 48, 49], "mention": [2, 47, 48], "boost": [2, 47, 48], "why": [2, 5], "four": 2, "dimens": [2, 5, 47, 48, 163, 194, 208], "deeper": 2, "show": [2, 4, 5, 6, 7, 8, 63, 64, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "overfit": 2, "A": [2, 4, 5, 6, 7, 8, 27, 28, 29, 30, 31, 44, 45, 47, 48, 70, 88, 122, 151, 152, 160, 164, 191, 254], "observ": 2, "u": [2, 6, 47, 48, 151, 152, 166, 178, 198, 199, 200], "compar": [2, 47, 48], "neg": 2, "lead": [2, 33, 38], "smoother": 2, "loss": [2, 8, 10, 18, 24, 33, 38, 44, 45, 47, 48, 49, 55, 56, 120, 157, 158, 159], "gradient": [2, 33, 38, 44, 45, 47, 48], "case": [2, 33, 38, 44, 45, 47, 48, 49, 52, 53, 61, 62, 253], "experienc": 2, "good": 2, "result": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 61, 62, 63, 64, 77, 84, 227, 277], "hidden_dim": [2, 47, 48, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "128": [2, 91, 95, 161, 162, 176, 177, 203, 204, 205, 206], "encod": [2, 33, 38, 44, 45, 47, 48, 156, 160, 162, 166, 176, 177, 178, 179, 199, 200, 204, 205, 206, 207], "none": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 52, 53, 58, 59, 61, 62, 63, 64, 70, 87, 88, 93, 94, 106, 107, 108, 109, 124, 126, 127, 129, 132, 133, 135, 137, 150, 151, 152, 153, 154, 155, 157, 158, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 198, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 236, 247, 251, 252, 253, 266, 267, 276, 278, 295, 297, 298, 300, 301, 308, 309, 319, 322], "num_class": [2, 44, 45, 180, 181, 182, 183, 184, 185, 186, 187, 188, 218, 219, 220, 221, 222, 223, 224, 225, 226], "4": [2, 4, 5, 7, 8, 9, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 63, 64, 92, 93, 94, 97, 108, 109, 178, 189, 200, 230, 231, 232, 233, 236, 237, 238, 241, 242, 243, 244, 247, 248, 249, 258, 260, 263, 266, 267, 273, 276, 291, 300, 301, 308, 315, 321, 325, 327], "latent_s": [2, 44, 45, 47, 48], "fc": [2, 44, 45], "out_featur": 2, "ident": [2, 33, 38, 93, 94, 108, 109], "save_weights_onli": 2, "mode": [2, 11, 33, 38, 44, 45, 47, 48, 49, 196, 253], "max": [2, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232, 233, 243, 244], "monitor": [2, 33, 38], "val_acc_top5": 2, "logging_interv": 2, "epoch": [2, 8, 18, 24, 33, 38, 44, 45], "trainer_param": [2, 33, 38], "default_root_dir": 2, "acceler": [2, 33, 38, 44, 45], "max_epoch": [2, 33, 38, 44, 45, 47, 48], "lr": [2, 8, 44, 45, 47, 48], "5e": 2, "temperatur": [2, 44, 45, 47, 48, 55, 56, 164, 191], "07": 2, "weight_decai": [2, 8, 44, 45, 47, 48], "1e": [2, 8, 17, 23, 258, 263, 325], "random_st": [2, 33, 38, 44, 45, 47, 48], "42": [2, 4, 6, 8, 63, 64, 262, 263, 266, 275, 276, 295, 300, 307, 308, 319, 324, 325], "print": [2, 4, 5, 6, 8, 63, 64, 68, 72, 86, 165, 167, 179, 180, 190, 207, 209, 218, 274, 287, 290, 291, 292, 293, 306, 310, 314, 315, 316, 317], "found": [2, 5, 27, 28, 29, 30, 31, 33, 38, 87], "pretrain": [2, 47, 48], "weight_fil": [2, 70, 88], "fitted_": 2, "fit": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 87, 253], "deploi": [2, 44, 45], "downstream": [2, 44, 45, 47, 48], "task": [2, 44, 45, 47, 48, 58, 59, 93, 94, 108, 109], "see": [2, 27, 28, 29, 30, 31, 44, 45, 47, 48, 49, 55, 56, 84, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 129, 135, 151, 152, 253, 282, 284], "well": [2, 33, 38, 44, 45, 47, 48], "littl": [2, 44, 45], "verifi": [2, 44, 45, 87], "whether": [2, 18, 24, 33, 38, 44, 45, 70, 88], "represent": [2, 44, 45, 47, 48, 91, 95, 129, 135, 160, 164, 176, 177, 179, 191, 205, 206, 207, 253, 269, 295, 303, 319, 321], "featur": [2, 10, 17, 18, 23, 24, 44, 45, 47, 48, 92, 93, 94, 97, 108, 109, 149, 166, 178, 196, 197, 198, 199, 200, 201, 202, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253], "word": [2, 44, 45], "singl": [2, 27, 30, 33, 38, 44, 45, 47, 48, 326], "map": [2, 5, 6, 28, 31, 33, 38, 44, 45, 47, 48, 93, 94, 108, 109, 235, 236, 239, 246, 247, 251, 252, 260, 273, 294, 318], "predict": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 44, 45, 61, 62, 163, 167, 180, 194, 209, 218], "base": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 55, 56, 66, 67, 69, 70, 71, 72, 84, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 120, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 150, 151, 152, 153, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 258, 277, 278, 288, 289, 294, 311, 312, 318], "network": [2, 47, 48, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "chang": [2, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253], "dure": [2, 33, 38, 44, 45, 127, 133], "process": [2, 11, 33, 38, 44, 45, 165, 190], "h": [2, 47, 48, 159, 208], "necessari": 2, "further": [2, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "worri": 2, "too": [2, 253], "about": [2, 49, 295, 319], "veri": [2, 5, 44, 45], "few": 2, "henc": 2, "expect": [2, 8, 27, 28, 29, 30, 31, 49, 151, 152], "even": [2, 70, 88], "assum": [2, 44, 45, 124, 125, 137, 138, 258], "alreadi": [2, 70, 88], "been": [2, 33, 38, 44, 45, 47, 48], "vector": [2, 17, 23, 47, 48, 288, 311], "dynam": [2, 44, 45, 49, 51, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], "so": [2, 5, 44, 45, 93, 94, 108, 109], "here": [2, 5, 33, 38, 44, 45, 47, 48, 49, 282, 284], "within": [2, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "second": [2, 4, 5, 6, 7, 8, 55, 56, 61, 62], "did": [2, 5], "ani": [2, 33, 38, 44, 45, 47, 48, 60, 151, 152, 274, 306], "signific": [2, 33, 38], "gain": 2, "test": [2, 5, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38], "while": [2, 5, 33, 38, 44, 45, 47, 48, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "800": 2, "64": [2, 4, 33, 38, 63, 64, 92, 93, 94, 97, 106, 107, 108, 109, 161, 162, 163, 176, 177, 179, 192, 194, 203, 204, 205, 206, 207], "scale_transform": 2, "train_img_data": 2, "test_img_data": 2, "number": [2, 5, 15, 16, 17, 18, 21, 22, 23, 24, 33, 38, 44, 45, 61, 62, 63, 64, 66, 67, 91, 92, 93, 94, 95, 97, 108, 109, 124, 127, 133, 136, 137, 142, 143, 146, 150, 153, 154, 155, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 198, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240, 251, 252, 262, 266, 267, 276, 287, 290, 291, 292, 294, 300, 301, 308, 310, 314, 315, 316, 318, 324], "len": [2, 4, 5, 6, 8, 178, 179, 180, 200, 207, 218, 229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 268, 287, 292, 302, 310, 316], "froozen": 2, "e": [2, 6, 11, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 52, 61, 62, 92, 93, 94, 97, 108, 109, 253, 262, 324], "output": [2, 18, 24, 33, 38, 44, 45, 49, 52, 58, 59, 61, 62, 63, 64, 69, 71, 126, 127, 132, 133, 161, 163, 166, 178, 194, 196, 197, 198, 199, 200, 201, 202, 203, 208, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 277, 278], "new_model": 2, "sequenti": [2, 44, 45, 99, 100, 288, 311], "normal_": 2, "mean": [2, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 53, 63, 64, 163, 178, 194, 196, 200, 233, 244, 253, 275, 307], "std": [2, 253], "01": [2, 9, 327], "bia": [2, 229, 240], "zero_": 2, "requires_grad_": 2, "final": [2, 8, 91, 95, 178, 200], "evalu": [2, 6, 239], "everi": [2, 33, 38, 47, 48, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 265, 299], "earli": [2, 33, 38], "stop": [2, 33, 38, 288, 311], "low": [2, 142], "frequenc": 2, "ensur": [2, 59, 147], "despit": 2, "thei": [2, 5, 8, 69, 71], "smaller": [2, 17, 23], "20": [2, 4, 6, 7, 8, 124, 137], "50": [2, 4, 116, 117, 118, 119], "200": 2, "give": [2, 10, 33, 38], "intuit": 2, "transfer": 2, "recognit": 2, "like": [2, 15, 16, 17, 21, 22, 23, 33, 38, 44, 45, 47, 48, 49, 58, 59, 61, 62, 63, 64, 93, 94, 108, 109, 198, 253, 254], "classif": [2, 6, 8, 15, 17, 18, 21, 23, 24, 33, 38, 150, 153, 154, 155, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "test_load": 2, "val_acc": 2, "check_val_every_n_epoch": [2, 33, 38], "3": [2, 4, 5, 7, 8, 18, 24, 49, 63, 64, 69, 71, 84, 92, 93, 94, 97, 108, 109, 126, 127, 129, 132, 133, 135, 150, 151, 152, 153, 154, 155, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 189, 190, 199, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 280, 281, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 324, 325], "pred": [2, 8, 44, 45], "shape": [2, 5, 6, 8, 15, 16, 17, 21, 22, 23, 55, 56, 58, 59, 61, 62, 63, 64, 167, 178, 179, 180, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 274, 275, 290, 306, 307, 314], "acc": [2, 33, 38], "argmax": [2, 8], "float": [2, 4, 8, 17, 19, 23, 25, 33, 38, 44, 45, 47, 48, 55, 56, 59, 60, 61, 62, 63, 64, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 157, 158, 163, 194, 198, 251, 252, 256, 257, 258, 261, 263, 323, 325], "accuraci": [2, 8, 15, 17, 21, 23, 33, 38, 44, 45, 47, 48], "2f": 2, "_pretrained_filenam": 2, "path": [2, 27, 28, 30, 31, 49, 70, 88, 126, 127, 132, 133, 166, 178, 199, 200, 278, 279, 283, 285, 286, 288, 297, 298, 311], "join": 2, "isfil": 2, "save": [2, 49, 285, 286], "state_dict": 2, "one": [2, 5, 47, 48, 49, 58, 59, 63, 64, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 127, 133, 140, 148, 161, 164, 191, 192, 193, 195, 198, 203, 234, 235, 236, 245, 246, 247, 263, 325], "would": [2, 47, 48, 63, 64], "improv": [2, 93, 94, 108, 109], "classifi": [2, 15, 21, 34, 39], "60": [2, 4], "correctli": 2, "quit": 2, "impress": 2, "consid": [2, 5, 27, 28, 29, 30, 31, 44, 45, 127, 133, 151, 152, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240], "dimension": [2, 47, 48], "With": 2, "achiev": 2, "80": [2, 4, 63, 64], "increas": [2, 276, 308], "suggest": 2, "exponenti": 2, "could": [2, 5, 47, 48], "finetun": [2, 47, 48], "adapt": [2, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 127, 133, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "indic": [2, 33, 38, 61, 62, 124, 137, 196, 201, 229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 258, 266, 267, 268, 269, 275, 276, 288, 294, 300, 301, 302, 303, 307, 308, 311, 318, 320], "advantag": 2, "straightforward": 2, "It": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326], "clear": [2, 18, 24], "its": [2, 81, 82, 93, 94, 108, 109, 278, 288, 311], "count": 2, "1000": [2, 33, 38], "fair": 2, "ones": 2, "becaus": [2, 5, 47, 48, 253], "distribut": [2, 33, 38, 47, 48, 162, 179, 204, 207], "notic": 2, "ad": [2, 166, 178, 199, 200], "restrict": 2, "oper": [2, 33, 38, 44, 45, 47, 48, 198, 253], "125": 2, "1250": 2, "done": [2, 33, 38, 278], "recogn": 2, "object": [2, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 52, 66, 67, 69, 70, 71, 72, 84, 86, 88, 123, 136, 141, 142, 146, 157, 158, 251, 252, 253, 254, 277, 278], "check": [2, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 30, 33, 38, 49, 57, 58, 84, 85, 86, 87], "patch": [2, 47, 48, 127, 133, 151, 152, 163, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 289, 294, 296, 312, 318], "belong": [2, 58], "chosen": [2, 17, 23, 33, 38], "weaker": 2, "function": [2, 5, 6, 8, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 129, 131, 132, 133, 135, 136, 140, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 159, 160, 161, 162, 164, 166, 176, 177, 178, 191, 192, 193, 195, 198, 199, 200, 203, 204, 205, 206, 208, 227, 234, 235, 236, 239, 245, 246, 247, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "almost": [2, 6], "strongli": 2, "iter": [2, 17, 23, 33, 38, 44, 45, 47, 48, 208], "train_transform": 2, "sigma": [2, 4, 126, 127, 128, 132, 133, 134], "train_img_aug_data": 2, "2e": 2, "scratch": 2, "73": [2, 4], "7": [2, 4, 63, 64, 93, 94, 108, 109, 288, 311], "less": 2, "leverag": 2, "amount": 2, "generaliz": 2, "sole": [2, 33, 38], "par": 2, "tenth": 2, "experiment": [2, 49], "limit": 2, "recent": 2, "work": [2, 5, 27, 30, 49, 126, 127, 132, 133, 208, 253], "ting": [2, 164, 191], "chen": [2, 55, 56, 164, 191], "et": [2, 47, 48, 55, 56, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 163, 166, 178, 194, 199, 200], "al": [2, 47, 48, 55, 56, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 163, 166, 178, 194, 199, 200], "trend": 2, "imagenet": 2, "seem": [2, 5], "stronger": [2, 17, 23], "come": [2, 47, 48], "close": [2, 5], "approach": [2, 11], "combin": [2, 124, 137], "beyond": 2, "khosla": 2, "moreov": 2, "last": [2, 93, 94, 108, 109, 161, 203], "year": 2, "great": [2, 47, 48], "includ": [2, 10, 16, 19, 22, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 149, 151, 152], "distil": 2, "byol": 2, "redund": [2, 58], "reduct": [2, 33, 38], "barlow": 2, "twin": 2, "There": 2, "explor": 2, "domain": [2, 4], "step": [2, 8, 18, 24, 33, 38, 44, 45, 47, 48, 166, 178, 199, 200], "ahead": 2, "memori": [2, 4, 5, 6, 7, 8, 18, 24, 28, 31, 92, 97, 253, 278], "usag": [2, 4, 5, 6, 7, 8], "ipynb": [2, 4, 5, 6, 7, 8, 282, 284], "credit": [4, 5, 6, 7, 8], "grigi": [4, 6, 7, 8], "c": [4, 5, 7, 17, 23, 69, 71, 159, 265, 268, 288, 289, 299, 302, 311, 312], "ambrois": [4, 5], "numpi": [4, 5, 6, 8, 18, 24, 27, 28, 29, 30, 31, 57, 253, 256, 257, 261, 323], "np": [4, 5, 6, 8, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 259, 272, 275, 307], "surfifi": [4, 5, 6, 7, 8, 9, 10, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327], "min_depth_to_get_n_neighbor": [4, 10, 120, 255, 287, 310], "plot": [4, 5, 6, 7, 8, 10, 120, 251, 252, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "plot_trisurf": [4, 5, 6, 7, 8, 10, 120, 250, 251, 252, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 288, 289, 294, 295, 299, 300, 301, 302, 306, 307, 308, 311, 312, 318, 319, 324, 325], "interv": [4, 10, 120, 122, 136, 139, 142, 146], "vertic": [4, 5, 7, 124, 125, 126, 127, 129, 132, 133, 135, 137, 138, 150, 153, 154, 155, 163, 178, 189, 194, 200, 229, 230, 240, 241, 251, 252, 253, 259, 260, 262, 263, 265, 266, 267, 269, 272, 273, 274, 275, 276, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 324, 325], "triangl": [4, 5, 7, 126, 127, 129, 132, 133, 135, 178, 189, 200, 251, 252, 259, 260, 263, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 280, 281, 285, 286, 288, 289, 293, 294, 295, 296, 299, 300, 301, 302, 303, 306, 307, 308, 311, 312, 317, 318, 319, 320, 321, 325], "order": [4, 5, 6, 7, 8, 33, 38, 49, 63, 64, 126, 127, 132, 133, 151, 152, 161, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 203, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 254, 258, 259, 260, 262, 263, 265, 266, 267, 268, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 324, 325], "neigh": [4, 7, 126, 127, 132, 133, 234, 245, 268, 269, 288, 289, 295, 296, 302, 303, 311, 312, 319], "direct_neighbor": [4, 7, 229, 231, 232, 233, 237, 240, 242, 243, 244, 248, 268, 288, 294, 296, 302, 311, 318], "max_depth": 4, "ceil": 4, "displai": [4, 6, 7, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 49, 63, 64, 76, 83, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 264], "aug": 4, "add_axi": 4, "alpha": [4, 5, 16, 19, 22, 25, 251, 252, 256, 257, 260, 261, 273, 323], "arg": [4, 94, 109, 131, 145, 179, 207, 253], "kwarg": [4, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 48, 69, 71, 94, 96, 102, 103, 104, 105, 109, 110, 111, 114, 115, 116, 117, 118, 119, 131, 145, 179, 207, 253], "data": [4, 8, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 58, 59, 60, 61, 62, 66, 67, 70, 88, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 151, 152, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 253, 259, 262, 265, 266, 272, 275, 276, 278, 279, 282, 284, 295, 297, 298, 299, 300, 307, 308, 319, 324], "fig": [4, 5, 7, 251, 252, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "ax": [4, 5, 6, 7, 236, 247, 251, 252, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "subplot": [4, 5, 7, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "subplot_kw": [4, 5, 7, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "3d": [4, 5, 7, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 260, 265, 268, 271, 273, 274, 288, 289, 294, 299, 302, 305, 306, 311, 312, 318], "aspect": [4, 5, 7, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "auto": [4, 5, 7, 33, 38, 49, 53, 156, 160, 260, 265, 268, 273, 274, 288, 289, 294, 299, 302, 306, 311, 312, 318], "flatten": [4, 6, 163, 194, 239], "colorbar": [4, 7, 251, 252, 260, 265, 267, 268, 273, 274, 288, 289, 294, 299, 301, 302, 306, 311, 312, 318], "edgecolor": [4, 5, 251, 252, 260, 273], "white": [4, 128, 134], "linewidth": [4, 7, 251, 252], "red": [4, 7, 265, 268, 288, 289, 299, 302, 311, 312], "blue": [4, 5, 7, 260, 268, 273, 288, 289, 302, 311, 312], "green": [4, 5, 7, 260, 273], "_textur": 4, "tight_layout": 4, "arrai": [4, 5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 58, 59, 60, 61, 62, 63, 64, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 145, 147, 150, 151, 152, 153, 154, 155, 196, 201, 229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 258, 259, 260, 262, 263, 265, 266, 267, 269, 271, 272, 273, 274, 275, 276, 279, 280, 281, 285, 286, 288, 289, 293, 294, 295, 299, 300, 301, 303, 304, 305, 306, 307, 308, 311, 312, 317, 318, 319, 320, 321, 324, 325], "patch_siz": [4, 127, 133], "int": [4, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 30, 33, 38, 44, 45, 47, 48, 49, 63, 64, 66, 67, 91, 92, 93, 94, 95, 97, 105, 108, 109, 110, 111, 115, 117, 119, 124, 125, 126, 127, 132, 133, 136, 137, 138, 139, 146, 150, 151, 152, 153, 154, 155, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 258, 259, 262, 266, 267, 268, 271, 272, 274, 276, 287, 288, 289, 290, 291, 292, 294, 300, 301, 302, 305, 306, 308, 310, 311, 312, 314, 315, 316, 318, 320, 324], "n_patch": [4, 127, 133, 163, 194], "uniform": [4, 61, 62, 63, 64], "phi": [4, 129, 135], "180": 4, "theta": [4, 129, 135], "psi": [4, 129, 135], "controlateral_textur": 4, "prob": [4, 124, 125, 137, 138, 139], "n_vertic": [4, 6, 8, 124, 125, 137, 138, 139, 154, 155, 163, 176, 177, 179, 194, 205, 206, 207, 253, 266, 276, 287, 290, 291, 292, 295, 300, 308, 310, 314, 315, 316, 319], "controlateral_data": [4, 125, 138], "group_textur": 4, "group_data": [4, 124, 137], "n_sampl": [4, 6, 8, 15, 16, 17, 21, 22, 23, 58, 59, 61, 62, 63, 64, 124, 137, 150, 153, 154, 155, 163, 194, 262, 263, 265, 266, 275, 276, 295, 299, 300, 307, 308, 319, 324, 325], "neigh_ind": [4, 124, 137], "groupbi": [4, 124, 137], "n_neighbor": [4, 15, 16, 21, 22, 124, 137], "n_compon": [4, 124, 137], "30": [4, 8, 124, 137], "58": 4, "74": [4, 63, 64], "49": 4, "62": 4, "47": 4, "15": [4, 8, 63, 64], "99": [4, 8], "92": [4, 63, 64], "54": 4, "65": [4, 6, 63, 64], "31": 4, "14": 4, "78": 4, "90": [4, 6, 9, 63, 64, 327], "76": 4, "93": 4, "21": [4, 63, 64], "70": 4, "22": [4, 9, 327], "46": 4, "89": 4, "25": [4, 8, 63, 64], "82": 4, "11": [4, 5], "59": 4, "56": 4, "12": [4, 5, 92, 97, 288, 311], "19": 4, "13": [4, 7], "23": 4, "28": 4, "51": 4, "79": 4, "16": [4, 33, 38, 92, 97, 235, 236, 246, 247], "17": 4, "77": 4, "88": 4, "52": 4, "95": [4, 63, 64], "48": 4, "72": 4, "66": 4, "24": [4, 5, 92, 97], "69": [4, 5, 9, 327], "86": 4, "26": [4, 63, 64], "27": [4, 63, 64], "29": [4, 5], "83": 4, "63": 4, "36": 4, "32": [4, 33, 38, 92, 97, 166, 178, 179, 198, 199, 200, 207], "33": 4, "34": [4, 63, 64], "39": 4, "35": [4, 8], "37": 4, "38": 4, "45": [4, 295, 319], "71": 4, "40": [4, 6, 7, 8, 150, 153, 154, 155], "41": 4, "81": 4, "43": 4, "44": [4, 63, 64], "87": 4, "98": 4, "97": 4, "53": 4, "68": [4, 63, 64], "55": [4, 63, 64], "57": 4, "61": [4, 63, 64], "94": 4, "67": 4, "75": [4, 63, 64], "84": 4, "85": [4, 63, 64], "91": 4, "aug1": 4, "aug2": 4, "aug3": 4, "tran": 4, "regist": [4, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 123, 130, 141, 144, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "probabl": [4, 123, 124, 125, 137, 138, 139, 141, 143, 254], "script": [4, 5, 6, 7, 8], "minut": [4, 5, 6, 7, 8], "320": [4, 9, 327], "plot_augment": [4, 9, 327], "math": 5, "warn": [5, 33, 38, 49, 80], "scipi": [5, 253, 260, 273], "spatial": [5, 93, 94, 108, 109, 260, 273], "mpl_toolkit": 5, "mplot3d": 5, "axes3d": [5, 251, 252], "ico2ico": [5, 10, 120, 255, 260, 263, 273, 325], "build": [5, 7, 49, 63, 64, 126, 127, 132, 133, 136, 146, 165, 190, 253, 288, 289, 294, 296, 297, 298, 309, 311, 312, 318, 321], "refer": [5, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "vertices_norm": 5, "triangles_norm": 5, "standard_ico": [5, 6, 8, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 260, 263, 273, 274, 294, 306, 318, 325], "642": [5, 6, 8], "1280": [5, 6, 8], "Then": 5, "fetch": [5, 10, 49, 149, 297, 298], "freesurf": [5, 165, 190, 280, 285, 294, 297, 318], "try": [5, 15, 16, 19, 21, 22, 25, 253], "find": [5, 15, 16, 17, 19, 21, 22, 23, 25, 49, 60, 258, 260, 265, 268, 273, 275, 299, 302, 307, 309], "optim": [5, 8, 17, 23, 33, 38, 44, 45, 47, 48, 49], "rotat": [5, 129, 135, 260, 269, 273, 295, 303, 319], "modul": [5, 10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 49, 51, 55, 56, 70, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 110, 111, 120, 121, 122, 126, 132, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "rmse": [5, 63, 64], "align_vector": 5, "54571598073452": 5, "okai": 5, "doe": [5, 18, 24, 47, 48, 57, 253], "suppos": 5, "equal": [5, 61, 62], "zero": [5, 6, 47, 48, 61, 62, 93, 94, 108, 109, 127, 133, 167, 178, 179, 180, 200, 201, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 259, 272], "issu": [5, 52], "matric": [5, 253], "That": 5, "previou": 5, "algorithm": [5, 17, 23], "properli": 5, "correspond": [5, 15, 16, 18, 19, 21, 22, 24, 25, 58, 59, 124, 125, 137, 138, 258, 263, 290, 314, 325], "row": [5, 126, 127, 132, 133, 288, 311], "matrix": [5, 15, 16, 17, 21, 22, 23, 124, 137, 253], "52573111": 5, "85065081": 5, "96386126": 5, "2664047": 5, "91298249": 5, "39960705": 5, "08232358": 5, "8944": 5, "4472": 5, "2764": 5, "8507": 5, "1815": 5, "296": 5, "9378": 5, "0272": 5, "3462": 5, "0692": 5, "213": 5, "9746": 5, "sufac": [5, 10, 228, 255], "togeth": [5, 254], "place": [5, 53], "comput": [5, 18, 19, 24, 25, 33, 38, 44, 45, 47, 48, 55, 56, 60, 63, 64, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 159, 164, 191, 192, 193, 195, 198, 208, 234, 235, 236, 245, 246, 247, 253, 269, 278, 295, 303, 304, 319], "small": [5, 47, 48, 91, 95], "subset": [5, 151, 152], "point": [5, 7, 59, 60, 63, 64, 265, 268, 271, 275, 288, 289, 294, 299, 302, 304, 305, 307, 309, 311, 312, 318], "both": [5, 33, 38, 47, 48, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 164, 191, 192, 193, 195, 236, 247, 288, 311], "absolut": [5, 16, 19, 22, 25, 49, 52, 63, 64], "valu": [5, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 58, 59, 63, 64, 69, 71, 84, 86, 126, 127, 132, 133, 151, 152, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 251, 252, 256, 257, 258, 275, 288, 307, 311], "sign": [5, 260, 273], "vertices_of_interest_norm": 5, "search": [5, 268, 288, 302, 311], "coords_of_interest": 5, "idx_of_interest": 5, "ab": [5, 93, 94, 108, 109], "sum": [5, 8], "vertices_of_interest": 5, "fs_row_idx": 5, "break": 5, "possibl": [5, 33, 38, 44, 45, 47, 48, 70, 88], "depend": 5, "various": 5, "until": 5, "itertool": 5, "n_permut": 5, "factori": 5, "best_rms": 5, "best_rot": 5, "catch_warn": 5, "simplefilt": 5, "ignor": [5, 33, 38, 63, 64, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 253], "categori": 5, "userwarn": [5, 27, 28, 29, 30, 31], "format": [5, 8, 14, 20, 63, 64, 264, 280, 281, 285, 286], "as_matrix": 5, "52575203": 5, "85063788": 5, "971395685383565e": 5, "05": [5, 9, 63, 64, 327], "simpli": 5, "solv": 5, "outlin": 5, "proper": [5, 27, 28, 30, 31], "anoth": 5, "half": 5, "clearli": 5, "appear": [5, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "opt": 5, "hostedtoolcach": 5, "x64": 5, "lib": 5, "python3": 5, "site": 5, "coord": [5, 10, 120, 257, 258, 259, 260, 261, 262, 263], "246": 5, "closest": [5, 269, 303], "9190925817849288": 5, "527": [5, 9, 327], "plot_match_icosahedron": [5, 9, 327], "convert": [6, 59, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 199, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 259, 262, 272, 324], "onto": [6, 163, 194, 262, 263, 324, 325], "spheric": [6, 9, 156, 157, 158, 160, 165, 166, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 199, 200, 201, 202, 207, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 235, 236, 239, 246, 247, 255, 256, 257, 259, 261, 262, 271, 272, 288, 305, 311, 323, 324, 327], "evenli": [6, 262, 324], "resampl": [6, 262, 324], "respect": [6, 239, 262, 324], "sin": [6, 262, 324], "elev": [6, 157, 158, 161, 162, 167, 179, 180, 203, 204, 207, 209, 218, 239, 256, 257, 261, 262, 323, 324], "azimuth": [6, 157, 158, 161, 162, 167, 179, 180, 203, 204, 207, 209, 218, 239, 256, 257, 261, 262, 323, 324], "vice": 6, "versa": 6, "dataset": [6, 10, 15, 16, 21, 22, 27, 28, 29, 30, 31, 49, 120, 150, 151, 152, 153, 154, 155, 250, 262, 263, 266, 275, 276, 295, 300, 307, 308, 319, 324, 325], "ico_ord": [6, 8, 126, 127, 132, 133, 151, 152], "n_class": [6, 8, 150, 153, 154, 155, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 262, 263, 266, 275, 276, 295, 300, 307, 308, 319, 324, 325], "ico_vertic": [6, 8, 150, 153, 154, 155], "ico_triangl": [6, 8], "_": [6, 47, 48, 232, 233, 243, 244, 254, 282, 284], "make_classif": [6, 8, 10, 120, 149, 154, 155, 262, 263, 266, 275, 276, 295, 300, 307, 308, 319, 324, 325], "seed": [6, 8, 44, 45, 47, 48, 150, 153, 154, 155, 262, 263, 266, 275, 276, 295, 300, 307, 308, 319, 324, 325], "proj_textur": 6, "text2grid": [6, 10, 120, 255, 256, 257, 259, 261, 262, 272, 323, 324], "proj": [6, 259, 262, 272, 324], "lower": [6, 266, 297, 300], "nearest": [6, 15, 16, 21, 22, 124, 137, 178, 200, 201, 259, 262, 265, 272, 275, 299, 307, 324], "192": [6, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 199, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 259, 262, 272, 324], "text": [6, 7, 47, 48, 63, 64, 68, 76, 81, 82, 83], "grid2text": [6, 10, 120, 255, 256, 257, 259, 261, 262, 272, 323, 324], "is_label": [6, 8, 251, 252, 259, 263, 266, 272, 275, 276, 295, 300, 307, 308, 319, 325], "enabl": [6, 33, 38, 44, 45, 47, 48, 49, 69, 71], "scatter_dens": 6, "y": [6, 8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 154, 155, 253, 256, 257, 259, 261, 262, 263, 266, 272, 275, 276, 295, 300, 307, 308, 319, 323, 324, 325], "labelx": 6, "labe": 6, "scatter": [6, 7, 265, 268, 288, 289, 294, 299, 302, 311, 312, 318], "densiti": [6, 271, 289, 305, 312], "left": [6, 47, 48, 157, 158, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 279], "width": [6, 93, 94, 108, 109, 251, 252], "bottom": 6, "height": [6, 208], "005": 6, "rect_scatt": 6, "rect_histx": 6, "rect_histi": 6, "ax_scatt": 6, "tick_param": 6, "direct": [6, 47, 48, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240, 262, 288, 311, 324], "top": [6, 15, 16, 17, 19, 21, 22, 23, 25, 47, 48], "right": [6, 47, 48, 157, 158, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 279], "set_xlabel": 6, "set_ylabel": 6, "ax_histx": 6, "ax_histi": 6, "bin": 6, "hist": 6, "orient": 6, "set_xlim": 6, "get_xlim": 6, "set_ylim": 6, "get_ylim": 6, "radiu": [6, 256, 257, 261, 323], "cart2sph": [6, 10, 120, 255, 256, 257, 261, 323], "sin_elev": 6, "circularli": [6, 239], "continu": [6, 58, 59, 239], "circular": [6, 235, 236, 239, 246, 247], "pad": [6, 113, 178, 200, 201, 230, 235, 236, 239, 241, 246, 247], "boundari": [6, 239], "expand_dim": 6, "astyp": 6, "float32": 6, "from_numpi": 6, "pad_textur": 6, "circular_pad": [6, 10, 120, 228, 239], "padd": 6, "conv": [6, 93, 94, 101, 108, 109, 166, 178, 196, 197, 198, 199, 200, 201, 202, 229, 240], "conv2d": [6, 208], "in_channel": [6, 8, 91, 92, 93, 94, 95, 97, 108, 109, 166, 178, 198, 199, 200], "out_channel": [6, 8, 166, 178, 198, 199, 200], "stride": [6, 93, 94, 106, 107, 108, 109, 112, 113, 235, 236, 246, 247], "conv_textur": 6, "194": [6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 209, 210, 211, 212, 213, 214, 215, 216, 217, 235, 246], "712": [6, 9, 327], "plot_project_textur": [6, 9, 327], "get_rectangular_project": [7, 10, 120, 255, 271, 305], "depth": [7, 8, 94, 105, 109, 111, 115, 117, 119, 163, 166, 178, 194, 195, 198, 199, 200, 229, 231, 232, 233, 237, 240, 242, 243, 244, 248, 268, 287, 288, 291, 302, 310, 311, 315], "vidx": 7, "cnt": [7, 265, 268, 288, 289, 294, 299, 302, 311, 312, 318], "enumer": [7, 8, 265, 268, 288, 289, 294, 299, 302, 311, 312, 318], "marker": [7, 265, 268, 288, 289, 294, 299, 302, 311, 312, 318], "str": [7, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 50, 52, 58, 63, 64, 70, 85, 87, 88, 110, 111, 124, 126, 127, 129, 132, 133, 135, 137, 151, 152, 161, 162, 163, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 200, 201, 203, 204, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 244, 253, 264, 269, 278, 279, 280, 281, 283, 285, 286, 295, 297, 298, 303, 319, 322], "3x3": [7, 93, 94, 108, 109, 113, 166, 178, 199, 200], "rectangular": [7, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 271, 289, 305, 312], "sphere": [7, 196, 201, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 271, 289, 293, 304, 305, 309, 312, 313, 317], "zoom": [7, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 245, 268, 271, 289, 302, 305, 312], "orang": 7, "purpl": 7, "brown": 7, "pink": 7, "grai": 7, "oliv": 7, "cyan": 7, "yellow": 7, "tan": 7, "salmon": 7, "violet": 7, "steelblu": 7, "lime": 7, "navi": 7, "node": [7, 33, 38, 127, 133, 229, 240, 268, 271, 302, 305, 321], "node_rec_neigh": 7, "node_tplane_neigh": 7, "248": [7, 9, 327], "196": [7, 9, 327], "plot_spherical_neighbor": [7, 9, 327], "sphericalunet": [8, 10, 120, 160, 166, 178, 198, 199, 200], "genrat": 8, "n_epoch": 8, "surfac": [8, 10, 120, 121, 122, 160, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 194, 199, 200, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 251, 252, 259, 262, 272, 279, 280, 281, 282, 285, 286, 288, 311, 324, 326], "crossentropi": 8, "sgd": 8, "obviou": 8, "classificationdataset": [8, 10, 120, 149, 150, 153], "in_ord": [8, 178, 200], "start_filt": [8, 166, 178, 199, 200], "conv_mod": [8, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "dine": [8, 126, 127, 132, 133, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240, 288, 311], "dine_s": [8, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "up_mod": [8, 178, 200, 201], "transpos": [8, 166, 178, 199, 200, 201, 231, 236, 237, 242, 247, 248], "loss_fn": 8, "crossentropyloss": 8, "momentum": 8, "n_batch": 8, "zero_grad": 8, "backward": [8, 58, 59], "current": [8, 33, 38, 44, 45, 47, 48, 50, 51, 53], "item": [8, 278], "7f": 8, "5d": 8, "eval": [8, 33, 38, 44, 45, 47, 48], "test_loss": 8, "correct": [8, 58, 59, 63, 64], "y_pred": [8, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58, 59, 61, 62, 63, 64], "no_grad": 8, "logit": [8, 55, 56], "softmax": [8, 47, 48], "type": [8, 14, 20, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 50, 58, 59, 60, 93, 94, 108, 109, 129, 135, 136, 146, 178, 200, 201, 233, 244, 269, 288, 295, 303, 311, 319], "append": [8, 18, 24, 33, 38], "concaten": [8, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "error": [8, 16, 19, 22, 25, 33, 38, 44, 45, 63, 64, 84, 87, 253, 277], "n": [8, 15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 70, 88, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 145, 150, 153, 154, 155, 159, 163, 194, 229, 231, 234, 240, 242, 245, 251, 252, 258, 259, 260, 262, 263, 267, 268, 269, 272, 273, 274, 280, 281, 285, 286, 288, 289, 293, 295, 301, 302, 303, 306, 311, 312, 317, 319, 320, 321, 324, 325], "1f": 8, "avg": 8, "8f": 8, "107616": 8, "945741": 8, "796049": 8, "686276": 8, "609184": 8, "511367": 8, "415661": 8, "325600": 8, "003304": 8, "003954": 8, "005009": 8, "005578": 8, "005240": 8, "004089": 8, "002547": 8, "001383": 8, "000198": 8, "000137": 8, "000113": 8, "000099": 8, "000087": 8, "000077": 8, "000068": 8, "000061": 8, "000052": 8, "000108": 8, "000184": 8, "000224": 8, "000183": 8, "000106": 8, "000050": 8, "000022": 8, "000010": 8, "corresspond": 8, "exactli": 8, "ground": [8, 58, 59, 63, 64], "truth": [8, 58, 59, 63, 64], "216": [8, 9, 327], "295": 8, "plot_unet_segment": [8, 9, 327], "024": [9, 327], "294": [9, 327], "02": [9, 327], "pleas": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "detail": [10, 15, 17, 21, 23, 55, 56, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "raw": [10, 279, 282, 284], "mai": [10, 33, 38, 253], "enough": 10, "guidelin": 10, "deep": [10, 12, 47, 48, 326], "neuroimag": [10, 12, 27, 28, 29, 30, 31, 151, 152, 179, 207], "metric": [10, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 58, 59, 60, 61, 62, 63, 64, 120, 124, 137], "variou": [10, 68, 208], "help": [10, 33, 38, 68], "develop": [10, 11, 68], "volum": [10, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 279, 284, 326], "definit": [10, 49, 89, 90, 156, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 275, 307], "backbon": [10, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 164, 191], "link": 10, "plugin": 10, "helper": [10, 121], "integr": [10, 60, 121, 198], "pytorch": [10, 33, 38, 44, 45, 47, 48, 121, 161, 162, 176, 177, 203, 204, 205, 206, 264, 326], "artifici": [10, 149], "dedic": [10, 228], "content": [10, 27, 30], "fetch_experi": [10, 12, 49, 120], "filter_config": [10, 12, 50, 120], "get_env": [10, 12, 51, 120], "load_interfac": [10, 12, 52, 120], "update_param": [10, 12, 53, 120], "batchtypingcallback": [10, 13, 14, 20, 33, 38, 120], "kneighborsclassifiercvcallback": [10, 13, 15, 21, 120], "kneighborsregressorcvcallback": [10, 13, 16, 22, 120], "logisticregressioncvcallback": [10, 13, 17, 23, 120], "modelprob": [10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 120], "ridgecvcallback": [10, 13, 19, 25, 120], "model_prob": [10, 21, 22, 23, 24, 25, 120], "check_typ": [10, 20, 120], "baseimagedataset": [10, 26, 27, 30, 120], "basenumpydataset": [10, 26, 28, 31, 120], "basedataset": [10, 26, 27, 28, 29, 30, 31, 120], "baseestim": [10, 18, 24, 32, 33, 38, 44, 45, 47, 48, 120], "classifiermixin": [10, 32, 34, 39, 44, 45, 120], "clustermixin": [10, 32, 35, 40, 120], "regressormixin": [10, 32, 36, 41, 120], "transformermixin": [10, 18, 24, 32, 37, 42, 47, 48, 120], "logistic_regress": [10, 45, 120], "infonc": [10, 44, 45, 47, 48, 55, 56, 120], "pearson_r": [10, 57, 61, 62, 120], "regression_report": [10, 57, 63, 64, 120], "_regress": [10, 58, 59, 60, 120], "_check_reg_target": [10, 57, 58, 59, 120], "_check_reg_targets_with_floating_dtyp": [10, 57, 58, 59, 120], "_find_matching_floating_dtyp": [10, 57, 58, 59, 60, 120], "regress": [10, 16, 17, 18, 19, 22, 23, 24, 25, 33, 36, 38, 41, 44, 45, 58, 59, 62, 63, 64, 120], "bunch": [10, 49, 69, 71, 120], "print_multicolor": [10, 68, 76, 83, 120], "attr": [10, 68, 73, 85, 120], "fg": [10, 68, 74, 120], "hex": [10, 68, 75, 120], "print_result": [10, 68, 77, 120], "print_subtitl": [10, 68, 78, 120], "print_titl": [10, 68, 79, 120], "print_warn": [10, 68, 80, 120], "random_styl": [10, 68, 81, 120], "styliz": [10, 68, 82, 120], "_availableifdescriptor": [10, 68, 84, 120], "_estimator_i": [10, 68, 85, 120], "available_if": [10, 68, 86, 120], "check_is_fit": [10, 68, 87, 120], "alexnet": [10, 90, 91, 95, 120], "densenet": [10, 90, 92, 96, 97, 103, 120], "resnettrunc": [10, 90, 94, 109, 120], "densenet121": [10, 90, 96, 103, 120], "resnet18_trunc": [10, 90, 105, 115, 120], "resnet50": [10, 90, 93, 94, 108, 109, 116, 118, 120], "resnet50_trunc": [10, 90, 117, 119, 120], "densenet3d": [10, 97, 98, 99, 100, 101, 102, 103, 120], "_denseblock": [10, 90, 98, 120], "_denselay": [10, 90, 99, 120], "_transit": [10, 90, 100, 120], "_bn_function_factori": [10, 90, 101, 120], "_densenet": [10, 90, 102, 120], "alexnet3d": [10, 95, 120], "resnet3d": [10, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120], "basicblock": [10, 90, 93, 94, 106, 108, 109, 120], "bottleneck": [10, 90, 92, 93, 94, 97, 107, 108, 109, 120], "_resnet": [10, 90, 110, 120], "_resnet_trunc": [10, 90, 111, 120], "conv1x1": [10, 90, 112, 120], "conv3x3": [10, 90, 113, 120], "preprocess": [10, 120, 253], "standardscal": [10, 120, 121, 253], "randomcompos": [10, 120, 121, 254], "basetransform": [10, 120, 122, 123, 130, 131, 141, 144, 145], "groupmixup": [10, 120, 122, 124, 137], "hemimixup": [10, 120, 122, 125, 138], "surfblur": [10, 120, 122, 126, 132], "surfcutout": [10, 120, 122, 127, 133], "surfnois": [10, 120, 122, 128, 134], "surfrot": [10, 120, 122, 129, 135], "apply_chained_transform": [10, 120, 122, 131, 145], "multichannel_augment": [10, 120, 122, 140, 148], "mixup": [10, 120, 137, 138, 139], "mixupaugment": [10, 120, 122, 124, 125, 137, 138, 139], "randomaugment": [10, 120, 122, 123, 126, 127, 128, 129, 132, 133, 134, 135, 139, 140, 141, 142, 148], "listifi": [10, 120, 122, 147], "genericsurfdataset": [10, 120, 149, 151, 152], "_samples_gener": [10, 120, 153, 154], "_gener": [10, 120, 152], "sphericalvaeloss": [10, 120, 156, 157, 158], "vae": [10, 120, 157, 158, 159, 179, 203, 204, 205, 206, 207, 208], "log_likelihood": [10, 120, 156, 159], "hemifusiondecod": [10, 120, 160, 161, 203], "hemifusionencod": [10, 120, 160, 162, 204], "sit": [10, 120, 163, 192, 193, 194, 195], "sphericalbas": [10, 120, 160, 165, 176, 177, 178, 180, 190, 200, 205, 206, 218], "sphericalgunet": [10, 120, 160, 166, 178, 198, 199, 200], "sphericalgvgg": [10, 120, 160, 167, 180, 209, 218], "sphericalgvgg11": [10, 120, 160, 167, 168, 209, 210], "sphericalgvgg11bn": [10, 120, 160, 169, 211], "sphericalgvgg13": [10, 120, 160, 170, 212], "sphericalgvgg13bn": [10, 120, 160, 171, 213], "sphericalgvgg16": [10, 120, 160, 172, 214], "sphericalgvgg16bn": [10, 120, 160, 173, 215], "sphericalgvgg19": [10, 120, 160, 174, 216], "sphericalgvgg19bn": [10, 120, 160, 175, 217], "sphericalhemifusiondecod": [10, 120, 160, 176, 205], "sphericalhemifusionencod": [10, 120, 160, 177, 206], "sphericalva": [10, 120, 160, 179, 207], "sphericalvgg": [10, 120, 160, 167, 180, 209, 218], "sphericalvgg11": [10, 120, 160, 180, 181, 218, 219], "sphericalvgg11bn": [10, 120, 160, 182, 220], "sphericalvgg13": [10, 120, 160, 183, 221], "sphericalvgg13bn": [10, 120, 160, 184, 222], "sphericalvgg16": [10, 120, 160, 185, 223], "sphericalvgg16bn": [10, 120, 160, 186, 224], "sphericalvgg19": [10, 120, 160, 187, 225], "sphericalvgg19bn": [10, 120, 160, 188, 226], "ico": [10, 120, 126, 127, 132, 133, 151, 152, 160, 165, 189, 190, 229, 240], "attent": [10, 120, 160, 163, 192, 194], "feedforward": [10, 120, 160, 193], "compute_output_dim": [10, 120, 160, 208], "vgg": [10, 120, 167, 180, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], "class_factori": [10, 120, 160, 227], "downblock": [10, 120, 160, 196], "downgblock": [10, 120, 160, 197], "graphicalunet": [10, 120, 160, 198], "upblock": [10, 120, 160, 201], "upgblock": [10, 120, 160, 202], "icodineconv": [10, 120, 126, 132, 228, 229, 234, 235, 240, 245, 246], "icofixindexupsampl": [10, 120, 228, 230, 231, 232, 236, 237, 238, 241, 242, 243, 247, 248, 249], "icogenericupconv": [10, 120, 228, 230, 231, 232, 236, 237, 238, 241, 242, 243, 247, 248, 249], "icomaxindexupsampl": [10, 120, 228, 230, 231, 232, 236, 237, 238, 241, 242, 243, 247, 248, 249], "icopool": [10, 120, 228, 232, 233, 243, 244], "icorepaconv": [10, 120, 228, 229, 234, 235, 240, 245, 246], "icospmaconv": [10, 120, 208, 228, 229, 234, 235, 240, 245, 246], "icospmaconvtranspos": [10, 120, 228, 230, 231, 232, 236, 237, 238, 241, 242, 243, 247, 248, 249], "icoupconv": [10, 120, 228, 230, 231, 232, 237, 238, 241, 242, 243, 248, 249], "icoupsampl": [10, 120, 228, 230, 231, 232, 236, 237, 238, 241, 242, 243, 247, 248, 249], "debug_msg": [10, 120, 255, 264], "downsampl": [10, 106, 107, 120, 151, 152, 165, 190, 196, 197, 201, 231, 232, 233, 237, 242, 243, 244, 248, 255, 265, 266, 267, 275, 276, 297, 299, 300, 301, 307, 308], "downsample_data": [10, 120, 255, 265, 266, 267, 275, 276, 299, 300, 301, 307, 308], "downsample_ico": [10, 120, 255, 265, 266, 267, 275, 276, 299, 300, 301, 307, 308], "find_neighbor": [10, 120, 255, 268, 302], "find_rotation_interpol_coef": [10, 120, 255, 269, 293, 303, 317], "get_logg": [10, 120, 255, 270], "interpol": [10, 120, 129, 135, 178, 200, 201, 230, 238, 241, 249, 251, 252, 255, 259, 262, 265, 266, 267, 269, 272, 275, 276, 293, 295, 299, 300, 301, 303, 307, 308, 317, 319, 324], "interpolate_data": [10, 120, 255, 265, 266, 267, 275, 276, 299, 300, 301, 307, 308], "neighbors_rec": [10, 120, 234, 245, 255, 268, 288, 289, 302, 311, 312], "number_of_ico_vertic": [10, 120, 255, 290, 292, 314, 316], "number_of_neighbor": [10, 120, 255, 287, 291, 310, 315], "order_of_ico_from_vertic": [10, 120, 255, 290, 292, 314, 316], "order_triangl": [10, 120, 255, 293, 317], "patch_tri": [10, 120, 255, 294, 296, 318], "rotate_data": [10, 120, 129, 135, 255, 269, 295, 303, 319], "setup_log": [10, 120, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 322], "sph2cart": [10, 120, 255, 256, 257, 261, 323], "text2ico": [10, 120, 255, 260, 263, 273, 325], "hideprint": [10, 120, 255, 277], "compute_and_stor": [10, 120, 255, 278], "decompose_cifti": [10, 120, 255, 279], "read_freesurf": [10, 120, 255, 280], "read_gifti": [10, 120, 255, 281], "surf_data_from_cifti": [10, 120, 255, 282], "ungzip": [10, 120, 255, 283], "volume_from_cifti": [10, 120, 255, 284], "write_freesurf": [10, 120, 255, 285], "write_gifti": [10, 120, 255, 286], "find_corresponding_ord": [10, 120, 255, 258], "_patch_tri_it": [10, 120, 255, 296], "build_freesurfer_ico": [10, 120, 255, 297], "build_fslr_ref": [10, 120, 255, 298], "get_angle_with_xaxi": [10, 120, 255, 304], "middle_point": [10, 120, 255, 309], "triangles_to_edg": [10, 120, 255, 320], "vertex_adjacency_graph": [10, 120, 255, 321], "walk": 11, "intal": 11, "offici": [11, 60], "releas": 11, "best": [11, 15, 16, 17, 19, 21, 22, 23, 25, 49, 260, 273], "user": [11, 15, 17, 21, 23, 33, 38, 50, 166, 178, 199, 200, 253, 295, 319], "who": 11, "latest": [11, 57, 60], "contribut": 11, "without": [11, 283], "privileg": 11, "pip": 11, "git": 11, "repositori": [11, 70, 88], "github": [11, 160, 282, 284], "com": [11, 160], "deepinsight": 11, "page": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "document": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "explain": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "signatur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "big": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "pictur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "rais": [14, 18, 20, 24, 27, 28, 29, 30, 31, 84, 86, 87, 253], "typeerror": [14, 20, 87], "annot": [14, 20], "traiterror": [14, 20], "incorrect": [14, 20], "notimplementederror": [14, 20], "handl": [14, 20, 70, 88], "on_predict_batch_start": [14, 20], "trainer": [14, 18, 20, 24, 33, 38, 44, 45, 47, 48], "pl_modul": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "batch_idx": [14, 20, 33, 38, 44, 45, 47, 48], "dataloader_idx": [14, 20, 33, 38, 44, 45, 47, 48], "begin": [14, 18, 20, 24], "on_test_batch_start": [14, 20], "on_train_batch_start": [14, 20], "train": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 66, 67, 122, 151, 152], "on_validation_batch_start": [14, 20], "train_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38], "test_dataload": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38], "probe_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "tupl": [15, 16, 18, 19, 21, 22, 24, 25, 44, 45, 47, 48, 49, 50, 70, 88, 92, 93, 97, 108, 110, 111, 142, 143, 147, 189, 235, 236, 239, 246, 247], "cv": [15, 16, 17, 19, 21, 22, 23, 25, 49, 53], "n_job": [15, 16, 17, 21, 22, 23, 294, 318], "score": [15, 16, 17, 19, 21, 22, 23, 25, 61, 62, 63, 64], "balanced_accuraci": [15, 17, 21, 23], "knn": [15, 16, 18, 21, 22, 24], "embed": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 55, 56, 91, 92, 93, 94, 95, 97, 108, 109, 163, 194], "concret": [15, 16, 17, 19, 21, 22, 23, 25], "emb": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "fold": [15, 16, 17, 19, 21, 22, 23, 25], "log": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 44, 45, 47, 48, 157, 158, 159, 163, 165, 166, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 198, 199, 200, 207, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 270, 322], "main": [15, 16, 17, 19, 21, 22, 23, 25, 63, 64], "averag": [15, 16, 17, 19, 21, 22, 23, 25, 61, 62, 63, 64], "across": [15, 17, 21, 23, 33, 38, 63, 64, 124, 125, 137, 138, 163, 194], "support": [15, 17, 21, 23, 33, 38, 44, 45, 47, 48], "unweight": [15, 17, 21, 23], "precis": [15, 17, 21, 23, 33, 38, 60], "recal": [15, 17, 21, 23], "f1": [15, 17, 21, 23], "guid": [15, 17, 21, 23, 253], "report": [15, 17, 21, 23, 63, 64], "yield": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "form": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 49, 70, 88, 124, 137], "probe": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 49], "default": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 52, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 87, 88, 91, 92, 93, 94, 95, 97, 108, 109, 123, 124, 126, 127, 129, 132, 133, 135, 136, 137, 140, 141, 146, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 233, 235, 236, 240, 244, 246, 247, 251, 252, 253, 258, 262, 263, 266, 267, 269, 271, 274, 276, 277, 278, 279, 288, 289, 290, 293, 294, 295, 297, 298, 300, 301, 303, 305, 306, 308, 311, 312, 314, 317, 318, 319, 322, 324, 325], "metric_nam": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "cross": [15, 16, 17, 19, 21, 22, 23, 25, 49, 53, 55, 56, 235, 236, 246, 247], "hyper": [15, 16, 17, 19, 21, 22, 23, 25], "job": [15, 16, 17, 21, 22, 23, 294, 318], "parallel": [15, 16, 17, 21, 22, 23], "unless": [15, 16, 17, 21, 22, 23], "joblib": [15, 16, 17, 21, 22, 23], "parallel_backend": [15, 16, 17, 21, 22, 23], "context": [15, 16, 17, 21, 22, 23, 277], "processor": [15, 16, 17, 21, 22, 23], "complet": [15, 16, 17, 19, 21, 22, 23, 25, 277, 278], "list": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 47, 48, 49, 53, 58, 124, 131, 137, 145, 147, 150, 151, 152, 153, 154, 155, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 266, 267, 268, 275, 276, 300, 301, 302, 307, 308, 320], "option": [15, 16, 17, 19, 21, 22, 23, 25, 61, 62, 63, 64, 126, 127, 132, 133, 157, 158, 161, 162, 165, 176, 177, 190, 203, 204, 205, 206, 251, 252, 253, 266, 267, 274, 276, 277, 293, 294, 300, 301, 306, 308, 317, 318], "scikit": [15, 16, 17, 19, 21, 22, 23, 25, 57], "org": [15, 16, 17, 19, 21, 22, 23, 25, 55, 56, 60, 84, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 282, 284], "model_evalu": [15, 16, 17, 19, 21, 22, 23, 25], "html": [15, 16, 17, 19, 21, 22, 23, 25, 60, 84], "dict": [15, 16, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 50, 51, 52, 53, 63, 64, 69, 71, 126, 127, 132, 133, 151, 152, 165, 190, 227, 254, 268, 269, 288, 302, 303, 311], "addit": [15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 44, 45, 47, 48, 166, 178, 199, 200, 229, 240], "keyword": [15, 16, 17, 19, 21, 22, 23, 25, 58, 59], "argument": [15, 16, 17, 19, 21, 22, 23, 25, 52, 58, 59, 87, 278, 295, 319], "pass": [15, 16, 17, 19, 21, 22, 23, 25, 33, 38, 58, 86, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 253], "constructor": [15, 16, 17, 19, 21, 22, 23, 25], "every_n_train_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "every_n_val_epoch": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "prog_bar": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38], "k": [15, 16, 21, 22, 47, 48, 92, 97, 124, 137, 229, 234, 240, 245, 263, 325], "spars": [15, 16, 17, 21, 22, 23, 253], "n_featur": [15, 16, 17, 21, 22, 23, 55, 56, 266, 276, 295, 300, 308, 319], "precomput": [15, 21], "n_output": [15, 16, 21, 22, 58, 59, 61, 62, 63, 64], "target": [15, 16, 17, 21, 22, 23, 27, 28, 29, 30, 31, 58, 59, 63, 64, 151, 152, 260, 263, 273, 325], "log_metr": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25], "y_true": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 58, 59, 61, 62, 63, 64], "new": [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 38, 47, 48, 70, 88, 123, 141, 142, 143, 189, 230, 241, 253], "r2": [16, 19, 22, 25, 63, 64], "regressor": [16, 19, 22, 25, 36, 41, 63, 64, 91, 95], "median": [16, 19, 22, 25, 63, 64], "squar": [16, 19, 22, 25, 63, 64, 161, 203, 208], "r\u00b2": [16, 19, 22, 25], "pearson": [16, 22, 61, 62, 63, 64], "correl": [16, 22, 61, 62, 63, 64, 235, 236, 246, 247], "coeffici": [16, 22, 61, 62, 63, 64, 269, 303], "varianc": [16, 19, 22, 25, 61, 62, 63, 64, 253], "regular": [16, 17, 19, 22, 23, 25, 275, 307], "strength": [16, 17, 19, 22, 23, 25], "ridg": [16, 18, 19, 22, 24, 25], "neg_mean_absolute_error": [16, 19, 22, 25], "neg_mean_squared_error": [16, 19, 22, 25], "max_it": [17, 23], "linear_solv": [17, 23], "lbfg": [17, 23], "logist": [17, 18, 23, 24, 44, 45], "l2": [17, 19, 23, 25], "invers": [17, 23, 55, 56], "grid": [17, 23, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 199, 200, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 259, 262, 271, 272, 289, 305, 312, 324], "logarithm": [17, 23], "1e4": [17, 23], "machin": [17, 23, 49, 70, 88], "specifi": [17, 23, 27, 28, 29, 30, 31, 33, 38, 49, 52, 70, 88, 123, 126, 127, 132, 133, 141, 151, 152, 251, 252, 266, 267, 276, 300, 301, 308], "strenght": [17, 23], "maximum": [17, 23, 47, 48, 251, 252, 294, 318], "taken": [17, 23], "solver": [17, 23], "converg": [17, 23, 47, 48], "liblinear": [17, 23], "newton": [17, 23], "cg": [17, 23], "choleski": [17, 23], "sag": [17, 23], "saga": [17, 23], "problem": [17, 23, 154, 155, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "accord": [17, 23, 93, 94, 108, 109, 288, 311], "on_test_epoch_start": [18, 24], "bool": [18, 24, 33, 38, 61, 62, 63, 64, 70, 85, 88, 92, 93, 94, 97, 108, 109, 123, 140, 141, 148, 151, 152, 157, 158, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 240, 251, 252, 253, 274, 277, 279, 288, 293, 294, 306, 311, 317, 318], "on_test_epoch_end": [18, 24], "abc": [18, 24], "basic": [18, 24], "logic": [18, 24, 33, 38, 44, 45], "transform_step": [18, 24, 33, 38, 47, 48], "abstract": [18, 24, 33, 38], "should": [18, 24, 33, 38, 44, 45, 61, 62, 70, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 253], "inherit": [18, 24, 33, 38, 49], "disabl": [18, 24, 33, 38, 44, 45, 47, 48], "progress": [18, 24, 33, 38, 44, 45, 47, 48], "bar": [18, 24, 33, 38, 44, 45, 47, 48], "extract_featur": [18, 24], "extract": [18, 24, 47, 48, 283], "By": [18, 24, 33, 38, 44, 45], "linear_prob": [18, 24], "valueerror": [18, 24], "on_train_epoch_end": [18, 24], "access": [18, 24, 69, 71, 227, 278], "cach": [18, 24, 44, 45, 70, 88, 126, 127, 129, 132, 133, 135, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 278], "attribut": [18, 24, 33, 38, 44, 45, 47, 48, 53, 69, 71, 72, 73, 86, 87], "core": [18, 24, 33, 38, 44, 45], "lightningmodul": [18, 24, 33, 38], "them": [18, 24, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 130, 144, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 253, 278, 321], "hook": [18, 24, 33, 38, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "mylightningmodul": [18, 24], "l": [18, 24], "super": [18, 24, 33, 38, 44, 45, 47, 48], "training_step_output": [18, 24], "training_step": [18, 24, 33, 38, 44, 45, 47, 48], "mycallback": [18, 24], "someth": [18, 24], "epoch_mean": [18, 24], "training_epoch_mean": [18, 24], "free": [18, 24], "on_validation_epoch_end": [18, 24, 44, 45], "val": [18, 24, 33, 38], "pearsonr": [19, 25, 63, 64], "multipl": [19, 25, 33, 38, 44, 45, 47, 48, 49, 50, 61, 62, 92, 97, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "multivari": [19, 25], "channel": [27, 28, 29, 30, 31, 91, 92, 93, 94, 95, 97, 108, 109, 123, 140, 141, 148, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249], "subject_in_pattern": [27, 30, 151, 152], "target_map": [27, 28, 29, 30, 31, 151, 152], "mask": [27, 28, 29, 30, 31, 139, 151, 152, 157, 158, 253], "withdraw_subject": [27, 28, 29, 30, 31, 151, 152], "scalabl": [27, 30, 33, 38, 151, 152], "locat": [27, 28, 29, 30, 31, 70, 88, 151, 152, 283], "store": [27, 28, 29, 30, 31, 47, 48, 151, 152, 278, 279, 280, 281, 295, 319], "folder": [27, 30, 129, 135, 151, 152, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "level": [27, 30, 151, 152, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 198, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 322], "subject": [27, 28, 29, 30, 31, 124, 125, 137, 138, 151, 152, 253], "identifi": [27, 30, 151, 152, 260, 273], "retriev": [27, 30, 70, 88, 151, 152], "tabular": [27, 28, 29, 30, 31, 151, 152], "optionali": [27, 28, 29, 30, 31, 44, 45, 47, 48, 151, 152, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "dictionari": [27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 63, 64, 69, 71, 72, 126, 127, 132, 133, 151, 152, 288, 311], "replac": [27, 28, 29, 30, 31, 53, 61, 62, 91, 93, 94, 95, 108, 109, 127, 133, 151, 152, 166, 178, 199, 200], "exist": [27, 28, 29, 30, 31, 70, 88, 151, 152, 253, 297, 298], "panda": [27, 28, 29, 30, 31, 124, 137, 151, 152], "datafram": [27, 28, 29, 30, 31, 124, 137, 151, 152], "callabl": [27, 28, 29, 30, 31, 33, 38, 86, 151, 152, 278], "optionnali": [27, 28, 29, 30, 31, 44, 45, 47, 48, 126, 127, 132, 133, 140, 148, 151, 152], "remov": [27, 28, 29, 30, 31, 47, 48, 151, 152, 253], "filenotfounderror": [27, 28, 29, 30, 31], "mandatorri": [27, 28, 29, 30, 31], "keyerror": [27, 28, 29, 30, 31], "mandatori": [27, 28, 29, 30, 31, 254], "kei": [27, 28, 29, 30, 31, 33, 38, 44, 45, 47, 48, 49, 69, 71, 126, 127, 132, 133, 165, 190, 254, 288, 311], "miss": [27, 28, 29, 30, 31, 275, 307], "particip": [27, 28, 29, 30, 31, 151, 152], "tsv": [27, 28, 29, 30, 31, 151, 152], "request": [27, 28, 29, 30, 31, 151, 152, 160, 253], "conta": [27, 28, 29, 30, 31, 151, 152], "idea": [27, 30], "your": [27, 29, 30, 33, 38, 49, 70, 81, 82, 88, 326], "rather": [27, 30], "symlink": [27, 30], "aggreg": [27, 30, 61, 62], "enforc": [27, 30], "reproduc": [27, 30, 33, 38, 44, 45, 47, 48], "persist": [27, 30], "get_checksum": [27, 30], "hash": [27, 30, 70, 88], "get_data": [27, 28, 30, 31], "index": [27, 28, 30, 31, 33, 38, 44, 45, 47, 48, 63, 64, 126, 127, 132, 133, 265, 268, 288, 299, 302, 311, 320], "val_check_interv": [33, 38], "min_epoch": [33, 38], "max_step": [33, 38], "min_step": [33, 38], "enable_checkpoint": [33, 38], "enable_progress_bar": [33, 38], "enable_model_summari": [33, 38], "strategi": [33, 38, 44, 45, 163, 194], "num_nod": [33, 38], "liter": [33, 38], "engin": [33, 38], "float16": [33, 38], "mix": [33, 38], "bf16": [33, 38], "sequenc": [33, 38, 44, 45, 47, 48, 123, 130, 141, 144, 163, 194], "design": [33, 38, 49], "lightn": [33, 38, 326], "interfac": [33, 38, 49, 50, 52, 53, 326], "multi": [33, 38, 44, 45, 47, 48, 140, 148, 163, 194], "capabl": [33, 38], "basicali": [33, 38], "child": [33, 38, 49, 140, 148], "mixin": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "add": [33, 38, 44, 45, 51, 92, 97, 128, 134, 236, 247], "loop": [33, 38], "integ": [33, 38], "often": [33, 38], "fraction": [33, 38], "fix": [33, 38, 230, 241, 251, 252, 313], "onc": [33, 38], "reach": [33, 38], "infinit": [33, 38], "forc": [33, 38, 70, 88], "least": [33, 38], "checkpoint": [33, 38, 92, 97], "configur": [33, 38, 49, 50, 326], "summar": [33, 38], "tpu": [33, 38, 44, 45, 47, 48], "hpu": [33, 38], "mp": [33, 38], "custom": [33, 38, 58, 59, 87], "alias": [33, 38], "listof": [33, 38], "automat": [33, 38, 44, 45, 47, 48, 49, 59, 295, 319], "select": [33, 38, 49, 50, 59], "doubl": [33, 38, 166, 178, 199, 200], "16bit": [33, 38], "bfloat16": [33, 38], "control": [33, 38, 44, 45, 47, 48, 123, 126, 132, 141, 150, 153, 154, 155, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 235, 236, 246, 247, 271, 289, 305, 312], "extra": [33, 38], "tune": [33, 38], "debug": [33, 38, 151, 152, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 264], "boolean": [33, 38], "otherwis": [33, 38, 61, 62, 86, 87, 253], "hparam": [33, 38], "dictionarai": [33, 38, 49], "TO": [33, 38], "BE": [33, 38], "validation_step": [33, 38, 44, 45, 47, 48], "anyth": [33, 38, 44, 45, 47, 48], "interest": [33, 38, 44, 45, 47, 48, 151, 152, 165, 190], "predict_step": [33, 38, 44, 45, 47, 48], "log_dict": [33, 38], "val_dataload": [33, 38], "instruct": [33, 38], "tensor": [33, 38, 44, 45, 47, 48, 55, 56, 157, 158, 159, 161, 162, 163, 167, 176, 177, 179, 180, 194, 201, 203, 204, 205, 206, 207, 209, 218, 239, 264], "logger": [33, 38, 44, 45, 47, 48, 270], "on_step": [33, 38], "on_epoch": [33, 38], "reduce_fx": [33, 38], "enable_graph": [33, 38], "sync_dist": [33, 38], "sync_dist_group": [33, 38], "add_dataloader_idx": [33, 38], "metric_attribut": [33, 38], "rank_zero_onli": [33, 38], "must": [33, 38, 44, 45, 47, 48, 49, 87, 123, 141, 278, 283], "ddp": [33, 38], "determin": [33, 38, 47, 48, 124, 137], "accumul": [33, 38], "over": [33, 38, 47, 48], "detach": [33, 38], "graph": [33, 38, 198, 321], "care": [33, 38, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247, 295, 319], "commun": [33, 38], "overhead": [33, 38], "group": [33, 38, 93, 94, 106, 107, 108, 109, 113, 124, 137, 253], "sync": [33, 38], "uniqu": [33, 38, 258], "infer": [33, 38, 44, 45], "explicitli": [33, 38], "restor": [33, 38, 277], "state": [33, 38, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 160, 161, 164, 179, 191, 192, 193, 195, 203, 207], "torchmetr": [33, 38], "tell": [33, 38], "rank": [33, 38], "won": [33, 38, 44, 45], "abl": [33, 38], "improp": [33, 38], "deadlock": [33, 38], "train_loss": [33, 38], "metriccollect": [33, 38], "test_step": [33, 38], "metric_n": [33, 38], "out": [33, 38, 44, 45, 47, 48, 127, 133, 147, 167, 178, 179, 180, 200, 207, 209, 218], "forward": [33, 38, 44, 45, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 161, 162, 163, 164, 166, 167, 176, 177, 178, 179, 180, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "overrid": [33, 38, 44, 45], "prevent": [33, 38, 44, 45], "oom": [33, 38, 44, 45], "basepredictionwrit": [33, 38, 44, 45], "write": [33, 38, 44, 45, 285, 286], "databas": [33, 38, 44, 45], "spawn": [33, 38, 44, 45], "happen": [33, 38, 44, 45], "ddp_spawn": [33, 38, 44, 45], "produc": [33, 38, 44, 45, 47, 48], "step_output": [33, 38, 44, 45, 47, 48], "skip": [33, 38, 44, 45, 47, 48, 196, 197, 198], "deepspe": [33, 38, 44, 45, 47, 48], "manual": [33, 38, 44, 45, 47, 48], "special": [33, 38, 44, 45, 47, 48, 49], "switch": [33, 38, 44, 45, 47, 48], "accumulate_grad_batch": [33, 38, 44, 45, 47, 48], "intern": [33, 38, 44, 45, 47, 48, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 164, 191, 192, 193, 195], "automatic_optim": [33, 38, 44, 45, 47, 48], "gan": [33, 38, 44, 45, 47, 48], "opt1": [33, 38, 44, 45, 47, 48], "opt2": [33, 38, 44, 45, 47, 48], "decod": [33, 38, 44, 45, 47, 48, 161, 166, 176, 178, 179, 199, 200, 203, 205, 207], "share": [33, 38, 47, 48, 55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 164, 191, 192, 193, 195], "api": [33, 38, 47, 48, 59, 60], "d": [33, 38, 44, 45, 47, 48, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 199, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 235, 236, 239, 246, 247, 259, 262, 272, 324], "calcul": [33, 38, 44, 45, 47, 48], "put": [33, 38, 44, 45, 47, 48], "At": [33, 38, 44, 45, 47, 48, 178, 200], "goe": [33, 38, 44, 45, 47, 48], "back": [33, 38, 44, 45, 47, 48, 253], "estimator_typ": [34, 35, 36, 37, 39, 40, 41, 42], "tag": [34, 35, 36, 37, 39, 40, 41, 42, 70, 88], "setup": [44, 45, 270, 322], "freez": [44, 45], "freeze_encod": [44, 45], "rate": [44, 45, 47, 48, 150, 153, 154, 155, 163, 194], "adam": [44, 45, 47, 48], "decai": [44, 45, 47, 48], "multisteplr": [44, 45], "schedul": [44, 45, 47, 48, 49], "element": [44, 45, 47, 48], "variabl": [44, 45, 47, 48, 49, 57, 227], "validation_step_output": [44, 45], "dictionnari": [44, 45, 165, 190, 278], "respectivelli": [44, 45], "configure_optim": [44, 45, 47, 48], "declar": [44, 45, 47, 48, 50], "adamw": [44, 45, 47, 48], "cross_entropy_loss": [44, 45], "cross_entropi": [44, 45], "clean": [44, 45], "version": [47, 48, 49, 52, 57, 253], "x_i": [47, 48], "x_j": [47, 48], "maxim": [47, 48], "minim": [47, 48, 287, 310], "part": [47, 48], "head": [47, 48, 91, 95, 163, 192, 194, 195], "cnn": [47, 48, 122], "scnn": [47, 48], "respons": [47, 48], "denot": [47, 48], "finish": [47, 48], "extractor": [47, 48], "z": [47, 48, 161, 162, 179, 203, 204, 207, 256, 257, 259, 261, 262, 272, 323, 324], "shown": [47, 48], "wors": [47, 48], "those": [47, 48, 288, 311], "becom": [47, 48], "invari": [47, 48], "thu": [47, 48], "stage": [47, 48], "z_i": [47, 48], "z_j": [47, 48], "therebi": [47, 48], "propos": [47, 48], "aaron": [47, 48], "van": [47, 48], "den": [47, 48], "oord": [47, 48], "short": [47, 48], "formal": [47, 48], "written": [47, 48], "ell_": [47, 48], "j": [47, 48], "frac": [47, 48], "exp": [47, 48], "sim": [47, 48], "tau": [47, 48], "sum_": [47, 48], "2n": [47, 48], "mathbb": [47, 48], "neq": [47, 48], "z_k": [47, 48], "peak": [47, 48], "bound": [47, 48, 136, 146], "balanc": [47, 48], "influenc": [47, 48], "dissimilar": [47, 48], "versu": [47, 48], "cosin": [47, 48], "cdot": [47, 48], "minimum": [47, 48, 251, 252], "around": [47, 48], "exact": [47, 48], "opposit": [47, 48], "flexibl": [47, 48], "altern": [47, 48], "track": [47, 48], "projector": [47, 48], "cosineannealinglr": [47, 48], "auxiliari": [47, 48], "info_nce_loss": [47, 48], "expfil": 49, "selector": [49, 50], "logdir": 49, "verbos": 49, "useful": 49, "date": 49, "reus": [49, 295, 319], "section": 49, "descipt": 49, "scaler": [49, 253], "dl": 49, "environ": [49, 50, 51, 53], "fullfil": 49, "constraint": 49, "impos": 49, "interface_occurr": 49, "term": [49, 52, 68], "interface_vers": 49, "__version__": 49, "mismatch": 49, "detect": 49, "connot": 49, "previous": 49, "param": [49, 52, 53], "instanci": 49, "prefix": 49, "filter": [49, 50, 92, 97, 126, 132, 161, 162, 165, 166, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 233, 234, 237, 240, 242, 244, 245, 248], "block": [49, 92, 93, 94, 97, 108, 109, 110, 111, 163, 194, 196, 197, 201, 202], "construct": 49, "hierarch": 49, "properti": [49, 84], "parent": 49, "separ": 49, "architecture_nam": [49, 70, 88], "revis": [49, 70, 88], "hug": [49, 70, 88], "face": [49, 70, 88, 251, 252], "specifid": 49, "appropri": [49, 50, 87], "scheme": 49, "hyperparapet": 49, "defautl": 49, "coupl": 49, "moment": 49, "config": 50, "env": [50, 51, 53], "filter_conf": 50, "updat": [51, 253], "updated_env": 51, "environemt": 51, "my_modul": 52, "my_class": 52, "exppect": 52, "module": 52, "cl": [52, 163, 194], "updated_param": 53, "param_set": 53, "entropi": [55, 56], "deriv": [55, 56], "icml": [55, 56], "2020": [55, 56], "doi": [55, 56, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "48550": [55, 56, 92, 93, 94, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "arxiv": [55, 56, 92, 93, 94, 96, 97, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 198], "2002": [55, 56], "05709": [55, 56], "scriptmodul": [55, 56, 91, 92, 93, 94, 95, 97, 98, 99, 100, 106, 107, 108, 109, 164, 191, 192, 193, 195], "z1": [55, 56], "z2": [55, 56], "view": [55, 56, 293, 317], "re": 57, "sample_weight": [58, 59, 61, 62, 63, 64, 253], "multioutput": [58, 59, 61, 62], "dtype": [58, 60, 136, 142, 146, 259, 272], "numer": 58, "string": [58, 59, 87, 251, 252], "raw_valu": [58, 59, 61, 62], "uniform_averag": [58, 59, 61, 62], "variance_weight": [58, 59], "accept": [58, 59], "due": [58, 59], "compat": [58, 59, 326], "r2_score": [58, 59], "check_arrai": 58, "type_tru": [58, 59], "multiclass": [58, 59], "type_of_target": [58, 59], "just": [58, 59], "suitabl": [59, 60], "privat": 59, "highest": 60, "promot": 60, "rule": 60, "api_specif": 60, "type_promot": 60, "namespac": 60, "force_finit": [61, 62], "symmetr": [61, 62], "alwai": [61, 62, 70, 88, 253], "perfect": [61, 62], "anti": [61, 62], "flag": [61, 62], "nan": [61, 62], "inf": [61, 62], "constant": [61, 62], "real": [61, 62], "ndarrai": [61, 62, 154, 155, 253, 256, 257, 261, 323], "target_nam": [63, 64], "digit": [63, 64], "output_dict": [63, 64], "round": [63, 64], "summari": [63, 64], "mae": [63, 64], "meda": [63, 64], "mse": [63, 64], "pcc": [63, 64], "evar": [63, 64], "arithmet": [63, 64], "equival": [66, 67, 253], "termin": 68, "expos": [69, 71], "value_kei": [69, 71], "b": [69, 71], "avaiabl": [70, 88], "pathlib": [70, 88], "repo": [70, 88], "classmethod": [70, 88, 124, 137, 165, 190], "hf_download": [70, 88], "hf_id": [70, 88], "hf_revis": [70, 88], "force_download": [70, 88], "present": [70, 87, 88], "resum": [70, 88], "id": [70, 88], "commit": [70, 88], "hub_split": [70, 88], "hub_nam": [70, 88], "interpret": [70, 88], "hub_id": [70, 88], "hub_revis": [70, 88], "decalr": [70, 88, 121], "ns_download": [70, 88], "ns_id": [70, 88], "reset": [72, 81, 82], "background": 72, "foreground": [72, 74], "reverse_dict": 72, "revers": [72, 161, 203], "alia": [73, 74, 142, 143, 189, 253], "conveni": [81, 82], "style": [81, 82], "ansi": [81, 82], "fn": 84, "attribute_nam": 84, "condit": 84, "descriptor": 84, "protocol": 84, "decor": [84, 86, 140, 148, 278, 295, 319], "attributeerror": [84, 86], "falsei": 84, "hasattr": [84, 86], "doc": 84, "howto": 84, "explan": 84, "deleg": 85, "underli": 85, "truthi": 86, "either": [86, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 253], "unavail": 86, "helloifeven": 86, "_x_is_even": 86, "say_hello": 86, "hello": 86, "obj": 86, "msg": [87, 264], "presenc": 87, "trail": 87, "underscor": 87, "except": [87, 253], "messag": [87, 163, 166, 167, 178, 179, 180, 194, 198, 199, 200, 207, 209, 218, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 264], "yet": 87, "substitut": 87, "eg": 87, "sparsifi": 87, "fitt": 87, "n_embed": [91, 92, 93, 94, 95, 97, 108, 109], "abrol": [91, 95], "2021": [91, 95, 179, 207], "5281": [91, 95], "zenodo": [91, 95], "4309677": [91, 95], "overridden": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "subclass": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "although": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "recip": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "afterward": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "former": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "latter": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "silent": [91, 92, 93, 94, 95, 97, 98, 99, 106, 107, 108, 109, 164, 191, 192, 193, 195, 198, 234, 235, 236, 245, 246, 247], "growth_rat": [92, 97, 98, 99, 102], "block_config": [92, 97, 102], "num_init_featur": [92, 97, 102], "bn_size": [92, 97, 98, 99], "512": [92, 93, 94, 97, 108, 109, 167, 180, 209, 218], "memory_effici": [92, 97, 98, 99], "huang": [92, 96, 97, 103], "2018": [92, 96, 97, 103], "1608": [92, 96, 97, 103], "06993": [92, 96, 97, 103], "pool": [92, 97, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 233, 244], "convolut": [92, 93, 94, 97, 108, 109, 112, 113, 126, 132, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 234, 235, 236, 237, 240, 242, 245, 246, 247, 248], "factor": [92, 97, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 271, 289, 305, 312], "slower": [92, 97], "pdf": [92, 97], "1707": [92, 97], "06990": [92, 97], "zero_init_residu": [93, 94, 108, 109], "width_per_group": [93, 94, 108, 109], "replace_stride_with_dil": [93, 94, 108, 109], "norm_lay": [93, 94, 106, 107, 108, 109], "initial_kernel_s": [93, 94, 108, 109], "he": [93, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "2015": [93, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "1512": [93, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "03385": [93, 94, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119], "bn": [93, 94, 108, 109, 196, 197, 201, 202], "residu": [93, 94, 108, 109], "branch": [93, 94, 108, 109], "behav": [93, 94, 108, 109], "1706": [93, 94, 108, 109], "02677": [93, 94, 108, 109], "divid": [93, 94, 108, 109], "dilat": [93, 94, 106, 107, 108, 109, 113], "atrou": [93, 94, 108, 109], "preserv": [93, 94, 108, 109], "dens": [93, 94, 108, 109, 161, 203, 253], "batchnorm3d": [93, 94, 108, 109], "kernel": [93, 94, 108, 109, 126, 132, 235, 236, 246, 247, 288, 289, 311, 312], "truncat": [94, 105, 109, 115, 117, 119], "121": [96, 103], "num_lay": 98, "num_input_featur": [98, 99, 100], "init_featur": 98, "prev_featur": 99, "num_output_featur": 100, "norm": 101, "arch": [102, 110, 111], "inplan": [106, 107], "plane": [106, 107, 234, 245, 288, 304, 311], "base_width": [106, 107], "in_plan": [112, 113], "out_plan": [112, 113], "1x1": [112, 178, 200], "center": [121, 253, 268, 288, 289, 293, 302, 304, 311, 312, 317], "inspir": 122, "natur": 122, "init": [123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 141, 142, 144, 150, 153, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 277], "randomize_per_channel": [123, 140, 141, 143, 148], "tranform": [123, 141, 260, 273], "wise": [123, 141, 178, 200], "randomli": [124, 125, 137, 138], "bootstrap": [124, 137], "measur": [124, 125, 129, 135, 137, 138, 139], "vertex": [124, 125, 126, 127, 132, 133, 137, 138, 178, 200, 288, 289, 295, 311, 312, 313, 319, 320, 321], "hemispher": [124, 125, 137, 138, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "curupt": [124, 125, 137, 138, 139], "cortic": [124, 125, 129, 135, 137, 138, 139, 149, 156, 157, 158, 160, 161, 162, 163, 166, 167, 176, 177, 178, 179, 180, 194, 199, 200, 203, 204, 205, 206, 207, 209, 218], "meta": [124, 137, 253], "regroup": [124, 137], "m": [124, 126, 127, 129, 132, 133, 135, 137, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 251, 252, 267, 274, 280, 281, 285, 286, 288, 293, 301, 306, 311, 317, 321], "pca": [124, 137], "compon": [124, 137, 256, 257, 261, 323], "extern": [124, 137], "distanc": [124, 137, 234, 245], "popul": [124, 137], "bootstap": [124, 137], "arr": [124, 125, 127, 128, 129, 133, 134, 135, 137, 138], "bootsrap": [124, 137], "controlater": [125, 138], "cachedir": [126, 127, 129, 132, 133, 135, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 278], "speed": [126, 132, 165, 190], "recept": [126, 132], "field": [126, 132, 142, 143, 189], "deviat": [126, 128, 132, 134, 253], "icosahdron": [126, 127, 129, 132, 133, 135], "neighboor": [126, 127, 132, 133, 251, 252], "sufifi": [126, 127, 132, 133], "ie": [126, 127, 132, 133, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "organ": [126, 127, 132, 133, 279, 288, 311], "ring": [126, 127, 132, 133, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 233, 237, 240, 242, 244, 248, 268, 288, 302, 311], "replacement_valu": [127, 133], "connex": [127, 133], "neighborhood": [127, 133, 196, 201, 229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 271, 287, 289, 305, 310, 312], "ablat": [127, 133], "cutout": [127, 133], "cut": [127, 133], "nois": [128, 134], "barycentr": [129, 135, 269, 293, 295, 303, 317, 319], "angl": [129, 135, 256, 257, 261, 269, 288, 295, 303, 304, 311, 319, 323], "degre": [129, 135, 269, 295, 303, 319], "euler": [129, 135, 269, 295, 303, 319], "smart": [129, 135, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "speedup": [129, 135, 165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "accordingli": [129, 135], "seri": [131, 145], "n_channel": [131, 145, 163, 194], "_data": [131, 145], "uplet": [136, 146, 234, 245, 269, 295, 303, 319], "aplli": 139, "rand_mask": 139, "binari": [139, 157, 158], "corrupt": 139, "multichannel": [140, 148], "multichannelaugment": [140, 148], "applic": [140, 148, 166, 178, 199, 200, 254], "high": 142, "liftifi": 147, "synthet": 149, "gene": [150, 153, 154, 155], "n_max": [151, 152], "target_ico_ord": [151, 152], "regex": [151, 152], "nibabel": [151, 152, 282, 284], "triangular": [151, 152, 251, 252, 294, 296, 318], "purpos": [151, 152], "desir": [151, 152, 287, 310], "assocait": [154, 155], "variat": [156, 160, 179, 207], "svae": [156, 179, 207], "beta": [157, 158, 256, 257, 261, 323], "left_mask": [157, 158], "right_mask": [157, 158], "use_ms": [157, 158], "kl": [157, 158], "diverg": [157, 158], "likelihood": [157, 158, 159], "recon": 159, "reconstruct": [159, 161, 179, 203, 207], "w": [159, 208], "relat": [160, 165, 190], "vision": [160, 163, 194, 294, 318], "gmvae": 160, "rest": [160, 179, 207], "fmri": [160, 179, 207], "autoencod": [160, 179, 207], "libilab": 160, "rsfmri": 160, "output_shap": [161, 203, 236, 247], "before_latent_dim": [161, 203], "latent_dim": [161, 162, 164, 176, 177, 179, 191, 203, 204, 205, 206, 207], "conv_flt": [161, 162, 176, 177, 179, 203, 204, 205, 206, 207], "fusion_level": [161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "leakyrelu": [161, 162, 176, 177, 179, 203, 204, 205, 206, 207], "batch_norm": [161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "output_channel": [161, 203], "input_dim": [161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "convnet": [161, 203, 208], "stochast": [161, 179, 203, 207], "left_recon_x": [161, 179, 203, 207], "input_channel": [161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "right_recon_x": [161, 179, 203, 207], "left_x": [162, 167, 176, 177, 179, 180, 204, 205, 206, 207, 209, 218], "right_x": [162, 167, 176, 177, 179, 180, 204, 205, 206, 207, 209, 218], "q": [162, 179, 204, 207], "mlp_dim": [163, 194, 195], "dim_head": [163, 192, 194, 195], "dropout": [163, 192, 193, 194, 195], "emb_dropout": [163, 194], "msit": [163, 194], "dahan": [163, 194], "simon": [163, 164, 191, 194], "analysi": [163, 194], "midl": [163, 194], "2022": [163, 194], "n_verticesi": [163, 194], "trainabl": [163, 194], "msa": [163, 194], "mechan": [163, 194, 253], "feed": [163, 194], "ffn": [163, 194], "expand": [163, 194], "poll": [163, 194], "token": [163, 194], "hidden_lay": [164, 191], "return_logit": [164, 191], "kornblith": [164, 191], "mohammad": [164, 191], "norouzi": [164, 191], "geoffrei": [164, 191], "hinton": [164, 191], "visual": [164, 191], "y1": [164, 191], "y2": [164, 191], "input_ord": [165, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "n_layer": [165, 190], "repa_s": [165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "repa_zoom": [165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "dynamic_repa_zoom": [165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226], "repa": [165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 289, 312], "ico_info": [165, 190], "build_ico_info": [165, 190], "tangent": [165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 245, 271, 288, 304, 305, 311], "tessal": [165, 190, 274, 294, 306, 318], "tessel": [165, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 200, 207, 218, 219, 220, 221, 222, 223, 224, 225, 226, 294, 318], "icosehedron": [165, 190], "upsampl": [165, 178, 190, 200, 201, 230, 231, 232, 237, 238, 241, 242, 243, 248, 249, 276, 308], "onform": [165, 190], "gride": [166, 167, 197, 199, 202, 209, 259, 272], "net": [166, 178, 198, 199, 200], "built": [166, 178, 199, 200], "upon": [166, 178, 199, 200], "spma": [166, 199], "rectifi": [166, 178, 199, 200], "unit": [166, 178, 199, 200, 253, 271, 289, 305, 309, 312, 313], "halv": [166, 178, 199, 200], "zhao": [166, 178, 199, 200], "ipmi": [166, 178, 199, 200], "2019": [166, 178, 198, 199, 200], "cfg": [167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "4096": [167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "init_weight": [167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "stand": [167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 254], "wether": [167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "sphericalgvggbas": [168, 169, 170, 171, 172, 173, 174, 175, 210, 211, 212, 213, 214, 215, 216, 217], "interp": [178, 200, 201], "2x2": [178, 200], "maxpad": [178, 200, 201], "shift": [178, 200, 201], "zeropad": [178, 200, 201], "sphericalgva": [179, 207], "vert": [179, 180, 207, 218], "tri": [179, 180, 207, 218, 296], "reparameter": [179, 207], "reparametr": [179, 207], "trick": [179, 207], "sphericalvggbas": [181, 182, 183, 184, 185, 186, 187, 188, 219, 220, 221, 222, 223, 224, 225, 226], "neighbor_indic": [189, 229, 231, 232, 237, 240, 242, 243, 248], "down_indic": [189, 196, 201, 231, 232, 233, 237, 242, 243, 244, 248, 266, 267, 300, 301], "up_indic": [189, 230, 238, 241, 249, 275, 276, 307, 308], "conv_neighbor_indic": 189, "conv_lay": [196, 201], "in_ch": [196, 197, 201, 202], "out_ch": [196, 197, 201, 202], "conv_neigh_indic": [196, 201], "down_neigh_indic": [196, 232, 233, 243, 244], "pool_mod": 196, "discret": [196, 201, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "hidden_channel": 198, "pool_ratio": 198, "sum_r": 198, "act": 198, "unpool": 198, "hongyang": 198, "gao": 198, "shuiwang": 198, "ji": 198, "ratio": 198, "connect": [198, 321], "summat": 198, "nonlinear": 198, "edge_index": 198, "neigh_indic": [201, 229, 234, 240, 245], "up_neigh_indic": [201, 230, 231, 232, 237, 238, 241, 242, 243, 248, 249], "upsamp": [201, 202], "upconv": [201, 202], "x1": [201, 202], "x2": [201, 202], "max_pool_indic": [201, 232, 243], "output_dim": 208, "klass_nam": 227, "klass_param": 227, "destination_module_glob": 227, "publicli": 227, "assign": [227, 288, 311], "in_feat": [229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249], "out_feat": [229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249], "formul": [229, 240], "ico2_vertic": [229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249], "ico2_triangl": [229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249], "asarrai": [229, 230, 231, 232, 233, 237, 238, 240, 241, 242, 243, 244, 248, 249, 275, 307], "ico2_x": [229, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249], "ico3_vertic": [230, 231, 232, 233, 237, 238, 241, 242, 243, 244, 248, 249], "ico3_triangl": [230, 231, 232, 233, 237, 238, 241, 242, 243, 244, 248, 249], "ico3_x": [230, 231, 232, 233, 237, 238, 241, 242, 243, 244, 248, 249], "slow": [231, 242], "pooling_typ": [232, 233, 243, 244], "rectagular": [234, 245], "neigh_weight": [234, 245], "proj_ico_x": [235, 236, 246, 247], "pad_azimuth": [235, 236, 239, 246, 247], "pad_elev": [235, 236, 239, 246, 247], "zero_pad": [236, 247], "icoconv": [236, 247], "vmin": [251, 252], "vmax": [251, 252], "black": [251, 252], "color_map": [251, 252], "linearsegmentedcolormap": [251, 252], "repres": [251, 252, 320, 321], "opac": [251, 252], "Not": [251, 252], "edg": [251, 252, 320, 321], "line": [251, 252], "cm": [251, 252], "coolwarm": [251, 252], "colormap": [251, 252], "sub": 253, "with_mean": 253, "with_std": 253, "sklearn": 253, "scler": 253, "avoid": 253, "inplac": 253, "guarante": 253, "csr": 253, "attempt": 253, "entail": 253, "later": 253, "n_subject": 253, "along": [253, 258], "get_metadata_rout": 253, "metadata": 253, "rout": 253, "inverse_transform": 253, "x_tr": 253, "set_inverse_transform_request": 253, "unchang": 253, "relev": 253, "enable_metadata_rout": 253, "set_config": 253, "metadata_rout": 253, "retain": 253, "insid": 253, "pipelin": 253, "set_partial_fit_request": 253, "partial_fit": 253, "set_transform_request": 253, "sever": 254, "suffix": 254, "coordin": [255, 256, 257, 259, 260, 261, 262, 272, 273, 297, 313, 323, 324], "system": 255, "tool": [255, 326], "cartesian": [256, 257, 261, 323], "array_lik": [256, 257, 261, 323], "radiant": [256, 257, 261, 323], "pi": [256, 257], "r": [256, 257, 261, 323], "ref_arrai": 258, "atol": [258, 263, 325], "0001": [258, 263, 325], "toler": [258, 263, 325], "new_ord": 258, "resx": [259, 262, 272, 324], "resi": [259, 262, 272, 324], "ico2_vert": [259, 260, 262, 263, 265, 266, 268, 272, 273, 275, 276, 288, 289, 294, 299, 300, 302, 307, 308, 311, 312, 318, 324, 325], "ico2_tri": [259, 260, 262, 263, 265, 266, 268, 272, 273, 275, 276, 288, 289, 294, 299, 300, 302, 307, 308, 311, 312, 318, 324, 325], "y_grid": [259, 262, 272, 324], "ref_vertic": [260, 263, 273, 325], "ico2_std_vert": [260, 263, 273, 325], "ico2_std_tri": [260, 263, 273, 325], "projecte": [262, 324], "y_std": [263, 325], "target_vertic": [265, 275, 299, 307], "n_dim": [265, 275, 299, 307], "n_queri": [265, 275, 299, 307], "nearest_idx": [265, 299], "ico3_vert": [265, 274, 275, 287, 290, 292, 294, 295, 299, 306, 307, 310, 314, 316, 318, 319], "ico3_tri": [265, 274, 275, 287, 290, 292, 294, 295, 299, 306, 307, 310, 314, 316, 318, 319], "down3to2": [265, 299], "ico3_down_vertic": [265, 299], "consecut": [266, 267, 276, 300, 301, 308], "downsampled_data": [266, 300], "new_n_vertic": [266, 276, 300, 308], "ico4_vert": [266, 267, 276, 300, 301, 308], "ico4_tri": [266, 267, 276, 300, 301, 308], "reshap": [266, 268, 275, 276, 295, 300, 302, 307, 308, 319], "y_down": [266, 300], "squeez": [266, 276, 295, 300, 308, 319], "geometri": [267, 275, 280, 281, 285, 286, 301, 307, 309], "new_vertic": [267, 301], "newli": [267, 301], "icosahedorn": [267, 301], "new_triangl": [267, 301], "ico2_down_vert": [267, 301], "ico2_down_tri": [267, 301], "start_nod": [268, 302], "recurs": [268, 302], "node_neigh": [268, 302], "asssoci": [269, 303], "euclidian": [269, 303], "three": [269, 303], "2d": [271, 305], "grid_in_spher": [271, 289, 305, 312], "grid_in_tplan": [271, 305], "mesh": [274, 275, 288, 306, 307, 311, 321], "target_triangl": [275, 307], "interp_indic": [275, 307], "n_feat": [275, 307], "y_up": [275, 276, 307, 308], "upper": [276, 308], "upsampled_data": [276, 308], "hide_err": 277, "secur": 277, "redirect": 277, "manag": 277, "On": 277, "hide": 277, "func": 278, "wrap": 278, "receiv": 278, "directori": 278, "transpar": 278, "overlap": 278, "cifti_fil": 279, "decompos": 279, "cifti": [279, 282, 284], "vol": 279, "surf_left": 279, "surf_right": 279, "surf_fil": [280, 281, 285, 286], "read": [280, 281], "gifti": [281, 286], "surf_nam": 282, "nbviewer": [282, 284], "neurohackademi": [282, 284], "nh2020": [282, 284], "curriculum": [282, 284], "blob": [282, 284], "master": [282, 284], "markiewicz": [282, 284], "gnu": 283, "archiv": 283, "open": 283, "gz": 283, "out_path": 283, "extens": 283, "n_neigh": [287, 291, 310, 315], "length": [288, 311], "remain": [288, 311], "n_vert": [290, 314], "min_order_to_get_n_neighbor": [291, 315], "hi": [292, 316], "clockwise_from_cent": [293, 317], "clockwis": [293, 317], "counter": [293, 317], "reordered_triangl": [293, 317], "reorder": [293, 317], "ico0_vert": [293, 317], "ico0_tri": [293, 317], "clockwise_ico0_tri": [293, 317], "counter_clockwise_ico0_tri": [293, 317], "concurr": [294, 318], "euclidean": [295, 319], "rotated_data": [295, 319], "y_rot": [295, 319], "lower_vertic": 296, "ico_fil": 297, "rescal": 297, "topologi": [297, 298], "ref_fil": 298, "fslr": 298, "point_1": 309, "point_2": 309, "middle_point_cach": 309, "middl": 309, "return_index": 320, "triangles_index": 320, "networkx": 321, "nearbi": 321, "potenti": 321, "smooth": 321, "info": 322, "logfil": 322, "unifi": 326, "analyz": 326, "brain": 326, "product": 326, "advanc": 326, "availbl": 326, "hydra": 326}, "objects": {"nidl.callbacks": [[14, 0, 1, "", "BatchTypingCallback"], [15, 0, 1, "", "KNeighborsClassifierCVCallback"], [16, 0, 1, "", "KNeighborsRegressorCVCallback"], [17, 0, 1, "", "LogisticRegressionCVCallback"], [18, 0, 1, "", "ModelProbing"], [19, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[14, 1, 1, "", "on_predict_batch_start"], [14, 1, 1, "", "on_test_batch_start"], [14, 1, 1, "", "on_train_batch_start"], [14, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[15, 1, 1, "", "fit"], [15, 1, 1, "", "log_metrics"], [15, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "log_metrics"], [16, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[18, 1, 1, "", "extract_features"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "linear_probing"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "on_test_epoch_end"], [18, 1, 1, "", "on_test_epoch_start"], [18, 1, 1, "", "on_train_epoch_end"], [18, 1, 1, "", "on_validation_epoch_end"], [18, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[19, 1, 1, "", "fit"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[20, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[20, 1, 1, "", "on_predict_batch_start"], [20, 1, 1, "", "on_test_batch_start"], [20, 1, 1, "", "on_train_batch_start"], [20, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[21, 0, 1, "", "KNeighborsClassifierCVCallback"], [22, 0, 1, "", "KNeighborsRegressorCVCallback"], [23, 0, 1, "", "LogisticRegressionCVCallback"], [24, 0, 1, "", "ModelProbing"], [25, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[21, 1, 1, "", "fit"], [21, 1, 1, "", "log_metrics"], [21, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log_metrics"], [22, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[24, 1, 1, "", "extract_features"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "linear_probing"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "on_test_epoch_end"], [24, 1, 1, "", "on_test_epoch_start"], [24, 1, 1, "", "on_train_epoch_end"], [24, 1, 1, "", "on_validation_epoch_end"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[25, 1, 1, "", "fit"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "predict"]], "nidl.datasets": [[27, 0, 1, "", "BaseImageDataset"], [28, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.BaseImageDataset": [[27, 1, 1, "", "get_checksum"], [27, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[28, 1, 1, "", "get_data"]], "nidl.datasets.base": [[29, 0, 1, "", "BaseDataset"], [30, 0, 1, "", "BaseImageDataset"], [31, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[30, 1, 1, "", "get_checksum"], [30, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[31, 1, 1, "", "get_data"]], "nidl.estimators": [[33, 0, 1, "", "BaseEstimator"], [34, 0, 1, "", "ClassifierMixin"], [35, 0, 1, "", "ClusterMixin"], [36, 0, 1, "", "RegressorMixin"], [37, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[33, 1, 1, "", "fit"], [33, 1, 1, "", "log"], [33, 1, 1, "", "log_dict"], [33, 1, 1, "", "predict"], [33, 1, 1, "", "predict_step"], [33, 1, 1, "", "training_step"], [33, 1, 1, "", "transform"], [33, 1, 1, "", "transform_step"], [33, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[38, 0, 1, "", "BaseEstimator"], [39, 0, 1, "", "ClassifierMixin"], [40, 0, 1, "", "ClusterMixin"], [41, 0, 1, "", "RegressorMixin"], [42, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[38, 1, 1, "", "fit"], [38, 1, 1, "", "log"], [38, 1, 1, "", "log_dict"], [38, 1, 1, "", "predict"], [38, 1, 1, "", "predict_step"], [38, 1, 1, "", "training_step"], [38, 1, 1, "", "transform"], [38, 1, 1, "", "transform_step"], [38, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[44, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[44, 1, 1, "", "configure_optimizers"], [44, 1, 1, "", "cross_entropy_loss"], [44, 1, 1, "", "freeze_encoder"], [44, 1, 1, "", "on_validation_epoch_end"], [44, 1, 1, "", "predict_step"], [44, 1, 1, "", "training_step"], [44, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[45, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[45, 1, 1, "", "configure_optimizers"], [45, 1, 1, "", "cross_entropy_loss"], [45, 1, 1, "", "freeze_encoder"], [45, 1, 1, "", "on_validation_epoch_end"], [45, 1, 1, "", "predict_step"], [45, 1, 1, "", "training_step"], [45, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[47, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.SimCLR": [[47, 1, 1, "", "configure_optimizers"], [47, 1, 1, "", "info_nce_loss"], [47, 1, 1, "", "training_step"], [47, 1, 1, "", "transform_step"], [47, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[48, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[48, 1, 1, "", "configure_optimizers"], [48, 1, 1, "", "info_nce_loss"], [48, 1, 1, "", "training_step"], [48, 1, 1, "", "transform_step"], [48, 1, 1, "", "validation_step"]], "nidl.experiment": [[49, 2, 1, "", "fetch_experiment"], [50, 2, 1, "", "filter_config"], [51, 2, 1, "", "get_env"], [52, 2, 1, "", "load_interface"], [53, 2, 1, "", "update_params"]], "nidl.losses": [[55, 0, 1, "", "InfoNCE"]], "nidl.losses.InfoNCE": [[55, 1, 1, "", "forward"]], "nidl.losses.infonce": [[56, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[56, 1, 1, "", "forward"]], "nidl.metrics._regression": [[58, 2, 1, "", "_check_reg_targets"], [59, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [60, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[61, 2, 1, "", "pearson_r"], [64, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[62, 2, 1, "", "pearson_r"], [63, 2, 1, "", "regression_report"]], "nidl.transforms": [[66, 0, 1, "", "ContrastiveTransforms"]], "nidl.transforms.ssl": [[67, 0, 1, "", "ContrastiveTransforms"]], "nidl.utils": [[69, 0, 1, "", "Bunch"], [70, 0, 1, "", "Weights"], [83, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[70, 1, 1, "", "hf_download"], [70, 1, 1, "", "hub_split"], [70, 1, 1, "", "load_pretrained"], [70, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[71, 0, 1, "", "Bunch"]], "nidl.utils.color": [[72, 0, 1, "", "Colored"], [73, 2, 1, "", "attr"], [74, 2, 1, "", "fg"], [75, 2, 1, "", "hex"], [76, 2, 1, "", "print_multicolor"], [77, 2, 1, "", "print_result"], [78, 2, 1, "", "print_subtitle"], [79, 2, 1, "", "print_title"], [80, 2, 1, "", "print_warning"], [81, 2, 1, "", "random_stylize"], [82, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[72, 1, 1, "", "attribute"], [72, 1, 1, "", "background"], [72, 1, 1, "", "foreground"], [72, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[84, 0, 1, "", "_AvailableIfDescriptor"], [85, 2, 1, "", "_estimator_is"], [86, 2, 1, "", "available_if"], [87, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[88, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[88, 1, 1, "", "hf_download"], [88, 1, 1, "", "hub_split"], [88, 1, 1, "", "load_pretrained"], [88, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[91, 0, 1, "", "AlexNet"], [92, 0, 1, "", "DenseNet"], [93, 0, 1, "", "ResNet"], [94, 0, 1, "", "ResNetTruncated"], [96, 2, 1, "", "densenet121"], [104, 2, 1, "", "resnet18"], [105, 2, 1, "", "resnet18_trunc"], [118, 2, 1, "", "resnet50"], [119, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[91, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[92, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[93, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[94, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[95, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[95, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[97, 0, 1, "", "DenseNet"], [98, 0, 1, "", "_DenseBlock"], [99, 0, 1, "", "_DenseLayer"], [100, 0, 1, "", "_Transition"], [101, 2, 1, "", "_bn_function_factory"], [102, 2, 1, "", "_densenet"], [103, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[97, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[98, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[99, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[106, 0, 1, "", "BasicBlock"], [107, 0, 1, "", "Bottleneck"], [108, 0, 1, "", "ResNet"], [109, 0, 1, "", "ResNetTruncated"], [110, 2, 1, "", "_resnet"], [111, 2, 1, "", "_resnet_trunc"], [112, 2, 1, "", "conv1x1"], [113, 2, 1, "", "conv3x3"], [114, 2, 1, "", "resnet18"], [115, 2, 1, "", "resnet18_trunc"], [116, 2, 1, "", "resnet50"], [117, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[106, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[107, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[108, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[109, 1, 1, "", "forward"]], "surfify.augmentation": [[123, 0, 1, "", "BaseTransformer"], [124, 0, 1, "", "GroupMixUp"], [125, 0, 1, "", "HemiMixUp"], [126, 0, 1, "", "SurfBlur"], [127, 0, 1, "", "SurfCutOut"], [128, 0, 1, "", "SurfNoise"], [129, 0, 1, "", "SurfRotation"], [130, 0, 1, "", "Transformer"], [131, 2, 1, "", "apply_chained_transforms"], [136, 2, 1, "", "interval"], [140, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[123, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[124, 1, 1, "", "groupby"], [124, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[125, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[126, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[127, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[128, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[129, 1, 1, "", "run"]], "surfify.augmentation.base": [[132, 0, 1, "", "SurfBlur"], [133, 0, 1, "", "SurfCutOut"], [134, 0, 1, "", "SurfNoise"], [135, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[132, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[133, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[134, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[135, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[137, 0, 1, "", "GroupMixUp"], [138, 0, 1, "", "HemiMixUp"], [139, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[137, 1, 1, "", "groupby"], [137, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[138, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[139, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[141, 0, 1, "", "BaseTransformer"], [142, 0, 1, "", "RandomAugmentation"], [143, 0, 1, "", "Transform"], [144, 0, 1, "", "Transformer"], [145, 2, 1, "", "apply_chained_transforms"], [146, 2, 1, "", "interval"], [147, 2, 1, "", "listify"], [148, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[141, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[142, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[142, 3, 1, "", "dtype"], [142, 3, 1, "", "high"], [142, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[143, 3, 1, "", "probability"], [143, 3, 1, "", "randomize_per_channel"], [143, 3, 1, "", "transform"]], "surfify.datasets": [[150, 0, 1, "", "ClassificationDataset"], [151, 0, 1, "", "GenericSurfDataset"], [155, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[152, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[153, 0, 1, "", "ClassificationDataset"], [154, 2, 1, "", "make_classification"]], "surfify.losses": [[157, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[158, 0, 1, "", "SphericalVAELoss"], [159, 2, 1, "", "log_likelihood"]], "surfify.models": [[161, 0, 1, "", "HemiFusionDecoder"], [162, 0, 1, "", "HemiFusionEncoder"], [163, 0, 1, "", "SiT"], [164, 0, 1, "", "SimCLR"], [165, 0, 1, "", "SphericalBase"], [166, 0, 1, "", "SphericalGUNet"], [167, 0, 1, "", "SphericalGVGG"], [168, 0, 1, "", "SphericalGVGG11"], [169, 0, 1, "", "SphericalGVGG11BN"], [170, 0, 1, "", "SphericalGVGG13"], [171, 0, 1, "", "SphericalGVGG13BN"], [172, 0, 1, "", "SphericalGVGG16"], [173, 0, 1, "", "SphericalGVGG16BN"], [174, 0, 1, "", "SphericalGVGG19"], [175, 0, 1, "", "SphericalGVGG19BN"], [176, 0, 1, "", "SphericalHemiFusionDecoder"], [177, 0, 1, "", "SphericalHemiFusionEncoder"], [178, 0, 1, "", "SphericalUNet"], [179, 0, 1, "", "SphericalVAE"], [180, 0, 1, "", "SphericalVGG"], [181, 0, 1, "", "SphericalVGG11"], [182, 0, 1, "", "SphericalVGG11BN"], [183, 0, 1, "", "SphericalVGG13"], [184, 0, 1, "", "SphericalVGG13BN"], [185, 0, 1, "", "SphericalVGG16"], [186, 0, 1, "", "SphericalVGG16BN"], [187, 0, 1, "", "SphericalVGG19"], [188, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[161, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[162, 1, 1, "", "forward"]], "surfify.models.SiT": [[163, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[164, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[165, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[166, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[167, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[176, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[177, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[178, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[179, 1, 1, "", "decode"], [179, 1, 1, "", "encode"], [179, 1, 1, "", "forward"], [179, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[180, 1, 1, "", "forward"]], "surfify.models.base": [[189, 0, 1, "", "Ico"], [190, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[189, 3, 1, "", "conv_neighbor_indices"], [189, 3, 1, "", "down_indices"], [189, 3, 1, "", "neighbor_indices"], [189, 3, 1, "", "order"], [189, 3, 1, "", "triangles"], [189, 3, 1, "", "up_indices"], [189, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[190, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[191, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[191, 1, 1, "", "forward"]], "surfify.models.sit": [[192, 0, 1, "", "Attention"], [193, 0, 1, "", "FeedForward"], [194, 0, 1, "", "SiT"], [195, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[192, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[193, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[194, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[195, 1, 1, "", "forward"]], "surfify.models.unet": [[196, 0, 1, "", "DownBlock"], [197, 0, 1, "", "DownGBlock"], [198, 0, 1, "", "GraphicalUNet"], [199, 0, 1, "", "SphericalGUNet"], [200, 0, 1, "", "SphericalUNet"], [201, 0, 1, "", "UpBlock"], [202, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[196, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[197, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[198, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[199, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[200, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[201, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[202, 1, 1, "", "forward"]], "surfify.models.vae": [[203, 0, 1, "", "HemiFusionDecoder"], [204, 0, 1, "", "HemiFusionEncoder"], [205, 0, 1, "", "SphericalHemiFusionDecoder"], [206, 0, 1, "", "SphericalHemiFusionEncoder"], [207, 0, 1, "", "SphericalVAE"], [208, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[203, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[204, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[205, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[206, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[207, 1, 1, "", "decode"], [207, 1, 1, "", "encode"], [207, 1, 1, "", "forward"], [207, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[209, 0, 1, "", "SphericalGVGG"], [210, 0, 1, "", "SphericalGVGG11"], [211, 0, 1, "", "SphericalGVGG11BN"], [212, 0, 1, "", "SphericalGVGG13"], [213, 0, 1, "", "SphericalGVGG13BN"], [214, 0, 1, "", "SphericalGVGG16"], [215, 0, 1, "", "SphericalGVGG16BN"], [216, 0, 1, "", "SphericalGVGG19"], [217, 0, 1, "", "SphericalGVGG19BN"], [218, 0, 1, "", "SphericalVGG"], [219, 0, 1, "", "SphericalVGG11"], [220, 0, 1, "", "SphericalVGG11BN"], [221, 0, 1, "", "SphericalVGG13"], [222, 0, 1, "", "SphericalVGG13BN"], [223, 0, 1, "", "SphericalVGG16"], [224, 0, 1, "", "SphericalVGG16BN"], [225, 0, 1, "", "SphericalVGG19"], [226, 0, 1, "", "SphericalVGG19BN"], [227, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[209, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[218, 1, 1, "", "forward"]], "surfify.nn": [[229, 0, 1, "", "IcoDiNeConv"], [230, 0, 1, "", "IcoFixIndexUpSample"], [231, 0, 1, "", "IcoGenericUpConv"], [232, 0, 1, "", "IcoMaxIndexUpSample"], [233, 0, 1, "", "IcoPool"], [234, 0, 1, "", "IcoRePaConv"], [235, 0, 1, "", "IcoSpMaConv"], [236, 0, 1, "", "IcoSpMaConvTranspose"], [237, 0, 1, "", "IcoUpConv"], [238, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[229, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[230, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[231, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[232, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[233, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[234, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[235, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[236, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[237, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[238, 1, 1, "", "forward"]], "surfify.nn.functional": [[239, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[240, 0, 1, "", "IcoDiNeConv"], [241, 0, 1, "", "IcoFixIndexUpSample"], [242, 0, 1, "", "IcoGenericUpConv"], [243, 0, 1, "", "IcoMaxIndexUpSample"], [244, 0, 1, "", "IcoPool"], [245, 0, 1, "", "IcoRePaConv"], [246, 0, 1, "", "IcoSpMaConv"], [247, 0, 1, "", "IcoSpMaConvTranspose"], [248, 0, 1, "", "IcoUpConv"], [249, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[240, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[241, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[242, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[243, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[244, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[245, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[246, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[247, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[248, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[249, 1, 1, "", "forward"]], "surfify.plotting": [[251, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[252, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[253, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[253, 1, 1, "", "fit"], [253, 1, 1, "", "get_metadata_routing"], [253, 1, 1, "", "inverse_transform"], [253, 1, 1, "", "set_inverse_transform_request"], [253, 1, 1, "", "set_partial_fit_request"], [253, 1, 1, "", "set_transform_request"], [253, 1, 1, "", "transform"]], "surfify.transforms": [[254, 0, 1, "", "RandomCompose"]], "surfify.utils": [[256, 2, 1, "", "cart2sph"], [264, 2, 1, "", "debug_msg"], [265, 2, 1, "", "downsample"], [266, 2, 1, "", "downsample_data"], [267, 2, 1, "", "downsample_ico"], [268, 2, 1, "", "find_neighbors"], [269, 2, 1, "", "find_rotation_interpol_coefs"], [270, 2, 1, "", "get_logger"], [271, 2, 1, "", "get_rectangular_projection"], [272, 2, 1, "", "grid2text"], [273, 2, 1, "", "ico2ico"], [274, 2, 1, "", "icosahedron"], [275, 2, 1, "", "interpolate"], [276, 2, 1, "", "interpolate_data"], [287, 2, 1, "", "min_depth_to_get_n_neighbors"], [288, 2, 1, "", "neighbors"], [289, 2, 1, "", "neighbors_rec"], [290, 2, 1, "", "number_of_ico_vertices"], [291, 2, 1, "", "number_of_neighbors"], [292, 2, 1, "", "order_of_ico_from_vertices"], [293, 2, 1, "", "order_triangles"], [294, 2, 1, "", "patch_tri"], [295, 2, 1, "", "rotate_data"], [322, 2, 1, "", "setup_logging"], [323, 2, 1, "", "sph2cart"], [324, 2, 1, "", "text2grid"], [325, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[257, 2, 1, "", "cart2sph"], [258, 2, 1, "", "find_corresponding_order"], [259, 2, 1, "", "grid2text"], [260, 2, 1, "", "ico2ico"], [261, 2, 1, "", "sph2cart"], [262, 2, 1, "", "text2grid"], [263, 2, 1, "", "text2ico"]], "surfify.utils.io": [[277, 0, 1, "", "HidePrints"], [278, 2, 1, "", "compute_and_store"], [279, 2, 1, "", "decompose_cifti"], [280, 2, 1, "", "read_freesurfer"], [281, 2, 1, "", "read_gifti"], [282, 2, 1, "", "surf_data_from_cifti"], [283, 2, 1, "", "ungzip"], [284, 2, 1, "", "volume_from_cifti"], [285, 2, 1, "", "write_freesurfer"], [286, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[296, 2, 1, "", "_patch_tri_iter"], [297, 2, 1, "", "build_freesurfer_ico"], [298, 2, 1, "", "build_fslr_ref"], [299, 2, 1, "", "downsample"], [300, 2, 1, "", "downsample_data"], [301, 2, 1, "", "downsample_ico"], [302, 2, 1, "", "find_neighbors"], [303, 2, 1, "", "find_rotation_interpol_coefs"], [304, 2, 1, "", "get_angle_with_xaxis"], [305, 2, 1, "", "get_rectangular_projection"], [306, 2, 1, "", "icosahedron"], [307, 2, 1, "", "interpolate"], [308, 2, 1, "", "interpolate_data"], [309, 2, 1, "", "middle_point"], [310, 2, 1, "", "min_depth_to_get_n_neighbors"], [311, 2, 1, "", "neighbors"], [312, 2, 1, "", "neighbors_rec"], [313, 2, 1, "", "normalize"], [314, 2, 1, "", "number_of_ico_vertices"], [315, 2, 1, "", "number_of_neighbors"], [316, 2, 1, "", "order_of_ico_from_vertices"], [317, 2, 1, "", "order_triangles"], [318, 2, 1, "", "patch_tri"], [319, 2, 1, "", "rotate_data"], [320, 2, 1, "", "triangles_to_edges"], [321, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 3], "case": [0, 3], "spheric": [0, 3, 4, 7], "modul": [0, 3, 228], "comput": [1, 9, 327], "time": [1, 9, 327], "self": 2, "supervis": 2, "contrast": 2, "learn": 2, "simclr": [2, 46, 160], "setup": 2, "data": [2, 6], "augment": [2, 4, 122], "dataset": [2, 8, 26, 149], "train": [2, 8], "logist": 2, "regress": [2, 57], "baselin": 2, "conclus": 2, "surfcutout": 4, "surfnois": 4, "surfblur": 4, "surfrot": 4, "hemimixup": 4, "groupmixup": 4, "group": 4, "transform": [4, 65, 121], "icosahedron": 5, "match": 5, "project": 6, "textur": 6, "load": 6, "3": 6, "d": 6, "surfac": [6, 250], "2": 6, "grid": 6, "uniformli": 6, "distribut": 6, "locat": 6, "integr": 6, "deep": 6, "neural": 6, "network": 6, "neighbor": 7, "direct": 7, "rectagular": 7, "tangent": 7, "plane": 7, "unet": [8, 160], "segment": 8, "inspect": 8, "model": [8, 160], "predict": 8, "label": 8, "api": [10, 12, 13, 26, 32, 43, 46, 54, 57, 65, 68, 89, 90, 120, 121, 122, 149, 156, 160, 228, 250, 255], "document": [10, 12, 13, 26, 32, 43, 46, 54, 57, 65, 68, 89, 90, 120, 121, 122, 149, 156, 160, 228, 250, 255], "nidl": [10, 11, 12, 13, 26, 32, 43, 46, 54, 57, 65, 68, 89, 90, 120], "instal": 11, "stabl": 11, "version": 11, "current": 11, "experi": 12, "callback": 13, "model_prob": 13, "check_typ": 13, "base": [26, 32, 122, 160], "estim": [32, 43, 46], "linear": 43, "logistic_regress": 43, "exampl": [44, 45, 47, 48, 70, 88], "ssl": [46, 65], "loss": [54, 156], "infonc": 54, "metric": 57, "_regress": 57, "classif": 57, "util": [68, 122, 255], "color": 68, "valid": 68, "weight": 68, "bunch": 68, "volum": [89, 90], "backbon": 90, "densenet3d": 90, "alexnet3d": 90, "resnet3d": 90, "search": 120, "surfifi": [121, 122, 149, 156, 160, 228, 250, 255], "preprocess": 121, "mixup": 122, "_samples_gener": 149, "_gener": 149, "vae": [156, 160], "sit": 160, "vgg": 160, "nn": 228, "function": 228, "plot": 250, "io": 255, "coord": 255, "sampl": 255}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [3, "spherical-modules-use-cases"]], "Computation times": [[1, "computation-times"], [9, "computation-times"], [327, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[2, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[2, "setup"]], "Data Augmentation for Contrastive Learning": [[2, "data-augmentation-for-contrastive-learning"]], "Dataset": [[2, "dataset"]], "Training": [[2, "training"]], "Logistic Regression": [[2, "logistic-regression"]], "Baseline": [[2, "baseline"]], "Conclusion": [[2, "conclusion"]], "Spherical augmentations": [[4, "spherical-augmentations"]], "SurfCutOut": [[4, "surfcutout"]], "SurfNoise": [[4, "surfnoise"]], "SurfBlur": [[4, "surfblur"]], "SurfRotation": [[4, "surfrotation"]], "HemiMixUp": [[4, "hemimixup"]], "GroupMixUp": [[4, "groupmixup"]], "GroupMixUp group": [[4, "groupmixup-group"]], "Transformer": [[4, "transformer"]], "Icosahedron matching": [[5, "icosahedron-matching"]], "Project texture": [[6, "project-texture"]], "Load data": [[6, "load-data"]], "3-D surface to 2-D grid projection": [[6, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[6, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[6, "uniformly-distributed-locations"]], "Integration in deep neural network": [[6, "integration-in-deep-neural-network"]], "Spherical neighbors": [[7, "spherical-neighbors"]], "Direct Neighbor": [[7, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[7, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[8, "unet-segmentation"]], "Inspect dataset": [[8, "inspect-dataset"]], "Train the model": [[8, "train-the-model"]], "Inspect the predicted labels": [[8, "inspect-the-predicted-labels"]], "API documentation of nidl": [[10, "api-documentation-of-nidl"], [12, "api-documentation-of-nidl"]], "Installing nidl": [[11, "installing-nidl"]], "Installing a stable version": [[11, "installing-a-stable-version"]], "Installing the current version": [[11, "installing-the-current-version"]], "nidl": [[12, "nidl"]], "nidl.experiment": [[12, "nidl-experiment"]], "API documentation of nidl.callbacks": [[13, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[13, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[13, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[13, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[26, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[26, "nidl-datasets"]], "nidl.datasets.base": [[26, "nidl-datasets-base"]], "API documentation of nidl.estimators": [[32, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[32, "nidl-estimators"]], "nidl.estimators.base": [[32, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[43, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[43, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[43, "nidl-estimators-linear-logistic-regression"]], "Examples": [[44, "examples"], [45, "examples"], [47, "examples"], [48, "examples"], [70, "examples"], [88, "examples"]], "API documentation of nidl.estimators.ssl": [[46, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[46, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[46, "id1"]], "API documentation of nidl.losses": [[54, "api-documentation-of-nidl-losses"]], "nidl.losses": [[54, "nidl-losses"]], "nidl.losses.infonce": [[54, "id1"]], "API documentation of nidl.metrics": [[57, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[57, "nidl-metrics"]], "nidl.metrics._regression": [[57, "nidl-metrics-regression"]], "nidl.metrics.classification": [[57, "nidl-metrics-classification"]], "nidl.metrics.regression": [[57, "id1"]], "API documentation of nidl.transforms": [[65, "api-documentation-of-nidl-transforms"]], "nidl.transforms": [[65, "nidl-transforms"]], "nidl.transforms.ssl": [[65, "nidl-transforms-ssl"]], "API documentation of nidl.utils": [[68, "api-documentation-of-nidl-utils"]], "nidl.utils": [[68, "nidl-utils"]], "nidl.utils.color": [[68, "nidl-utils-color"]], "nidl.utils.validation": [[68, "nidl-utils-validation"]], "nidl.utils.weights": [[68, "id1"]], "nidl.utils.bunch": [[68, "id2"]], "API documentation of nidl.volume": [[89, "api-documentation-of-nidl-volume"]], "nidl.volume": [[89, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[90, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[90, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[90, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[90, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[90, "nidl-volume-backbones-resnet3d"]], "Search in API documentation of nidl": [[120, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[121, "api-documentation-of-surfify"]], "surfify": [[121, "surfify"]], "surfify.preprocessing": [[121, "surfify-preprocessing"]], "surfify.transforms": [[121, "surfify-transforms"]], "API documentation of surfify.augmentation": [[122, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[122, "surfify-augmentation"]], "surfify.augmentation.base": [[122, "surfify-augmentation-base"]], "surfify.augmentation.mixup": [[122, "surfify-augmentation-mixup"]], "surfify.augmentation.utils": [[122, "surfify-augmentation-utils"]], "API documentation of surfify.datasets": [[149, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[149, "surfify-datasets"]], "surfify.datasets._samples_generator": [[149, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[149, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[156, "api-documentation-of-surfify-losses"]], "surfify.losses": [[156, "surfify-losses"]], "surfify.losses.vae": [[156, "surfify-losses-vae"]], "API documentation of surfify.models": [[160, "api-documentation-of-surfify-models"]], "surfify.models": [[160, "surfify-models"]], "surfify.models.base": [[160, "surfify-models-base"]], "surfify.models.sit": [[160, "id1"]], "surfify.models.vae": [[160, "surfify-models-vae"]], "surfify.models.vgg": [[160, "surfify-models-vgg"]], "surfify.models.simclr": [[160, "id2"]], "surfify.models.unet": [[160, "surfify-models-unet"]], "API documentation of surfify.nn": [[228, "api-documentation-of-surfify-nn"]], "surfify.nn": [[228, "surfify-nn"]], "surfify.nn.modules": [[228, "surfify-nn-modules"]], "surfify.nn.functional": [[228, "surfify-nn-functional"]], "API documentation of surfify.plotting": [[250, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[250, "surfify-plotting"]], "surfify.plotting.surface": [[250, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[255, "api-documentation-of-surfify-utils"]], "surfify.utils": [[255, "surfify-utils"]], "surfify.utils.io": [[255, "surfify-utils-io"]], "surfify.utils.coord": [[255, "surfify-utils-coord"]], "surfify.utils.sampling": [[255, "surfify-utils-sampling"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[14, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[14, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[15, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[16, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[17, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[18, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[18, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[19, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[19, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[20, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[21, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[23, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[24, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[25, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[27, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[27, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[28, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[28, "nidl.datasets.BaseNumpyDataset.get_data"]], "basedataset (class in nidl.datasets.base)": [[29, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[30, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[30, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[30, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[31, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[31, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "baseestimator (class in nidl.estimators)": [[33, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[33, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[34, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[35, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[36, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[37, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[38, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[38, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[39, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[40, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[41, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[42, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[44, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[44, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[45, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[47, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[47, "nidl.estimators.ssl.SimCLR.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[48, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[48, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[48, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[48, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[48, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[48, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[49, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[50, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[51, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[52, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[53, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[55, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[55, "nidl.losses.InfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[56, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[56, "nidl.losses.infonce.InfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[58, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[59, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[60, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[61, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[62, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[63, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[64, "nidl.metrics.regression_report"]], "contrastivetransforms (class in nidl.transforms)": [[66, "nidl.transforms.ContrastiveTransforms"]], "contrastivetransforms (class in nidl.transforms.ssl)": [[67, "nidl.transforms.ssl.ContrastiveTransforms"]], "bunch (class in nidl.utils)": [[69, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[70, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[70, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[70, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[70, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[70, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[71, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[72, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[72, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[72, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[72, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[72, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[73, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[74, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[75, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[76, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[77, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[78, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[79, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[80, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[81, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[82, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[83, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[84, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[85, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[86, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[87, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[88, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[88, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[88, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[88, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[88, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[91, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[91, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[92, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[92, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[93, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[93, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[94, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[94, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[95, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[95, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[96, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[97, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[97, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[98, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[98, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[99, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[99, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[100, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[101, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[102, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[103, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[104, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[105, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[106, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[106, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[107, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[107, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[108, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[108, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[109, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[109, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[110, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[111, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[112, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[113, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[114, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[115, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[116, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[117, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[118, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[119, "nidl.volume.backbones.resnet50_trunc"]], "basetransformer (class in surfify.augmentation)": [[123, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[123, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[124, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[124, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[124, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[125, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[125, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[126, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[126, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[127, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[127, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[128, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[128, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[129, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[129, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[130, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[131, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[132, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[132, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[133, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[133, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[134, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[134, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[135, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[135, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[136, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[137, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[137, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[137, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[138, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[138, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[139, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[139, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[140, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[141, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[141, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[142, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[142, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[142, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[142, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[142, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[143, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[143, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[143, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[143, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[144, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[145, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[146, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[147, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[148, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[150, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[151, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[152, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[153, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[154, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[155, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[157, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[158, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[159, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[161, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[161, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[162, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[162, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[163, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[163, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[164, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[164, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[165, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[165, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[166, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[166, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[167, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[167, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[168, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[169, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[170, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[171, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[172, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[173, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[174, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[175, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[176, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[176, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[177, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[177, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[178, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[178, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[179, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[179, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[179, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[179, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[179, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[180, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[180, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[181, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[182, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[183, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[184, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[185, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[186, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[187, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[188, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[189, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[189, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[190, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[190, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[191, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[191, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[192, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[192, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[193, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[193, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[194, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[194, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[195, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[195, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[196, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[196, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[197, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[197, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[198, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[198, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[199, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[199, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[200, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[200, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[201, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[201, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[202, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[202, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[203, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[203, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[204, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[204, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[205, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[205, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[206, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[206, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[207, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[207, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[207, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[207, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[207, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[208, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[209, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[209, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[210, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[211, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[212, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[213, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[214, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[215, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[216, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[217, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[218, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[218, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[219, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[220, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[221, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[222, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[223, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[224, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[225, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[226, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[227, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[229, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[229, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[230, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[230, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[231, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[231, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[232, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[232, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[233, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[233, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[234, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[234, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[235, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[235, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[236, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[236, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[237, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[237, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[238, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[238, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[239, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[240, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[240, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[241, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[241, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[242, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[242, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[243, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[243, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[244, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[244, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[245, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[245, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[246, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[246, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[247, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[247, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[248, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[248, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[249, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[249, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[251, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[252, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[253, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[253, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[254, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[256, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[257, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[258, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[259, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[260, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[261, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[262, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[263, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[264, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[265, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[266, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[267, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[268, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[269, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[270, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[271, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[272, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[273, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[274, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[275, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[276, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[277, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[278, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[279, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[280, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[281, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[282, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[283, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[284, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[285, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[286, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[287, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[288, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[289, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[290, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[291, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[292, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[293, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[294, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[295, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[296, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[297, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[298, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[299, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[300, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[301, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[302, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[303, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[304, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[305, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[306, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[307, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[308, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[309, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[310, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[311, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[312, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[313, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[314, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[315, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[316, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[317, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[318, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[319, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[320, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[321, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[322, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[323, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[324, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[325, "surfify.utils.text2ico"]]}})
Search.setIndex({"docnames": ["auto_gallery/index", "auto_gallery/openbhb", "auto_gallery/sg_execution_times", "auto_gallery/simclr_stl10", "auto_gallery/surfify/index", "auto_gallery/surfify/plot_augmentation", "auto_gallery/surfify/plot_match_icosahedron", "auto_gallery/surfify/plot_project_texture", "auto_gallery/surfify/plot_spherical_neighbors", "auto_gallery/surfify/plot_unet_segmentation", "auto_gallery/surfify/sg_execution_times", "generated/documentation", "generated/installation", "generated/nidl", "generated/nidl.callbacks", "generated/nidl.callbacks.BatchTypingCallback", "generated/nidl.callbacks.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.LogisticRegressionCVCallback", "generated/nidl.callbacks.ModelProbing", "generated/nidl.callbacks.RidgeCVCallback", "generated/nidl.callbacks.check_typing.BatchTypingCallback", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback", "generated/nidl.callbacks.model_probing.ModelProbing", "generated/nidl.callbacks.model_probing.RidgeCVCallback", "generated/nidl.datasets", "generated/nidl.datasets.BaseImageDataset", "generated/nidl.datasets.BaseNumpyDataset", "generated/nidl.datasets.ImageDataFrameDataset", "generated/nidl.datasets.OpenBHB", "generated/nidl.datasets.base.BaseDataset", "generated/nidl.datasets.base.BaseImageDataset", "generated/nidl.datasets.base.BaseNumpyDataset", "generated/nidl.datasets.openbhb.OpenBHB", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset", "generated/nidl.datasets.pandas_dataset.default_image_loader", "generated/nidl.estimators", "generated/nidl.estimators.BaseEstimator", "generated/nidl.estimators.ClassifierMixin", "generated/nidl.estimators.ClusterMixin", "generated/nidl.estimators.RegressorMixin", "generated/nidl.estimators.TransformerMixin", "generated/nidl.estimators.base.BaseEstimator", "generated/nidl.estimators.base.ClassifierMixin", "generated/nidl.estimators.base.ClusterMixin", "generated/nidl.estimators.base.RegressorMixin", "generated/nidl.estimators.base.TransformerMixin", "generated/nidl.estimators.linear", "generated/nidl.estimators.linear.LogisticRegression", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression", "generated/nidl.estimators.ssl", "generated/nidl.estimators.ssl.SimCLR", "generated/nidl.estimators.ssl.YAwareContrastiveLearning", "generated/nidl.estimators.ssl.simclr.SimCLR", "generated/nidl.estimators.ssl.utils", "generated/nidl.estimators.ssl.utils.ProjectionHead", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning", "generated/nidl.experiment.fetch_experiment", "generated/nidl.experiment.filter_config", "generated/nidl.experiment.get_env", "generated/nidl.experiment.load_interface", "generated/nidl.experiment.update_params", "generated/nidl.losses", "generated/nidl.losses.InfoNCE", "generated/nidl.losses.KernelMetric", "generated/nidl.losses.YAwareInfoNCE", "generated/nidl.losses.infonce.InfoNCE", "generated/nidl.losses.yaware_infonce.KernelMetric", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE", "generated/nidl.metrics", "generated/nidl.metrics._regression._check_reg_targets", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype", "generated/nidl.metrics._regression._find_matching_floating_dtype", "generated/nidl.metrics.pearson_r", "generated/nidl.metrics.regression.pearson_r", "generated/nidl.metrics.regression.regression_report", "generated/nidl.metrics.regression_report", "generated/nidl.transforms.Identity", "generated/nidl.transforms.MultiViewsTransform", "generated/nidl.transforms.Transform", "generated/nidl.utils", "generated/nidl.utils.Bunch", "generated/nidl.utils.Weights", "generated/nidl.utils.bunch.Bunch", "generated/nidl.utils.color.Colored", "generated/nidl.utils.color.attr", "generated/nidl.utils.color.fg", "generated/nidl.utils.color.hex", "generated/nidl.utils.color.print_multicolor", "generated/nidl.utils.color.print_result", "generated/nidl.utils.color.print_subtitle", "generated/nidl.utils.color.print_title", "generated/nidl.utils.color.print_warning", "generated/nidl.utils.color.random_stylize", "generated/nidl.utils.color.stylize", "generated/nidl.utils.print_multicolor", "generated/nidl.utils.validation._AvailableIfDescriptor", "generated/nidl.utils.validation._estimator_is", "generated/nidl.utils.validation.available_if", "generated/nidl.utils.validation.check_is_fitted", "generated/nidl.utils.weights.Weights", "generated/nidl.volume", "generated/nidl.volume.backbones", "generated/nidl.volume.backbones.AlexNet", "generated/nidl.volume.backbones.DenseNet", "generated/nidl.volume.backbones.ResNet", "generated/nidl.volume.backbones.ResNetTruncated", "generated/nidl.volume.backbones.alexnet3d.AlexNet", "generated/nidl.volume.backbones.densenet121", "generated/nidl.volume.backbones.densenet3d.DenseNet", "generated/nidl.volume.backbones.densenet3d._DenseBlock", "generated/nidl.volume.backbones.densenet3d._DenseLayer", "generated/nidl.volume.backbones.densenet3d._Transition", "generated/nidl.volume.backbones.densenet3d._bn_function_factory", "generated/nidl.volume.backbones.densenet3d._densenet", "generated/nidl.volume.backbones.densenet3d.densenet121", "generated/nidl.volume.backbones.resnet18", "generated/nidl.volume.backbones.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.BasicBlock", "generated/nidl.volume.backbones.resnet3d.Bottleneck", "generated/nidl.volume.backbones.resnet3d.ResNet", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated", "generated/nidl.volume.backbones.resnet3d._resnet", "generated/nidl.volume.backbones.resnet3d._resnet_trunc", "generated/nidl.volume.backbones.resnet3d.conv1x1", "generated/nidl.volume.backbones.resnet3d.conv3x3", "generated/nidl.volume.backbones.resnet3d.resnet18", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc", "generated/nidl.volume.backbones.resnet3d.resnet50", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc", "generated/nidl.volume.backbones.resnet50", "generated/nidl.volume.backbones.resnet50_trunc", "generated/nidl.volume.transforms", "generated/nidl.volume.transforms.augmentation", "generated/nidl.volume.transforms.augmentation.intensity", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise", "generated/nidl.volume.transforms.augmentation.spatial", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation", "generated/nidl.volume.transforms.preprocessing", "generated/nidl.volume.transforms.preprocessing.intensity", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization", "generated/nidl.volume.transforms.preprocessing.spatial", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.Resize", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize", "generated/nidl.volume.transforms.volume_transform.VolumeTransform", "generated/search", "generated/surfify", "generated/surfify.augmentation", "generated/surfify.augmentation.BaseTransformer", "generated/surfify.augmentation.GroupMixUp", "generated/surfify.augmentation.HemiMixUp", "generated/surfify.augmentation.SurfBlur", "generated/surfify.augmentation.SurfCutOut", "generated/surfify.augmentation.SurfNoise", "generated/surfify.augmentation.SurfRotation", "generated/surfify.augmentation.Transformer", "generated/surfify.augmentation.apply_chained_transforms", "generated/surfify.augmentation.base.SurfBlur", "generated/surfify.augmentation.base.SurfCutOut", "generated/surfify.augmentation.base.SurfNoise", "generated/surfify.augmentation.base.SurfRotation", "generated/surfify.augmentation.interval", "generated/surfify.augmentation.mixup.GroupMixUp", "generated/surfify.augmentation.mixup.HemiMixUp", "generated/surfify.augmentation.mixup.MixUpAugmentation", "generated/surfify.augmentation.multichannel_augmentation", "generated/surfify.augmentation.utils.BaseTransformer", "generated/surfify.augmentation.utils.RandomAugmentation", "generated/surfify.augmentation.utils.Transform", "generated/surfify.augmentation.utils.Transformer", "generated/surfify.augmentation.utils.apply_chained_transforms", "generated/surfify.augmentation.utils.interval", "generated/surfify.augmentation.utils.listify", "generated/surfify.augmentation.utils.multichannel_augmentation", "generated/surfify.datasets", "generated/surfify.datasets.ClassificationDataset", "generated/surfify.datasets.GenericSurfDataset", "generated/surfify.datasets._generic.GenericSurfDataset", "generated/surfify.datasets._samples_generator.ClassificationDataset", "generated/surfify.datasets._samples_generator.make_classification", "generated/surfify.datasets.make_classification", "generated/surfify.losses", "generated/surfify.losses.SphericalVAELoss", "generated/surfify.losses.vae.SphericalVAELoss", "generated/surfify.losses.vae.log_likelihood", "generated/surfify.models", "generated/surfify.models.HemiFusionDecoder", "generated/surfify.models.HemiFusionEncoder", "generated/surfify.models.SiT", "generated/surfify.models.SimCLR", "generated/surfify.models.SphericalBase", "generated/surfify.models.SphericalGUNet", "generated/surfify.models.SphericalGVGG", "generated/surfify.models.SphericalGVGG11", "generated/surfify.models.SphericalGVGG11BN", "generated/surfify.models.SphericalGVGG13", "generated/surfify.models.SphericalGVGG13BN", "generated/surfify.models.SphericalGVGG16", "generated/surfify.models.SphericalGVGG16BN", "generated/surfify.models.SphericalGVGG19", "generated/surfify.models.SphericalGVGG19BN", "generated/surfify.models.SphericalHemiFusionDecoder", "generated/surfify.models.SphericalHemiFusionEncoder", "generated/surfify.models.SphericalUNet", "generated/surfify.models.SphericalVAE", "generated/surfify.models.SphericalVGG", "generated/surfify.models.SphericalVGG11", "generated/surfify.models.SphericalVGG11BN", "generated/surfify.models.SphericalVGG13", "generated/surfify.models.SphericalVGG13BN", "generated/surfify.models.SphericalVGG16", "generated/surfify.models.SphericalVGG16BN", "generated/surfify.models.SphericalVGG19", "generated/surfify.models.SphericalVGG19BN", "generated/surfify.models.base.Ico", "generated/surfify.models.base.SphericalBase", "generated/surfify.models.simclr.SimCLR", "generated/surfify.models.sit.Attention", "generated/surfify.models.sit.FeedForward", "generated/surfify.models.sit.SiT", "generated/surfify.models.sit.Transformer", "generated/surfify.models.unet.DownBlock", "generated/surfify.models.unet.DownGBlock", "generated/surfify.models.unet.GraphicalUNet", "generated/surfify.models.unet.SphericalGUNet", "generated/surfify.models.unet.SphericalUNet", "generated/surfify.models.unet.UpBlock", "generated/surfify.models.unet.UpGBlock", "generated/surfify.models.vae.HemiFusionDecoder", "generated/surfify.models.vae.HemiFusionEncoder", "generated/surfify.models.vae.SphericalHemiFusionDecoder", "generated/surfify.models.vae.SphericalHemiFusionEncoder", "generated/surfify.models.vae.SphericalVAE", "generated/surfify.models.vae.compute_output_dim", "generated/surfify.models.vgg.SphericalGVGG", "generated/surfify.models.vgg.SphericalGVGG11", "generated/surfify.models.vgg.SphericalGVGG11BN", "generated/surfify.models.vgg.SphericalGVGG13", "generated/surfify.models.vgg.SphericalGVGG13BN", "generated/surfify.models.vgg.SphericalGVGG16", "generated/surfify.models.vgg.SphericalGVGG16BN", "generated/surfify.models.vgg.SphericalGVGG19", "generated/surfify.models.vgg.SphericalGVGG19BN", "generated/surfify.models.vgg.SphericalVGG", "generated/surfify.models.vgg.SphericalVGG11", "generated/surfify.models.vgg.SphericalVGG11BN", "generated/surfify.models.vgg.SphericalVGG13", "generated/surfify.models.vgg.SphericalVGG13BN", "generated/surfify.models.vgg.SphericalVGG16", "generated/surfify.models.vgg.SphericalVGG16BN", "generated/surfify.models.vgg.SphericalVGG19", "generated/surfify.models.vgg.SphericalVGG19BN", "generated/surfify.models.vgg.class_factory", "generated/surfify.nn", "generated/surfify.nn.IcoDiNeConv", "generated/surfify.nn.IcoFixIndexUpSample", "generated/surfify.nn.IcoGenericUpConv", "generated/surfify.nn.IcoMaxIndexUpSample", "generated/surfify.nn.IcoPool", "generated/surfify.nn.IcoRePaConv", "generated/surfify.nn.IcoSpMaConv", "generated/surfify.nn.IcoSpMaConvTranspose", "generated/surfify.nn.IcoUpConv", "generated/surfify.nn.IcoUpSample", "generated/surfify.nn.functional.circular_pad", "generated/surfify.nn.modules.IcoDiNeConv", "generated/surfify.nn.modules.IcoFixIndexUpSample", "generated/surfify.nn.modules.IcoGenericUpConv", "generated/surfify.nn.modules.IcoMaxIndexUpSample", "generated/surfify.nn.modules.IcoPool", "generated/surfify.nn.modules.IcoRePaConv", "generated/surfify.nn.modules.IcoSpMaConv", "generated/surfify.nn.modules.IcoSpMaConvTranspose", "generated/surfify.nn.modules.IcoUpConv", "generated/surfify.nn.modules.IcoUpSample", "generated/surfify.plotting", "generated/surfify.plotting.plot_trisurf", "generated/surfify.plotting.surface.plot_trisurf", "generated/surfify.preprocessing.StandardScaler", "generated/surfify.transforms.RandomCompose", "generated/surfify.utils", "generated/surfify.utils.cart2sph", "generated/surfify.utils.coord.cart2sph", "generated/surfify.utils.coord.find_corresponding_order", "generated/surfify.utils.coord.grid2text", "generated/surfify.utils.coord.ico2ico", "generated/surfify.utils.coord.sph2cart", "generated/surfify.utils.coord.text2grid", "generated/surfify.utils.coord.text2ico", "generated/surfify.utils.debug_msg", "generated/surfify.utils.downsample", "generated/surfify.utils.downsample_data", "generated/surfify.utils.downsample_ico", "generated/surfify.utils.find_neighbors", "generated/surfify.utils.find_rotation_interpol_coefs", "generated/surfify.utils.get_logger", "generated/surfify.utils.get_rectangular_projection", "generated/surfify.utils.grid2text", "generated/surfify.utils.ico2ico", "generated/surfify.utils.icosahedron", "generated/surfify.utils.interpolate", "generated/surfify.utils.interpolate_data", "generated/surfify.utils.io.HidePrints", "generated/surfify.utils.io.compute_and_store", "generated/surfify.utils.io.decompose_cifti", "generated/surfify.utils.io.read_freesurfer", "generated/surfify.utils.io.read_gifti", "generated/surfify.utils.io.surf_data_from_cifti", "generated/surfify.utils.io.ungzip", "generated/surfify.utils.io.volume_from_cifti", "generated/surfify.utils.io.write_freesurfer", "generated/surfify.utils.io.write_gifti", "generated/surfify.utils.min_depth_to_get_n_neighbors", "generated/surfify.utils.neighbors", "generated/surfify.utils.neighbors_rec", "generated/surfify.utils.number_of_ico_vertices", "generated/surfify.utils.number_of_neighbors", "generated/surfify.utils.order_of_ico_from_vertices", "generated/surfify.utils.order_triangles", "generated/surfify.utils.patch_tri", "generated/surfify.utils.rotate_data", "generated/surfify.utils.sampling._patch_tri_iter", "generated/surfify.utils.sampling.build_freesurfer_ico", "generated/surfify.utils.sampling.build_fslr_ref", "generated/surfify.utils.sampling.downsample", "generated/surfify.utils.sampling.downsample_data", "generated/surfify.utils.sampling.downsample_ico", "generated/surfify.utils.sampling.find_neighbors", "generated/surfify.utils.sampling.find_rotation_interpol_coefs", "generated/surfify.utils.sampling.get_angle_with_xaxis", "generated/surfify.utils.sampling.get_rectangular_projection", "generated/surfify.utils.sampling.icosahedron", "generated/surfify.utils.sampling.interpolate", "generated/surfify.utils.sampling.interpolate_data", "generated/surfify.utils.sampling.middle_point", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors", "generated/surfify.utils.sampling.neighbors", "generated/surfify.utils.sampling.neighbors_rec", "generated/surfify.utils.sampling.normalize", "generated/surfify.utils.sampling.number_of_ico_vertices", "generated/surfify.utils.sampling.number_of_neighbors", "generated/surfify.utils.sampling.order_of_ico_from_vertices", "generated/surfify.utils.sampling.order_triangles", "generated/surfify.utils.sampling.patch_tri", "generated/surfify.utils.sampling.rotate_data", "generated/surfify.utils.sampling.triangles_to_edges", "generated/surfify.utils.sampling.vertex_adjacency_graph", "generated/surfify.utils.setup_logging", "generated/surfify.utils.sph2cart", "generated/surfify.utils.text2grid", "generated/surfify.utils.text2ico", "index", "sg_execution_times"], "filenames": ["auto_gallery/index.rst", "auto_gallery/openbhb.rst", "auto_gallery/sg_execution_times.rst", "auto_gallery/simclr_stl10.rst", "auto_gallery/surfify/index.rst", "auto_gallery/surfify/plot_augmentation.rst", "auto_gallery/surfify/plot_match_icosahedron.rst", "auto_gallery/surfify/plot_project_texture.rst", "auto_gallery/surfify/plot_spherical_neighbors.rst", "auto_gallery/surfify/plot_unet_segmentation.rst", "auto_gallery/surfify/sg_execution_times.rst", "generated/documentation.rst", "generated/installation.rst", "generated/nidl.rst", "generated/nidl.callbacks.rst", "generated/nidl.callbacks.BatchTypingCallback.rst", "generated/nidl.callbacks.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.ModelProbing.rst", "generated/nidl.callbacks.RidgeCVCallback.rst", "generated/nidl.callbacks.check_typing.BatchTypingCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.rst", "generated/nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.rst", "generated/nidl.callbacks.model_probing.LogisticRegressionCVCallback.rst", "generated/nidl.callbacks.model_probing.ModelProbing.rst", "generated/nidl.callbacks.model_probing.RidgeCVCallback.rst", "generated/nidl.datasets.rst", "generated/nidl.datasets.BaseImageDataset.rst", "generated/nidl.datasets.BaseNumpyDataset.rst", "generated/nidl.datasets.ImageDataFrameDataset.rst", "generated/nidl.datasets.OpenBHB.rst", "generated/nidl.datasets.base.BaseDataset.rst", "generated/nidl.datasets.base.BaseImageDataset.rst", "generated/nidl.datasets.base.BaseNumpyDataset.rst", "generated/nidl.datasets.openbhb.OpenBHB.rst", "generated/nidl.datasets.pandas_dataset.ImageDataFrameDataset.rst", "generated/nidl.datasets.pandas_dataset.default_image_loader.rst", "generated/nidl.estimators.rst", "generated/nidl.estimators.BaseEstimator.rst", "generated/nidl.estimators.ClassifierMixin.rst", "generated/nidl.estimators.ClusterMixin.rst", "generated/nidl.estimators.RegressorMixin.rst", "generated/nidl.estimators.TransformerMixin.rst", "generated/nidl.estimators.base.BaseEstimator.rst", "generated/nidl.estimators.base.ClassifierMixin.rst", "generated/nidl.estimators.base.ClusterMixin.rst", "generated/nidl.estimators.base.RegressorMixin.rst", "generated/nidl.estimators.base.TransformerMixin.rst", "generated/nidl.estimators.linear.rst", "generated/nidl.estimators.linear.LogisticRegression.rst", "generated/nidl.estimators.linear.logistic_regression.LogisticRegression.rst", "generated/nidl.estimators.ssl.rst", "generated/nidl.estimators.ssl.SimCLR.rst", "generated/nidl.estimators.ssl.YAwareContrastiveLearning.rst", "generated/nidl.estimators.ssl.simclr.SimCLR.rst", "generated/nidl.estimators.ssl.utils.rst", "generated/nidl.estimators.ssl.utils.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.ProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead.rst", "generated/nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead.rst", "generated/nidl.estimators.ssl.yaware.YAwareContrastiveLearning.rst", "generated/nidl.experiment.fetch_experiment.rst", "generated/nidl.experiment.filter_config.rst", "generated/nidl.experiment.get_env.rst", "generated/nidl.experiment.load_interface.rst", "generated/nidl.experiment.update_params.rst", "generated/nidl.losses.rst", "generated/nidl.losses.InfoNCE.rst", "generated/nidl.losses.KernelMetric.rst", "generated/nidl.losses.YAwareInfoNCE.rst", "generated/nidl.losses.infonce.InfoNCE.rst", "generated/nidl.losses.yaware_infonce.KernelMetric.rst", "generated/nidl.losses.yaware_infonce.PairwiseCosineSimilarity.rst", "generated/nidl.losses.yaware_infonce.YAwareInfoNCE.rst", "generated/nidl.metrics.rst", "generated/nidl.metrics._regression._check_reg_targets.rst", "generated/nidl.metrics._regression._check_reg_targets_with_floating_dtype.rst", "generated/nidl.metrics._regression._find_matching_floating_dtype.rst", "generated/nidl.metrics.pearson_r.rst", "generated/nidl.metrics.regression.pearson_r.rst", "generated/nidl.metrics.regression.regression_report.rst", "generated/nidl.metrics.regression_report.rst", "generated/nidl.transforms.Identity.rst", "generated/nidl.transforms.MultiViewsTransform.rst", "generated/nidl.transforms.Transform.rst", "generated/nidl.utils.rst", "generated/nidl.utils.Bunch.rst", "generated/nidl.utils.Weights.rst", "generated/nidl.utils.bunch.Bunch.rst", "generated/nidl.utils.color.Colored.rst", "generated/nidl.utils.color.attr.rst", "generated/nidl.utils.color.fg.rst", "generated/nidl.utils.color.hex.rst", "generated/nidl.utils.color.print_multicolor.rst", "generated/nidl.utils.color.print_result.rst", "generated/nidl.utils.color.print_subtitle.rst", "generated/nidl.utils.color.print_title.rst", "generated/nidl.utils.color.print_warning.rst", "generated/nidl.utils.color.random_stylize.rst", "generated/nidl.utils.color.stylize.rst", "generated/nidl.utils.print_multicolor.rst", "generated/nidl.utils.validation._AvailableIfDescriptor.rst", "generated/nidl.utils.validation._estimator_is.rst", "generated/nidl.utils.validation.available_if.rst", "generated/nidl.utils.validation.check_is_fitted.rst", "generated/nidl.utils.weights.Weights.rst", "generated/nidl.volume.rst", "generated/nidl.volume.backbones.rst", "generated/nidl.volume.backbones.AlexNet.rst", "generated/nidl.volume.backbones.DenseNet.rst", "generated/nidl.volume.backbones.ResNet.rst", "generated/nidl.volume.backbones.ResNetTruncated.rst", "generated/nidl.volume.backbones.alexnet3d.AlexNet.rst", "generated/nidl.volume.backbones.densenet121.rst", "generated/nidl.volume.backbones.densenet3d.DenseNet.rst", "generated/nidl.volume.backbones.densenet3d._DenseBlock.rst", "generated/nidl.volume.backbones.densenet3d._DenseLayer.rst", "generated/nidl.volume.backbones.densenet3d._Transition.rst", "generated/nidl.volume.backbones.densenet3d._bn_function_factory.rst", "generated/nidl.volume.backbones.densenet3d._densenet.rst", "generated/nidl.volume.backbones.densenet3d.densenet121.rst", "generated/nidl.volume.backbones.resnet18.rst", "generated/nidl.volume.backbones.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.BasicBlock.rst", "generated/nidl.volume.backbones.resnet3d.Bottleneck.rst", "generated/nidl.volume.backbones.resnet3d.ResNet.rst", "generated/nidl.volume.backbones.resnet3d.ResNetTruncated.rst", "generated/nidl.volume.backbones.resnet3d._resnet.rst", "generated/nidl.volume.backbones.resnet3d._resnet_trunc.rst", "generated/nidl.volume.backbones.resnet3d.conv1x1.rst", "generated/nidl.volume.backbones.resnet3d.conv3x3.rst", "generated/nidl.volume.backbones.resnet3d.resnet18.rst", "generated/nidl.volume.backbones.resnet3d.resnet18_trunc.rst", "generated/nidl.volume.backbones.resnet3d.resnet50.rst", "generated/nidl.volume.backbones.resnet3d.resnet50_trunc.rst", "generated/nidl.volume.backbones.resnet50.rst", "generated/nidl.volume.backbones.resnet50_trunc.rst", "generated/nidl.volume.transforms.rst", "generated/nidl.volume.transforms.augmentation.rst", "generated/nidl.volume.transforms.augmentation.intensity.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.rst", "generated/nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.rst", "generated/nidl.volume.transforms.augmentation.spatial.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.RandomRotation.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.rst", "generated/nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.rst", "generated/nidl.volume.transforms.preprocessing.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rst", "generated/nidl.volume.transforms.preprocessing.intensity.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.rst", "generated/nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.rst", "generated/nidl.volume.transforms.preprocessing.spatial.rst", "generated/nidl.volume.transforms.preprocessing.spatial.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.Resize.rst", "generated/nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resample.Resample.rst", "generated/nidl.volume.transforms.preprocessing.spatial.resize.Resize.rst", "generated/nidl.volume.transforms.volume_transform.VolumeTransform.rst", "generated/search.rst", "generated/surfify.rst", "generated/surfify.augmentation.rst", "generated/surfify.augmentation.BaseTransformer.rst", "generated/surfify.augmentation.GroupMixUp.rst", "generated/surfify.augmentation.HemiMixUp.rst", "generated/surfify.augmentation.SurfBlur.rst", "generated/surfify.augmentation.SurfCutOut.rst", "generated/surfify.augmentation.SurfNoise.rst", "generated/surfify.augmentation.SurfRotation.rst", "generated/surfify.augmentation.Transformer.rst", "generated/surfify.augmentation.apply_chained_transforms.rst", "generated/surfify.augmentation.base.SurfBlur.rst", "generated/surfify.augmentation.base.SurfCutOut.rst", "generated/surfify.augmentation.base.SurfNoise.rst", "generated/surfify.augmentation.base.SurfRotation.rst", "generated/surfify.augmentation.interval.rst", "generated/surfify.augmentation.mixup.GroupMixUp.rst", "generated/surfify.augmentation.mixup.HemiMixUp.rst", "generated/surfify.augmentation.mixup.MixUpAugmentation.rst", "generated/surfify.augmentation.multichannel_augmentation.rst", "generated/surfify.augmentation.utils.BaseTransformer.rst", "generated/surfify.augmentation.utils.RandomAugmentation.rst", "generated/surfify.augmentation.utils.Transform.rst", "generated/surfify.augmentation.utils.Transformer.rst", "generated/surfify.augmentation.utils.apply_chained_transforms.rst", "generated/surfify.augmentation.utils.interval.rst", "generated/surfify.augmentation.utils.listify.rst", "generated/surfify.augmentation.utils.multichannel_augmentation.rst", "generated/surfify.datasets.rst", "generated/surfify.datasets.ClassificationDataset.rst", "generated/surfify.datasets.GenericSurfDataset.rst", "generated/surfify.datasets._generic.GenericSurfDataset.rst", "generated/surfify.datasets._samples_generator.ClassificationDataset.rst", "generated/surfify.datasets._samples_generator.make_classification.rst", "generated/surfify.datasets.make_classification.rst", "generated/surfify.losses.rst", "generated/surfify.losses.SphericalVAELoss.rst", "generated/surfify.losses.vae.SphericalVAELoss.rst", "generated/surfify.losses.vae.log_likelihood.rst", "generated/surfify.models.rst", "generated/surfify.models.HemiFusionDecoder.rst", "generated/surfify.models.HemiFusionEncoder.rst", "generated/surfify.models.SiT.rst", "generated/surfify.models.SimCLR.rst", "generated/surfify.models.SphericalBase.rst", "generated/surfify.models.SphericalGUNet.rst", "generated/surfify.models.SphericalGVGG.rst", "generated/surfify.models.SphericalGVGG11.rst", "generated/surfify.models.SphericalGVGG11BN.rst", "generated/surfify.models.SphericalGVGG13.rst", "generated/surfify.models.SphericalGVGG13BN.rst", "generated/surfify.models.SphericalGVGG16.rst", "generated/surfify.models.SphericalGVGG16BN.rst", "generated/surfify.models.SphericalGVGG19.rst", "generated/surfify.models.SphericalGVGG19BN.rst", "generated/surfify.models.SphericalHemiFusionDecoder.rst", "generated/surfify.models.SphericalHemiFusionEncoder.rst", "generated/surfify.models.SphericalUNet.rst", "generated/surfify.models.SphericalVAE.rst", "generated/surfify.models.SphericalVGG.rst", "generated/surfify.models.SphericalVGG11.rst", "generated/surfify.models.SphericalVGG11BN.rst", "generated/surfify.models.SphericalVGG13.rst", "generated/surfify.models.SphericalVGG13BN.rst", "generated/surfify.models.SphericalVGG16.rst", "generated/surfify.models.SphericalVGG16BN.rst", "generated/surfify.models.SphericalVGG19.rst", "generated/surfify.models.SphericalVGG19BN.rst", "generated/surfify.models.base.Ico.rst", "generated/surfify.models.base.SphericalBase.rst", "generated/surfify.models.simclr.SimCLR.rst", "generated/surfify.models.sit.Attention.rst", "generated/surfify.models.sit.FeedForward.rst", "generated/surfify.models.sit.SiT.rst", "generated/surfify.models.sit.Transformer.rst", "generated/surfify.models.unet.DownBlock.rst", "generated/surfify.models.unet.DownGBlock.rst", "generated/surfify.models.unet.GraphicalUNet.rst", "generated/surfify.models.unet.SphericalGUNet.rst", "generated/surfify.models.unet.SphericalUNet.rst", "generated/surfify.models.unet.UpBlock.rst", "generated/surfify.models.unet.UpGBlock.rst", "generated/surfify.models.vae.HemiFusionDecoder.rst", "generated/surfify.models.vae.HemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalHemiFusionDecoder.rst", "generated/surfify.models.vae.SphericalHemiFusionEncoder.rst", "generated/surfify.models.vae.SphericalVAE.rst", "generated/surfify.models.vae.compute_output_dim.rst", "generated/surfify.models.vgg.SphericalGVGG.rst", "generated/surfify.models.vgg.SphericalGVGG11.rst", "generated/surfify.models.vgg.SphericalGVGG11BN.rst", "generated/surfify.models.vgg.SphericalGVGG13.rst", "generated/surfify.models.vgg.SphericalGVGG13BN.rst", "generated/surfify.models.vgg.SphericalGVGG16.rst", "generated/surfify.models.vgg.SphericalGVGG16BN.rst", "generated/surfify.models.vgg.SphericalGVGG19.rst", "generated/surfify.models.vgg.SphericalGVGG19BN.rst", "generated/surfify.models.vgg.SphericalVGG.rst", "generated/surfify.models.vgg.SphericalVGG11.rst", "generated/surfify.models.vgg.SphericalVGG11BN.rst", "generated/surfify.models.vgg.SphericalVGG13.rst", "generated/surfify.models.vgg.SphericalVGG13BN.rst", "generated/surfify.models.vgg.SphericalVGG16.rst", "generated/surfify.models.vgg.SphericalVGG16BN.rst", "generated/surfify.models.vgg.SphericalVGG19.rst", "generated/surfify.models.vgg.SphericalVGG19BN.rst", "generated/surfify.models.vgg.class_factory.rst", "generated/surfify.nn.rst", "generated/surfify.nn.IcoDiNeConv.rst", "generated/surfify.nn.IcoFixIndexUpSample.rst", "generated/surfify.nn.IcoGenericUpConv.rst", "generated/surfify.nn.IcoMaxIndexUpSample.rst", "generated/surfify.nn.IcoPool.rst", "generated/surfify.nn.IcoRePaConv.rst", "generated/surfify.nn.IcoSpMaConv.rst", "generated/surfify.nn.IcoSpMaConvTranspose.rst", "generated/surfify.nn.IcoUpConv.rst", "generated/surfify.nn.IcoUpSample.rst", "generated/surfify.nn.functional.circular_pad.rst", "generated/surfify.nn.modules.IcoDiNeConv.rst", "generated/surfify.nn.modules.IcoFixIndexUpSample.rst", "generated/surfify.nn.modules.IcoGenericUpConv.rst", "generated/surfify.nn.modules.IcoMaxIndexUpSample.rst", "generated/surfify.nn.modules.IcoPool.rst", "generated/surfify.nn.modules.IcoRePaConv.rst", "generated/surfify.nn.modules.IcoSpMaConv.rst", "generated/surfify.nn.modules.IcoSpMaConvTranspose.rst", "generated/surfify.nn.modules.IcoUpConv.rst", "generated/surfify.nn.modules.IcoUpSample.rst", "generated/surfify.plotting.rst", "generated/surfify.plotting.plot_trisurf.rst", "generated/surfify.plotting.surface.plot_trisurf.rst", "generated/surfify.preprocessing.StandardScaler.rst", "generated/surfify.transforms.RandomCompose.rst", "generated/surfify.utils.rst", "generated/surfify.utils.cart2sph.rst", "generated/surfify.utils.coord.cart2sph.rst", "generated/surfify.utils.coord.find_corresponding_order.rst", "generated/surfify.utils.coord.grid2text.rst", "generated/surfify.utils.coord.ico2ico.rst", "generated/surfify.utils.coord.sph2cart.rst", "generated/surfify.utils.coord.text2grid.rst", "generated/surfify.utils.coord.text2ico.rst", "generated/surfify.utils.debug_msg.rst", "generated/surfify.utils.downsample.rst", "generated/surfify.utils.downsample_data.rst", "generated/surfify.utils.downsample_ico.rst", "generated/surfify.utils.find_neighbors.rst", "generated/surfify.utils.find_rotation_interpol_coefs.rst", "generated/surfify.utils.get_logger.rst", "generated/surfify.utils.get_rectangular_projection.rst", "generated/surfify.utils.grid2text.rst", "generated/surfify.utils.ico2ico.rst", "generated/surfify.utils.icosahedron.rst", "generated/surfify.utils.interpolate.rst", "generated/surfify.utils.interpolate_data.rst", "generated/surfify.utils.io.HidePrints.rst", "generated/surfify.utils.io.compute_and_store.rst", "generated/surfify.utils.io.decompose_cifti.rst", "generated/surfify.utils.io.read_freesurfer.rst", "generated/surfify.utils.io.read_gifti.rst", "generated/surfify.utils.io.surf_data_from_cifti.rst", "generated/surfify.utils.io.ungzip.rst", "generated/surfify.utils.io.volume_from_cifti.rst", "generated/surfify.utils.io.write_freesurfer.rst", "generated/surfify.utils.io.write_gifti.rst", "generated/surfify.utils.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.neighbors.rst", "generated/surfify.utils.neighbors_rec.rst", "generated/surfify.utils.number_of_ico_vertices.rst", "generated/surfify.utils.number_of_neighbors.rst", "generated/surfify.utils.order_of_ico_from_vertices.rst", "generated/surfify.utils.order_triangles.rst", "generated/surfify.utils.patch_tri.rst", "generated/surfify.utils.rotate_data.rst", "generated/surfify.utils.sampling._patch_tri_iter.rst", "generated/surfify.utils.sampling.build_freesurfer_ico.rst", "generated/surfify.utils.sampling.build_fslr_ref.rst", "generated/surfify.utils.sampling.downsample.rst", "generated/surfify.utils.sampling.downsample_data.rst", "generated/surfify.utils.sampling.downsample_ico.rst", "generated/surfify.utils.sampling.find_neighbors.rst", "generated/surfify.utils.sampling.find_rotation_interpol_coefs.rst", "generated/surfify.utils.sampling.get_angle_with_xaxis.rst", "generated/surfify.utils.sampling.get_rectangular_projection.rst", "generated/surfify.utils.sampling.icosahedron.rst", "generated/surfify.utils.sampling.interpolate.rst", "generated/surfify.utils.sampling.interpolate_data.rst", "generated/surfify.utils.sampling.middle_point.rst", "generated/surfify.utils.sampling.min_depth_to_get_n_neighbors.rst", "generated/surfify.utils.sampling.neighbors.rst", "generated/surfify.utils.sampling.neighbors_rec.rst", "generated/surfify.utils.sampling.normalize.rst", "generated/surfify.utils.sampling.number_of_ico_vertices.rst", "generated/surfify.utils.sampling.number_of_neighbors.rst", "generated/surfify.utils.sampling.order_of_ico_from_vertices.rst", "generated/surfify.utils.sampling.order_triangles.rst", "generated/surfify.utils.sampling.patch_tri.rst", "generated/surfify.utils.sampling.rotate_data.rst", "generated/surfify.utils.sampling.triangles_to_edges.rst", "generated/surfify.utils.sampling.vertex_adjacency_graph.rst", "generated/surfify.utils.setup_logging.rst", "generated/surfify.utils.sph2cart.rst", "generated/surfify.utils.text2grid.rst", "generated/surfify.utils.text2ico.rst", "index.rst", "sg_execution_times.rst"], "titles": ["Use Cases", "Presentation of the OpenBHB dataset and baseline models for age and sex predictions", "Computation times", "Self-Supervised Contrastive Learning with SimCLR", "Spherical Modules Use Cases", "Spherical augmentations", "Icosahedron matching", "Project texture", "Spherical neighbors", "UNet segmentation", "Computation times", "API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>nidl</em>", "API documentation of <em>nidl.callbacks</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.estimators.linear</em>", "Examples", "Examples", "API documentation of <em>nidl.estimators.ssl</em>", "Examples", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.estimators.ssl.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.metrics</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.utils</em>", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "API documentation of <em>nidl.volume</em>", "API documentation of <em>nidl.volume.backbones</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms</em>", "API documentation of <em>nidl.volume.transforms.augmentation</em>", "API documentation of <em>nidl.volume.transforms.augmentation.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.augmentation.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing</em>", "API documentation of <em>nidl.volume.transforms.preprocessing.intensity</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>nidl.volume.transforms.preprocessing.spatial</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Search in API documentation of <code class=\"docutils literal notranslate\"><span class=\"pre\">nidl</span></code>", "API documentation of <em>surfify</em>", "API documentation of <em>surfify.augmentation</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.datasets</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.losses</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.models</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.nn</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.plotting</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "API documentation of <em>surfify.utils</em>", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Computation times"], "terms": {"self": [0, 2, 11, 19, 25, 39, 44, 50, 51, 52, 53, 54, 55, 57, 60, 63, 71, 74, 90, 104, 106, 108, 158, 160, 213, 244, 303, 377], "supervis": [0, 2, 11, 30, 36, 50, 51, 52, 53, 54, 55, 57, 60, 63, 90, 108, 377], "contrast": [0, 2, 50, 51, 53, 54, 55, 63, 72, 76, 90, 108, 158, 160, 201, 202, 214, 241, 377], "learn": [0, 2, 11, 13, 16, 17, 18, 20, 22, 23, 24, 26, 50, 51, 53, 54, 55, 63, 72, 76, 77, 90, 108, 111, 112, 115, 117, 158, 160, 210, 214, 229, 241, 257, 279, 290, 376, 377], "simclr": [0, 2, 11, 50, 51, 53, 55, 58, 59, 61, 62, 90, 108, 170, 214, 241, 377], "present": [0, 2, 31, 35, 54, 63, 90, 107, 108, 377], "openbhb": [0, 2, 11, 31, 35, 170, 377], "dataset": [0, 2, 7, 11, 16, 17, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 64, 170, 200, 201, 202, 203, 204, 205, 300, 312, 313, 316, 325, 326, 345, 350, 357, 358, 369, 374, 375, 377], "baselin": [0, 2, 31, 35, 377], "model": [0, 2, 3, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 64, 88, 90, 108, 113, 114, 116, 123, 128, 129, 170, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 377], "ag": [0, 2, 30, 31, 35, 36, 377], "sex": [0, 2, 31, 35, 377], "predict": [0, 2, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 35, 39, 44, 50, 51, 57, 60, 81, 82, 213, 217, 230, 244, 259, 268, 377], "neighbor": [0, 4, 5, 10, 11, 16, 17, 22, 23, 164, 165, 167, 168, 170, 174, 176, 177, 182, 183, 187, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 251, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 284, 287, 290, 292, 293, 294, 295, 298, 305, 309, 312, 315, 318, 319, 322, 325, 337, 338, 339, 341, 345, 349, 352, 353, 357, 360, 361, 362, 365, 369, 371, 374, 377], "unet": [0, 4, 10, 11, 170, 216, 228, 246, 247, 248, 249, 250, 251, 252, 377], "segment": [0, 1, 4, 10, 113, 114, 128, 129, 158, 160, 377], "project": [0, 1, 4, 5, 6, 8, 10, 12, 28, 33, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 179, 185, 213, 244, 310, 313, 315, 318, 321, 323, 324, 338, 339, 344, 349, 352, 354, 355, 356, 359, 361, 362, 368, 375, 377], "textur": [0, 4, 5, 10, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 211, 212, 217, 226, 227, 229, 230, 253, 254, 255, 256, 257, 259, 268, 301, 302, 309, 312, 313, 316, 322, 325, 326, 345, 350, 357, 358, 369, 374, 375, 377], "icosahedron": [0, 4, 5, 7, 8, 9, 10, 11, 170, 176, 177, 179, 182, 183, 185, 200, 203, 204, 205, 210, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 250, 251, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 309, 310, 312, 313, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 374, 375, 377], "match": [0, 4, 10, 29, 34, 163, 165, 166, 168, 308, 313, 375, 377], "augment": [0, 4, 10, 11, 28, 29, 32, 33, 34, 50, 51, 53, 54, 55, 63, 64, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 377], "download": [0, 1, 3, 5, 6, 7, 8, 9, 31, 35, 88, 90, 108], "all": [0, 1, 3, 6, 16, 17, 18, 19, 22, 23, 24, 25, 28, 30, 31, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 57, 60, 75, 80, 81, 82, 83, 84, 86, 87, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 150, 154, 163, 166, 214, 216, 228, 241, 242, 243, 245, 248, 249, 250, 284, 285, 286, 295, 296, 297, 377], "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 19, 25, 30, 36, 39, 44, 54, 57, 60, 63, 83, 84, 89, 91, 106, 151, 155, 158, 160, 164, 167, 215, 217, 228, 229, 230, 240, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 374, 375, 377], "python": [0, 1, 3, 5, 6, 7, 8, 9, 11, 13, 104], "sourc": [0, 1, 3, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 226, 227, 228, 229, 230, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 268, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "code": [0, 1, 3, 5, 6, 7, 8, 9, 15, 21, 64, 67, 101, 102], "auto_gallery_python": 0, "zip": [0, 1, 3, 5, 6, 7, 8, 9, 333], "jupyt": [0, 1, 3, 5, 6, 7, 8, 9], "notebook": [0, 1, 3, 5, 6, 7, 8, 9], "auto_gallery_jupyt": 0, "galleri": [0, 1, 3, 5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377], "gener": [0, 1, 3, 5, 6, 7, 8, 9, 11, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 31, 33, 35, 39, 44, 50, 51, 53, 54, 55, 63, 86, 87, 148, 150, 152, 154, 189, 199, 200, 203, 204, 205, 210, 312, 318, 333, 335, 336, 347, 348, 352, 374], "sphinx": [0, 1, 3, 5, 6, 7, 8, 9], "go": [1, 3, 5, 6, 7, 8, 9], "end": [1, 3, 5, 6, 7, 8, 9, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 101, 102, 107], "full": [1, 3, 5, 6, 7, 8, 9, 11, 39, 44, 81, 82, 164, 165, 167, 168, 317, 351], "thi": [1, 3, 6, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "introduc": 1, "1": [1, 3, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 58, 59, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 84, 86, 87, 89, 91, 106, 111, 112, 113, 114, 115, 117, 126, 127, 128, 129, 132, 133, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 164, 165, 167, 168, 173, 174, 177, 183, 187, 191, 192, 193, 200, 203, 204, 205, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 246, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 285, 286, 287, 290, 292, 293, 294, 296, 297, 298, 301, 302, 303, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 347, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 371, 374, 375], "larg": [1, 3, 31, 35, 303], "scale": [1, 3, 7, 9, 18, 24, 31, 35, 39, 44, 50, 51, 70, 71, 72, 73, 74, 76, 148, 150, 152, 154, 158, 159, 160, 161, 171, 200, 203, 204, 205, 303, 312, 313, 316, 321, 325, 326, 339, 345, 350, 355, 357, 358, 362, 369, 374, 375], "multi": [1, 31, 35, 39, 44, 50, 51, 53, 55, 86, 190, 198, 213, 244], "site": [1, 6, 31, 35], "mri": [1, 31, 35, 54, 63, 72, 76, 158, 160], "It": [1, 3, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "i": [1, 3, 6, 9, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "design": [1, 39, 44, 64], "perform": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 54, 55, 63, 75, 107, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 174, 187, 214, 241, 242, 243, 245, 248, 283, 284, 285, 286, 294, 295, 296, 297, 303], "benchmark": [1, 3], "deep": [1, 11, 13, 53, 54, 55, 63, 158, 160, 376], "neuroimag": [1, 11, 13, 28, 29, 31, 32, 33, 34, 35, 201, 202, 229, 257], "data": [1, 5, 9, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 71, 72, 74, 76, 78, 79, 80, 81, 82, 85, 86, 87, 90, 108, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 195, 196, 197, 198, 199, 201, 202, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303, 309, 312, 315, 316, 322, 325, 326, 328, 329, 332, 334, 345, 347, 348, 349, 350, 357, 358, 369, 374], "we": [1, 3, 6, 7, 9, 31, 35, 50, 51, 53, 55, 58, 61, 105, 148, 150, 152, 154, 277, 289, 332, 334], "demonstr": 1, "how": [1, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "us": [1, 3, 5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "two": [1, 3, 6, 31, 35, 50, 51, 53, 54, 55, 57, 60, 63, 72, 76, 143, 144, 145, 146, 308, 310, 323, 338, 361], "import": [1, 3, 5, 6, 7, 8, 9, 30, 36, 53, 55, 64, 66, 67, 83, 84, 89, 91, 106, 151, 155, 158, 160, 164, 167, 199, 215, 217, 228, 229, 230, 240, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 374, 375], "task": [1, 3, 30, 36, 50, 51, 53, 55, 78, 79, 113, 114, 128, 129], "These": [1, 31, 35, 54, 63], "serv": 1, "simpl": [1, 3, 5, 6, 8, 9, 53, 55, 57, 60, 111, 115, 148, 150, 152, 154, 214, 241, 310, 323, 371], "entri": 1, "point": [1, 6, 8, 79, 80, 83, 84, 315, 318, 321, 325, 338, 339, 344, 349, 352, 354, 355, 357, 359, 361, 362, 368], "evalu": [1, 3, 7, 71, 74, 289], "potenti": [1, 151, 155, 371], "bia": [1, 3, 57, 60, 279, 290], "across": [1, 16, 18, 22, 24, 31, 35, 39, 44, 83, 84, 143, 145, 148, 150, 152, 154, 163, 166, 174, 175, 187, 188, 213, 244], "dufumi": [1, 31, 35, 54, 63, 72, 76], "et": [1, 3, 53, 54, 55, 63, 70, 73, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 158, 160, 164, 165, 167, 168, 213, 216, 228, 244, 249, 250], "al": [1, 3, 53, 54, 55, 63, 70, 73, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 158, 160, 164, 165, 167, 168, 213, 216, 228, 244, 249, 250], "debias": [1, 31, 35], "2022": [1, 31, 35, 72, 76, 213, 244], "http": [1, 3, 12, 16, 17, 18, 20, 22, 23, 24, 26, 31, 35, 58, 59, 61, 62, 70, 73, 80, 104, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 148, 152, 210, 332, 334], "www": 1, "sciencedirect": 1, "com": [1, 12, 210], "scienc": 1, "articl": 1, "pii": 1, "s1053811922007522": 1, "first": [1, 3, 6, 7, 9, 31, 35, 54, 57, 60, 63, 70, 72, 73, 76, 81, 82, 112, 113, 114, 117, 128, 129, 211, 213, 216, 228, 244, 246, 247, 249, 250, 253, 345, 369], "need": [1, 3, 6, 7, 39, 44, 53, 54, 55, 63, 64, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 289, 295, 296, 297], "run": [1, 3, 5, 6, 7, 8, 9, 16, 17, 18, 19, 22, 23, 24, 25, 54, 63, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 344, 368], "matplotlib": [1, 3, 5, 6, 7, 8, 9, 301, 302, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "pyplot": [1, 3, 5, 6, 7, 8, 9, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "plt": [1, 3, 5, 6, 7, 8, 9, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "nibabel": [1, 30, 31, 35, 36, 149, 151, 153, 155, 164, 167, 201, 202, 332, 334], "numpi": [1, 5, 6, 7, 9, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 54, 63, 77, 87, 158, 160, 163, 164, 166, 167, 169, 303, 306, 307, 311, 373], "np": [1, 5, 6, 7, 9, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 309, 322, 325, 357], "panda": [1, 28, 29, 30, 32, 33, 34, 36, 174, 187, 201, 202], "pd": [1, 30, 36], "seaborn": 1, "sn": 1, "nilearn": 1, "sklearn": [1, 303], "linear_model": 1, "logisticregress": [1, 3, 11, 18, 24, 49, 50, 51, 170], "metric": [1, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 54, 55, 63, 78, 79, 80, 81, 82, 83, 84, 170, 174, 187], "accuracy_scor": 1, "r2_score": [1, 78, 79], "pipelin": [1, 303], "make_pipelin": 1, "preprocess": [1, 11, 31, 35, 87, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 303], "standardscal": [1, 11, 170, 171, 303], "nidl": [1, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 376], "contain": [1, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 89, 91, 201, 202, 215, 240, 258, 301, 302, 328, 344, 368], "6": [1, 3, 5, 31, 35, 54, 63, 83, 84, 89, 91, 229, 230, 239, 257, 268, 338, 344, 361, 368], "healthi": [1, 31, 35], "subject": [1, 28, 29, 32, 33, 34, 174, 175, 187, 188, 201, 202, 303], "anatom": [1, 149, 151, 153, 155], "n_": 1, "train": [1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 39, 44, 50, 51, 53, 54, 55, 63, 64, 150, 154, 164, 165, 167, 168, 172, 201, 202], "3227": [1, 31, 35], "val": [1, 19, 25, 31, 35, 39, 44], "757": [1, 31, 35], "valid": [1, 3, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 68, 87, 104, 105, 106, 107, 170], "demograph": 1, "inform": [1, 3, 28, 29, 32, 33, 34, 64, 72, 76, 201, 202, 210, 215, 240], "about": [1, 3, 64, 345, 369], "ar": [1, 3, 6, 7, 9, 15, 18, 20, 21, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 80, 81, 82, 86, 87, 89, 91, 143, 144, 145, 146, 148, 149, 151, 152, 153, 155, 158, 160, 164, 165, 167, 168, 172, 201, 202, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 289, 303, 308, 312, 325, 338, 345, 347, 357, 361, 369, 371, 374], "avail": [1, 3, 31, 35, 39, 44, 50, 51, 54, 63, 64, 83, 84, 90, 106, 108, 150, 154, 164, 165, 167, 168], "along": [1, 31, 35, 149, 153, 303, 308], "detail": [1, 11, 16, 18, 22, 24, 70, 73, 87, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 150, 154], "acquisit": 1, "magnet": 1, "field": [1, 176, 182, 192, 193, 239], "strength": [1, 17, 18, 20, 23, 24, 26], "set": [1, 3, 6, 16, 17, 22, 23, 31, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 63, 64, 68, 71, 72, 74, 76, 81, 82, 86, 92, 158, 160, 163, 165, 166, 168, 177, 179, 183, 185, 199, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 247, 248, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 304, 315, 325, 329, 349, 357], "root": [1, 3, 12, 17, 20, 23, 26, 28, 29, 31, 32, 33, 34, 35, 83, 84, 201, 202], "tmp": [1, 3], "quasiraw": [1, 31, 35], "vbm_roi": [1, 31, 35], "fs_desikan_roi": [1, 31, 35], "fs_destrieux_roi": [1, 31, 35], "fs_xhemi": [1, 31, 35], "target": [1, 16, 17, 18, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 78, 79, 83, 84, 158, 160, 163, 164, 165, 166, 167, 168, 201, 202, 310, 313, 323, 375], "let": [1, 3, 53, 55], "": [1, 3, 6, 8, 19, 25, 30, 31, 35, 36, 39, 44, 53, 54, 55, 63, 71, 74, 81, 82, 107, 148, 152, 164, 167, 175, 176, 177, 179, 182, 183, 185, 188, 200, 203, 204, 205, 211, 212, 216, 226, 227, 228, 246, 249, 250, 251, 253, 254, 255, 256, 279, 290, 315, 318, 328, 338, 339, 343, 344, 349, 352, 361, 362, 367, 368], "take": [1, 3, 30, 31, 35, 36, 53, 55, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 258, 284, 285, 286, 295, 296, 297], "look": [1, 3, 53, 55, 318, 352], "ll": 1, "differ": [1, 3, 6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 53, 54, 55, 63, 64, 164, 167, 177, 183, 201, 202, 215, 216, 228, 240, 249, 250], "grai": [1, 8, 31, 35], "matter": [1, 31, 35], "densiti": [1, 7, 71, 74, 321, 339, 355, 362], "map": [1, 3, 6, 7, 29, 31, 34, 35, 39, 44, 50, 51, 53, 54, 55, 63, 113, 114, 128, 129, 164, 165, 167, 168, 285, 286, 289, 296, 297, 301, 302, 310, 323, 344, 368], "comput": [1, 6, 19, 20, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 70, 71, 72, 73, 74, 75, 76, 80, 83, 84, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 158, 159, 160, 161, 209, 214, 241, 242, 243, 245, 248, 258, 284, 285, 286, 295, 296, 297, 303, 319, 328, 345, 353, 354, 369], "cat12": [1, 31, 35], "toolbox": 1, "involv": 1, "tissu": [1, 31, 35], "normal": [1, 3, 11, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 70, 73, 113, 114, 128, 129, 148, 152, 158, 159, 160, 161, 170, 171, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303, 305, 354, 363], "mni": 1, "space": [1, 3, 7, 31, 35, 53, 54, 55, 63, 111, 112, 113, 114, 115, 117, 128, 129, 149, 153, 164, 165, 167, 168, 211, 212, 213, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 250, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 321, 355], "modul": [1, 6, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 70, 72, 73, 75, 76, 87, 90, 108, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 130, 131, 170, 171, 172, 176, 182, 211, 212, 213, 214, 215, 216, 217, 226, 227, 228, 229, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "result": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 81, 82, 83, 84, 97, 104, 164, 165, 167, 168, 277, 327], "wise": [1, 173, 191, 228, 250], "reflect": [1, 163, 166], "local": [1, 3, 31, 35, 64, 68, 90, 108], "volum": [1, 11, 31, 35, 54, 63, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 329, 334, 376], "t1": [1, 31, 35], "weight": [1, 3, 11, 16, 18, 22, 24, 31, 35, 50, 51, 53, 54, 55, 63, 64, 71, 72, 74, 76, 78, 79, 81, 82, 83, 84, 90, 108, 170, 174, 187, 207, 208, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 319, 325, 339, 345, 353, 357, 362, 369], "scan": [1, 31, 35, 158, 160], "have": [1, 3, 6, 7, 15, 21, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 144, 146, 159, 161, 328, 338, 361], "been": [1, 3, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63], "basic": [1, 19, 25], "step": [1, 3, 9, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 216, 228, 249, 250], "like": [1, 3, 16, 17, 18, 22, 23, 24, 39, 44, 50, 51, 53, 54, 55, 63, 64, 78, 79, 81, 82, 83, 84, 113, 114, 128, 129, 248, 303, 304], "correct": [1, 9, 78, 79, 83, 84, 87], "skull": 1, "strip": 1, "without": [1, 12, 54, 63, 149, 153, 158, 160, 333], "spatial": [1, 6, 11, 87, 113, 114, 128, 129, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 310, 323], "heavi": 1, "smooth": [1, 371], "The": [1, 3, 6, 19, 25, 28, 30, 31, 33, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 87, 107, 144, 146, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 176, 178, 179, 182, 184, 185, 210, 211, 212, 213, 216, 226, 227, 228, 229, 244, 248, 249, 250, 253, 254, 255, 256, 257, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 303, 306, 307, 327, 328], "goal": 1, "retain": [1, 303], "much": [1, 3, 112, 117], "origin": [1, 3, 7, 53, 55, 150, 154, 158, 159, 160, 161, 164, 167, 172, 209, 303], "possibl": [1, 6, 39, 44, 50, 51, 53, 55, 90, 108, 163, 166], "provid": [1, 3, 28, 29, 30, 32, 33, 34, 36, 39, 44, 143, 145, 149, 151, 153, 155, 164, 167, 179, 185, 201, 202, 278, 303, 319, 345, 353, 369, 376], "input": [1, 3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 54, 63, 64, 66, 71, 72, 74, 76, 79, 80, 81, 82, 85, 86, 87, 90, 108, 111, 112, 113, 114, 115, 117, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 195, 197, 201, 202, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 303, 308, 309, 312, 313, 322, 328, 330, 331, 346, 374, 375], "close": [1, 3, 6, 54, 63], "while": [1, 3, 6, 39, 44, 50, 51, 53, 54, 55, 63, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 158, 160, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "still": [1, 3, 303], "being": [1, 3], "same": [1, 3, 6, 31, 35, 39, 44, 53, 54, 55, 63, 64, 65, 72, 76, 78, 79, 83, 84, 85, 86, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 308, 310, 323, 328, 333, 338, 361], "physic": [1, 164, 165, 167, 168], "all_mod": 1, "info": [1, 163, 166, 372], "0": [1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 20, 21, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 70, 71, 72, 73, 74, 76, 77, 81, 82, 83, 84, 87, 106, 113, 114, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 163, 164, 165, 166, 167, 168, 177, 179, 183, 185, 192, 193, 213, 229, 239, 242, 243, 244, 245, 248, 257, 280, 285, 286, 291, 296, 297, 301, 302, 308, 310, 313, 315, 318, 323, 338, 339, 343, 344, 345, 349, 352, 361, 362, 367, 368, 369, 371, 375, 377], "get": [1, 3, 19, 25, 30, 31, 35, 36, 53, 55, 164, 167, 303, 337, 340, 341, 342, 360, 364, 365, 366, 371], "img_vbm": 1, "select": [1, 39, 44, 64, 65, 79, 148, 152], "onli": [1, 3, 6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "channel": [1, 28, 29, 32, 33, 34, 111, 112, 113, 114, 115, 117, 128, 129, 143, 145, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 173, 190, 191, 198, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299], "nii_img": 1, "nifti1imag": [1, 30, 31, 35, 36], "affin": [1, 149, 151, 153, 155, 164, 167], "ey": [1, 164, 167], "4": [1, 3, 5, 6, 8, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 54, 63, 83, 84, 112, 113, 114, 117, 128, 129, 149, 151, 153, 155, 164, 165, 167, 168, 228, 239, 250, 280, 281, 282, 283, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 308, 310, 313, 316, 317, 323, 326, 341, 350, 351, 358, 365, 371, 375], "print": [1, 3, 5, 6, 7, 9, 30, 31, 35, 36, 83, 84, 88, 92, 106, 164, 167, 215, 217, 229, 230, 240, 257, 259, 268, 324, 337, 340, 341, 342, 343, 356, 360, 364, 365, 366, 367], "shape": [1, 3, 6, 7, 9, 16, 17, 18, 22, 23, 24, 31, 35, 54, 63, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 217, 228, 229, 230, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 324, 325, 340, 356, 357, 364], "plot_anat": 1, "titl": [1, 3, 7, 98, 99], "f": [1, 3, 7, 50, 51, 53, 55, 158, 160, 216, 228, 249, 250], "img_quasiraw": 1, "In": [1, 3, 30, 36, 39, 44, 50, 51, 53, 54, 55, 63, 68, 71, 74, 87, 148, 149, 150, 151, 152, 153, 154, 155, 216, 228, 249, 250, 277], "onto": [1, 7, 213, 244, 312, 313, 374, 375], "featur": [1, 3, 11, 18, 19, 24, 25, 31, 35, 50, 51, 53, 54, 55, 63, 72, 76, 112, 113, 114, 117, 128, 129, 199, 216, 228, 246, 247, 248, 249, 250, 251, 252, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 303], "averag": [1, 16, 17, 18, 20, 22, 23, 24, 26, 81, 82, 83, 84], "within": [1, 3, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "each": [1, 3, 6, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 31, 33, 35, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 64, 83, 84, 112, 113, 114, 117, 128, 129, 148, 150, 151, 152, 154, 155, 158, 159, 160, 161, 163, 166, 174, 176, 177, 182, 183, 187, 190, 198, 200, 203, 204, 205, 209, 211, 212, 213, 215, 216, 226, 227, 228, 240, 244, 248, 249, 250, 253, 254, 255, 256, 303, 318, 319, 338, 339, 345, 352, 353, 361, 362, 369], "142": [1, 31, 35], "defin": [1, 3, 28, 29, 30, 32, 33, 34, 36, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 64, 65, 75, 81, 82, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 164, 167, 174, 187, 189, 192, 201, 202, 214, 216, 228, 241, 242, 243, 245, 248, 249, 250, 251, 252, 277, 284, 285, 286, 295, 296, 297, 301, 302, 304, 321, 324, 330, 331, 335, 336, 355, 356], "correspond": [1, 6, 16, 17, 19, 20, 22, 23, 25, 26, 31, 35, 54, 63, 78, 79, 149, 153, 174, 175, 187, 188, 308, 313, 340, 364, 375], "structur": [1, 3, 6, 39, 44, 83, 84], "extract": [1, 19, 25, 30, 31, 35, 36, 53, 54, 55, 63, 333], "independ": 1, "hemispher": [1, 31, 35, 174, 175, 187, 188, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "show": [1, 3, 5, 6, 7, 8, 9, 83, 84, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "millilit": 1, "ml": 1, "def": [1, 3, 5, 7, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 106], "map_roi_on_neuromorphometrics_atla": 1, "roi_valu": 1, "label": [1, 3, 7, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 35, 36, 50, 51, 54, 63, 72, 76, 149, 151, 153, 155, 164, 165, 167, 168, 204, 205, 301, 302], "valu": [1, 6, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 53, 54, 55, 63, 64, 72, 76, 78, 79, 83, 84, 87, 89, 91, 104, 106, 143, 144, 145, 146, 148, 152, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 176, 177, 182, 183, 201, 202, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 301, 302, 306, 307, 308, 325, 338, 357, 361], "atlas_data": 1, "get_fdata": 1, "atlas_label": 1, "brain_map": 1, "zeros_lik": 1, "idx_map": 1, "name": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 54, 63, 64, 67, 83, 84, 90, 107, 108, 211, 212, 226, 227, 253, 254, 255, 256, 277, 301, 302, 303, 314, 328], "index": [1, 28, 29, 33, 34, 39, 44, 50, 51, 53, 54, 55, 63, 83, 84, 149, 153, 176, 177, 182, 183, 315, 318, 338, 349, 352, 361, 370], "idx": [1, 3, 5, 8, 28, 29, 33, 34, 318, 338, 344, 352, 361, 368], "enumer": [1, 8, 9, 315, 318, 338, 339, 344, 349, 352, 361, 362, 368], "return": [1, 3, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 104, 106, 108, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 195, 196, 197, 198, 201, 202, 204, 205, 209, 211, 212, 213, 215, 217, 226, 227, 229, 230, 240, 244, 253, 254, 255, 256, 257, 258, 259, 268, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375], "2": [1, 2, 3, 5, 6, 8, 9, 10, 16, 17, 19, 22, 23, 25, 54, 63, 64, 71, 72, 74, 76, 77, 81, 82, 83, 84, 89, 91, 106, 113, 114, 128, 129, 143, 145, 149, 153, 164, 167, 186, 192, 193, 196, 200, 203, 204, 205, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 321, 322, 323, 325, 326, 337, 338, 339, 344, 349, 350, 351, 352, 355, 357, 358, 360, 361, 362, 368, 370, 374, 375, 377], "clean": [1, 50, 51], "up": [1, 3, 19, 25, 53, 55, 215, 216, 228, 240, 249, 250, 308, 310, 318, 323, 341, 352, 365], "remov": [1, 28, 29, 31, 32, 33, 34, 35, 53, 55, 159, 161, 201, 202, 303], "_gm_vol": 1, "suffix": [1, 304], "replac": [1, 28, 29, 31, 32, 33, 34, 35, 68, 81, 82, 111, 113, 114, 115, 128, 129, 148, 152, 177, 183, 201, 202, 216, 228, 249, 250], "get_vbm_roi_label": [1, 31, 35], "3": [1, 3, 5, 6, 8, 9, 10, 19, 25, 54, 63, 64, 83, 84, 89, 91, 104, 112, 113, 114, 117, 128, 129, 143, 145, 148, 152, 164, 165, 167, 168, 176, 177, 179, 182, 183, 185, 200, 201, 202, 203, 204, 205, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 239, 240, 249, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 330, 331, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 374, 375, 377], "get_neuromorphometrics_atla": [1, 31, 35], "5": [1, 3, 5, 7, 8, 9, 10, 16, 17, 18, 20, 22, 23, 24, 26, 83, 84, 151, 155, 158, 160, 179, 185, 215, 216, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 295, 321, 338, 339, 355, 361, 362], "plot_stat_map": 1, "cmap": 1, "plasma": 1, "appeal": 1, "sequenti": [1, 3, 50, 51, 57, 60, 119, 120, 338, 361], "colormap": [1, 301, 302], "draw_cross": 1, "fals": [1, 3, 5, 7, 8, 19, 25, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 81, 82, 83, 84, 90, 104, 106, 108, 112, 113, 114, 117, 118, 119, 128, 129, 148, 152, 201, 202, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 246, 247, 248, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 301, 302, 303, 310, 315, 317, 318, 323, 324, 325, 326, 327, 329, 332, 334, 338, 339, 343, 344, 345, 349, 351, 352, 356, 357, 358, 361, 362, 367, 368, 369, 370], "colorbar": [1, 5, 8, 301, 302, 310, 315, 317, 318, 323, 324, 338, 339, 344, 349, 351, 352, 356, 361, 362, 368], "true": [1, 3, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 54, 63, 78, 79, 83, 84, 90, 96, 101, 102, 103, 106, 108, 112, 117, 148, 152, 173, 190, 191, 198, 207, 208, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 287, 290, 292, 293, 294, 298, 301, 302, 303, 309, 310, 313, 316, 318, 322, 323, 338, 343, 350, 352, 361, 367, 375], "includ": [1, 3, 11, 17, 20, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 55, 87, 199, 201, 202], "cortic": [1, 31, 35, 174, 175, 179, 185, 187, 188, 189, 199, 206, 207, 208, 210, 211, 212, 213, 216, 217, 226, 227, 228, 229, 230, 244, 249, 250, 253, 254, 255, 256, 257, 259, 268], "thick": [1, 31, 35], "area": [1, 148, 150, 152, 154], "curvatur": [1, 31, 35], "over": [1, 39, 44, 53, 55, 151, 155], "predefin": 1, "desikan": [1, 31, 35], "killiani": 1, "34": [1, 5, 31, 35, 83, 84], "per": [1, 3, 20, 26, 28, 30, 31, 33, 35, 36, 113, 114, 128, 129, 143, 145, 149, 153, 158, 159, 160, 161], "74": [1, 5, 31, 35, 83, 84], "exclud": [1, 31, 35], "medial": 1, "wall": 1, "repres": [1, 72, 76, 301, 302, 370, 371], "summari": [1, 83, 84], "geometri": [1, 87, 317, 325, 330, 331, 335, 336, 351, 357, 359], "morphologi": 1, "cortex": 1, "addit": [1, 16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 39, 44, 50, 51, 53, 54, 55, 63, 85, 86, 87, 148, 152, 216, 228, 249, 250, 279, 290], "xhemi": 1, "cross": [1, 16, 17, 18, 20, 22, 23, 24, 26, 64, 68, 70, 73, 285, 286, 296, 297], "163842": [1, 31, 35], "vertic": [1, 5, 6, 8, 31, 35, 174, 175, 176, 177, 179, 182, 183, 185, 187, 188, 200, 203, 204, 205, 213, 228, 239, 244, 250, 279, 280, 290, 291, 301, 302, 303, 309, 310, 312, 313, 315, 316, 317, 319, 322, 323, 324, 325, 326, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 374, 375], "which": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 72, 76, 107, 113, 114, 128, 129, 144, 146, 149, 153, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303, 308, 318, 345, 352, 369], "merg": 1, "homolog": 1, "both": [1, 6, 31, 35, 39, 44, 53, 55, 57, 58, 59, 60, 61, 62, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 214, 241, 242, 243, 245, 286, 297, 338, 361], "allow": [1, 3, 6, 15, 21, 29, 34, 53, 55, 64, 65, 303, 328, 345, 369], "analysi": [1, 158, 160, 213, 244], "reduc": [1, 3, 39, 44, 78, 113, 114, 128, 129, 174, 187, 213, 244, 316, 317, 319, 350, 351, 353], "asymmetri": 1, "improv": [1, 3, 113, 114, 128, 129, 148, 152], "statist": [1, 71, 74, 148, 152, 159, 161], "power": 1, "combin": [1, 3, 174, 187], "left": [1, 7, 31, 35, 53, 55, 71, 72, 74, 76, 149, 151, 153, 155, 158, 160, 207, 208, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 329], "right": [1, 7, 31, 35, 53, 55, 71, 72, 74, 76, 149, 151, 153, 155, 158, 160, 207, 208, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 329], "follow": [1, 3, 19, 25, 30, 31, 35, 36, 53, 55, 57, 60, 64, 71, 74, 80, 83, 84, 158, 159, 160, 161], "small": [1, 6, 31, 35, 53, 54, 55, 63, 111, 115, 159, 161], "util": [1, 3, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 54, 57, 58, 59, 60, 61, 62, 63, 78, 79, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 170, 176, 177, 179, 182, 183, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 228, 229, 230, 250, 257, 268, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "function": [1, 3, 6, 7, 9, 11, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 66, 67, 68, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 158, 159, 160, 161, 170, 172, 176, 177, 179, 181, 182, 183, 185, 186, 190, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 209, 210, 211, 212, 214, 216, 226, 227, 228, 241, 242, 243, 245, 248, 249, 250, 253, 254, 255, 256, 258, 277, 284, 285, 286, 289, 295, 296, 297, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "standard": [1, 3, 72, 76, 143, 144, 145, 146, 159, 161, 176, 178, 182, 184, 215, 216, 228, 240, 249, 250, 303, 324, 327, 344, 356, 368], "fsaverage5": 1, "For": [1, 3, 16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 39, 44, 50, 51, 53, 55, 107, 158, 160, 164, 165, 167, 168, 258, 338, 361], "higher": [1, 3, 39, 44], "resolut": [1, 3, 113, 114, 128, 129, 158, 160, 201, 202, 216, 228, 249, 250], "can": [1, 3, 6, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 71, 74, 87, 105, 144, 146, 148, 152, 159, 161, 173, 180, 191, 194, 201, 202, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 258, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 327, 328], "done": [1, 3, 39, 44, 328], "similarli": [1, 3], "requir": [1, 3, 39, 44, 50, 51, 53, 54, 55, 63, 71, 74, 77, 151, 155], "mesh": [1, 31, 35, 324, 325, 338, 356, 357, 361, 371], "file": [1, 2, 10, 28, 29, 30, 31, 32, 33, 34, 35, 36, 64, 90, 108, 201, 202, 329, 330, 331, 333, 335, 336, 372, 376, 377], "start": [1, 3, 19, 25, 113, 114, 128, 129, 177, 183, 318, 352], "map_freesurfer_destrieux_data": 1, "hemi": 1, "fsaverag": 1, "fetch_atlas_surf_destrieux": 1, "verbos": [1, 64], "fs_label": 1, "decod": [1, 39, 44, 50, 51, 53, 55, 211, 216, 226, 228, 229, 249, 250, 253, 255, 257], "utf": 1, "8": [1, 3, 5, 7, 9, 10, 31, 35, 39, 44, 50, 51, 83, 84, 159, 161, 164, 165, 167, 168, 228, 242, 250, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 377], "map_hemi": 1, "map_": 1, "vertex": [1, 174, 175, 176, 177, 182, 183, 187, 188, 228, 250, 338, 339, 345, 361, 362, 363, 369, 370, 371], "vertex_data": 1, "dtype": [1, 78, 80, 186, 192, 196, 309, 322], "float": [1, 3, 5, 9, 18, 20, 24, 26, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 85, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 191, 196, 207, 208, 213, 244, 248, 301, 302, 306, 307, 308, 311, 313, 373, 375], "roi_nam": 1, "surface_area": 1, "get_fs_roi_feature_nam": [1, 31, 35], "surface_area_mm": 1, "gray_matter_volume_mm": 1, "average_thickness_mm": 1, "integrated_rectified_mean_curvature_mm": 1, "get_fs_label": [1, 31, 35], "symmetr": [1, 31, 35, 71, 74, 81, 82, 163, 166], "fs_surfac": 1, "fs_volum": 1, "fs_thick": 1, "fs_curv": 1, "surface_vertex": 1, "volume_vertex": 1, "thickness_vertex": 1, "curv_vertex": 1, "prepar": [1, 3], "mm": [1, 164, 167], "gm": [1, 31, 35], "mean": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 55, 68, 83, 84, 144, 146, 148, 150, 152, 154, 159, 161, 163, 166, 213, 228, 244, 246, 250, 283, 294, 303, 325, 357], "fetch_surf_fsaverag": 1, "inflated_left": 1, "infl_left": 1, "sulc_left": 1, "fig": [1, 5, 6, 8, 301, 302, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "ax": [1, 5, 6, 7, 8, 149, 151, 153, 155, 286, 297, 301, 302, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "subplot": [1, 5, 6, 8, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "figsiz": [1, 3, 5, 6, 7, 8, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "12": [1, 5, 6, 112, 117, 338, 361], "subplot_kw": [1, 5, 6, 8, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "3d": [1, 5, 6, 8, 30, 31, 35, 36, 54, 63, 72, 76, 87, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 310, 315, 318, 321, 323, 324, 338, 339, 344, 349, 352, 355, 356, 361, 362, 368], "dat": 1, "plot_surf": 1, "surf_map": 1, "view": [1, 54, 63, 70, 72, 73, 76, 86, 343, 367], "later": [1, 303], "bg_map": 1, "figur": [1, 3, 7, 301, 302], "subplots_adjust": 1, "wspace": 1, "25": [1, 5, 9, 30, 36, 83, 84], "next": [1, 3, 6, 39, 44, 50, 51, 53, 55, 328], "more": [1, 3, 16, 18, 22, 24, 28, 29, 30, 32, 33, 34, 36, 54, 63, 112, 117, 150, 154, 163, 166, 171, 201, 202, 376], "lh": [1, 31, 35], "curv": 1, "fold": [1, 16, 17, 18, 20, 22, 23, 24, 26], "pattern": [1, 3, 7, 28, 29, 32, 33, 34, 201, 202, 289], "arbitrari": [1, 148, 152], "unit": [1, 54, 63, 159, 161, 216, 228, 249, 250, 303, 321, 339, 355, 359, 362, 363], "neg": [1, 3], "sulci": 1, "posit": [1, 3, 39, 44, 71, 74, 86, 87], "gyri": 1, "sulc": 1, "sulcal": [1, 31, 35], "depth": [1, 8, 9, 31, 35, 114, 125, 129, 131, 135, 137, 139, 213, 216, 228, 244, 245, 248, 249, 250, 279, 281, 282, 283, 287, 290, 292, 293, 294, 298, 318, 337, 338, 341, 352, 360, 361, 365], "indic": [1, 3, 31, 35, 39, 44, 54, 63, 81, 82, 149, 153, 174, 187, 246, 251, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 308, 316, 317, 318, 319, 325, 326, 338, 344, 350, 351, 352, 353, 357, 358, 361, 368, 370], "millimit": 1, "get_fs_xhemi_feature_nam": [1, 31, 35], "fs_sulc": 1, "9": [1, 3, 5, 6, 54, 63, 83, 84, 207, 208], "dark": 1, "now": [1, 3, 6, 9, 53, 55, 113, 114, 128, 129, 158, 160, 258], "explor": [1, 3], "them": [1, 19, 25, 54, 63, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 180, 194, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 303, 328, 371], "compar": [1, 3, 53, 55], "three": [1, 148, 150, 152, 154, 319, 353], "represent": [1, 3, 31, 35, 50, 51, 53, 54, 55, 63, 111, 115, 179, 185, 210, 214, 226, 227, 229, 241, 255, 256, 257, 303, 319, 345, 353, 369, 371], "sbm": [1, 31, 35], "68": [1, 5, 31, 35, 83, 84], "148": [1, 31, 35], "relev": [1, 303], "modality_nam": 1, "dataset_train": 1, "split": [1, 3, 28, 29, 31, 32, 33, 34, 35, 53, 55, 201, 202], "stream": [1, 31, 35], "dataset_v": 1, "extract_features_and_target": 1, "arrai": [1, 5, 6, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 54, 63, 71, 72, 74, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 149, 153, 158, 159, 160, 161, 164, 167, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 195, 197, 200, 201, 202, 203, 204, 205, 246, 251, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 301, 302, 303, 308, 309, 310, 312, 313, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 329, 330, 331, 335, 336, 338, 339, 343, 344, 345, 349, 350, 351, 353, 354, 355, 356, 357, 358, 361, 362, 367, 368, 369, 370, 371, 374, 375], "x": [1, 3, 7, 8, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 36, 53, 55, 57, 60, 71, 74, 86, 106, 111, 112, 113, 114, 115, 117, 126, 127, 128, 129, 149, 153, 158, 159, 160, 161, 204, 205, 209, 212, 213, 216, 217, 226, 227, 228, 229, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 306, 307, 309, 311, 312, 313, 316, 322, 325, 326, 338, 345, 350, 354, 357, 358, 361, 369, 373, 374, 375], "y_age": 1, "y_sex": 1, "m": [1, 71, 74, 174, 176, 177, 179, 182, 183, 185, 187, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 301, 302, 317, 324, 330, 331, 335, 336, 338, 343, 351, 356, 361, 367, 371], "y": [1, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 36, 54, 63, 72, 76, 148, 149, 152, 153, 204, 205, 303, 306, 307, 309, 311, 312, 313, 316, 322, 325, 326, 345, 350, 357, 358, 369, 373, 374, 375], "append": [1, 9, 19, 25, 39, 44], "flatten": [1, 5, 7, 213, 244, 289], "item": [1, 9, 30, 36, 328], "x_train": 1, "y_train_ag": 1, "y_train_sex": 1, "x_test": 1, "y_test_ag": 1, "y_test_sex": 1, "rang": [1, 3, 5, 6, 9, 39, 44, 71, 74, 143, 144, 145, 146, 148, 150, 152, 154, 158, 160, 306, 307, 341, 365], "min": [1, 148, 152, 158, 160], "max": [1, 3, 148, 152, 158, 160, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 247, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 283, 293, 294], "distribut": [1, 3, 39, 44, 53, 55, 144, 146, 148, 152, 212, 229, 254, 257], "n": [1, 9, 16, 17, 18, 20, 22, 23, 24, 26, 39, 44, 72, 76, 90, 108, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 195, 200, 203, 204, 205, 209, 213, 244, 279, 281, 284, 290, 292, 295, 301, 302, 308, 309, 310, 312, 313, 317, 318, 319, 322, 323, 324, 330, 331, 335, 336, 338, 339, 343, 345, 351, 352, 353, 356, 361, 362, 367, 369, 370, 371, 374, 375], "seri": [1, 30, 36, 181, 195], "value_count": 1, "r\u00b2": [1, 17, 20, 23, 26], "score": [1, 16, 17, 18, 20, 22, 23, 24, 26, 81, 82, 83, 84], "v": [1, 31, 35], "color": [1, 3, 8, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 170, 301, 302], "tab": 1, "blue": [1, 5, 6, 8, 310, 318, 323, 338, 339, 352, 361, 362], "green": [1, 5, 6, 8, 310, 323], "orang": [1, 8], "15": [1, 5, 9, 83, 84], "sharex": 1, "sharei": 1, "ridge_model": 1, "alpha": [1, 5, 6, 17, 20, 23, 26, 164, 165, 167, 168, 301, 302, 306, 307, 310, 311, 323, 373], "y_pred_ag": 1, "scatterplot": 1, "edgecolor": [1, 5, 6, 301, 302, 310, 323], "none": [1, 3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 64, 67, 68, 72, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 107, 108, 113, 114, 126, 127, 128, 129, 149, 151, 153, 155, 158, 159, 160, 161, 164, 167, 169, 174, 176, 177, 179, 182, 183, 185, 187, 200, 201, 202, 203, 204, 205, 207, 208, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 248, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 286, 297, 301, 302, 303, 316, 317, 326, 328, 345, 347, 348, 350, 351, 358, 359, 369, 372], "add": [1, 39, 44, 50, 51, 66, 112, 117, 144, 146, 178, 184, 286, 297], "refer": [1, 6, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "line": [1, 301, 302], "lineplot": 1, "red": [1, 5, 8, 315, 318, 338, 339, 349, 352, 361, 362], "linestyl": 1, "set_titl": 1, "nr\u00b2": 1, "2f": [1, 3], "set_xlabel": [1, 7], "set_ylabel": [1, 7], "grid": [1, 18, 24, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 249, 250, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 309, 312, 321, 322, 339, 355, 362, 374], "suptitl": 1, "fontsiz": 1, "14": [1, 5], "02": [1, 10, 148, 152, 377], "tight_layout": [1, 5], "accuraci": [1, 3, 9, 16, 18, 22, 24, 39, 44, 50, 51, 53, 55], "logreg_model": 1, "max_it": [1, 18, 24], "1000": [1, 3, 39, 44], "y_pred_sex": 1, "acc": [1, 3, 39, 44], "barplot": 1, "palett": 1, "xlabel": 1, "ylabel": 1, "ylim": 1, "text": [1, 7, 8, 53, 55, 71, 72, 74, 76, 83, 84, 88, 96, 101, 102, 103, 158, 160], "abov": [1, 3], "bar": [1, 19, 25, 39, 44, 50, 51, 53, 55], "ha": [1, 3, 6, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 83, 84, 112, 113, 114, 117, 128, 129, 144, 146, 158, 159, 160, 161, 216, 228, 249, 250, 303], "center": [1, 31, 35, 171, 303, 318, 338, 339, 343, 352, 354, 361, 362, 367], "10": [1, 3, 5, 6, 8, 9, 10, 16, 17, 18, 20, 22, 23, 24, 26, 31, 35, 54, 63, 70, 73, 83, 84, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 217, 228, 230, 250, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368, 377], "observ": [1, 3], "give": [1, 3, 11, 39, 44, 164, 165, 167, 168], "best": [1, 12, 16, 17, 18, 20, 22, 23, 24, 26, 64, 164, 165, 167, 168, 310, 323], "highli": [1, 3], "nevertheless": 1, "would": [1, 3, 53, 55, 83, 84], "interest": [1, 39, 44, 50, 51, 53, 55, 201, 202, 215, 240], "check": [1, 3, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 30, 33, 36, 39, 44, 64, 77, 78, 85, 86, 87, 104, 105, 106, 107, 149, 150, 153, 154, 164, 167, 169], "whether": [1, 3, 19, 25, 39, 44, 50, 51, 87, 90, 108], "thei": [1, 3, 6, 9, 31, 35, 89, 91], "complementari": 1, "an": [1, 3, 7, 8, 9, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 36, 39, 44, 50, 51, 54, 57, 60, 63, 64, 66, 67, 89, 90, 91, 104, 106, 107, 108, 113, 114, 128, 129, 148, 152, 176, 177, 182, 183, 186, 189, 190, 192, 196, 198, 215, 216, 228, 240, 249, 250, 279, 290, 303, 309, 312, 313, 317, 322, 324, 326, 337, 340, 341, 342, 345, 351, 356, 358, 359, 360, 364, 365, 366, 369, 374, 375], "exercis": 1, "reader": 1, "estim": [1, 3, 5, 6, 7, 8, 9, 11, 19, 20, 25, 26, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 71, 74, 78, 79, 83, 84, 105, 107, 170, 303, 310, 323], "memori": [1, 3, 5, 6, 7, 8, 9, 19, 25, 29, 34, 112, 117, 149, 153, 303, 328], "usag": [1, 3, 5, 6, 7, 8, 9], "mb": [1, 2, 3, 5, 6, 7, 8, 9, 10, 377], "ipynb": [1, 3, 5, 6, 7, 8, 9, 332, 334], "py": [1, 2, 3, 5, 6, 7, 8, 9, 10, 377], "00": [2, 10, 83, 84, 377], "000": [2, 3, 377], "total": [2, 5, 6, 7, 8, 9, 10, 112, 113, 114, 117, 128, 129, 377], "execut": [2, 10, 328, 377], "from": [2, 3, 5, 6, 7, 8, 9, 10, 12, 16, 17, 19, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 70, 71, 73, 74, 81, 82, 83, 84, 89, 91, 106, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 144, 146, 148, 150, 151, 152, 154, 155, 158, 160, 164, 167, 174, 177, 183, 187, 201, 202, 211, 215, 216, 217, 228, 229, 230, 240, 249, 250, 253, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 374, 375, 377], "auto_galleri": [2, 10], "mem": [2, 10, 377], "simclr_stl10": [2, 3, 377], "uvadlc": 3, "readthedoc": 3, "io": [3, 11, 170, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "tutori": [3, 12], "closer": [3, 53, 54, 55, 63], "also": [3, 11, 28, 29, 32, 33, 34, 50, 51, 53, 54, 55, 63, 83, 84, 104, 199, 201, 202, 328, 376], "sometim": [3, 89, 91], "call": [3, 15, 19, 21, 25, 28, 29, 32, 33, 34, 39, 44, 50, 51, 53, 54, 55, 63, 71, 74, 75, 78, 87, 107, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 149, 151, 153, 155, 201, 202, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 328, 345, 369], "unsupervis": [3, 30, 36], "describ": [3, 18, 24, 53, 55, 64, 376], "scenario": 3, "where": [3, 7, 18, 19, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 54, 55, 58, 61, 63, 64, 72, 76, 90, 108, 158, 159, 160, 161, 164, 167, 201, 202, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290, 301, 302, 304, 312, 371, 374], "given": [3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 31, 35, 72, 76, 86, 90, 107, 108, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 209, 211, 253, 303, 328, 345, 369, 370, 371], "accompani": 3, "classic": [3, 228, 250, 251], "wai": [3, 338, 361, 376], "howev": [3, 164, 165, 167, 168], "lot": 3, "imag": [3, 7, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 51, 53, 54, 55, 63, 149, 150, 151, 153, 154, 155, 158, 160, 164, 165, 167, 168, 172, 201, 202, 209, 312, 329, 374], "other": [3, 6, 39, 44, 50, 51, 53, 55, 64, 303, 313, 375], "what": [3, 54, 63, 64, 67], "descript": [3, 164, 165, 167, 168], "certain": [3, 318, 341, 352, 365], "cluster": [3, 39, 41, 44, 46, 54, 63], "To": [3, 6, 19, 25, 28, 33, 39, 44, 50, 51, 53, 55, 72, 76, 78], "insight": 3, "question": 3, "implement": [3, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 70, 71, 72, 73, 74, 76, 77, 86, 87, 104, 149, 153, 176, 182, 210, 213, 214, 229, 241, 244, 248, 257], "popular": [3, 11, 199], "method": [3, 11, 15, 19, 21, 25, 28, 31, 33, 35, 39, 44, 54, 63, 71, 72, 74, 76, 79, 87, 89, 90, 91, 105, 106, 108, 158, 160, 164, 165, 167, 168, 171, 199, 213, 215, 216, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 249, 250, 251, 252, 257, 259, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 303, 345, 369], "appli": [3, 6, 7, 19, 25, 30, 31, 35, 36, 50, 51, 53, 55, 57, 60, 71, 74, 86, 87, 90, 108, 113, 114, 128, 129, 143, 145, 150, 151, 154, 155, 158, 159, 160, 161, 163, 164, 166, 167, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 187, 188, 191, 192, 194, 195, 213, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 289, 310, 321, 323, 339, 355, 362], "stl10": 3, "some": [3, 8, 11, 39, 44, 50, 51, 53, 54, 55, 63, 64, 66, 71, 74, 113, 114, 128, 129, 180, 181, 194, 195, 199, 303, 371], "packag": [3, 6, 12], "besid": 3, "our": [3, 6, 50, 51], "librari": 3, "below": [3, 53, 54, 55, 63, 64], "o": [3, 6, 8, 305, 315, 318, 338, 339, 344, 349, 352, 361, 362, 368], "pytorch_lightn": [3, 19, 25], "pl": 3, "torch": [3, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 36, 39, 44, 54, 63, 70, 72, 73, 76, 86, 87, 90, 108, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 210, 217, 228, 229, 230, 248, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "nn": [3, 7, 9, 11, 39, 44, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 70, 72, 73, 75, 76, 90, 108, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 170, 176, 182, 211, 212, 214, 226, 227, 241, 242, 243, 245, 246, 248, 251, 253, 254, 255, 256, 258, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "torchvis": [3, 54, 63, 87, 148, 150, 152, 154], "collect": 3, "ordereddict": [3, 50, 51], "copi": [3, 28, 33, 303], "deepcopi": 3, "ssl": [3, 11, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 170], "linear": [3, 11, 19, 25, 50, 51, 54, 57, 58, 60, 61, 63, 71, 72, 74, 76, 111, 115, 150, 154, 164, 165, 167, 168, 170, 213, 216, 228, 244, 249, 250, 251], "callback": [3, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 44, 50, 51, 54, 63, 170], "learningratemonitor": [3, 54, 63], "modelcheckpoint": [3, 39, 44], "transform": [3, 6, 11, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 44, 48, 53, 54, 55, 63, 64, 85, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 180, 181, 190, 191, 193, 194, 195, 198, 201, 202, 210, 211, 213, 244, 245, 253, 303, 304, 306, 307, 310, 311, 323, 344, 368, 373], "global": [3, 16, 18, 22, 24, 64, 148, 152, 277], "paramet": [3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 106, 107, 108, 111, 112, 113, 114, 115, 117, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "datadir": 3, "checkpointdir": 3, "saved_model": 3, "num_work": 3, "cpu_count": 3, "num_imag": 3, "backend": 3, "cudnn": 3, "determinst": 3, "devic": [3, 39, 44, 50, 51], "gpu": [3, 39, 44, 50, 51, 53, 55], "cuda": 3, "is_avail": 3, "els": [3, 30, 36], "cpu": [3, 39, 44], "As": [3, 9, 53, 55], "mani": [3, 6, 16, 17, 18, 20, 22, 23, 24, 26, 31, 35, 39, 44, 53, 54, 55, 63, 112, 113, 114, 117, 128, 129], "befor": [3, 30, 36, 53, 55, 107, 150, 154, 216, 228, 249, 250, 286, 297, 303], "pre": 3, "If": [3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 54, 63, 71, 72, 74, 76, 80, 83, 84, 86, 87, 90, 107, 108, 113, 114, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 303, 328, 345, 369], "you": [3, 6, 12, 15, 19, 21, 25, 28, 30, 31, 33, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 90, 108, 303], "make": [3, 19, 25, 39, 44, 106, 148, 152, 277], "sure": 3, "suffici": 3, "disk": [3, 30, 31, 35, 36, 39, 44, 50, 51], "load_pretrain": [3, 90, 108], "makedir": 3, "exist_ok": 3, "hf": [3, 31, 35, 64, 90, 108], "hub": [3, 64, 90, 108], "neurospin": [3, 12, 90, 108], "resnet18": [3, 11, 54, 63, 110, 124, 134, 170], "data_dir": [3, 90, 108], "filepath": [3, 90, 108], "pt": 3, "effici": [3, 112, 117], "load": [3, 9, 11, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 44, 64, 67, 68, 90, 108, 199, 201, 202, 332, 334], "sampl": [3, 9, 11, 18, 24, 30, 31, 35, 36, 39, 44, 54, 63, 71, 72, 74, 76, 78, 79, 81, 82, 83, 84, 143, 144, 145, 146, 148, 150, 152, 154, 170, 199, 200, 203, 204, 205, 209, 211, 212, 216, 217, 228, 229, 230, 246, 249, 250, 251, 253, 254, 257, 259, 268, 281, 282, 283, 287, 289, 292, 293, 294, 298, 312, 339, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374], "random": [3, 5, 39, 44, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 164, 167, 173, 177, 183, 189, 190, 191, 192, 198, 200, 203, 204, 205], "batch": [3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 72, 76, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 249, 250, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "easiest": 3, "do": [3, 6, 19, 25, 39, 44, 50, 51, 53, 55, 303], "creat": [3, 104, 158, 160, 164, 167, 186, 192, 193, 196, 199, 201, 202, 239, 277], "when": [3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 78, 79, 80, 83, 84, 87, 90, 106, 108, 149, 151, 153, 155, 158, 160, 301, 302, 303, 308, 313, 328, 343, 367, 375], "twice": 3, "class": [3, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 85, 86, 87, 88, 89, 90, 91, 92, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 327], "contrastivetransform": 3, "framework": [3, 39, 44, 54, 63, 214, 241], "easili": [3, 6], "extend": [3, 79, 89, 91], "than": [3, 39, 44, 53, 55], "most": [3, 301, 302], "usual": [3, 53, 55, 86], "obtain": [3, 53, 55, 58, 61], "__init__": [3, 19, 25, 39, 44, 50, 51, 53, 55, 106], "base_transform": 3, "n_view": [3, 86], "__call__": 3, "specif": [3, 11, 174, 175, 187, 188, 216, 228, 249, 250, 277, 340, 364], "want": [3, 12, 53, 55, 90, 108], "choic": [3, 64, 150, 154, 164, 165, 167, 168], "crucial": 3, "hyperparamet": [3, 39, 44, 53, 55], "sinc": [3, 6, 7, 53, 55, 75, 81, 82, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 158, 160, 164, 165, 167, 168, 214, 241, 242, 243, 245, 248, 284, 285, 286, 289, 295, 296, 297], "directli": [3, 39, 44, 54, 63, 148, 152, 172], "affect": [3, 39, 44], "latent": [3, 54, 63, 211, 212, 213, 226, 227, 229, 244, 253, 254, 255, 256, 257], "might": [3, 39, 44, 50, 51, 53, 54, 55, 63, 149, 153], "overal": 3, "experi": [3, 11, 64, 65, 66, 67, 68, 170, 376], "horizont": [3, 7], "flip": [3, 149, 151, 153, 155], "crop": [3, 150, 154, 163, 166], "resiz": [3, 11, 87, 150, 154, 165, 168, 170], "distort": 3, "grayscal": 3, "gaussian": [3, 54, 63, 71, 72, 74, 76, 143, 144, 145, 146, 150, 154, 164, 165, 167, 168, 176, 178, 182, 184, 200, 203, 204, 205], "blur": [3, 143, 145, 176, 182], "comparison": [3, 164, 165, 167, 168], "effect": [3, 113, 114, 128, 129, 164, 167, 303], "jitter": 3, "slightli": 3, "instead": [3, 75, 78, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 303], "bright": 3, "satur": 3, "hue": 3, "better": 3, "wa": [3, 53, 55], "faster": [3, 328], "stabl": 3, "instanc": [3, 6, 30, 36, 39, 44, 54, 63, 75, 80, 107, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 173, 191, 192, 193, 214, 239, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "vari": 3, "benefici": [3, 50, 51], "t": [3, 7, 39, 44, 50, 51, 148, 150, 152, 154], "reli": 3, "anymor": 3, "distinguish": 3, "between": [3, 6, 18, 24, 31, 35, 53, 54, 55, 63, 70, 71, 72, 73, 74, 76, 81, 82, 87, 148, 150, 152, 154, 164, 165, 167, 168, 174, 175, 187, 188, 301, 302, 308, 310, 323, 338, 347, 361, 371], "contrast_transform": 3, "compos": [3, 64, 213, 244, 304, 338, 361], "randomhorizontalflip": 3, "randomresizedcrop": [3, 11, 87, 147, 150, 154, 170], "size": [3, 7, 8, 9, 53, 54, 55, 63, 72, 76, 111, 112, 113, 114, 115, 117, 128, 129, 143, 145, 148, 150, 152, 154, 158, 160, 163, 164, 166, 167, 174, 175, 177, 183, 187, 188, 189, 201, 202, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 285, 286, 289, 295, 296, 297, 318, 321, 339, 344, 346, 352, 355, 362, 368], "96": [3, 5, 286, 297, 309, 322], "randomappli": 3, "colorjitt": 3, "p": [3, 71, 74, 85, 87, 169], "randomgrayscal": 3, "gaussianblur": 3, "kernel_s": [3, 7, 285, 286, 296, 297], "totensor": 3, "after": [3, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 71, 74, 113, 114, 128, 129, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 250, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "discuss": 3, "techniqu": [3, 150, 154, 164, 165, 167, 168, 371], "focu": 3, "cifar10": 3, "airplan": 3, "bird": 3, "car": 3, "cat": [3, 30, 36], "deer": 3, "dog": [3, 30, 36], "hors": 3, "monkei": 3, "ship": 3, "truck": 3, "pixel": 3, "500": 3, "addition": 3, "larger": [3, 53, 55], "100": [3, 5, 8, 9, 18, 24, 158, 160, 315, 318, 338, 339, 344, 347, 349, 352, 361, 362, 368], "unlabel": 3, "similar": [3, 6, 53, 54, 55, 63, 71, 72, 74, 76, 148, 152], "wider": [3, 53, 55], "anim": 3, "vehicl": 3, "ideal": 3, "showcas": 3, "benefit": 3, "offer": [3, 150, 154, 164, 165, 167, 168], "luckili": 3, "through": [3, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 40, 41, 42, 43, 45, 46, 47, 48, 57, 60], "keep": [3, 31, 35, 201, 202], "mind": 3, "rel": [3, 18, 24, 28, 29, 30, 32, 33, 34, 36, 148, 150, 152, 154], "consider": [3, 53, 55], "3gb": 3, "bit": [3, 54, 63], "time": [3, 5, 6, 7, 8, 9, 86, 148, 150, 152, 154, 345, 369], "initi": [3, 31, 35, 54, 57, 58, 59, 60, 61, 62, 63, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "loader": [3, 9, 37], "unlabeled_data": 3, "via": [3, 31, 35, 50, 51, 345, 369], "train_data_contrast": 3, "pair": [3, 39, 44, 54, 63, 72, 76, 151, 155, 201, 202], "img": [3, 30, 36], "stack": [3, 19, 25], "dim": [3, 9, 54, 63, 75, 164, 167, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 244, 245, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "img_grid": 3, "make_grid": 3, "nrow": 3, "pad_valu": 3, "permut": [3, 6, 175, 188, 308, 310, 323], "imshow": [3, 7, 312, 374], "axi": [3, 7, 9, 149, 151, 153, 155, 163, 166, 301, 302, 303, 308, 319, 325, 332, 334, 338, 345, 353, 354, 357, 361, 369], "off": [3, 7], "And": 3, "associ": [3, 8, 31, 35, 50, 51, 54, 63, 72, 76, 305, 313, 319, 345, 353, 369, 375], "dataload": [3, 9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 55, 64], "batch_siz": [3, 9, 39, 44, 70, 72, 73, 76, 212, 226, 227, 229, 254, 255, 256, 257], "256": [3, 57, 60, 92, 211, 212, 226, 227, 253, 254, 255, 256], "train_load": 3, "shuffl": [3, 9, 39, 44], "drop_last": 3, "pin_memori": 3, "val_load": 3, "common": [3, 11, 14, 27, 38, 39, 44, 50, 51, 69, 109, 110, 172, 206, 210, 303], "resnet": [3, 11, 54, 63, 110, 113, 114, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 170], "18": [3, 5, 54, 63, 114, 124, 125, 129, 134, 135, 158, 160], "architectur": [3, 9, 11, 50, 51, 53, 54, 55, 63, 109, 110, 111, 112, 113, 114, 115, 117, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 210, 216, 217, 228, 229, 230, 248, 249, 250, 257, 259, 268], "paper": [3, 53, 55, 112, 117], "g": [3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 58, 61, 63, 72, 76, 113, 114, 128, 129, 148, 152, 164, 167, 303], "layer": [3, 50, 51, 53, 54, 55, 57, 58, 60, 61, 63, 111, 112, 113, 114, 115, 117, 128, 129, 130, 131, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 248, 249, 250, 251, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299], "mlp": [3, 50, 51, 53, 54, 55, 57, 58, 60, 61, 63, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "relu": [3, 53, 54, 55, 57, 58, 60, 61, 63, 121, 216, 228, 246, 247, 248, 249, 250, 251, 252], "activ": [3, 53, 54, 55, 63, 211, 212, 216, 226, 227, 228, 229, 249, 250, 253, 254, 255, 256, 257], "hidden": [3, 53, 54, 55, 58, 61, 63, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "note": [3, 28, 29, 31, 32, 33, 34, 35, 39, 44, 50, 51, 53, 54, 55, 63, 64, 86, 104, 111, 115, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 328], "simclrv2": [3, 53, 55], "author": [3, 53, 55, 64], "mention": [3, 53, 55], "boost": [3, 53, 55], "why": [3, 6], "four": 3, "dimens": [3, 6, 53, 54, 55, 63, 87, 143, 145, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 165, 166, 168, 213, 244, 258], "deeper": 3, "overfit": 3, "A": [3, 5, 6, 7, 8, 9, 28, 29, 31, 32, 33, 34, 35, 50, 51, 53, 54, 55, 63, 90, 108, 172, 201, 202, 210, 214, 241, 304], "u": [3, 7, 53, 55, 143, 144, 145, 146, 158, 160, 201, 202, 216, 228, 248, 249, 250], "lead": [3, 39, 44], "smoother": 3, "loss": [3, 9, 11, 19, 25, 39, 44, 50, 51, 53, 54, 55, 63, 64, 70, 71, 72, 73, 74, 75, 76, 170, 207, 208, 209], "gradient": [3, 39, 44, 50, 51, 53, 54, 55, 63], "case": [3, 30, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 67, 68, 71, 74, 81, 82, 148, 149, 150, 151, 152, 153, 154, 155, 303], "experienc": 3, "good": [3, 150, 154, 164, 165, 167, 168], "hidden_dim": [3, 53, 55, 58, 59, 61, 62, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "128": [3, 54, 57, 58, 59, 60, 61, 62, 63, 111, 115, 164, 167, 211, 212, 226, 227, 253, 254, 255, 256], "encod": [3, 39, 44, 50, 51, 53, 54, 55, 63, 206, 210, 212, 216, 226, 227, 228, 229, 249, 250, 254, 255, 256, 257], "num_class": [3, 50, 51, 230, 231, 232, 233, 234, 235, 236, 237, 238, 268, 269, 270, 271, 272, 273, 274, 275, 276], "latent_s": [3, 50, 51, 53, 55], "fc": [3, 50, 51], "out_featur": [3, 57, 60], "ident": [3, 11, 13, 39, 44, 85, 113, 114, 128, 129, 149, 151, 153, 155, 164, 167, 170], "save_weights_onli": 3, "mode": [3, 12, 39, 44, 50, 51, 53, 54, 55, 63, 64, 71, 74, 163, 166, 246, 303], "monitor": [3, 39, 44, 54, 63], "val_acc_top5": 3, "logging_interv": 3, "epoch": [3, 9, 19, 25, 39, 44, 50, 51, 54, 63], "trainer_param": [3, 39, 44], "default_root_dir": 3, "acceler": [3, 39, 44, 50, 51], "max_epoch": [3, 39, 44, 50, 51, 53, 54, 55, 63], "lr": [3, 9, 50, 51, 53, 54, 55, 63, 149, 151, 153, 155], "5e": [3, 54, 63], "temperatur": [3, 50, 51, 53, 54, 55, 63, 70, 72, 73, 76, 214, 241], "07": 3, "weight_decai": [3, 9, 50, 51, 53, 54, 55, 63], "1e": [3, 9, 18, 24, 54, 63, 159, 161, 308, 313, 375], "random_st": [3, 39, 44, 50, 51, 53, 55], "42": [3, 5, 7, 9, 83, 84, 312, 313, 316, 325, 326, 345, 350, 357, 358, 369, 374, 375], "found": [3, 6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 54, 63, 107], "pretrain": [3, 53, 55], "weight_fil": [3, 90, 108], "fitted_": 3, "fit": [3, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 54, 63, 71, 74, 107, 303], "deploi": [3, 50, 51], "downstream": [3, 50, 51, 53, 55], "see": [3, 28, 29, 32, 33, 34, 50, 51, 53, 54, 55, 63, 64, 70, 72, 73, 76, 104, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 163, 164, 165, 166, 167, 168, 179, 185, 201, 202, 303, 332, 334], "well": [3, 39, 44, 50, 51, 53, 55, 72, 76, 149, 151, 153, 155], "littl": [3, 50, 51], "verifi": [3, 50, 51, 87, 107], "word": [3, 50, 51], "singl": [3, 28, 30, 31, 33, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 86, 376], "base": [3, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 70, 71, 72, 73, 74, 75, 76, 85, 86, 87, 89, 90, 91, 92, 104, 108, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 200, 201, 202, 203, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 308, 327, 328, 338, 339, 344, 361, 362, 368], "network": [3, 53, 54, 55, 63, 148, 152, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "chang": [3, 30, 36, 54, 63, 87, 164, 167, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303], "dure": [3, 31, 35, 39, 44, 50, 51, 150, 154, 164, 165, 167, 168, 177, 183], "process": [3, 12, 39, 44, 50, 51, 215, 240], "h": [3, 53, 55, 58, 61, 71, 72, 74, 76, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 209, 258], "necessari": 3, "further": [3, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "worri": 3, "too": [3, 31, 35, 303], "veri": [3, 6, 50, 51, 148, 152, 164, 165, 167, 168], "few": 3, "henc": 3, "expect": [3, 9, 28, 29, 31, 32, 33, 34, 35, 54, 63, 64, 150, 154, 163, 166, 201, 202], "even": [3, 90, 108], "assum": [3, 30, 36, 50, 51, 149, 151, 153, 155, 164, 167, 174, 175, 187, 188, 308], "alreadi": [3, 31, 35, 86, 87, 90, 108], "vector": [3, 18, 24, 31, 35, 53, 54, 55, 63, 72, 76, 338, 361], "dynam": [3, 50, 51, 64, 66, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "so": [3, 6, 50, 51, 113, 114, 128, 129], "here": [3, 6, 39, 44, 50, 51, 53, 55, 64, 86, 332, 334], "second": [3, 5, 6, 7, 8, 9, 54, 57, 60, 63, 70, 72, 73, 76, 81, 82], "did": [3, 6], "ani": [3, 30, 31, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 63, 80, 85, 86, 87, 144, 146, 148, 150, 152, 154, 158, 160, 201, 202, 324, 356], "signific": [3, 39, 44], "gain": 3, "test": [3, 6, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 44], "800": 3, "64": [3, 5, 39, 44, 83, 84, 112, 113, 114, 117, 126, 127, 128, 129, 151, 155, 158, 160, 164, 167, 211, 212, 213, 226, 227, 229, 242, 244, 253, 254, 255, 256, 257], "scale_transform": 3, "train_img_data": 3, "test_img_data": 3, "number": [3, 6, 16, 17, 18, 19, 22, 23, 24, 25, 31, 35, 39, 44, 50, 51, 54, 63, 72, 76, 81, 82, 83, 84, 86, 111, 112, 113, 114, 115, 117, 128, 129, 148, 152, 174, 177, 183, 186, 187, 192, 193, 196, 200, 203, 204, 205, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290, 301, 302, 312, 316, 317, 326, 337, 340, 341, 342, 344, 350, 351, 358, 360, 364, 365, 366, 368, 374], "len": [3, 5, 6, 7, 9, 228, 229, 230, 250, 257, 268, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 318, 337, 342, 352, 360, 366], "froozen": 3, "e": [3, 7, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 67, 71, 72, 74, 76, 81, 82, 86, 112, 113, 114, 117, 128, 129, 148, 152, 164, 167, 303, 312, 374], "output": [3, 19, 25, 39, 44, 50, 51, 54, 63, 64, 67, 78, 79, 81, 82, 83, 84, 85, 87, 89, 91, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 176, 177, 182, 183, 211, 213, 216, 228, 244, 246, 247, 248, 249, 250, 251, 252, 253, 258, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 327, 328], "new_model": 3, "normal_": 3, "std": [3, 144, 146, 159, 161, 303], "01": [3, 10, 377], "zero_": 3, "requires_grad_": 3, "final": [3, 9, 31, 35, 111, 115, 228, 250], "everi": [3, 39, 44, 53, 54, 55, 63, 75, 87, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 315, 349], "earli": [3, 39, 44], "stop": [3, 39, 44, 54, 63, 338, 361], "low": [3, 31, 35, 54, 63, 192], "frequenc": [3, 54, 63], "ensur": [3, 79, 197], "despit": 3, "smaller": [3, 18, 24], "20": [3, 5, 7, 8, 9, 158, 160, 174, 187], "50": [3, 5, 136, 137, 138, 139], "200": 3, "intuit": 3, "transfer": 3, "recognit": 3, "classif": [3, 7, 9, 16, 18, 19, 22, 24, 25, 39, 44, 54, 63, 72, 76, 200, 203, 204, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "test_load": 3, "val_acc": 3, "check_val_every_n_epoch": [3, 39, 44, 54, 63], "pred": [3, 9, 50, 51], "argmax": [3, 9], "_pretrained_filenam": 3, "path": [3, 28, 29, 30, 31, 33, 34, 35, 36, 37, 64, 90, 108, 176, 177, 182, 183, 216, 228, 249, 250, 328, 329, 333, 335, 336, 338, 347, 348, 361], "join": 3, "isfil": 3, "save": [3, 64, 335, 336], "state_dict": 3, "one": [3, 6, 30, 36, 53, 54, 55, 57, 58, 60, 61, 63, 64, 75, 78, 79, 83, 84, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 143, 145, 148, 150, 152, 154, 164, 167, 177, 183, 190, 198, 211, 214, 241, 242, 243, 245, 248, 253, 284, 285, 286, 295, 296, 297, 313, 375], "classifi": [3, 16, 22, 40, 45], "60": [3, 5], "correctli": 3, "quit": 3, "impress": 3, "consid": [3, 6, 28, 29, 30, 32, 33, 34, 36, 50, 51, 177, 183, 201, 202, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290], "dimension": [3, 53, 54, 55, 63], "With": 3, "achiev": 3, "80": [3, 5, 83, 84], "increas": [3, 326, 358], "suggest": 3, "exponenti": [3, 54, 63, 71, 72, 74, 76], "could": [3, 6, 53, 54, 55, 63, 149, 151, 153, 155], "finetun": [3, 53, 55], "adapt": [3, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 177, 183, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "advantag": 3, "straightforward": 3, "clear": [3, 19, 25], "its": [3, 31, 35, 54, 63, 85, 87, 101, 102, 113, 114, 128, 129, 158, 160, 164, 167, 328, 338, 361], "count": 3, "fair": 3, "ones": [3, 54, 63], "becaus": [3, 6, 53, 55, 303], "notic": 3, "ad": [3, 159, 161, 216, 228, 249, 250], "restrict": 3, "oper": [3, 39, 44, 50, 51, 53, 55, 248, 303], "125": 3, "1250": 3, "recogn": 3, "object": [3, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 64, 67, 89, 90, 91, 92, 104, 106, 108, 173, 186, 191, 192, 196, 207, 208, 301, 302, 303, 304, 327, 328], "patch": [3, 53, 55, 177, 183, 201, 202, 213, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 339, 344, 346, 362, 368], "belong": [3, 78], "chosen": [3, 18, 24, 39, 44], "weaker": 3, "almost": [3, 7, 159, 161], "strongli": 3, "iter": [3, 18, 24, 39, 44, 50, 51, 53, 55, 258], "train_transform": 3, "sigma": [3, 5, 54, 58, 61, 63, 72, 76, 143, 144, 145, 146, 159, 161, 164, 165, 167, 168, 176, 177, 178, 182, 183, 184], "train_img_aug_data": 3, "2e": 3, "scratch": 3, "73": [3, 5], "7": [3, 5, 31, 35, 83, 84, 113, 114, 128, 129, 338, 361, 377], "less": 3, "leverag": [3, 54, 63], "amount": 3, "generaliz": 3, "sole": [3, 39, 44], "par": 3, "tenth": 3, "experiment": [3, 64], "limit": 3, "recent": 3, "work": [3, 6, 28, 30, 33, 36, 54, 63, 64, 164, 167, 176, 177, 182, 183, 258, 303], "ting": [3, 214, 241], "chen": [3, 70, 73, 214, 241], "trend": 3, "imagenet": 3, "seem": [3, 6], "stronger": [3, 18, 24], "come": [3, 53, 55], "approach": [3, 12], "beyond": 3, "khosla": 3, "moreov": 3, "last": [3, 31, 35, 113, 114, 128, 129, 211, 253], "year": [3, 31, 35], "great": [3, 53, 55], "distil": 3, "byol": 3, "redund": [3, 78], "reduct": [3, 39, 44], "barlow": 3, "twin": 3, "There": 3, "domain": [3, 5, 31, 35], "ahead": 3, "credit": [5, 6, 7, 8, 9], "grigi": [5, 7, 8, 9, 31, 35], "c": [5, 6, 8, 18, 24, 31, 35, 89, 91, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 209, 315, 318, 338, 339, 349, 352, 361, 362], "ambrois": [5, 6, 31, 35], "surfifi": [5, 6, 7, 8, 9, 10, 11, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377], "min_depth_to_get_n_neighbor": [5, 11, 170, 305, 337, 360], "plot": [5, 6, 7, 8, 9, 11, 170, 301, 302, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "plot_trisurf": [5, 6, 7, 8, 9, 11, 170, 300, 301, 302, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 338, 339, 344, 345, 349, 350, 351, 352, 356, 357, 358, 361, 362, 368, 369, 374, 375], "interv": [5, 11, 54, 63, 170, 172, 186, 189, 192, 196], "triangl": [5, 6, 8, 176, 177, 179, 182, 183, 185, 228, 239, 250, 301, 302, 309, 310, 313, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 330, 331, 335, 336, 338, 339, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 358, 361, 362, 367, 368, 369, 370, 371, 375], "order": [5, 6, 7, 8, 9, 39, 44, 54, 63, 64, 83, 84, 86, 149, 153, 164, 165, 167, 168, 176, 177, 182, 183, 201, 202, 211, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 253, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299, 301, 302, 304, 308, 309, 310, 312, 313, 315, 316, 317, 318, 322, 323, 324, 325, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 374, 375], "neigh": [5, 8, 176, 177, 182, 183, 284, 295, 318, 319, 338, 339, 345, 346, 352, 353, 361, 362, 369], "direct_neighbor": [5, 8, 279, 281, 282, 283, 287, 290, 292, 293, 294, 298, 318, 338, 344, 346, 352, 361, 368], "max_depth": 5, "ceil": 5, "displai": [5, 7, 8, 9, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 64, 83, 84, 96, 103, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 314], "aug": 5, "add_axi": 5, "arg": [5, 86, 87, 114, 129, 181, 195, 229, 257, 303], "kwarg": [5, 16, 17, 18, 20, 22, 23, 24, 26, 39, 44, 50, 51, 53, 54, 55, 63, 85, 86, 87, 89, 91, 114, 116, 122, 123, 124, 125, 129, 130, 131, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 181, 195, 229, 257, 303], "aspect": [5, 6, 8, 148, 150, 152, 154, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "auto": [5, 6, 8, 39, 44, 64, 68, 206, 210, 310, 315, 318, 323, 324, 338, 339, 344, 349, 352, 356, 361, 362, 368], "white": [5, 178, 184], "linewidth": [5, 8, 301, 302], "_textur": 5, "patch_siz": [5, 177, 183], "int": [5, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 31, 33, 35, 39, 44, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 74, 76, 83, 84, 86, 87, 111, 112, 113, 114, 115, 117, 125, 128, 129, 130, 131, 135, 137, 139, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 165, 166, 167, 168, 174, 175, 176, 177, 182, 183, 186, 187, 188, 189, 196, 200, 201, 202, 203, 204, 205, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 308, 309, 312, 316, 317, 318, 321, 322, 324, 326, 337, 338, 339, 340, 341, 342, 344, 350, 351, 352, 355, 356, 358, 360, 361, 362, 364, 365, 366, 368, 370, 374], "n_patch": [5, 177, 183, 213, 244], "uniform": [5, 54, 63, 81, 82, 83, 84], "phi": [5, 179, 185], "180": 5, "theta": [5, 179, 185], "psi": [5, 179, 185], "controlateral_textur": 5, "prob": [5, 174, 175, 187, 188, 189], "n_vertic": [5, 7, 9, 174, 175, 187, 188, 189, 204, 205, 213, 226, 227, 229, 244, 255, 256, 257, 303, 316, 326, 337, 340, 341, 342, 345, 350, 358, 360, 364, 365, 366, 369], "controlateral_data": [5, 175, 188], "group_textur": 5, "group_data": [5, 174, 187], "n_sampl": [5, 7, 9, 16, 17, 18, 22, 23, 24, 71, 74, 78, 79, 81, 82, 83, 84, 174, 187, 200, 203, 204, 205, 213, 244, 312, 313, 315, 316, 325, 326, 345, 349, 350, 357, 358, 369, 374, 375], "neigh_ind": [5, 174, 187], "groupbi": [5, 174, 187], "n_neighbor": [5, 16, 17, 22, 23, 174, 187], "n_compon": [5, 174, 187], "30": [5, 9, 30, 36, 174, 187], "58": 5, "49": 5, "62": 5, "47": 5, "99": [5, 9, 54, 63, 158, 160], "92": [5, 83, 84], "54": 5, "65": [5, 7, 83, 84], "31": 5, "78": 5, "90": [5, 83, 84, 151, 155], "76": 5, "93": [5, 31, 35], "21": [5, 83, 84], "70": 5, "22": 5, "46": 5, "89": [5, 7, 10, 377], "82": 5, "11": [5, 6], "59": 5, "56": 5, "19": [5, 31, 35], "13": [5, 8], "23": [5, 10, 377], "28": 5, "51": 5, "79": 5, "16": [5, 39, 44, 54, 63, 112, 117, 285, 286, 296, 297], "17": 5, "77": 5, "88": [5, 31, 35], "52": 5, "95": [5, 72, 76, 83, 84], "48": 5, "72": 5, "66": [5, 10, 377], "24": [5, 6, 112, 117], "69": 5, "86": [5, 158, 160], "26": [5, 83, 84], "27": [5, 83, 84], "29": [5, 6], "83": 5, "63": 5, "36": 5, "32": [5, 39, 44, 112, 117, 216, 228, 229, 248, 249, 250, 257], "33": [5, 148, 150, 152, 154], "39": 5, "35": [5, 9], "37": 5, "38": [5, 31, 35], "45": [5, 345, 369], "71": 5, "40": [5, 7, 8, 9, 200, 203, 204, 205], "41": 5, "81": 5, "43": 5, "44": [5, 83, 84], "87": 5, "98": 5, "97": 5, "53": 5, "55": [5, 83, 84], "57": 5, "61": [5, 83, 84], "94": [5, 72, 76], "67": [5, 6], "75": [5, 83, 84, 150, 154], "84": 5, "85": [5, 83, 84], "91": 5, "aug1": 5, "aug2": 5, "aug3": 5, "tran": 5, "regist": [5, 31, 35, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 173, 180, 191, 194, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "probabl": [5, 31, 35, 71, 74, 87, 149, 151, 153, 155, 173, 174, 175, 187, 188, 189, 191, 193, 304], "script": [5, 6, 7, 8, 9], "minut": [5, 6, 7, 8, 9], "650": [5, 10, 377], "110": 5, "plot_augment": [5, 10, 377], "math": [6, 58, 61, 71, 74, 158, 160], "warn": [6, 31, 35, 39, 44, 54, 63, 64, 100], "scipi": [6, 71, 74, 303, 310, 323], "mpl_toolkit": 6, "mplot3d": 6, "axes3d": [6, 301, 302], "ico2ico": [6, 11, 170, 305, 310, 313, 323, 375], "build": [6, 8, 54, 63, 64, 83, 84, 176, 177, 182, 183, 186, 196, 215, 240, 303, 338, 339, 344, 346, 347, 348, 359, 361, 362, 368, 371], "vertices_norm": 6, "triangles_norm": 6, "standard_ico": [6, 7, 9, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 310, 313, 323, 324, 344, 356, 368, 375], "642": [6, 7, 9], "1280": [6, 7, 9], "Then": 6, "fetch": [6, 11, 31, 35, 64, 199, 347, 348], "freesurf": [6, 31, 35, 215, 240, 330, 335, 344, 347, 368], "try": [6, 16, 17, 20, 22, 23, 26, 303], "find": [6, 16, 17, 18, 20, 22, 23, 24, 26, 64, 80, 308, 310, 315, 318, 323, 325, 349, 352, 357, 359], "optim": [6, 9, 18, 24, 39, 44, 50, 51, 53, 54, 55, 63, 64], "rotat": [6, 151, 155, 179, 185, 310, 319, 323, 345, 353, 369], "rmse": [6, 83, 84], "align_vector": 6, "54571598073452": 6, "okai": 6, "doe": [6, 19, 25, 53, 55, 77, 303], "suppos": 6, "equal": [6, 54, 63, 71, 72, 74, 76, 81, 82, 143, 145, 148, 152], "zero": [6, 7, 30, 36, 53, 55, 81, 82, 113, 114, 128, 129, 177, 183, 217, 228, 229, 230, 250, 251, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 309, 322], "issu": [6, 67], "matric": [6, 303], "That": 6, "previou": 6, "algorithm": [6, 18, 24], "properli": 6, "row": [6, 176, 177, 182, 183, 338, 361], "matrix": [6, 16, 17, 18, 22, 23, 24, 54, 63, 71, 72, 74, 76, 149, 151, 153, 155, 164, 167, 174, 187, 303], "52573111": 6, "85065081": 6, "96386126": 6, "2664047": 6, "91298249": 6, "39960705": 6, "08232358": 6, "8944": 6, "4472": 6, "2764": 6, "8507": 6, "1815": 6, "296": 6, "9378": 6, "0272": 6, "3462": 6, "0692": 6, "213": 6, "9746": 6, "sufac": [6, 11, 278, 305], "togeth": [6, 304], "place": [6, 68], "subset": [6, 201, 202], "absolut": [6, 17, 20, 23, 26, 64, 67, 83, 84], "sign": [6, 310, 323], "vertices_of_interest_norm": 6, "search": [6, 318, 338, 352, 361], "coords_of_interest": 6, "idx_of_interest": 6, "ab": [6, 58, 59, 61, 62, 113, 114, 128, 129, 148, 152], "sum": [6, 9], "vertices_of_interest": 6, "fs_row_idx": 6, "break": 6, "depend": [6, 31, 35, 54, 63, 87], "various": 6, "until": 6, "itertool": 6, "n_permut": 6, "factori": 6, "best_rms": 6, "best_rot": 6, "catch_warn": 6, "simplefilt": 6, "ignor": [6, 39, 44, 54, 63, 75, 83, 84, 85, 86, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 149, 151, 153, 155, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 303], "categori": 6, "userwarn": [6, 28, 29, 32, 33, 34], "format": [6, 9, 15, 21, 83, 84, 87, 149, 151, 153, 155, 164, 167, 314, 330, 331, 335, 336], "as_matrix": 6, "52575203": 6, "85063788": 6, "971395685383565e": 6, "05": [6, 10, 54, 63, 83, 84, 377], "simpli": [6, 54, 63], "solv": 6, "outlin": 6, "proper": [6, 28, 29, 30, 33, 34, 36], "anoth": 6, "half": 6, "clearli": 6, "appear": [6, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "opt": 6, "hostedtoolcach": 6, "x64": 6, "lib": 6, "python3": 6, "coord": [6, 11, 170, 307, 308, 309, 310, 311, 312, 313], "246": 6, "closest": [6, 319, 353], "9190925817849288": 6, "701": [6, 10, 377], "plot_match_icosahedron": [6, 10, 377], "convert": [7, 79, 164, 167, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 249, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 309, 312, 322, 374], "spheric": [7, 10, 206, 207, 208, 210, 215, 216, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 247, 249, 250, 251, 252, 257, 259, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 285, 286, 289, 296, 297, 305, 306, 307, 309, 311, 312, 321, 322, 338, 355, 361, 373, 374, 377], "evenli": [7, 312, 374], "resampl": [7, 11, 87, 150, 154, 164, 165, 167, 168, 170, 312, 374], "respect": [7, 150, 154, 164, 167, 289, 312, 374], "sin": [7, 312, 374], "elev": [7, 207, 208, 211, 212, 217, 229, 230, 253, 254, 257, 259, 268, 289, 306, 307, 311, 312, 373, 374], "azimuth": [7, 207, 208, 211, 212, 217, 229, 230, 253, 254, 257, 259, 268, 289, 306, 307, 311, 312, 373, 374], "vice": 7, "versa": 7, "ico_ord": [7, 9, 176, 177, 182, 183, 201, 202], "n_class": [7, 9, 200, 203, 204, 205, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 312, 313, 316, 325, 326, 345, 350, 357, 358, 369, 374, 375], "ico_vertic": [7, 9, 200, 203, 204, 205], "ico_triangl": [7, 9], "_": [7, 30, 36, 53, 55, 71, 74, 282, 283, 293, 294, 304, 332, 334], "make_classif": [7, 9, 11, 170, 199, 204, 205, 312, 313, 316, 325, 326, 345, 350, 357, 358, 369, 374, 375], "seed": [7, 9, 50, 51, 53, 55, 200, 203, 204, 205, 312, 313, 316, 325, 326, 345, 350, 357, 358, 369, 374, 375], "proj_textur": 7, "text2grid": [7, 11, 170, 305, 306, 307, 309, 311, 312, 322, 373, 374], "proj": [7, 309, 312, 322, 374], "lower": [7, 150, 154, 316, 347, 350], "nearest": [7, 16, 17, 22, 23, 150, 154, 164, 165, 167, 168, 174, 187, 228, 250, 251, 309, 312, 315, 322, 325, 349, 357, 374], "192": [7, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 249, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 309, 312, 322, 374], "grid2text": [7, 11, 170, 305, 306, 307, 309, 311, 312, 322, 373, 374], "is_label": [7, 9, 301, 302, 309, 313, 316, 322, 325, 326, 345, 350, 357, 358, 369, 375], "enabl": [7, 31, 35, 39, 44, 50, 51, 53, 55, 64, 89, 91], "scatter_dens": 7, "labelx": 7, "labe": 7, "scatter": [7, 8, 315, 318, 338, 339, 344, 349, 352, 361, 362, 368], "width": [7, 113, 114, 128, 129, 301, 302], "bottom": 7, "height": [7, 258], "005": 7, "rect_scatt": 7, "rect_histx": 7, "rect_histi": 7, "ax_scatt": 7, "tick_param": 7, "direct": [7, 53, 55, 164, 167, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290, 312, 338, 361, 374], "top": [7, 16, 17, 18, 20, 22, 23, 24, 26, 53, 55], "ax_histx": 7, "ax_histi": 7, "bin": 7, "hist": 7, "orient": [7, 149, 151, 153, 155, 164, 167], "set_xlim": 7, "get_xlim": 7, "set_ylim": 7, "get_ylim": 7, "radiu": [7, 306, 307, 311, 373], "cart2sph": [7, 11, 170, 305, 306, 307, 311, 373], "sin_elev": 7, "circularli": [7, 289], "continu": [7, 54, 63, 72, 76, 78, 79, 289], "circular": [7, 285, 286, 289, 296, 297], "pad": [7, 133, 163, 166, 228, 250, 251, 280, 285, 286, 289, 291, 296, 297], "boundari": [7, 289], "expand_dim": 7, "astyp": [7, 164, 167], "float32": [7, 164, 167], "from_numpi": [7, 164, 167], "pad_textur": 7, "circular_pad": [7, 11, 170, 278, 289], "padd": 7, "conv": [7, 113, 114, 121, 128, 129, 216, 228, 246, 247, 248, 249, 250, 251, 252, 279, 290], "conv2d": [7, 258], "in_channel": [7, 9, 54, 63, 111, 112, 113, 114, 115, 117, 128, 129, 216, 228, 248, 249, 250], "out_channel": [7, 9, 216, 228, 248, 249, 250], "stride": [7, 113, 114, 126, 127, 128, 129, 132, 133, 285, 286, 296, 297], "conv_textur": 7, "194": [7, 8, 10, 217, 218, 219, 220, 221, 222, 223, 224, 225, 259, 260, 261, 262, 263, 264, 265, 266, 267, 285, 296, 377], "875": [7, 10, 377], "plot_project_textur": [7, 10, 377], "get_rectangular_project": [8, 11, 170, 305, 321, 355], "vidx": 8, "cnt": [8, 315, 318, 338, 339, 344, 349, 352, 361, 362, 368], "marker": [8, 315, 318, 338, 339, 344, 349, 352, 361, 362, 368], "str": [8, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 67, 71, 72, 74, 76, 78, 83, 84, 90, 105, 107, 108, 130, 131, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 165, 166, 167, 168, 174, 176, 177, 179, 182, 183, 185, 187, 201, 202, 211, 212, 213, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 250, 251, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 294, 303, 314, 319, 328, 329, 330, 331, 333, 335, 336, 345, 347, 348, 353, 369, 372], "3x3": [8, 113, 114, 128, 129, 133, 216, 228, 249, 250], "rectangular": [8, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 321, 339, 355, 362], "sphere": [8, 246, 251, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 321, 339, 343, 354, 355, 359, 362, 363, 367], "zoom": [8, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 295, 318, 321, 339, 352, 355, 362], "purpl": 8, "brown": 8, "pink": 8, "oliv": 8, "cyan": 8, "yellow": 8, "tan": 8, "salmon": 8, "violet": 8, "steelblu": 8, "lime": 8, "navi": 8, "node": [8, 39, 44, 177, 183, 279, 290, 318, 321, 352, 355, 371], "node_rec_neigh": 8, "node_tplane_neigh": 8, "268": [8, 10, 377], "plot_spherical_neighbor": [8, 10, 377], "sphericalunet": [9, 11, 170, 210, 216, 228, 248, 249, 250], "genrat": 9, "n_epoch": 9, "surfac": [9, 11, 31, 35, 170, 171, 172, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 244, 249, 250, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 301, 302, 309, 312, 322, 329, 330, 331, 332, 335, 336, 338, 361, 374, 376], "crossentropi": 9, "sgd": [9, 54, 63], "obviou": 9, "classificationdataset": [9, 11, 170, 199, 200, 203], "in_ord": [9, 228, 250], "start_filt": [9, 216, 228, 249, 250], "conv_mod": [9, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "dine": [9, 176, 177, 182, 183, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290, 338, 361], "dine_s": [9, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "up_mod": [9, 228, 250, 251], "transpos": [9, 216, 228, 249, 250, 251, 281, 286, 287, 292, 297, 298], "loss_fn": 9, "crossentropyloss": 9, "momentum": [9, 54, 63], "n_batch": 9, "zero_grad": 9, "backward": [9, 54, 63, 78, 79], "current": [9, 31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 65, 66, 68, 87, 149, 153], "7f": 9, "5d": 9, "eval": [9, 39, 44, 50, 51, 53, 55], "test_loss": 9, "y_pred": [9, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 78, 79, 81, 82, 83, 84], "no_grad": 9, "logit": [9, 70, 73], "softmax": [9, 53, 55], "type": [9, 15, 21, 30, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 63, 64, 65, 78, 79, 80, 85, 86, 87, 113, 114, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 179, 185, 186, 196, 228, 250, 251, 283, 294, 319, 338, 345, 353, 361, 369], "concaten": [9, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "error": [9, 17, 20, 23, 26, 31, 35, 39, 44, 50, 51, 83, 84, 104, 107, 159, 161, 303, 327], "1f": 9, "avg": 9, "8f": 9, "150821": 9, "004838": 9, "852475": 9, "729922": 9, "615286": 9, "507819": 9, "411370": 9, "329437": 9, "004504": 9, "004460": 9, "004186": 9, "003705": 9, "003093": 9, "002362": 9, "001626": 9, "001052": 9, "000008": 9, "000007": 9, "000010": 9, "000013": 9, "000016": 9, "000021": 9, "000006": 9, "000024": 9, "corresspond": 9, "exactli": 9, "ground": [9, 78, 79, 83, 84], "truth": [9, 78, 79, 83, 84], "572": [9, 10, 377], "565": [9, 10, 377], "plot_unet_segment": [9, 10, 377], "066": [10, 377], "109": [10, 377], "pleas": [11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "raw": [11, 31, 35, 329, 332, 334], "mai": [11, 39, 44, 303], "enough": 11, "guidelin": 11, "variou": [11, 88, 258], "help": [11, 39, 44, 88], "develop": [11, 12, 88], "definit": [11, 64, 71, 74, 109, 110, 206, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 325, 357], "backbon": [11, 54, 63, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 170, 214, 241], "intens": [11, 87, 143, 144, 145, 146, 158, 159, 160, 161, 170], "link": 11, "plugin": 11, "helper": [11, 171], "integr": [11, 72, 76, 80, 171, 248], "pytorch": [11, 39, 44, 50, 51, 53, 54, 55, 63, 171, 211, 212, 226, 227, 253, 254, 255, 256, 314, 376], "artifici": [11, 148, 152, 199], "dedic": [11, 278], "content": [11, 28, 33], "fetch_experi": [11, 13, 64, 170], "filter_config": [11, 13, 65, 170], "get_env": [11, 13, 66, 170], "load_interfac": [11, 13, 67, 170], "update_param": [11, 13, 68, 170], "multiviewstransform": [11, 13, 86, 170], "batchtypingcallback": [11, 14, 15, 21, 39, 44, 170], "kneighborsclassifiercvcallback": [11, 14, 16, 22, 170], "kneighborsregressorcvcallback": [11, 14, 17, 23, 170], "logisticregressioncvcallback": [11, 14, 18, 24, 170], "modelprob": [11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 170], "ridgecvcallback": [11, 14, 20, 26, 170], "model_prob": [11, 22, 23, 24, 25, 26, 170], "check_typ": [11, 21, 170], "baseimagedataset": [11, 27, 28, 33, 170], "basenumpydataset": [11, 27, 29, 34, 170], "imagedataframedataset": [11, 27, 30, 36, 170], "basedataset": [11, 27, 28, 29, 32, 33, 34, 170], "pandas_dataset": [11, 30, 36, 37, 170], "default_image_load": [11, 27, 30, 36, 37, 170], "baseestim": [11, 19, 25, 38, 39, 44, 50, 51, 53, 54, 55, 63, 71, 74, 170], "classifiermixin": [11, 38, 40, 45, 50, 51, 170], "clustermixin": [11, 38, 41, 46, 170], "regressormixin": [11, 38, 42, 47, 170], "transformermixin": [11, 19, 25, 38, 43, 48, 53, 54, 55, 63, 170], "logistic_regress": [11, 51, 170], "yawarecontrastivelearn": [11, 52, 54, 63, 170], "yawar": [11, 59, 62, 63, 170], "projectionhead": [11, 56, 57, 58, 59, 60, 61, 62, 170], "simclrprojectionhead": [11, 56, 58, 61, 170], "yawareprojectionhead": [11, 54, 56, 59, 62, 63, 170], "projection_head": [11, 54, 57, 60, 61, 62, 63, 170], "infonc": [11, 50, 51, 53, 54, 55, 63, 70, 72, 73, 76, 170], "kernelmetr": [11, 54, 63, 69, 71, 72, 74, 76, 170], "yawareinfonc": [11, 54, 63, 69, 72, 76, 170], "yaware_infonc": [11, 54, 63, 74, 75, 76, 170], "pairwisecosinesimilar": [11, 69, 75, 170], "pearson_r": [11, 77, 81, 82, 170], "regression_report": [11, 77, 83, 84, 170], "_regress": [11, 78, 79, 80, 170], "_check_reg_target": [11, 77, 78, 79, 170], "_check_reg_targets_with_floating_dtyp": [11, 77, 78, 79, 170], "_find_matching_floating_dtyp": [11, 77, 78, 79, 80, 170], "regress": [11, 17, 18, 19, 20, 23, 24, 25, 26, 39, 42, 44, 47, 50, 51, 78, 79, 82, 83, 84, 170], "bunch": [11, 64, 89, 91, 170], "print_multicolor": [11, 88, 96, 103, 170], "attr": [11, 88, 93, 105, 170], "fg": [11, 88, 94, 170], "hex": [11, 88, 95, 170], "print_result": [11, 88, 97, 170], "print_subtitl": [11, 88, 98, 170], "print_titl": [11, 88, 99, 170], "print_warn": [11, 88, 100, 170], "random_styl": [11, 88, 101, 170], "styliz": [11, 88, 102, 170], "_availableifdescriptor": [11, 88, 104, 170], "_estimator_i": [11, 88, 105, 170], "available_if": [11, 88, 106, 170], "check_is_fit": [11, 88, 107, 170], "alexnet": [11, 110, 111, 115, 170], "densenet": [11, 110, 112, 116, 117, 123, 170], "resnettrunc": [11, 110, 114, 129, 170], "densenet121": [11, 110, 116, 123, 170], "resnet18_trunc": [11, 110, 125, 135, 170], "resnet50": [11, 110, 113, 114, 128, 129, 136, 138, 170], "resnet50_trunc": [11, 110, 137, 139, 170], "densenet3d": [11, 117, 118, 119, 120, 121, 122, 123, 170], "_denseblock": [11, 110, 118, 170], "_denselay": [11, 110, 119, 170], "_transit": [11, 110, 120, 170], "_bn_function_factori": [11, 110, 121, 170], "_densenet": [11, 110, 122, 170], "alexnet3d": [11, 115, 170], "resnet3d": [11, 54, 63, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 170], "basicblock": [11, 110, 113, 114, 126, 128, 129, 170], "bottleneck": [11, 110, 112, 113, 114, 117, 127, 128, 129, 170], "_resnet": [11, 110, 130, 170], "_resnet_trunc": [11, 110, 131, 170], "conv1x1": [11, 110, 132, 170], "conv3x3": [11, 110, 133, 170], "volume_transform": [11, 169, 170], "volumetransform": [11, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 166, 167, 169, 170], "randomgaussianblur": [11, 87, 142, 143, 145, 170], "randomgaussiannois": [11, 87, 142, 144, 146, 170], "random_blur": [11, 145, 170], "random_nois": [11, 146, 170], "randomeras": [11, 87, 147, 148, 152, 170], "randomflip": [11, 87, 147, 149, 153, 170], "randomrot": [11, 87, 147, 151, 155, 170], "random_rot": [11, 155, 170], "random_resized_crop": [11, 154, 170], "random_flip": [11, 153, 170], "random_eras": [11, 152, 170], "robustresc": [11, 87, 157, 158, 160, 170], "znormal": [11, 87, 157, 159, 161, 170], "z_normal": [11, 161, 170], "rescal": [11, 158, 160, 170, 347], "croporpad": [11, 87, 162, 163, 166, 170], "crop_or_pad": [11, 166, 170], "randomcompos": [11, 170, 171, 304], "basetransform": [11, 170, 172, 173, 180, 181, 191, 194, 195], "groupmixup": [11, 170, 172, 174, 187], "hemimixup": [11, 170, 172, 175, 188], "surfblur": [11, 170, 172, 176, 182], "surfcutout": [11, 170, 172, 177, 183], "surfnois": [11, 170, 172, 178, 184], "surfrot": [11, 170, 172, 179, 185], "apply_chained_transform": [11, 170, 172, 181, 195], "multichannel_augment": [11, 170, 172, 190, 198], "randomaugment": [11, 170, 172, 173, 176, 177, 178, 179, 182, 183, 184, 185, 189, 190, 191, 192, 198], "listifi": [11, 170, 172, 197], "mixup": [11, 170, 187, 188, 189], "mixupaugment": [11, 170, 172, 174, 175, 187, 188, 189], "genericsurfdataset": [11, 170, 199, 201, 202], "_samples_gener": [11, 170, 203, 204], "_gener": [11, 170, 202], "sphericalvaeloss": [11, 170, 206, 207, 208], "vae": [11, 170, 207, 208, 209, 229, 253, 254, 255, 256, 257, 258], "log_likelihood": [11, 170, 206, 209], "hemifusiondecod": [11, 170, 210, 211, 253], "hemifusionencod": [11, 170, 210, 212, 254], "sit": [11, 170, 213, 242, 243, 244, 245], "sphericalbas": [11, 170, 210, 215, 226, 227, 228, 230, 240, 250, 255, 256, 268], "sphericalgunet": [11, 170, 210, 216, 228, 248, 249, 250], "sphericalgvgg": [11, 170, 210, 217, 230, 259, 268], "sphericalgvgg11": [11, 170, 210, 217, 218, 259, 260], "sphericalgvgg11bn": [11, 170, 210, 219, 261], "sphericalgvgg13": [11, 170, 210, 220, 262], "sphericalgvgg13bn": [11, 170, 210, 221, 263], "sphericalgvgg16": [11, 170, 210, 222, 264], "sphericalgvgg16bn": [11, 170, 210, 223, 265], "sphericalgvgg19": [11, 170, 210, 224, 266], "sphericalgvgg19bn": [11, 170, 210, 225, 267], "sphericalhemifusiondecod": [11, 170, 210, 226, 255], "sphericalhemifusionencod": [11, 170, 210, 227, 256], "sphericalva": [11, 170, 210, 229, 257], "sphericalvgg": [11, 170, 210, 217, 230, 259, 268], "sphericalvgg11": [11, 170, 210, 230, 231, 268, 269], "sphericalvgg11bn": [11, 170, 210, 232, 270], "sphericalvgg13": [11, 170, 210, 233, 271], "sphericalvgg13bn": [11, 170, 210, 234, 272], "sphericalvgg16": [11, 170, 210, 235, 273], "sphericalvgg16bn": [11, 170, 210, 236, 274], "sphericalvgg19": [11, 170, 210, 237, 275], "sphericalvgg19bn": [11, 170, 210, 238, 276], "vgg": [11, 170, 217, 230, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "class_factori": [11, 170, 210, 277], "ico": [11, 170, 176, 177, 182, 183, 201, 202, 210, 215, 239, 240, 279, 290], "attent": [11, 170, 210, 213, 242, 244], "feedforward": [11, 170, 210, 243], "downblock": [11, 170, 210, 246], "downgblock": [11, 170, 210, 247], "graphicalunet": [11, 170, 210, 248], "upblock": [11, 170, 210, 251], "upgblock": [11, 170, 210, 252], "compute_output_dim": [11, 170, 210, 258], "icodineconv": [11, 170, 176, 182, 278, 279, 284, 285, 290, 295, 296], "icofixindexupsampl": [11, 170, 278, 280, 281, 282, 286, 287, 288, 291, 292, 293, 297, 298, 299], "icogenericupconv": [11, 170, 278, 280, 281, 282, 286, 287, 288, 291, 292, 293, 297, 298, 299], "icomaxindexupsampl": [11, 170, 278, 280, 281, 282, 286, 287, 288, 291, 292, 293, 297, 298, 299], "icopool": [11, 170, 278, 282, 283, 293, 294], "icorepaconv": [11, 170, 278, 279, 284, 285, 290, 295, 296], "icospmaconv": [11, 170, 258, 278, 279, 284, 285, 290, 295, 296], "icospmaconvtranspos": [11, 170, 278, 280, 281, 282, 286, 287, 288, 291, 292, 293, 297, 298, 299], "icoupconv": [11, 170, 278, 280, 281, 282, 287, 288, 291, 292, 293, 298, 299], "icoupsampl": [11, 170, 278, 280, 281, 282, 286, 287, 288, 291, 292, 293, 297, 298, 299], "debug_msg": [11, 170, 305, 314], "downsampl": [11, 126, 127, 170, 201, 202, 215, 240, 246, 247, 251, 281, 282, 283, 287, 292, 293, 294, 298, 305, 315, 316, 317, 325, 326, 347, 349, 350, 351, 357, 358], "downsample_data": [11, 170, 305, 315, 316, 317, 325, 326, 349, 350, 351, 357, 358], "downsample_ico": [11, 170, 305, 315, 316, 317, 325, 326, 349, 350, 351, 357, 358], "find_neighbor": [11, 170, 305, 318, 352], "find_rotation_interpol_coef": [11, 170, 305, 319, 343, 353, 367], "get_logg": [11, 170, 305, 320], "interpol": [11, 150, 154, 164, 165, 167, 168, 170, 179, 185, 228, 250, 251, 280, 288, 291, 299, 301, 302, 305, 309, 312, 315, 316, 317, 319, 322, 325, 326, 343, 345, 349, 350, 351, 353, 357, 358, 367, 369, 374], "interpolate_data": [11, 170, 305, 315, 316, 317, 325, 326, 349, 350, 351, 357, 358], "neighbors_rec": [11, 170, 284, 295, 305, 318, 338, 339, 352, 361, 362], "number_of_ico_vertic": [11, 170, 305, 340, 342, 364, 366], "number_of_neighbor": [11, 170, 305, 337, 341, 360, 365], "order_of_ico_from_vertic": [11, 170, 305, 340, 342, 364, 366], "order_triangl": [11, 170, 305, 343, 367], "patch_tri": [11, 170, 305, 344, 346, 368], "rotate_data": [11, 170, 179, 185, 305, 319, 345, 353, 369], "setup_log": [11, 170, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 372], "sph2cart": [11, 170, 305, 306, 307, 311, 373], "text2ico": [11, 170, 305, 310, 313, 323, 375], "hideprint": [11, 170, 305, 327], "compute_and_stor": [11, 170, 305, 328], "decompose_cifti": [11, 170, 305, 329], "read_freesurf": [11, 170, 305, 330], "read_gifti": [11, 170, 305, 331], "surf_data_from_cifti": [11, 170, 305, 332], "ungzip": [11, 170, 305, 333], "volume_from_cifti": [11, 170, 305, 334], "write_freesurf": [11, 170, 305, 335], "write_gifti": [11, 170, 305, 336], "_patch_tri_it": [11, 170, 305, 346], "build_freesurfer_ico": [11, 170, 305, 347], "build_fslr_ref": [11, 170, 305, 348], "get_angle_with_xaxi": [11, 170, 305, 354], "middle_point": [11, 170, 305, 359], "triangles_to_edg": [11, 170, 305, 370], "vertex_adjacency_graph": [11, 170, 305, 371], "find_corresponding_ord": [11, 170, 305, 308], "walk": 12, "intal": 12, "offici": [12, 80], "releas": 12, "user": [12, 16, 18, 22, 24, 39, 44, 65, 216, 228, 249, 250, 303, 345, 369], "who": 12, "latest": [12, 77, 80], "contribut": 12, "privileg": 12, "pip": 12, "git": 12, "repositori": [12, 31, 35, 90, 108], "github": [12, 210, 332, 334], "deepinsight": 12, "page": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "document": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "explain": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "signatur": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "big": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "pictur": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "rais": [15, 19, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 86, 87, 104, 106, 107, 169, 303], "typeerror": [15, 21, 30, 36, 107], "annot": [15, 21], "traiterror": [15, 21], "incorrect": [15, 21, 30, 36], "notimplementederror": [15, 21], "handl": [15, 21, 54, 63, 86, 90, 108, 143, 145, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168], "on_predict_batch_start": [15, 21], "trainer": [15, 19, 21, 25, 39, 44, 50, 51, 53, 54, 55, 63], "pl_modul": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "batch_idx": [15, 21, 39, 44, 50, 51, 53, 54, 55, 63], "dataloader_idx": [15, 21, 39, 44, 50, 51, 53, 54, 55, 63], "begin": [15, 19, 21, 25], "on_test_batch_start": [15, 21], "on_train_batch_start": [15, 21], "on_validation_batch_start": [15, 21], "train_dataload": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 54, 63], "test_dataload": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44], "probe_nam": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "tupl": [16, 17, 19, 20, 22, 23, 25, 26, 31, 35, 50, 51, 53, 54, 55, 57, 60, 63, 64, 65, 90, 108, 112, 113, 117, 128, 130, 131, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 163, 164, 165, 166, 167, 168, 192, 193, 197, 239, 285, 286, 289, 296, 297], "cv": [16, 17, 18, 20, 22, 23, 24, 26, 64, 68], "n_job": [16, 17, 18, 22, 23, 24, 344, 368], "balanced_accuraci": [16, 18, 22, 24], "knn": [16, 17, 19, 22, 23, 25], "embed": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 54, 63, 70, 72, 73, 76, 111, 112, 113, 114, 115, 117, 128, 129, 213, 244], "concret": [16, 17, 18, 20, 22, 23, 24, 26, 71, 74], "emb": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "log": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 50, 51, 53, 54, 55, 63, 72, 76, 207, 208, 209, 213, 215, 216, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 248, 249, 250, 257, 259, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 320, 372], "main": [16, 17, 18, 20, 22, 23, 24, 26, 83, 84], "support": [16, 18, 22, 24, 30, 31, 35, 36, 39, 44, 50, 51, 53, 55, 87], "unweight": [16, 18, 22, 24], "precis": [16, 18, 22, 24, 39, 44, 54, 63, 80], "recal": [16, 18, 22, 24], "f1": [16, 18, 22, 24], "guid": [16, 18, 22, 24, 303], "report": [16, 18, 22, 24, 83, 84], "yield": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "form": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 31, 35, 64, 90, 108, 174, 187], "probe": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 64], "default": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 50, 51, 53, 54, 55, 63, 64, 67, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 90, 107, 108, 111, 112, 113, 114, 115, 117, 128, 129, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 164, 165, 167, 168, 173, 174, 176, 177, 179, 182, 183, 185, 186, 187, 190, 191, 196, 198, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 283, 285, 286, 290, 294, 296, 297, 301, 302, 303, 308, 312, 313, 316, 317, 319, 321, 324, 326, 327, 328, 329, 338, 339, 340, 343, 344, 345, 347, 348, 350, 351, 353, 355, 356, 358, 361, 362, 364, 367, 368, 369, 372, 374, 375], "metric_nam": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "hyper": [16, 17, 18, 20, 22, 23, 24, 26], "job": [16, 17, 18, 22, 23, 24, 344, 368], "parallel": [16, 17, 18, 22, 23, 24], "unless": [16, 17, 18, 22, 23, 24], "joblib": [16, 17, 18, 22, 23, 24], "parallel_backend": [16, 17, 18, 22, 23, 24], "context": [16, 17, 18, 22, 23, 24, 327], "processor": [16, 17, 18, 22, 23, 24], "complet": [16, 17, 18, 20, 22, 23, 24, 26, 327, 328], "list": [16, 17, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 53, 54, 55, 57, 60, 63, 64, 68, 71, 72, 74, 76, 78, 86, 174, 181, 187, 195, 197, 200, 201, 202, 203, 204, 205, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 316, 317, 318, 325, 326, 350, 351, 352, 357, 358, 370], "option": [16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 54, 57, 60, 63, 72, 76, 81, 82, 83, 84, 87, 176, 177, 182, 183, 207, 208, 211, 212, 215, 226, 227, 240, 253, 254, 255, 256, 301, 302, 303, 316, 317, 324, 326, 327, 343, 344, 350, 351, 356, 358, 367, 368], "scikit": [16, 17, 18, 20, 22, 23, 24, 26, 77], "org": [16, 17, 18, 20, 22, 23, 24, 26, 31, 35, 58, 59, 61, 62, 70, 73, 80, 104, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 148, 152, 332, 334], "model_evalu": [16, 17, 18, 20, 22, 23, 24, 26], "html": [16, 17, 18, 20, 22, 23, 24, 26, 80, 104], "dict": [16, 17, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 65, 66, 67, 68, 83, 84, 85, 86, 87, 89, 91, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 176, 177, 182, 183, 201, 202, 215, 240, 277, 304, 318, 319, 338, 352, 353, 361], "keyword": [16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 54, 63, 78, 79, 85, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168], "argument": [16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 54, 63, 67, 78, 79, 85, 86, 87, 107, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 328, 345, 369], "pass": [16, 17, 18, 20, 22, 23, 24, 26, 30, 36, 39, 44, 54, 57, 60, 63, 75, 78, 106, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 303], "constructor": [16, 17, 18, 20, 22, 23, 24, 26], "every_n_train_epoch": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "every_n_val_epoch": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "prog_bar": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44], "k": [16, 17, 22, 23, 53, 55, 71, 72, 74, 76, 112, 117, 174, 187, 279, 284, 290, 295, 313, 375], "spars": [16, 17, 18, 22, 23, 24, 303], "n_featur": [16, 17, 18, 22, 23, 24, 54, 63, 70, 71, 72, 73, 74, 76, 316, 326, 345, 350, 358, 369], "precomput": [16, 22], "n_output": [16, 17, 22, 23, 78, 79, 81, 82, 83, 84], "log_metr": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "y_true": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 78, 79, 81, 82, 83, 84], "new": [16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 39, 44, 53, 55, 71, 74, 90, 108, 149, 153, 164, 165, 167, 168, 173, 191, 192, 193, 239, 280, 291, 303], "r2": [17, 20, 23, 26, 35, 83, 84], "regressor": [17, 20, 23, 26, 42, 47, 83, 84, 111, 115], "median": [17, 20, 23, 26, 83, 84, 163, 166], "squar": [17, 20, 23, 26, 83, 84, 211, 253, 258], "pearson": [17, 23, 81, 82, 83, 84], "correl": [17, 23, 81, 82, 83, 84, 285, 286, 296, 297], "coeffici": [17, 23, 81, 82, 83, 84, 319, 353], "varianc": [17, 20, 23, 26, 81, 82, 83, 84, 159, 161, 303], "regular": [17, 18, 20, 23, 24, 26, 54, 63, 148, 152, 325, 357], "ridg": [17, 19, 20, 23, 25, 26], "neg_mean_absolute_error": [17, 20, 23, 26], "neg_mean_squared_error": [17, 20, 23, 26], "linear_solv": [18, 24], "lbfg": [18, 24, 54, 63], "logist": [18, 19, 24, 25, 50, 51], "l2": [18, 20, 24, 26], "invers": [18, 24, 70, 73], "logarithm": [18, 24], "1e4": [18, 24], "machin": [18, 24, 64, 90, 108], "specifi": [18, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 54, 63, 64, 67, 72, 76, 87, 90, 108, 149, 150, 153, 154, 164, 167, 173, 176, 177, 182, 183, 191, 201, 202, 301, 302, 316, 317, 326, 350, 351, 358], "strenght": [18, 24], "maximum": [18, 24, 53, 55, 163, 166, 301, 302, 344, 368], "taken": [18, 24, 158, 159, 160, 161], "solver": [18, 24], "converg": [18, 24, 53, 55], "liblinear": [18, 24], "newton": [18, 24], "cg": [18, 24], "choleski": [18, 24], "sag": [18, 24], "saga": [18, 24], "problem": [18, 24, 204, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "accord": [18, 24, 31, 35, 113, 114, 128, 129, 158, 160, 338, 361], "on_test_epoch_start": [19, 25], "bool": [19, 25, 30, 31, 35, 36, 39, 44, 81, 82, 83, 84, 90, 105, 108, 112, 113, 114, 117, 128, 129, 148, 152, 173, 190, 191, 198, 201, 202, 207, 208, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 247, 248, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 290, 301, 302, 303, 324, 327, 329, 338, 343, 344, 356, 361, 367, 368], "on_test_epoch_end": [19, 25], "abc": [19, 25, 87], "logic": [19, 25, 39, 44, 50, 51, 87], "transform_step": [19, 25, 39, 44, 53, 54, 55, 63], "abstract": [19, 25, 39, 44, 87], "should": [19, 25, 30, 31, 35, 36, 39, 44, 50, 51, 54, 63, 75, 81, 82, 86, 87, 90, 106, 108, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 159, 161, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 303], "inherit": [19, 25, 39, 44, 64], "disabl": [19, 25, 39, 44, 50, 51, 53, 55], "progress": [19, 25, 39, 44, 50, 51, 53, 54, 55, 63], "extract_featur": [19, 25], "By": [19, 25, 30, 36, 39, 44, 50, 51, 54, 63], "linear_prob": [19, 25], "valueerror": [19, 25, 30, 36, 86, 87, 169], "on_train_epoch_end": [19, 25], "access": [19, 25, 30, 31, 35, 36, 89, 91, 277, 328], "cach": [19, 25, 50, 51, 90, 108, 176, 177, 179, 182, 183, 185, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 328], "attribut": [19, 25, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 68, 89, 91, 92, 93, 106, 107], "core": [19, 25, 30, 36, 39, 44, 50, 51], "lightningmodul": [19, 25, 39, 44, 54, 63], "hook": [19, 25, 39, 44, 54, 63, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "mylightningmodul": [19, 25], "l": [19, 25, 148, 152, 158, 160], "super": [19, 25, 39, 44, 50, 51, 53, 55], "training_step_output": [19, 25], "training_step": [19, 25, 39, 44, 50, 51, 53, 54, 55, 63], "mycallback": [19, 25], "someth": [19, 25], "epoch_mean": [19, 25], "training_epoch_mean": [19, 25], "free": [19, 25], "on_validation_epoch_end": [19, 25, 50, 51], "pearsonr": [20, 26, 83, 84], "multipl": [20, 26, 30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 65, 81, 82, 86, 112, 117, 148, 151, 152, 155, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "multivari": [20, 26], "subject_in_pattern": [28, 33, 201, 202], "target_map": [28, 29, 32, 33, 34, 201, 202], "mask": [28, 29, 32, 33, 34, 158, 159, 160, 161, 189, 201, 202, 207, 208, 303], "withdraw_subject": [28, 29, 32, 33, 34, 201, 202], "scalabl": [28, 33, 39, 44, 201, 202], "locat": [28, 29, 32, 33, 34, 90, 108, 201, 202, 333], "store": [28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 55, 201, 202, 328, 329, 330, 331, 345, 369], "folder": [28, 33, 179, 185, 201, 202, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "level": [28, 33, 201, 202, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 248, 249, 250, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 372], "identifi": [28, 33, 201, 202, 310, 323], "retriev": [28, 31, 33, 35, 90, 108, 201, 202], "tabular": [28, 29, 32, 33, 34, 201, 202], "optionali": [28, 29, 32, 33, 34, 50, 51, 53, 55, 201, 202, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "dictionari": [28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 83, 84, 89, 91, 92, 176, 177, 182, 183, 201, 202, 338, 361], "exist": [28, 29, 32, 33, 34, 90, 108, 201, 202, 303, 347, 348], "datafram": [28, 29, 30, 32, 33, 34, 36, 174, 187, 201, 202], "callabl": [28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 86, 106, 158, 159, 160, 161, 201, 202, 328], "optionnali": [28, 29, 32, 33, 34, 50, 51, 53, 55, 176, 177, 182, 183, 190, 198, 201, 202], "filenotfounderror": [28, 29, 32, 33, 34], "mandatorri": [28, 29, 32, 33, 34], "keyerror": [28, 29, 32, 33, 34], "mandatori": [28, 29, 32, 33, 34, 304], "kei": [28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 89, 91, 176, 177, 182, 183, 215, 240, 304, 338, 361], "miss": [28, 29, 31, 32, 33, 34, 35, 325, 357], "particip": [28, 29, 31, 32, 33, 34, 35, 201, 202], "tsv": [28, 29, 30, 31, 32, 33, 34, 35, 36, 201, 202], "request": [28, 29, 31, 32, 33, 34, 35, 149, 153, 201, 202, 210, 303], "conta": [28, 29, 32, 33, 34, 201, 202], "idea": [28, 33], "your": [28, 32, 33, 39, 44, 54, 63, 64, 90, 101, 102, 108, 376], "rather": [28, 33], "symlink": [28, 33], "aggreg": [28, 31, 33, 35, 81, 82], "enforc": [28, 33, 54, 63], "reproduc": [28, 33, 39, 44, 50, 51, 53, 55], "persist": [28, 33], "get_checksum": [28, 33], "hash": [28, 33, 90, 108], "get_data": [28, 29, 33, 34], "rootdir": [30, 36], "df": [30, 36], "frame": [30, 36], "image_col": [30, 36], "image_path": [30, 36], "label_col": [30, 36], "checksum_col": [30, 36], "target_transform": [30, 31, 35, 36], "return_none_if_no_label": [30, 36], "image_load": [30, 36], "is_valid_label": [30, 36], "read_csv_kwarg": [30, 36], "column": [30, 36], "checksum": [30, 36], "fly": [30, 31, 35, 36], "alongsid": [30, 36], "least": [30, 36, 39, 44], "csv": [30, 31, 35, 36], "string": [30, 31, 35, 36, 54, 63, 78, 79, 107, 301, 302], "version": [30, 31, 35, 36, 53, 55, 64, 67, 71, 74, 77, 303], "lambda": [30, 36], "tensor": [30, 36, 39, 44, 50, 51, 53, 54, 55, 57, 60, 63, 70, 72, 73, 76, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 207, 208, 209, 211, 212, 213, 217, 226, 227, 229, 230, 244, 251, 253, 254, 255, 256, 257, 259, 268, 289, 314], "must": [30, 36, 39, 44, 50, 51, 53, 54, 55, 63, 64, 71, 72, 74, 76, 87, 107, 143, 145, 149, 153, 158, 159, 160, 161, 164, 165, 167, 168, 173, 191, 328, 333], "empti": [30, 36], "otherwis": [30, 31, 35, 36, 39, 44, 54, 63, 81, 82, 86, 106, 107, 149, 151, 153, 155, 303], "accept": [30, 36, 78, 79, 87], "extens": [30, 36, 148, 152, 333], "pil": [30, 36], "jpg": [30, 36], "png": [30, 36], "bmp": [30, 36], "etc": [30, 36, 54, 63], "npy": [30, 36], "npz": [30, 36], "medic": [30, 36, 158, 160, 164, 165, 167, 168], "nii": [30, 31, 35, 36], "gz": [30, 31, 35, 36, 333], "filter": [30, 36, 64, 65, 112, 117, 143, 145, 176, 182, 211, 212, 215, 216, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 287, 290, 292, 294, 295, 298], "out": [30, 31, 35, 36, 39, 44, 50, 51, 53, 55, 177, 183, 197, 217, 228, 229, 230, 250, 257, 259, 268], "invalid": [30, 36], "nan": [30, 36, 81, 82], "boolean": [30, 36, 39, 44, 158, 159, 160, 161], "read_csv": [30, 36], "separ": [30, 36, 64, 158, 159, 160, 161], "colomn": [30, 36], "vision": [30, 36, 210, 213, 244, 344, 368], "image1": [30, 36], "image2": [30, 36], "mypath": [30, 36], "mri1": [30, 36], "mri2": [30, 36], "diagnosi": [30, 36], "patient": [30, 36], "control": [30, 31, 35, 36, 39, 44, 50, 51, 53, 54, 55, 63, 173, 176, 182, 191, 200, 203, 204, 205, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 285, 286, 296, 297, 321, 339, 355, 362], "image_mri": [30, 36], "label_mri": [30, 36], "age_mri": [30, 36], "nifti1": [30, 36], "apply_target_transform": [30, 36], "apply_transform": [30, 36, 85, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168], "modal": [31, 35], "vbm": [31, 35], "max_work": [31, 35], "r1": 31, "open": [31, 35, 333], "brain": [31, 35, 158, 160, 376], "consist": [31, 35, 54, 63, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168], "t1w": [31, 35], "public": [31, 35], "ixi": [31, 35], "abid": [31, 35], "ii": [31, 35, 54, 63], "corr": [31, 35], "gsp": [31, 35], "mpi": [31, 35], "leipzig": [31, 35], "nar": [31, 35], "npc": [31, 35], "rbp": [31, 35], "were": [31, 35], "acquir": [31, 35], "worldwid": [31, 35], "north": [31, 35], "america": [31, 35], "europ": [31, 35], "china": [31, 35], "balanc": [31, 35, 53, 55], "male": [31, 35], "femal": [31, 35], "uniformli": [31, 35], "spm": [31, 35], "quasi": [31, 35], "hous": [31, 35], "minim": [31, 35, 53, 54, 55, 63, 337, 360], "voxel": [31, 35, 87, 148, 149, 152, 153, 158, 159, 160, 161, 164, 167], "morphometri": [31, 35], "entir": [31, 35], "350gb": [31, 35], "recommend": [31, 35], "intend": [31, 35], "portion": [31, 35, 150, 154], "directori": [31, 35, 328], "multimod": [31, 35], "__getitem__": [31, 35], "whole": [31, 35, 158, 159, 160, 161], "121": [31, 35, 116, 123], "145": [31, 35], "182": [31, 35], "218": [31, 35], "region": [31, 35], "neuromorphometr": [31, 35], "atla": [31, 35], "284": [31, 35], "destrieux": [31, 35], "fsaverage7": [31, 35], "internal_v": [31, 35], "external_v": [31, 35], "union": [31, 35, 54, 63, 72, 76], "scanner": [31, 35], "lazili": [31, 35], "hug": [31, 35, 64, 90, 108], "face": [31, 35, 64, 90, 108, 301, 302], "demand": [31, 35], "concurr": [31, 35, 344, 368], "thread": [31, 35], "429": [31, 35], "1d": [31, 35, 54, 63, 72, 76], "exclus": [31, 35], "huggingfac": [31, 35], "either": [31, 35, 54, 63, 106, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303], "lazi": [31, 35], "immedi": [31, 35], "b": [31, 35, 89, 91, 143, 144, 145, 146, 158, 160, 164, 165, 167, 168], "victor": [31, 35], "j": [31, 35, 53, 55, 71, 72, 74, 76], "frouin": [31, 35], "duchesnai": [31, 35], "254": [31, 35], "119121": [31, 35], "doi": [31, 35, 70, 73, 111, 112, 113, 114, 115, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "1016": [31, 35], "119637": [31, 35], "download_dataset_split": [31, 35], "increment": [31, 35], "make_dataset": [31, 35], "eventu": [31, 35, 148, 151, 152, 155], "download_fil": [31, 35], "filenam": [31, 35], "get_cat12_templ": [31, 35], "nifti": [31, 35], "tpm": [31, 35], "mni152": [31, 35], "templat": [31, 35], "resourc": [31, 35], "cat12vbm_spac": [31, 35], "mni152_desc": [31, 35], "gm_tpm": [31, 35], "resp": [31, 35], "rh": [31, 35], "length": [31, 35, 71, 74, 338, 361], "divid": [31, 35, 113, 114, 128, 129], "json": [31, 35], "automat": [31, 35, 39, 44, 50, 51, 53, 54, 55, 63, 64, 71, 74, 79, 345, 369], "abbrevi": [31, 35], "integ": [31, 35, 39, 44], "under": [31, 35], "get_quasiraw_templ": [31, 35], "quasiraw_spac": [31, 35], "brain_t1w": [31, 35], "csf": [31, 35], "construct": [31, 35, 64], "unimod": [31, 35], "configur": [31, 35, 39, 44, 54, 63, 64, 65, 158, 160, 376], "metadata": [31, 35, 164, 167, 303], "im": 37, "val_check_interv": [39, 44], "min_epoch": [39, 44], "max_step": [39, 44, 54, 63], "min_step": [39, 44], "enable_checkpoint": [39, 44], "enable_progress_bar": [39, 44], "enable_model_summari": [39, 44], "strategi": [39, 44, 50, 51, 213, 244], "num_nod": [39, 44], "liter": [39, 44], "engin": [39, 44], "float16": [39, 44], "mix": [39, 44], "bf16": [39, 44], "sequenc": [39, 44, 50, 51, 53, 55, 86, 173, 180, 191, 194, 213, 244], "lightn": [39, 44, 54, 63, 376], "interfac": [39, 44, 64, 65, 67, 68, 71, 74, 376], "capabl": [39, 44], "basicali": [39, 44], "child": [39, 44, 64, 190, 198], "mixin": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "loop": [39, 44], "often": [39, 44, 54, 63], "fraction": [39, 44], "fix": [39, 44, 280, 291, 301, 302, 363], "onc": [39, 44], "reach": [39, 44], "infinit": [39, 44], "forc": [39, 44, 90, 108], "checkpoint": [39, 44, 112, 117], "summar": [39, 44], "tpu": [39, 44, 50, 51, 53, 55], "hpu": [39, 44], "mp": [39, 44], "custom": [39, 44, 54, 63, 78, 79, 107], "alias": [39, 44], "listof": [39, 44], "doubl": [39, 44, 216, 228, 249, 250], "16bit": [39, 44], "bfloat16": [39, 44], "extra": [39, 44], "tune": [39, 44], "debug": [39, 44, 201, 202, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 314], "hparam": [39, 44], "dictionarai": [39, 44, 64], "TO": [39, 44], "BE": [39, 44], "validation_step": [39, 44, 50, 51, 53, 54, 55, 63], "anyth": [39, 44, 50, 51, 53, 55], "predict_step": [39, 44, 50, 51, 53, 54, 55, 63], "log_dict": [39, 44], "val_dataload": [39, 44, 54, 63], "instruct": [39, 44], "logger": [39, 44, 50, 51, 53, 55, 320], "on_step": [39, 44], "on_epoch": [39, 44], "reduce_fx": [39, 44], "enable_graph": [39, 44], "sync_dist": [39, 44], "sync_dist_group": [39, 44], "add_dataloader_idx": [39, 44], "metric_attribut": [39, 44], "rank_zero_onli": [39, 44], "ddp": [39, 44], "determin": [39, 44, 53, 55, 174, 187], "accumul": [39, 44], "detach": [39, 44], "graph": [39, 44, 248, 371], "care": [39, 44, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297, 345, 369], "commun": [39, 44], "overhead": [39, 44], "group": [39, 44, 113, 114, 126, 127, 128, 129, 133, 174, 187, 303], "sync": [39, 44], "uniqu": [39, 44, 308], "infer": [39, 44, 50, 51], "explicitli": [39, 44], "restor": [39, 44, 327], "state": [39, 44, 57, 58, 59, 60, 61, 62, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 210, 211, 214, 229, 241, 242, 243, 245, 253, 257], "torchmetr": [39, 44], "tell": [39, 44], "rank": [39, 44], "won": [39, 44, 50, 51], "abl": [39, 44], "improp": [39, 44], "deadlock": [39, 44], "train_loss": [39, 44], "metriccollect": [39, 44], "test_step": [39, 44], "metric_n": [39, 44], "forward": [39, 44, 50, 51, 57, 60, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 211, 212, 213, 214, 216, 217, 226, 227, 228, 229, 230, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "overrid": [39, 44, 50, 51, 54, 63], "prevent": [39, 44, 50, 51], "oom": [39, 44, 50, 51], "basepredictionwrit": [39, 44, 50, 51], "write": [39, 44, 50, 51, 335, 336], "databas": [39, 44, 50, 51], "spawn": [39, 44, 50, 51], "happen": [39, 44, 50, 51], "ddp_spawn": [39, 44, 50, 51], "produc": [39, 44, 50, 51, 53, 54, 55, 63, 164, 165, 167, 168], "step_output": [39, 44, 50, 51, 53, 55], "skip": [39, 44, 50, 51, 53, 55, 246, 247, 248], "deepspe": [39, 44, 50, 51, 53, 55], "manual": [39, 44, 50, 51, 53, 54, 55, 63], "special": [39, 44, 50, 51, 53, 55, 64], "switch": [39, 44, 50, 51, 53, 54, 55, 63], "accumulate_grad_batch": [39, 44, 50, 51, 53, 55], "intern": [39, 44, 50, 51, 53, 55, 57, 58, 59, 60, 61, 62, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 164, 165, 167, 168, 214, 241, 242, 243, 245], "automatic_optim": [39, 44, 50, 51, 53, 55], "gan": [39, 44, 50, 51, 53, 54, 55, 63], "opt1": [39, 44, 50, 51, 53, 55], "opt2": [39, 44, 50, 51, 53, 55], "share": [39, 44, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 149, 153, 214, 241, 242, 243, 245], "api": [39, 44, 53, 54, 55, 63, 79, 80], "d": [39, 44, 50, 51, 53, 54, 55, 63, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 249, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 285, 286, 289, 296, 297, 309, 312, 322, 374], "calcul": [39, 44, 50, 51, 53, 54, 55, 63, 71, 72, 74, 76], "put": [39, 44, 50, 51, 53, 55], "At": [39, 44, 50, 51, 53, 55, 228, 250], "goe": [39, 44, 50, 51, 53, 55], "back": [39, 44, 50, 51, 53, 55, 303], "estimator_typ": [40, 41, 42, 43, 45, 46, 47, 48], "tag": [40, 41, 42, 43, 45, 46, 47, 48, 90, 108], "setup": [50, 51, 320, 372], "freez": [50, 51], "freeze_encod": [50, 51], "rate": [50, 51, 53, 54, 55, 63, 200, 203, 204, 205, 213, 244], "adam": [50, 51, 53, 54, 55, 63], "decai": [50, 51, 53, 54, 55, 63], "multisteplr": [50, 51], "schedul": [50, 51, 53, 54, 55, 63, 64], "element": [50, 51, 53, 55, 149, 153], "variabl": [50, 51, 53, 54, 55, 63, 64, 72, 76, 77, 277], "validation_step_output": [50, 51], "dictionnari": [50, 51, 215, 240, 328], "respectivelli": [50, 51], "configure_optim": [50, 51, 53, 54, 55, 63], "declar": [50, 51, 53, 55, 65], "adamw": [50, 51, 53, 54, 55, 63], "cross_entropy_loss": [50, 51], "cross_entropi": [50, 51], "x_i": [53, 55, 158, 159, 160, 161], "x_j": [53, 55], "maxim": [53, 54, 55, 63], "part": [53, 55], "head": [53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 111, 115, 213, 242, 244, 245], "cnn": [53, 55, 172], "scnn": [53, 55], "respons": [53, 55], "denot": [53, 55, 57, 60], "finish": [53, 55], "extractor": [53, 55], "z": [53, 55, 148, 149, 152, 153, 159, 161, 211, 212, 229, 253, 254, 257, 306, 307, 309, 311, 312, 322, 373, 374], "shown": [53, 54, 55, 63], "wors": [53, 55], "those": [53, 55, 338, 361], "becom": [53, 55], "invari": [53, 55], "thu": [53, 54, 55, 63], "stage": [53, 55], "z_i": [53, 55], "z_j": [53, 55], "therebi": [53, 55], "propos": [53, 55], "aaron": [53, 55], "van": [53, 55], "den": [53, 55], "oord": [53, 55], "short": [53, 55], "formal": [53, 55], "written": [53, 55], "ell_": [53, 55], "frac": [53, 55, 71, 72, 74, 76, 158, 159, 160, 161, 164, 167], "exp": [53, 55, 72, 76], "sim": [53, 55, 72, 76, 143, 144, 145, 146], "tau": [53, 55, 72, 76], "sum_": [53, 55, 72, 76], "2n": [53, 55], "mathbb": [53, 55], "neq": [53, 55], "z_k": [53, 55], "peak": [53, 55], "bound": [53, 55, 150, 154, 186, 196], "influenc": [53, 55], "dissimilar": [53, 54, 55, 63], "versu": [53, 55], "cosin": [53, 54, 55, 63, 71, 72, 74, 76, 150, 154, 164, 165, 167, 168], "cdot": [53, 55], "minimum": [53, 55, 158, 160, 163, 166, 301, 302], "around": [53, 55, 151, 155], "exact": [53, 55], "opposit": [53, 55], "flexibl": [53, 55], "altern": [53, 55], "track": [53, 55], "projector": [53, 55], "cosineannealinglr": [53, 55], "auxiliari": [53, 54, 55, 63, 72, 76], "info_nce_loss": [53, 55], "encoder_kwarg": [54, 63], "projection_head_kwarg": [54, 63], "kernel": [54, 63, 71, 72, 74, 76, 113, 114, 128, 129, 143, 145, 164, 165, 167, 168, 176, 182, 285, 286, 296, 297, 338, 339, 361, 362], "bandwidth": [54, 63, 71, 72, 74, 76], "ndarrai": [54, 63, 71, 72, 74, 76, 81, 82, 86, 87, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 204, 205, 303, 306, 307, 311, 373], "optimizer_kwarg": [54, 63], "learning_r": [54, 63], "0001": [54, 63, 308, 313, 375], "lr_schedul": [54, 63], "lrschedul": [54, 63], "reducelronplateau": [54, 63], "lr_scheduler_kwarg": [54, 63], "awar": [54, 63, 72, 76], "visual": [54, 63, 214, 241], "agreement": [54, 63], "encourag": [54, 63], "push": [54, 63], "apart": [54, 63], "uninstanti": [54, 63], "although": [54, 63, 75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "instanti": [54, 63, 164, 167], "op": [54, 63], "hidden_channel": [54, 63, 248], "n_embed": [54, 63, 111, 112, 113, 114, 115, 117, 128, 129], "2048": [54, 58, 59, 61, 62, 63], "input_dim": [54, 58, 59, 61, 62, 63, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "output_dim": [54, 58, 59, 61, 62, 63, 258], "impli": [54, 63], "wherea": [54, 63], "high": [54, 63, 164, 165, 167, 168, 192], "impos": [54, 63, 64], "sensit": [54, 63], "epanechnikov": [54, 63, 71, 72, 74, 76], "scalar": [54, 63, 71, 72, 74, 76, 87, 150, 154, 164, 165, 167, 168], "diagnon": [54, 63, 72, 76], "diagon": [54, 63, 71, 72, 74, 76], "2d": [54, 63, 71, 72, 74, 76, 148, 150, 151, 152, 154, 155, 321, 355], "pairwis": [54, 63, 71, 72, 74, 76], "stochast": [54, 63, 86, 211, 229, 253, 257], "descent": [54, 63], "decoupl": [54, 63], "loshchilov": [54, 63], "hutter": [54, 63], "iclr": [54, 63], "2019": [54, 63, 216, 228, 248, 249, 250], "subclass": [54, 63, 75, 86, 87, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "beta": [54, 63, 207, 208, 306, 307, 311, 373], "moment": [54, 63, 64], "lrschedulerpltyp": [54, 63], "num_sanity_val_step": [54, 63], "proxi": [54, 63, 72, 76], "meta": [54, 63, 72, 76, 174, 187, 303], "miccai": [54, 63, 72, 76], "2021": [54, 59, 62, 63, 72, 76, 111, 115, 158, 160, 229, 257], "neural": [54, 63, 148, 152], "choos": [54, 63], "But": [54, 63], "lr_scheduler_config": [54, 63], "whose": [54, 63], "updat": [54, 63, 66, 303], "val_loss": [54, 63], "strict": [54, 63], "condit": [54, 63, 104], "metric_to_track": [54, 63], "optimizer1": [54, 63], "optimizer2": [54, 63], "scheduler1": [54, 63], "scheduler2": [54, 63], "lambdalr": [54, 63], "made": [54, 63], "metric_v": [54, 63], "thing": [54, 63], "know": [54, 63, 87], "closur": [54, 63], "yourself": [54, 63], "optimizer_step": [54, 63], "parse_batch": [54, 63], "pars": [54, 63, 85, 86, 87], "v1": [54, 63], "v2": [54, 63], "block": [57, 60, 64, 112, 113, 114, 117, 128, 129, 130, 131, 213, 244, 246, 247, 251, 252], "read": [57, 60, 330, 331], "in_featur": [57, 60], "batch_norm_lay": [57, 60], "non_linearity_lay": [57, 60], "non": [57, 58, 60, 61, 159, 161], "norm": [57, 60, 121], "batchnorm1d": [57, 60], "scriptmodul": [57, 58, 59, 60, 61, 62, 70, 72, 73, 75, 76, 111, 112, 113, 114, 115, 117, 118, 119, 120, 126, 127, 128, 129, 214, 241, 242, 243, 245], "zi": [58, 61], "w_2": [58, 61], "w_1": [58, 61], "2020": [58, 59, 61, 62, 70, 73, 148, 152], "arxiv": [58, 59, 61, 62, 70, 73, 112, 113, 114, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 148, 152, 248], "2002": [58, 61, 70, 73], "05709": [58, 61, 70, 73], "512": [59, 62, 112, 113, 114, 117, 128, 129, 217, 230, 259, 268], "z\u03b82": [59, 62], "vanilla": [59, 62], "multilay": [59, 62], "perceptron": [59, 62], "2106": [59, 62], "08808": [59, 62], "expfil": 64, "selector": [64, 65], "logdir": 64, "useful": 64, "date": 64, "reus": [64, 345, 369], "section": 64, "descipt": 64, "scaler": [64, 303], "dl": 64, "environ": [64, 65, 66, 68], "fullfil": 64, "constraint": 64, "interface_occurr": 64, "term": [64, 67, 71, 74, 88], "interface_vers": 64, "__version__": 64, "mismatch": 64, "detect": 64, "connot": 64, "previous": 64, "param": [64, 67, 68], "instanci": 64, "prefix": 64, "hierarch": 64, "properti": [64, 104], "parent": 64, "architecture_nam": [64, 90, 108], "revis": [64, 90, 108], "specifid": 64, "appropri": [64, 65, 107], "scheme": [64, 71, 74], "hyperparapet": 64, "defautl": 64, "coupl": 64, "config": 65, "env": [65, 66, 68], "filter_conf": 65, "updated_env": 66, "environemt": 66, "my_modul": 67, "my_class": 67, "exppect": 67, "module": 67, "cl": [67, 213, 244], "updated_param": 68, "param_set": 68, "entropi": [70, 73], "deriv": [70, 73], "icml": [70, 73], "48550": [70, 73, 112, 113, 114, 116, 117, 123, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "z1": [70, 72, 73, 76], "z2": [70, 72, 73, 76], "scott": [71, 74], "fast": [71, 74, 164, 165, 167, 168], "kde": [71, 74], "x1": [71, 74, 75, 251, 252], "xn": [71, 74], "w_": [71, 72, 74, 76], "xi": [71, 74], "xj": [71, 74], "geq": [71, 74], "dx": [71, 74], "silverman": [71, 74], "covari": [71, 74], "mathrm": [71, 74], "diag": [71, 74], "distanc": [71, 74, 174, 187, 284, 295], "rosenblatt": [71, 74], "1956": [71, 74], "remark": [71, 74], "nonparametr": [71, 74], "annal": [71, 74], "mathemat": [71, 74], "parzen": [71, 74], "1962": [71, 74], "On": [71, 74, 327], "scotts_factor": [71, 74], "factor": [71, 74, 112, 117, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 321, 339, 355, 362], "set_bandwidth": [71, 74], "subsequ": [71, 74], "silverman_factor": [71, 74], "mini": [72, 76], "w": [72, 76, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 209, 258], "ell": [72, 76], "z_1": [72, 76], "z_2": [72, 76], "\u03c4": [72, 76], "y_i": [72, 76], "y_j": [72, 76], "phd": [72, 76], "thesi": [72, 76], "dot": [72, 76], "product": [72, 76, 376], "n_label": [72, 76], "x2": [75, 251, 252], "overridden": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "recip": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "afterward": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "former": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "latter": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "silent": [75, 111, 112, 113, 114, 115, 117, 118, 119, 126, 127, 128, 129, 214, 241, 242, 243, 245, 248, 284, 285, 286, 295, 296, 297], "re": 77, "sample_weight": [78, 79, 81, 82, 83, 84, 303], "multioutput": [78, 79, 81, 82], "numer": [78, 159, 161], "raw_valu": [78, 79, 81, 82], "uniform_averag": [78, 79, 81, 82], "variance_weight": [78, 79], "due": [78, 79], "compat": [78, 79, 376], "check_arrai": 78, "type_tru": [78, 79], "multiclass": [78, 79], "type_of_target": [78, 79], "just": [78, 79], "suitabl": [79, 80], "privat": 79, "highest": 80, "promot": 80, "rule": 80, "api_specif": 80, "type_promot": 80, "namespac": 80, "force_finit": [81, 82], "alwai": [81, 82, 87, 90, 108, 149, 153, 303], "perfect": [81, 82], "anti": [81, 82], "flag": [81, 82], "inf": [81, 82], "constant": [81, 82, 158, 159, 160, 161, 163, 166], "real": [81, 82], "target_nam": [83, 84], "digit": [83, 84], "output_dict": [83, 84], "round": [83, 84], "mae": [83, 84], "meda": [83, 84], "mse": [83, 84], "pcc": [83, 84], "evar": [83, 84], "arithmet": [83, 84], "data_pars": [85, 86, 87], "sever": [86, 304], "elsewher": 86, "parse_data": [86, 87, 169], "actual": 87, "compliant": 87, "conjonct": 87, "nd": [87, 148, 150, 152, 154], "gamma": 87, "todo": 87, "randombright": 87, "biasfield": 87, "typetransforminput": 87, "static": [87, 164, 167], "parse_prob": 87, "termin": 88, "expos": [89, 91], "value_kei": [89, 91], "avaiabl": [90, 108], "pathlib": [90, 108], "repo": [90, 108], "classmethod": [90, 108, 174, 187, 215, 240], "hf_download": [90, 108], "hf_id": [90, 108], "hf_revis": [90, 108], "force_download": [90, 108], "resum": [90, 108], "id": [90, 108], "commit": [90, 108], "hub_split": [90, 108], "hub_nam": [90, 108], "interpret": [90, 108, 164, 167], "hub_id": [90, 108], "hub_revis": [90, 108], "decalr": [90, 108, 171], "ns_download": [90, 108], "ns_id": [90, 108], "reset": [92, 101, 102], "background": 92, "foreground": [92, 94], "reverse_dict": 92, "revers": [92, 149, 153, 211, 253], "alia": [93, 94, 164, 165, 167, 168, 192, 193, 239, 303], "conveni": [101, 102], "style": [101, 102], "ansi": [101, 102], "fn": 104, "attribute_nam": 104, "descriptor": 104, "protocol": 104, "decor": [104, 106, 190, 198, 328, 345, 369], "attributeerror": [104, 106], "falsei": 104, "hasattr": [104, 106], "doc": 104, "howto": 104, "explan": 104, "deleg": 105, "underli": 105, "truthi": 106, "unavail": 106, "helloifeven": 106, "_x_is_even": 106, "say_hello": 106, "hello": 106, "obj": 106, "msg": [107, 314], "presenc": 107, "trail": 107, "underscor": 107, "except": [107, 303], "messag": [107, 213, 216, 217, 228, 229, 230, 244, 248, 249, 250, 257, 259, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 314], "yet": 107, "substitut": 107, "eg": 107, "sparsifi": 107, "fitt": 107, "abrol": [111, 115], "5281": [111, 115], "zenodo": [111, 115], "4309677": [111, 115], "growth_rat": [112, 117, 118, 119, 122], "block_config": [112, 117, 122], "num_init_featur": [112, 117, 122], "bn_size": [112, 117, 118, 119], "memory_effici": [112, 117, 118, 119], "huang": [112, 116, 117, 123], "2018": [112, 116, 117, 123], "1608": [112, 116, 117, 123], "06993": [112, 116, 117, 123], "pool": [112, 117, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 283, 294], "convolut": [112, 113, 114, 117, 128, 129, 132, 133, 148, 152, 176, 182, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298], "slower": [112, 117, 164, 165, 167, 168], "pdf": [112, 117], "1707": [112, 117], "06990": [112, 117], "zero_init_residu": [113, 114, 128, 129], "width_per_group": [113, 114, 128, 129], "replace_stride_with_dil": [113, 114, 128, 129], "norm_lay": [113, 114, 126, 127, 128, 129], "initial_kernel_s": [113, 114, 128, 129], "he": [113, 114, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "2015": [113, 114, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "1512": [113, 114, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "03385": [113, 114, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139], "bn": [113, 114, 128, 129, 246, 247, 251, 252], "residu": [113, 114, 128, 129], "branch": [113, 114, 128, 129], "behav": [113, 114, 128, 129], "1706": [113, 114, 128, 129], "02677": [113, 114, 128, 129], "dilat": [113, 114, 126, 127, 128, 129, 133], "atrou": [113, 114, 128, 129], "preserv": [113, 114, 128, 129, 148, 152, 164, 165, 167, 168], "dens": [113, 114, 128, 129, 211, 253, 303], "batchnorm3d": [113, 114, 128, 129], "truncat": [114, 125, 129, 135, 137, 139], "num_lay": 118, "num_input_featur": [118, 119, 120], "init_featur": 118, "prev_featur": 119, "num_output_featur": 120, "arch": [122, 130, 131], "inplan": [126, 127], "plane": [126, 127, 151, 155, 284, 295, 338, 354, 361], "base_width": [126, 127], "in_plan": [132, 133], "out_plan": [132, 133], "1x1": [132, 228, 250], "deviat": [143, 144, 145, 146, 159, 161, 176, 178, 182, 184, 303], "mathcal": [143, 144, 145, 146], "six": [143, 145], "a_1": [143, 145], "b_1": [143, 145], "a_2": [143, 145], "b_2": [143, 145], "a_3": [143, 145], "b_3": [143, 145], "sigma_i": [143, 145], "a_i": [143, 145], "b_i": [143, 145], "nois": [144, 146, 178, 184], "mu": [144, 146, 159, 161], "ratio": [148, 150, 152, 154, 248], "num_iter": [148, 152], "inplac": [148, 152, 303], "randomli": [148, 151, 152, 155, 174, 175, 187, 188], "eras": [148, 152], "box": [148, 152], "r3": 148, "cutout": [148, 152, 177, 183], "r4": 148, "proport": [148, 152], "against": [148, 152], "modifi": [148, 152, 165, 168], "geometr": [148, 150, 152, 154], "don": [148, 150, 152, 154], "particular": [148, 150, 152, 154], "zhong": [148, 152], "zheng": [148, 152], "kang": [148, 152], "li": [148, 152], "yang": [148, 152], "aaai": [148, 152], "confer": [148, 152], "intellig": [148, 152], "1708": [148, 152], "04896": [148, 152], "devri": [148, 152], "taylor": [148, 152], "2017": [148, 152], "04552": [148, 152], "flip_prob": [149, 153], "ap": [149, 151, 153, 155], "antero": [149, 151, 153, 155], "posterior": [149, 151, 153, 155], "inferior": [149, 151, 153, 155], "ra": [149, 151, 153, 155, 164, 167], "never": [149, 153, 165, 168], "typic": [149, 151, 153, 155, 164, 167], "get_index_from_anat_label": [149, 153], "anterior": [149, 153], "superior": [149, 153], "4x4": [149, 153], "target_shap": [150, 154, 163, 165, 166, 168], "08": [150, 154, 159, 161], "upper": [150, 154, 326, 358], "bspline": [150, 154, 164, 165, 167, 168], "cubic": [150, 154, 164, 165, 167, 168], "label_gaussian": [150, 154, 164, 165, 167, 168], "ham": [150, 154, 164, 165, 167, 168], "welch": [150, 154, 164, 165, 167, 168], "lanczo": [150, 154, 164, 165, 167, 168], "blackman": [150, 154, 164, 165, 167, 168], "itk": [150, 154, 164, 165, 167, 168], "compromis": [150, 154, 164, 165, 167, 168], "qualiti": [150, 154, 164, 165, 167, 168], "speed": [150, 154, 164, 165, 167, 168, 176, 182, 215, 240], "solid": [150, 154, 164, 165, 167, 168], "rotation_prob": [151, 155], "degre": [151, 155, 179, 185, 319, 345, 353, 369], "randn": [151, 155], "r5": 152, "r6": 152, "out_min_max": [158, 160], "percentil": [158, 160], "masking_fn": [158, 159, 160, 161], "robust": [158, 160, 164, 165, 167, 168], "outlier": [158, 160], "clip": [158, 160], "inter": [158, 160], "quantil": [158, 160], "p_l": [158, 160], "p_u": [158, 160], "o_": [158, 160], "p_": [158, 160], "quad": [158, 160], "ext": [158, 160], "percentag": [158, 160], "synthseg": [158, 160], "r7": 158, "nnunet": [158, 160], "r8": 158, "insid": [158, 160, 303], "cutoff": [158, 160], "convent": [158, 160], "billot": [158, 160], "2023": [158, 160], "retrain": [158, 160], "102789": [158, 160], "isense": [158, 160], "nnu": [158, 160], "net": [158, 160, 216, 228, 248, 249, 250], "biomed": [158, 160], "natur": [158, 160, 172], "203": [158, 160], "211": [158, 160], "loc": [158, 160], "ep": [159, 161], "epsilon": [159, 161], "stabil": [159, 161], "avoid": [159, 161, 303], "determinist": [159, 161], "r9": 160, "r10": 160, "padding_mod": [163, 166], "constant_valu": [163, 166], "edg": [163, 166, 301, 302, 370, 371], "4d": [164, 167, 169], "coordin": [164, 167, 305, 306, 307, 309, 310, 311, 312, 322, 323, 347, 363, 373, 374], "simpleitk": [164, 165, 167, 168], "s_w": [164, 167], "s_h": [164, 167], "s_d": [164, 167], "offlin": [164, 165, 167, 168], "poorer": [164, 165, 167, 168], "categor": [164, 165, 167, 168], "r11": 164, "spline": [164, 165, 167, 168], "window": [164, 165, 167, 168], "meijer": [164, 165, 167, 168], "1999": [164, 165, 167, 168], "quantit": [164, 165, 167, 168], "approxim": [164, 165, 167, 168], "dummi": [164, 167], "rand": [164, 167], "1mm": [164, 167], "2mm": [164, 167], "isotrop": [164, 167], "image_torch": [164, 167], "resampled_torch": [164, 167], "as_sitk": [164, 167], "from_sitk": [164, 167], "get_sitk_metadata_from_ras_affin": [164, 167], "lp": [164, 167], "implicit": [165, 168], "r12": 165, "r13": 167, "r14": 168, "inspir": 172, "init": [173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 191, 192, 194, 200, 203, 207, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 327], "randomize_per_channel": [173, 190, 191, 193, 198], "tranform": [173, 191, 310, 323], "bootstrap": [174, 187], "measur": [174, 175, 179, 185, 187, 188, 189], "curupt": [174, 175, 187, 188, 189], "regroup": [174, 187], "pca": [174, 187], "compon": [174, 187, 306, 307, 311, 373], "extern": [174, 187], "popul": [174, 187], "bootstap": [174, 187], "arr": [174, 175, 177, 178, 179, 183, 184, 185, 187, 188], "bootsrap": [174, 187], "controlater": [175, 188], "cachedir": [176, 177, 179, 182, 183, 185, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 328], "recept": [176, 182], "icosahdron": [176, 177, 179, 182, 183, 185], "neighboor": [176, 177, 182, 183, 301, 302], "sufifi": [176, 177, 182, 183], "ie": [176, 177, 182, 183, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "organ": [176, 177, 182, 183, 329, 338, 361], "ring": [176, 177, 182, 183, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 287, 290, 292, 294, 298, 318, 338, 352, 361], "replacement_valu": [177, 183], "connex": [177, 183], "neighborhood": [177, 183, 246, 251, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 321, 337, 339, 355, 360, 362], "ablat": [177, 183], "cut": [177, 183], "barycentr": [179, 185, 319, 343, 345, 353, 367, 369], "angl": [179, 185, 306, 307, 311, 319, 338, 345, 353, 354, 361, 369, 373], "euler": [179, 185, 319, 345, 353, 369], "smart": [179, 185, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "speedup": [179, 185, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "accordingli": [179, 185], "n_channel": [181, 195, 213, 244], "_data": [181, 195], "uplet": [186, 196, 284, 295, 319, 345, 353, 369], "aplli": 189, "rand_mask": 189, "binari": [189, 207, 208], "corrupt": 189, "multichannel": [190, 198], "multichannelaugment": [190, 198], "applic": [190, 198, 216, 228, 249, 250, 304], "liftifi": 197, "synthet": 199, "gene": [200, 203, 204, 205], "n_max": [201, 202], "target_ico_ord": [201, 202], "regex": [201, 202], "triangular": [201, 202, 301, 302, 344, 346, 368], "purpos": [201, 202], "desir": [201, 202, 337, 360], "assocait": [204, 205], "variat": [206, 210, 229, 257], "svae": [206, 229, 257], "left_mask": [207, 208], "right_mask": [207, 208], "use_ms": [207, 208], "kl": [207, 208], "diverg": [207, 208], "likelihood": [207, 208, 209], "recon": 209, "reconstruct": [209, 211, 229, 253, 257], "relat": [210, 215, 240], "gmvae": 210, "rest": [210, 229, 257], "fmri": [210, 229, 257], "autoencod": [210, 229, 257], "libilab": 210, "rsfmri": 210, "output_shap": [211, 253, 286, 297], "before_latent_dim": [211, 253], "latent_dim": [211, 212, 214, 226, 227, 229, 241, 253, 254, 255, 256, 257], "conv_flt": [211, 212, 226, 227, 229, 253, 254, 255, 256, 257], "fusion_level": [211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "leakyrelu": [211, 212, 226, 227, 229, 253, 254, 255, 256, 257], "batch_norm": [211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "output_channel": [211, 253], "convnet": [211, 253, 258], "left_recon_x": [211, 229, 253, 257], "input_channel": [211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "right_recon_x": [211, 229, 253, 257], "left_x": [212, 217, 226, 227, 229, 230, 254, 255, 256, 257, 259, 268], "right_x": [212, 217, 226, 227, 229, 230, 254, 255, 256, 257, 259, 268], "q": [212, 229, 254, 257], "mlp_dim": [213, 244, 245], "dim_head": [213, 242, 244, 245], "dropout": [213, 242, 243, 244, 245], "emb_dropout": [213, 244], "msit": [213, 244], "dahan": [213, 244], "simon": [213, 214, 241, 244], "midl": [213, 244], "n_verticesi": [213, 244], "trainabl": [213, 244], "msa": [213, 244], "mechan": [213, 244, 303], "feed": [213, 244], "ffn": [213, 244], "expand": [213, 244], "poll": [213, 244], "token": [213, 244], "hidden_lay": [214, 241], "return_logit": [214, 241], "kornblith": [214, 241], "mohammad": [214, 241], "norouzi": [214, 241], "geoffrei": [214, 241], "hinton": [214, 241], "y1": [214, 241], "y2": [214, 241], "input_ord": [215, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "n_layer": [215, 240], "repa_s": [215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "repa_zoom": [215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "dynamic_repa_zoom": [215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276], "repa": [215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 339, 362], "ico_info": [215, 240], "build_ico_info": [215, 240], "tangent": [215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 295, 321, 338, 354, 355, 361], "tessal": [215, 240, 324, 344, 356, 368], "tessel": [215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 344, 368], "icosehedron": [215, 240], "upsampl": [215, 228, 240, 250, 251, 280, 281, 282, 287, 288, 291, 292, 293, 298, 299, 326, 358], "onform": [215, 240], "gride": [216, 217, 247, 249, 252, 259, 309, 322], "built": [216, 228, 249, 250], "upon": [216, 228, 249, 250], "spma": [216, 249], "rectifi": [216, 228, 249, 250], "halv": [216, 228, 249, 250], "zhao": [216, 228, 249, 250], "ipmi": [216, 228, 249, 250], "cfg": [217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "4096": [217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "init_weight": [217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "stand": [217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 304], "wether": [217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "sphericalgvggbas": [218, 219, 220, 221, 222, 223, 224, 225, 260, 261, 262, 263, 264, 265, 266, 267], "interp": [228, 250, 251], "2x2": [228, 250], "maxpad": [228, 250, 251], "shift": [228, 250, 251], "zeropad": [228, 250, 251], "sphericalgva": [229, 257], "vert": [229, 230, 257, 268], "tri": [229, 230, 257, 268, 346], "reparameter": [229, 257], "reparametr": [229, 257], "trick": [229, 257], "sphericalvggbas": [231, 232, 233, 234, 235, 236, 237, 238, 269, 270, 271, 272, 273, 274, 275, 276], "neighbor_indic": [239, 279, 281, 282, 287, 290, 292, 293, 298], "down_indic": [239, 246, 251, 281, 282, 283, 287, 292, 293, 294, 298, 316, 317, 350, 351], "up_indic": [239, 280, 288, 291, 299, 325, 326, 357, 358], "conv_neighbor_indic": 239, "conv_lay": [246, 251], "in_ch": [246, 247, 251, 252], "out_ch": [246, 247, 251, 252], "conv_neigh_indic": [246, 251], "down_neigh_indic": [246, 282, 283, 293, 294], "pool_mod": 246, "discret": [246, 251, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "pool_ratio": 248, "sum_r": 248, "act": 248, "unpool": 248, "hongyang": 248, "gao": 248, "shuiwang": 248, "ji": 248, "connect": [248, 371], "summat": 248, "nonlinear": 248, "edge_index": 248, "neigh_indic": [251, 279, 284, 290, 295], "up_neigh_indic": [251, 280, 281, 282, 287, 288, 291, 292, 293, 298, 299], "upsamp": [251, 252], "upconv": [251, 252], "max_pool_indic": [251, 282, 293], "klass_nam": 277, "klass_param": 277, "destination_module_glob": 277, "publicli": 277, "assign": [277, 338, 361], "in_feat": [279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299], "out_feat": [279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299], "formul": [279, 290], "ico2_vertic": [279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299], "ico2_triangl": [279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299], "asarrai": [279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 298, 299, 325, 357], "ico2_x": [279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 293, 294, 295, 298, 299], "ico3_vertic": [280, 281, 282, 283, 287, 288, 291, 292, 293, 294, 298, 299], "ico3_triangl": [280, 281, 282, 283, 287, 288, 291, 292, 293, 294, 298, 299], "ico3_x": [280, 281, 282, 283, 287, 288, 291, 292, 293, 294, 298, 299], "slow": [281, 292], "pooling_typ": [282, 283, 293, 294], "rectagular": [284, 295], "neigh_weight": [284, 295], "proj_ico_x": [285, 286, 296, 297], "pad_azimuth": [285, 286, 289, 296, 297], "pad_elev": [285, 286, 289, 296, 297], "zero_pad": [286, 297], "icoconv": [286, 297], "vmin": [301, 302], "vmax": [301, 302], "black": [301, 302], "color_map": [301, 302], "linearsegmentedcolormap": [301, 302], "opac": [301, 302], "Not": [301, 302], "cm": [301, 302], "coolwarm": [301, 302], "sub": 303, "with_mean": 303, "with_std": 303, "scler": 303, "guarante": 303, "csr": 303, "attempt": 303, "entail": 303, "equival": 303, "n_subject": 303, "get_metadata_rout": 303, "rout": 303, "inverse_transform": 303, "x_tr": 303, "set_inverse_transform_request": 303, "unchang": 303, "enable_metadata_rout": 303, "set_config": 303, "metadata_rout": 303, "set_partial_fit_request": 303, "partial_fit": 303, "set_transform_request": 303, "system": 305, "tool": [305, 376], "cartesian": [306, 307, 311, 373], "array_lik": [306, 307, 311, 373], "radiant": [306, 307, 311, 373], "pi": [306, 307], "r": [306, 307, 311, 373], "ref_arrai": 308, "atol": [308, 313, 375], "toler": [308, 313, 375], "new_ord": 308, "resx": [309, 312, 322, 374], "resi": [309, 312, 322, 374], "ico2_vert": [309, 310, 312, 313, 315, 316, 318, 322, 323, 325, 326, 338, 339, 344, 349, 350, 352, 357, 358, 361, 362, 368, 374, 375], "ico2_tri": [309, 310, 312, 313, 315, 316, 318, 322, 323, 325, 326, 338, 339, 344, 349, 350, 352, 357, 358, 361, 362, 368, 374, 375], "y_grid": [309, 312, 322, 374], "ref_vertic": [310, 313, 323, 375], "ico2_std_vert": [310, 313, 323, 375], "ico2_std_tri": [310, 313, 323, 375], "projecte": [312, 374], "y_std": [313, 375], "target_vertic": [315, 325, 349, 357], "n_dim": [315, 325, 349, 357], "n_queri": [315, 325, 349, 357], "nearest_idx": [315, 349], "ico3_vert": [315, 324, 325, 337, 340, 342, 344, 345, 349, 356, 357, 360, 364, 366, 368, 369], "ico3_tri": [315, 324, 325, 337, 340, 342, 344, 345, 349, 356, 357, 360, 364, 366, 368, 369], "down3to2": [315, 349], "ico3_down_vertic": [315, 349], "consecut": [316, 317, 326, 350, 351, 358], "downsampled_data": [316, 350], "new_n_vertic": [316, 326, 350, 358], "ico4_vert": [316, 317, 326, 350, 351, 358], "ico4_tri": [316, 317, 326, 350, 351, 358], "reshap": [316, 318, 325, 326, 345, 350, 352, 357, 358, 369], "y_down": [316, 350], "squeez": [316, 326, 345, 350, 358, 369], "new_vertic": [317, 351], "newli": [317, 351], "icosahedorn": [317, 351], "new_triangl": [317, 351], "ico2_down_vert": [317, 351], "ico2_down_tri": [317, 351], "start_nod": [318, 352], "recurs": [318, 352], "node_neigh": [318, 352], "asssoci": [319, 353], "euclidian": [319, 353], "grid_in_spher": [321, 339, 355, 362], "grid_in_tplan": [321, 355], "target_triangl": [325, 357], "interp_indic": [325, 357], "n_feat": [325, 357], "y_up": [325, 326, 357, 358], "upsampled_data": [326, 358], "hide_err": 327, "secur": 327, "redirect": 327, "manag": 327, "hide": 327, "func": 328, "wrap": 328, "receiv": 328, "transpar": 328, "overlap": 328, "cifti_fil": 329, "decompos": 329, "cifti": [329, 332, 334], "vol": 329, "surf_left": 329, "surf_right": 329, "surf_fil": [330, 331, 335, 336], "gifti": [331, 336], "surf_nam": 332, "nbviewer": [332, 334], "neurohackademi": [332, 334], "nh2020": [332, 334], "curriculum": [332, 334], "blob": [332, 334], "master": [332, 334], "markiewicz": [332, 334], "gnu": 333, "archiv": 333, "out_path": 333, "n_neigh": [337, 341, 360, 365], "remain": [338, 361], "n_vert": [340, 364], "min_order_to_get_n_neighbor": [341, 365], "hi": [342, 366], "clockwise_from_cent": [343, 367], "clockwis": [343, 367], "counter": [343, 367], "reordered_triangl": [343, 367], "reorder": [343, 367], "ico0_vert": [343, 367], "ico0_tri": [343, 367], "clockwise_ico0_tri": [343, 367], "counter_clockwise_ico0_tri": [343, 367], "euclidean": [345, 369], "rotated_data": [345, 369], "y_rot": [345, 369], "lower_vertic": 346, "ico_fil": 347, "topologi": [347, 348], "ref_fil": 348, "fslr": 348, "point_1": 359, "point_2": 359, "middle_point_cach": 359, "middl": 359, "return_index": 370, "triangles_index": 370, "networkx": 371, "nearbi": 371, "logfil": 372, "unifi": 376, "analyz": 376, "advanc": 376, "availbl": 376, "hydra": 376}, "objects": {"nidl.callbacks": [[15, 0, 1, "", "BatchTypingCallback"], [16, 0, 1, "", "KNeighborsClassifierCVCallback"], [17, 0, 1, "", "KNeighborsRegressorCVCallback"], [18, 0, 1, "", "LogisticRegressionCVCallback"], [19, 0, 1, "", "ModelProbing"], [20, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.BatchTypingCallback": [[15, 1, 1, "", "on_predict_batch_start"], [15, 1, 1, "", "on_test_batch_start"], [15, 1, 1, "", "on_train_batch_start"], [15, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.KNeighborsClassifierCVCallback": [[16, 1, 1, "", "fit"], [16, 1, 1, "", "log_metrics"], [16, 1, 1, "", "predict"]], "nidl.callbacks.KNeighborsRegressorCVCallback": [[17, 1, 1, "", "fit"], [17, 1, 1, "", "log_metrics"], [17, 1, 1, "", "predict"]], "nidl.callbacks.LogisticRegressionCVCallback": [[18, 1, 1, "", "fit"], [18, 1, 1, "", "log_metrics"], [18, 1, 1, "", "predict"]], "nidl.callbacks.ModelProbing": [[19, 1, 1, "", "extract_features"], [19, 1, 1, "", "fit"], [19, 1, 1, "", "linear_probing"], [19, 1, 1, "", "log_metrics"], [19, 1, 1, "", "on_test_epoch_end"], [19, 1, 1, "", "on_test_epoch_start"], [19, 1, 1, "", "on_train_epoch_end"], [19, 1, 1, "", "on_validation_epoch_end"], [19, 1, 1, "", "predict"]], "nidl.callbacks.RidgeCVCallback": [[20, 1, 1, "", "fit"], [20, 1, 1, "", "log_metrics"], [20, 1, 1, "", "predict"]], "nidl.callbacks.check_typing": [[21, 0, 1, "", "BatchTypingCallback"]], "nidl.callbacks.check_typing.BatchTypingCallback": [[21, 1, 1, "", "on_predict_batch_start"], [21, 1, 1, "", "on_test_batch_start"], [21, 1, 1, "", "on_train_batch_start"], [21, 1, 1, "", "on_validation_batch_start"]], "nidl.callbacks.model_probing": [[22, 0, 1, "", "KNeighborsClassifierCVCallback"], [23, 0, 1, "", "KNeighborsRegressorCVCallback"], [24, 0, 1, "", "LogisticRegressionCVCallback"], [25, 0, 1, "", "ModelProbing"], [26, 0, 1, "", "RidgeCVCallback"]], "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback": [[22, 1, 1, "", "fit"], [22, 1, 1, "", "log_metrics"], [22, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback": [[23, 1, 1, "", "fit"], [23, 1, 1, "", "log_metrics"], [23, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.LogisticRegressionCVCallback": [[24, 1, 1, "", "fit"], [24, 1, 1, "", "log_metrics"], [24, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.ModelProbing": [[25, 1, 1, "", "extract_features"], [25, 1, 1, "", "fit"], [25, 1, 1, "", "linear_probing"], [25, 1, 1, "", "log_metrics"], [25, 1, 1, "", "on_test_epoch_end"], [25, 1, 1, "", "on_test_epoch_start"], [25, 1, 1, "", "on_train_epoch_end"], [25, 1, 1, "", "on_validation_epoch_end"], [25, 1, 1, "", "predict"]], "nidl.callbacks.model_probing.RidgeCVCallback": [[26, 1, 1, "", "fit"], [26, 1, 1, "", "log_metrics"], [26, 1, 1, "", "predict"]], "nidl.datasets": [[28, 0, 1, "", "BaseImageDataset"], [29, 0, 1, "", "BaseNumpyDataset"], [30, 0, 1, "", "ImageDataFrameDataset"], [31, 0, 1, "", "OpenBHB"]], "nidl.datasets.BaseImageDataset": [[28, 1, 1, "", "get_checksum"], [28, 1, 1, "", "get_data"]], "nidl.datasets.BaseNumpyDataset": [[29, 1, 1, "", "get_data"]], "nidl.datasets.ImageDataFrameDataset": [[30, 1, 1, "", "apply_target_transform"], [30, 1, 1, "", "apply_transform"]], "nidl.datasets.OpenBHB": [[31, 1, 1, "", "download_dataset_split"], [31, 1, 1, "", "download_file"], [31, 1, 1, "", "get_cat12_template"], [31, 1, 1, "", "get_fs_labels"], [31, 1, 1, "", "get_fs_roi_feature_names"], [31, 1, 1, "", "get_fs_xhemi_feature_names"], [31, 1, 1, "", "get_neuromorphometrics_atlas"], [31, 1, 1, "", "get_quasiraw_template"], [31, 1, 1, "", "get_vbm_roi_labels"], [31, 1, 1, "", "make_dataset"]], "nidl.datasets.base": [[32, 0, 1, "", "BaseDataset"], [33, 0, 1, "", "BaseImageDataset"], [34, 0, 1, "", "BaseNumpyDataset"]], "nidl.datasets.base.BaseImageDataset": [[33, 1, 1, "", "get_checksum"], [33, 1, 1, "", "get_data"]], "nidl.datasets.base.BaseNumpyDataset": [[34, 1, 1, "", "get_data"]], "nidl.datasets.openbhb": [[35, 0, 1, "", "OpenBHB"]], "nidl.datasets.openbhb.OpenBHB": [[35, 1, 1, "", "download_dataset_split"], [35, 1, 1, "", "download_file"], [35, 1, 1, "", "get_cat12_template"], [35, 1, 1, "", "get_fs_labels"], [35, 1, 1, "", "get_fs_roi_feature_names"], [35, 1, 1, "", "get_fs_xhemi_feature_names"], [35, 1, 1, "", "get_neuromorphometrics_atlas"], [35, 1, 1, "", "get_quasiraw_template"], [35, 1, 1, "", "get_vbm_roi_labels"], [35, 1, 1, "", "make_dataset"]], "nidl.datasets.pandas_dataset": [[36, 0, 1, "", "ImageDataFrameDataset"], [37, 2, 1, "", "default_image_loader"]], "nidl.datasets.pandas_dataset.ImageDataFrameDataset": [[36, 1, 1, "", "apply_target_transform"], [36, 1, 1, "", "apply_transform"]], "nidl.estimators": [[39, 0, 1, "", "BaseEstimator"], [40, 0, 1, "", "ClassifierMixin"], [41, 0, 1, "", "ClusterMixin"], [42, 0, 1, "", "RegressorMixin"], [43, 0, 1, "", "TransformerMixin"]], "nidl.estimators.BaseEstimator": [[39, 1, 1, "", "fit"], [39, 1, 1, "", "log"], [39, 1, 1, "", "log_dict"], [39, 1, 1, "", "predict"], [39, 1, 1, "", "predict_step"], [39, 1, 1, "", "training_step"], [39, 1, 1, "", "transform"], [39, 1, 1, "", "transform_step"], [39, 1, 1, "", "validation_step"]], "nidl.estimators.base": [[44, 0, 1, "", "BaseEstimator"], [45, 0, 1, "", "ClassifierMixin"], [46, 0, 1, "", "ClusterMixin"], [47, 0, 1, "", "RegressorMixin"], [48, 0, 1, "", "TransformerMixin"]], "nidl.estimators.base.BaseEstimator": [[44, 1, 1, "", "fit"], [44, 1, 1, "", "log"], [44, 1, 1, "", "log_dict"], [44, 1, 1, "", "predict"], [44, 1, 1, "", "predict_step"], [44, 1, 1, "", "training_step"], [44, 1, 1, "", "transform"], [44, 1, 1, "", "transform_step"], [44, 1, 1, "", "validation_step"]], "nidl.estimators.linear": [[50, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.LogisticRegression": [[50, 1, 1, "", "configure_optimizers"], [50, 1, 1, "", "cross_entropy_loss"], [50, 1, 1, "", "freeze_encoder"], [50, 1, 1, "", "on_validation_epoch_end"], [50, 1, 1, "", "predict_step"], [50, 1, 1, "", "training_step"], [50, 1, 1, "", "validation_step"]], "nidl.estimators.linear.logistic_regression": [[51, 0, 1, "", "LogisticRegression"]], "nidl.estimators.linear.logistic_regression.LogisticRegression": [[51, 1, 1, "", "configure_optimizers"], [51, 1, 1, "", "cross_entropy_loss"], [51, 1, 1, "", "freeze_encoder"], [51, 1, 1, "", "on_validation_epoch_end"], [51, 1, 1, "", "predict_step"], [51, 1, 1, "", "training_step"], [51, 1, 1, "", "validation_step"]], "nidl.estimators.ssl": [[53, 0, 1, "", "SimCLR"], [54, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.SimCLR": [[53, 1, 1, "", "configure_optimizers"], [53, 1, 1, "", "info_nce_loss"], [53, 1, 1, "", "training_step"], [53, 1, 1, "", "transform_step"], [53, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.YAwareContrastiveLearning": [[54, 1, 1, "", "configure_optimizers"], [54, 1, 1, "", "parse_batch"], [54, 1, 1, "", "training_step"], [54, 1, 1, "", "transform_step"], [54, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.simclr": [[55, 0, 1, "", "SimCLR"]], "nidl.estimators.ssl.simclr.SimCLR": [[55, 1, 1, "", "configure_optimizers"], [55, 1, 1, "", "info_nce_loss"], [55, 1, 1, "", "training_step"], [55, 1, 1, "", "transform_step"], [55, 1, 1, "", "validation_step"]], "nidl.estimators.ssl.utils": [[57, 0, 1, "", "ProjectionHead"], [58, 0, 1, "", "SimCLRProjectionHead"], [59, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.ProjectionHead": [[57, 1, 1, "", "forward"]], "nidl.estimators.ssl.utils.projection_heads": [[60, 0, 1, "", "ProjectionHead"], [61, 0, 1, "", "SimCLRProjectionHead"], [62, 0, 1, "", "YAwareProjectionHead"]], "nidl.estimators.ssl.utils.projection_heads.ProjectionHead": [[60, 1, 1, "", "forward"]], "nidl.estimators.ssl.yaware": [[63, 0, 1, "", "YAwareContrastiveLearning"]], "nidl.estimators.ssl.yaware.YAwareContrastiveLearning": [[63, 1, 1, "", "configure_optimizers"], [63, 1, 1, "", "parse_batch"], [63, 1, 1, "", "training_step"], [63, 1, 1, "", "transform_step"], [63, 1, 1, "", "validation_step"]], "nidl.experiment": [[64, 2, 1, "", "fetch_experiment"], [65, 2, 1, "", "filter_config"], [66, 2, 1, "", "get_env"], [67, 2, 1, "", "load_interface"], [68, 2, 1, "", "update_params"]], "nidl.losses": [[70, 0, 1, "", "InfoNCE"], [71, 0, 1, "", "KernelMetric"], [72, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.InfoNCE": [[70, 1, 1, "", "forward"]], "nidl.losses.KernelMetric": [[71, 1, 1, "", "fit"], [71, 1, 1, "", "pairwise"], [71, 1, 1, "", "scotts_factor"], [71, 1, 1, "", "set_bandwidth"], [71, 1, 1, "", "silverman_factor"]], "nidl.losses.YAwareInfoNCE": [[72, 1, 1, "", "forward"]], "nidl.losses.infonce": [[73, 0, 1, "", "InfoNCE"]], "nidl.losses.infonce.InfoNCE": [[73, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce": [[74, 0, 1, "", "KernelMetric"], [75, 0, 1, "", "PairwiseCosineSimilarity"], [76, 0, 1, "", "YAwareInfoNCE"]], "nidl.losses.yaware_infonce.KernelMetric": [[74, 1, 1, "", "fit"], [74, 1, 1, "", "pairwise"], [74, 1, 1, "", "scotts_factor"], [74, 1, 1, "", "set_bandwidth"], [74, 1, 1, "", "silverman_factor"]], "nidl.losses.yaware_infonce.PairwiseCosineSimilarity": [[75, 1, 1, "", "forward"]], "nidl.losses.yaware_infonce.YAwareInfoNCE": [[76, 1, 1, "", "forward"]], "nidl.metrics._regression": [[78, 2, 1, "", "_check_reg_targets"], [79, 2, 1, "", "_check_reg_targets_with_floating_dtype"], [80, 2, 1, "", "_find_matching_floating_dtype"]], "nidl.metrics": [[81, 2, 1, "", "pearson_r"], [84, 2, 1, "", "regression_report"]], "nidl.metrics.regression": [[82, 2, 1, "", "pearson_r"], [83, 2, 1, "", "regression_report"]], "nidl.transforms": [[85, 0, 1, "", "Identity"], [86, 0, 1, "", "MultiViewsTransform"], [87, 0, 1, "", "Transform"]], "nidl.transforms.Identity": [[85, 1, 1, "", "apply_transform"]], "nidl.transforms.MultiViewsTransform": [[86, 1, 1, "", "apply_transform"], [86, 1, 1, "", "parse_data"]], "nidl.transforms.Transform": [[87, 1, 1, "", "apply_transform"], [87, 1, 1, "", "parse_data"], [87, 1, 1, "", "parse_probability"]], "nidl.utils": [[89, 0, 1, "", "Bunch"], [90, 0, 1, "", "Weights"], [103, 2, 1, "", "print_multicolor"]], "nidl.utils.Weights": [[90, 1, 1, "", "hf_download"], [90, 1, 1, "", "hub_split"], [90, 1, 1, "", "load_pretrained"], [90, 1, 1, "", "ns_download"]], "nidl.utils.bunch": [[91, 0, 1, "", "Bunch"]], "nidl.utils.color": [[92, 0, 1, "", "Colored"], [93, 2, 1, "", "attr"], [94, 2, 1, "", "fg"], [95, 2, 1, "", "hex"], [96, 2, 1, "", "print_multicolor"], [97, 2, 1, "", "print_result"], [98, 2, 1, "", "print_subtitle"], [99, 2, 1, "", "print_title"], [100, 2, 1, "", "print_warning"], [101, 2, 1, "", "random_stylize"], [102, 2, 1, "", "stylize"]], "nidl.utils.color.Colored": [[92, 1, 1, "", "attribute"], [92, 1, 1, "", "background"], [92, 1, 1, "", "foreground"], [92, 1, 1, "", "reverse_dict"]], "nidl.utils.validation": [[104, 0, 1, "", "_AvailableIfDescriptor"], [105, 2, 1, "", "_estimator_is"], [106, 2, 1, "", "available_if"], [107, 2, 1, "", "check_is_fitted"]], "nidl.utils.weights": [[108, 0, 1, "", "Weights"]], "nidl.utils.weights.Weights": [[108, 1, 1, "", "hf_download"], [108, 1, 1, "", "hub_split"], [108, 1, 1, "", "load_pretrained"], [108, 1, 1, "", "ns_download"]], "nidl.volume.backbones": [[111, 0, 1, "", "AlexNet"], [112, 0, 1, "", "DenseNet"], [113, 0, 1, "", "ResNet"], [114, 0, 1, "", "ResNetTruncated"], [116, 2, 1, "", "densenet121"], [124, 2, 1, "", "resnet18"], [125, 2, 1, "", "resnet18_trunc"], [138, 2, 1, "", "resnet50"], [139, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.AlexNet": [[111, 1, 1, "", "forward"]], "nidl.volume.backbones.DenseNet": [[112, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNet": [[113, 1, 1, "", "forward"]], "nidl.volume.backbones.ResNetTruncated": [[114, 1, 1, "", "forward"]], "nidl.volume.backbones.alexnet3d": [[115, 0, 1, "", "AlexNet"]], "nidl.volume.backbones.alexnet3d.AlexNet": [[115, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d": [[117, 0, 1, "", "DenseNet"], [118, 0, 1, "", "_DenseBlock"], [119, 0, 1, "", "_DenseLayer"], [120, 0, 1, "", "_Transition"], [121, 2, 1, "", "_bn_function_factory"], [122, 2, 1, "", "_densenet"], [123, 2, 1, "", "densenet121"]], "nidl.volume.backbones.densenet3d.DenseNet": [[117, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseBlock": [[118, 1, 1, "", "forward"]], "nidl.volume.backbones.densenet3d._DenseLayer": [[119, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d": [[126, 0, 1, "", "BasicBlock"], [127, 0, 1, "", "Bottleneck"], [128, 0, 1, "", "ResNet"], [129, 0, 1, "", "ResNetTruncated"], [130, 2, 1, "", "_resnet"], [131, 2, 1, "", "_resnet_trunc"], [132, 2, 1, "", "conv1x1"], [133, 2, 1, "", "conv3x3"], [134, 2, 1, "", "resnet18"], [135, 2, 1, "", "resnet18_trunc"], [136, 2, 1, "", "resnet50"], [137, 2, 1, "", "resnet50_trunc"]], "nidl.volume.backbones.resnet3d.BasicBlock": [[126, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.Bottleneck": [[127, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNet": [[128, 1, 1, "", "forward"]], "nidl.volume.backbones.resnet3d.ResNetTruncated": [[129, 1, 1, "", "forward"]], "nidl.volume.transforms.augmentation.intensity": [[143, 0, 1, "", "RandomGaussianBlur"], [144, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur": [[143, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise": [[144, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[145, 0, 1, "", "RandomGaussianBlur"]], "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur": [[145, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[146, 0, 1, "", "RandomGaussianNoise"]], "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise": [[146, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial": [[148, 0, 1, "", "RandomErasing"], [149, 0, 1, "", "RandomFlip"], [150, 0, 1, "", "RandomResizedCrop"], [151, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.RandomErasing": [[148, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomFlip": [[149, 1, 1, "", "apply_transform"], [149, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop": [[150, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.RandomRotation": [[151, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[152, 0, 1, "", "RandomErasing"]], "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing": [[152, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[153, 0, 1, "", "RandomFlip"]], "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip": [[153, 1, 1, "", "apply_transform"], [153, 1, 1, "", "get_index_from_anat_label"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[154, 0, 1, "", "RandomResizedCrop"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop": [[154, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[155, 0, 1, "", "RandomRotation"]], "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation": [[155, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity": [[158, 0, 1, "", "RobustRescaling"], [159, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.RobustRescaling": [[158, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.ZNormalization": [[159, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[160, 0, 1, "", "RobustRescaling"]], "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling": [[160, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[161, 0, 1, "", "ZNormalization"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization": [[161, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial": [[163, 0, 1, "", "CropOrPad"], [164, 0, 1, "", "Resample"], [165, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.CropOrPad": [[163, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.Resample": [[164, 1, 1, "", "apply_transform"], [164, 1, 1, "", "as_sitk"], [164, 1, 1, "", "from_sitk"], [164, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.Resize": [[165, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[166, 0, 1, "", "CropOrPad"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad": [[166, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[167, 0, 1, "", "Resample"]], "nidl.volume.transforms.preprocessing.spatial.resample.Resample": [[167, 1, 1, "", "apply_transform"], [167, 1, 1, "", "as_sitk"], [167, 1, 1, "", "from_sitk"], [167, 1, 1, "", "get_sitk_metadata_from_ras_affine"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[168, 0, 1, "", "Resize"]], "nidl.volume.transforms.preprocessing.spatial.resize.Resize": [[168, 1, 1, "", "apply_transform"]], "nidl.volume.transforms.volume_transform": [[169, 0, 1, "", "VolumeTransform"]], "nidl.volume.transforms.volume_transform.VolumeTransform": [[169, 1, 1, "", "parse_data"]], "surfify.augmentation": [[173, 0, 1, "", "BaseTransformer"], [174, 0, 1, "", "GroupMixUp"], [175, 0, 1, "", "HemiMixUp"], [176, 0, 1, "", "SurfBlur"], [177, 0, 1, "", "SurfCutOut"], [178, 0, 1, "", "SurfNoise"], [179, 0, 1, "", "SurfRotation"], [180, 0, 1, "", "Transformer"], [181, 2, 1, "", "apply_chained_transforms"], [186, 2, 1, "", "interval"], [190, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.BaseTransformer": [[173, 1, 1, "", "register"]], "surfify.augmentation.GroupMixUp": [[174, 1, 1, "", "groupby"], [174, 1, 1, "", "run"]], "surfify.augmentation.HemiMixUp": [[175, 1, 1, "", "run"]], "surfify.augmentation.SurfBlur": [[176, 1, 1, "", "run"]], "surfify.augmentation.SurfCutOut": [[177, 1, 1, "", "run"]], "surfify.augmentation.SurfNoise": [[178, 1, 1, "", "run"]], "surfify.augmentation.SurfRotation": [[179, 1, 1, "", "run"]], "surfify.augmentation.base": [[182, 0, 1, "", "SurfBlur"], [183, 0, 1, "", "SurfCutOut"], [184, 0, 1, "", "SurfNoise"], [185, 0, 1, "", "SurfRotation"]], "surfify.augmentation.base.SurfBlur": [[182, 1, 1, "", "run"]], "surfify.augmentation.base.SurfCutOut": [[183, 1, 1, "", "run"]], "surfify.augmentation.base.SurfNoise": [[184, 1, 1, "", "run"]], "surfify.augmentation.base.SurfRotation": [[185, 1, 1, "", "run"]], "surfify.augmentation.mixup": [[187, 0, 1, "", "GroupMixUp"], [188, 0, 1, "", "HemiMixUp"], [189, 0, 1, "", "MixUpAugmentation"]], "surfify.augmentation.mixup.GroupMixUp": [[187, 1, 1, "", "groupby"], [187, 1, 1, "", "run"]], "surfify.augmentation.mixup.HemiMixUp": [[188, 1, 1, "", "run"]], "surfify.augmentation.mixup.MixUpAugmentation": [[189, 1, 1, "", "rand_mask"]], "surfify.augmentation.utils": [[191, 0, 1, "", "BaseTransformer"], [192, 0, 1, "", "RandomAugmentation"], [193, 0, 1, "", "Transform"], [194, 0, 1, "", "Transformer"], [195, 2, 1, "", "apply_chained_transforms"], [196, 2, 1, "", "interval"], [197, 2, 1, "", "listify"], [198, 2, 1, "", "multichannel_augmentation"]], "surfify.augmentation.utils.BaseTransformer": [[191, 1, 1, "", "register"]], "surfify.augmentation.utils.RandomAugmentation": [[192, 0, 1, "", "Interval"]], "surfify.augmentation.utils.RandomAugmentation.Interval": [[192, 3, 1, "", "dtype"], [192, 3, 1, "", "high"], [192, 3, 1, "", "low"]], "surfify.augmentation.utils.Transform": [[193, 3, 1, "", "probability"], [193, 3, 1, "", "randomize_per_channel"], [193, 3, 1, "", "transform"]], "surfify.datasets": [[200, 0, 1, "", "ClassificationDataset"], [201, 0, 1, "", "GenericSurfDataset"], [205, 2, 1, "", "make_classification"]], "surfify.datasets._generic": [[202, 0, 1, "", "GenericSurfDataset"]], "surfify.datasets._samples_generator": [[203, 0, 1, "", "ClassificationDataset"], [204, 2, 1, "", "make_classification"]], "surfify.losses": [[207, 0, 1, "", "SphericalVAELoss"]], "surfify.losses.vae": [[208, 0, 1, "", "SphericalVAELoss"], [209, 2, 1, "", "log_likelihood"]], "surfify.models": [[211, 0, 1, "", "HemiFusionDecoder"], [212, 0, 1, "", "HemiFusionEncoder"], [213, 0, 1, "", "SiT"], [214, 0, 1, "", "SimCLR"], [215, 0, 1, "", "SphericalBase"], [216, 0, 1, "", "SphericalGUNet"], [217, 0, 1, "", "SphericalGVGG"], [218, 0, 1, "", "SphericalGVGG11"], [219, 0, 1, "", "SphericalGVGG11BN"], [220, 0, 1, "", "SphericalGVGG13"], [221, 0, 1, "", "SphericalGVGG13BN"], [222, 0, 1, "", "SphericalGVGG16"], [223, 0, 1, "", "SphericalGVGG16BN"], [224, 0, 1, "", "SphericalGVGG19"], [225, 0, 1, "", "SphericalGVGG19BN"], [226, 0, 1, "", "SphericalHemiFusionDecoder"], [227, 0, 1, "", "SphericalHemiFusionEncoder"], [228, 0, 1, "", "SphericalUNet"], [229, 0, 1, "", "SphericalVAE"], [230, 0, 1, "", "SphericalVGG"], [231, 0, 1, "", "SphericalVGG11"], [232, 0, 1, "", "SphericalVGG11BN"], [233, 0, 1, "", "SphericalVGG13"], [234, 0, 1, "", "SphericalVGG13BN"], [235, 0, 1, "", "SphericalVGG16"], [236, 0, 1, "", "SphericalVGG16BN"], [237, 0, 1, "", "SphericalVGG19"], [238, 0, 1, "", "SphericalVGG19BN"]], "surfify.models.HemiFusionDecoder": [[211, 1, 1, "", "forward"]], "surfify.models.HemiFusionEncoder": [[212, 1, 1, "", "forward"]], "surfify.models.SiT": [[213, 1, 1, "", "forward"]], "surfify.models.SimCLR": [[214, 1, 1, "", "forward"]], "surfify.models.SphericalBase": [[215, 1, 1, "", "build_ico_info"]], "surfify.models.SphericalGUNet": [[216, 1, 1, "", "forward"]], "surfify.models.SphericalGVGG": [[217, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionDecoder": [[226, 1, 1, "", "forward"]], "surfify.models.SphericalHemiFusionEncoder": [[227, 1, 1, "", "forward"]], "surfify.models.SphericalUNet": [[228, 1, 1, "", "forward"]], "surfify.models.SphericalVAE": [[229, 1, 1, "", "decode"], [229, 1, 1, "", "encode"], [229, 1, 1, "", "forward"], [229, 1, 1, "", "reparameterize"]], "surfify.models.SphericalVGG": [[230, 1, 1, "", "forward"]], "surfify.models.base": [[239, 0, 1, "", "Ico"], [240, 0, 1, "", "SphericalBase"]], "surfify.models.base.Ico": [[239, 3, 1, "", "conv_neighbor_indices"], [239, 3, 1, "", "down_indices"], [239, 3, 1, "", "neighbor_indices"], [239, 3, 1, "", "order"], [239, 3, 1, "", "triangles"], [239, 3, 1, "", "up_indices"], [239, 3, 1, "", "vertices"]], "surfify.models.base.SphericalBase": [[240, 1, 1, "", "build_ico_info"]], "surfify.models.simclr": [[241, 0, 1, "", "SimCLR"]], "surfify.models.simclr.SimCLR": [[241, 1, 1, "", "forward"]], "surfify.models.sit": [[242, 0, 1, "", "Attention"], [243, 0, 1, "", "FeedForward"], [244, 0, 1, "", "SiT"], [245, 0, 1, "", "Transformer"]], "surfify.models.sit.Attention": [[242, 1, 1, "", "forward"]], "surfify.models.sit.FeedForward": [[243, 1, 1, "", "forward"]], "surfify.models.sit.SiT": [[244, 1, 1, "", "forward"]], "surfify.models.sit.Transformer": [[245, 1, 1, "", "forward"]], "surfify.models.unet": [[246, 0, 1, "", "DownBlock"], [247, 0, 1, "", "DownGBlock"], [248, 0, 1, "", "GraphicalUNet"], [249, 0, 1, "", "SphericalGUNet"], [250, 0, 1, "", "SphericalUNet"], [251, 0, 1, "", "UpBlock"], [252, 0, 1, "", "UpGBlock"]], "surfify.models.unet.DownBlock": [[246, 1, 1, "", "forward"]], "surfify.models.unet.DownGBlock": [[247, 1, 1, "", "forward"]], "surfify.models.unet.GraphicalUNet": [[248, 1, 1, "", "forward"]], "surfify.models.unet.SphericalGUNet": [[249, 1, 1, "", "forward"]], "surfify.models.unet.SphericalUNet": [[250, 1, 1, "", "forward"]], "surfify.models.unet.UpBlock": [[251, 1, 1, "", "forward"]], "surfify.models.unet.UpGBlock": [[252, 1, 1, "", "forward"]], "surfify.models.vae": [[253, 0, 1, "", "HemiFusionDecoder"], [254, 0, 1, "", "HemiFusionEncoder"], [255, 0, 1, "", "SphericalHemiFusionDecoder"], [256, 0, 1, "", "SphericalHemiFusionEncoder"], [257, 0, 1, "", "SphericalVAE"], [258, 2, 1, "", "compute_output_dim"]], "surfify.models.vae.HemiFusionDecoder": [[253, 1, 1, "", "forward"]], "surfify.models.vae.HemiFusionEncoder": [[254, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionDecoder": [[255, 1, 1, "", "forward"]], "surfify.models.vae.SphericalHemiFusionEncoder": [[256, 1, 1, "", "forward"]], "surfify.models.vae.SphericalVAE": [[257, 1, 1, "", "decode"], [257, 1, 1, "", "encode"], [257, 1, 1, "", "forward"], [257, 1, 1, "", "reparameterize"]], "surfify.models.vgg": [[259, 0, 1, "", "SphericalGVGG"], [260, 0, 1, "", "SphericalGVGG11"], [261, 0, 1, "", "SphericalGVGG11BN"], [262, 0, 1, "", "SphericalGVGG13"], [263, 0, 1, "", "SphericalGVGG13BN"], [264, 0, 1, "", "SphericalGVGG16"], [265, 0, 1, "", "SphericalGVGG16BN"], [266, 0, 1, "", "SphericalGVGG19"], [267, 0, 1, "", "SphericalGVGG19BN"], [268, 0, 1, "", "SphericalVGG"], [269, 0, 1, "", "SphericalVGG11"], [270, 0, 1, "", "SphericalVGG11BN"], [271, 0, 1, "", "SphericalVGG13"], [272, 0, 1, "", "SphericalVGG13BN"], [273, 0, 1, "", "SphericalVGG16"], [274, 0, 1, "", "SphericalVGG16BN"], [275, 0, 1, "", "SphericalVGG19"], [276, 0, 1, "", "SphericalVGG19BN"], [277, 2, 1, "", "class_factory"]], "surfify.models.vgg.SphericalGVGG": [[259, 1, 1, "", "forward"]], "surfify.models.vgg.SphericalVGG": [[268, 1, 1, "", "forward"]], "surfify.nn": [[279, 0, 1, "", "IcoDiNeConv"], [280, 0, 1, "", "IcoFixIndexUpSample"], [281, 0, 1, "", "IcoGenericUpConv"], [282, 0, 1, "", "IcoMaxIndexUpSample"], [283, 0, 1, "", "IcoPool"], [284, 0, 1, "", "IcoRePaConv"], [285, 0, 1, "", "IcoSpMaConv"], [286, 0, 1, "", "IcoSpMaConvTranspose"], [287, 0, 1, "", "IcoUpConv"], [288, 0, 1, "", "IcoUpSample"]], "surfify.nn.IcoDiNeConv": [[279, 1, 1, "", "forward"]], "surfify.nn.IcoFixIndexUpSample": [[280, 1, 1, "", "forward"]], "surfify.nn.IcoGenericUpConv": [[281, 1, 1, "", "forward"]], "surfify.nn.IcoMaxIndexUpSample": [[282, 1, 1, "", "forward"]], "surfify.nn.IcoPool": [[283, 1, 1, "", "forward"]], "surfify.nn.IcoRePaConv": [[284, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConv": [[285, 1, 1, "", "forward"]], "surfify.nn.IcoSpMaConvTranspose": [[286, 1, 1, "", "forward"]], "surfify.nn.IcoUpConv": [[287, 1, 1, "", "forward"]], "surfify.nn.IcoUpSample": [[288, 1, 1, "", "forward"]], "surfify.nn.functional": [[289, 2, 1, "", "circular_pad"]], "surfify.nn.modules": [[290, 0, 1, "", "IcoDiNeConv"], [291, 0, 1, "", "IcoFixIndexUpSample"], [292, 0, 1, "", "IcoGenericUpConv"], [293, 0, 1, "", "IcoMaxIndexUpSample"], [294, 0, 1, "", "IcoPool"], [295, 0, 1, "", "IcoRePaConv"], [296, 0, 1, "", "IcoSpMaConv"], [297, 0, 1, "", "IcoSpMaConvTranspose"], [298, 0, 1, "", "IcoUpConv"], [299, 0, 1, "", "IcoUpSample"]], "surfify.nn.modules.IcoDiNeConv": [[290, 1, 1, "", "forward"]], "surfify.nn.modules.IcoFixIndexUpSample": [[291, 1, 1, "", "forward"]], "surfify.nn.modules.IcoGenericUpConv": [[292, 1, 1, "", "forward"]], "surfify.nn.modules.IcoMaxIndexUpSample": [[293, 1, 1, "", "forward"]], "surfify.nn.modules.IcoPool": [[294, 1, 1, "", "forward"]], "surfify.nn.modules.IcoRePaConv": [[295, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConv": [[296, 1, 1, "", "forward"]], "surfify.nn.modules.IcoSpMaConvTranspose": [[297, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpConv": [[298, 1, 1, "", "forward"]], "surfify.nn.modules.IcoUpSample": [[299, 1, 1, "", "forward"]], "surfify.plotting": [[301, 2, 1, "", "plot_trisurf"]], "surfify.plotting.surface": [[302, 2, 1, "", "plot_trisurf"]], "surfify.preprocessing": [[303, 0, 1, "", "StandardScaler"]], "surfify.preprocessing.StandardScaler": [[303, 1, 1, "", "fit"], [303, 1, 1, "", "get_metadata_routing"], [303, 1, 1, "", "inverse_transform"], [303, 1, 1, "", "set_inverse_transform_request"], [303, 1, 1, "", "set_partial_fit_request"], [303, 1, 1, "", "set_transform_request"], [303, 1, 1, "", "transform"]], "surfify.transforms": [[304, 0, 1, "", "RandomCompose"]], "surfify.utils": [[306, 2, 1, "", "cart2sph"], [314, 2, 1, "", "debug_msg"], [315, 2, 1, "", "downsample"], [316, 2, 1, "", "downsample_data"], [317, 2, 1, "", "downsample_ico"], [318, 2, 1, "", "find_neighbors"], [319, 2, 1, "", "find_rotation_interpol_coefs"], [320, 2, 1, "", "get_logger"], [321, 2, 1, "", "get_rectangular_projection"], [322, 2, 1, "", "grid2text"], [323, 2, 1, "", "ico2ico"], [324, 2, 1, "", "icosahedron"], [325, 2, 1, "", "interpolate"], [326, 2, 1, "", "interpolate_data"], [337, 2, 1, "", "min_depth_to_get_n_neighbors"], [338, 2, 1, "", "neighbors"], [339, 2, 1, "", "neighbors_rec"], [340, 2, 1, "", "number_of_ico_vertices"], [341, 2, 1, "", "number_of_neighbors"], [342, 2, 1, "", "order_of_ico_from_vertices"], [343, 2, 1, "", "order_triangles"], [344, 2, 1, "", "patch_tri"], [345, 2, 1, "", "rotate_data"], [372, 2, 1, "", "setup_logging"], [373, 2, 1, "", "sph2cart"], [374, 2, 1, "", "text2grid"], [375, 2, 1, "", "text2ico"]], "surfify.utils.coord": [[307, 2, 1, "", "cart2sph"], [308, 2, 1, "", "find_corresponding_order"], [309, 2, 1, "", "grid2text"], [310, 2, 1, "", "ico2ico"], [311, 2, 1, "", "sph2cart"], [312, 2, 1, "", "text2grid"], [313, 2, 1, "", "text2ico"]], "surfify.utils.io": [[327, 0, 1, "", "HidePrints"], [328, 2, 1, "", "compute_and_store"], [329, 2, 1, "", "decompose_cifti"], [330, 2, 1, "", "read_freesurfer"], [331, 2, 1, "", "read_gifti"], [332, 2, 1, "", "surf_data_from_cifti"], [333, 2, 1, "", "ungzip"], [334, 2, 1, "", "volume_from_cifti"], [335, 2, 1, "", "write_freesurfer"], [336, 2, 1, "", "write_gifti"]], "surfify.utils.sampling": [[346, 2, 1, "", "_patch_tri_iter"], [347, 2, 1, "", "build_freesurfer_ico"], [348, 2, 1, "", "build_fslr_ref"], [349, 2, 1, "", "downsample"], [350, 2, 1, "", "downsample_data"], [351, 2, 1, "", "downsample_ico"], [352, 2, 1, "", "find_neighbors"], [353, 2, 1, "", "find_rotation_interpol_coefs"], [354, 2, 1, "", "get_angle_with_xaxis"], [355, 2, 1, "", "get_rectangular_projection"], [356, 2, 1, "", "icosahedron"], [357, 2, 1, "", "interpolate"], [358, 2, 1, "", "interpolate_data"], [359, 2, 1, "", "middle_point"], [360, 2, 1, "", "min_depth_to_get_n_neighbors"], [361, 2, 1, "", "neighbors"], [362, 2, 1, "", "neighbors_rec"], [363, 2, 1, "", "normalize"], [364, 2, 1, "", "number_of_ico_vertices"], [365, 2, 1, "", "number_of_neighbors"], [366, 2, 1, "", "order_of_ico_from_vertices"], [367, 2, 1, "", "order_triangles"], [368, 2, 1, "", "patch_tri"], [369, 2, 1, "", "rotate_data"], [370, 2, 1, "", "triangles_to_edges"], [371, 2, 1, "", "vertex_adjacency_graph"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"us": [0, 4], "case": [0, 4], "spheric": [0, 4, 5, 8], "modul": [0, 4, 278], "present": 1, "openbhb": [1, 27], "dataset": [1, 3, 9, 27, 199], "baselin": [1, 3], "model": [1, 9, 210], "ag": 1, "sex": 1, "predict": [1, 9], "load": [1, 7], "packag": 1, "plot": [1, 300], "modal": 1, "whole": 1, "brain": 1, "voxel": 1, "base": [1, 27, 38, 172, 210], "morphometri": 1, "vbm": 1, "quasi": 1, "raw": 1, "imag": 1, "roi": 1, "neuromorphometr": 1, "atla": 1, "surfac": [1, 7, 300], "measur": 1, "from": 1, "freesurf": 1, "visual": 1, "region": 1, "destrieux": 1, "fine": 1, "grain": 1, "fsaverage7": 1, "templat": 1, "fit": 1, "machin": 1, "learn": [1, 3], "ridg": 1, "regress": [1, 3, 77], "classif": [1, 77], "logist": [1, 3], "comput": [2, 10, 377], "time": [2, 10, 377], "self": 3, "supervis": 3, "contrast": 3, "simclr": [3, 52, 210], "setup": 3, "data": [3, 7], "augment": [3, 5, 141, 142, 147, 172], "train": [3, 9], "conclus": 3, "surfcutout": 5, "surfnois": 5, "surfblur": 5, "surfrot": 5, "hemimixup": 5, "groupmixup": 5, "group": 5, "transform": [5, 13, 140, 141, 142, 147, 156, 157, 162, 171], "icosahedron": 6, "match": 6, "project": 7, "textur": 7, "3": 7, "d": 7, "2": 7, "grid": 7, "uniformli": 7, "distribut": 7, "locat": 7, "integr": 7, "deep": 7, "neural": 7, "network": 7, "neighbor": 8, "direct": 8, "rectagular": 8, "tangent": 8, "plane": 8, "unet": [9, 210], "segment": 9, "inspect": 9, "label": 9, "api": [11, 13, 14, 27, 38, 49, 52, 56, 69, 77, 88, 109, 110, 140, 141, 142, 147, 156, 157, 162, 170, 171, 172, 199, 206, 210, 278, 300, 305], "document": [11, 13, 14, 27, 38, 49, 52, 56, 69, 77, 88, 109, 110, 140, 141, 142, 147, 156, 157, 162, 170, 171, 172, 199, 206, 210, 278, 300, 305], "nidl": [11, 12, 13, 14, 27, 38, 49, 52, 56, 69, 77, 88, 109, 110, 140, 141, 142, 147, 156, 157, 162, 170], "instal": 12, "stabl": 12, "version": 12, "current": 12, "experi": 13, "callback": 14, "model_prob": 14, "check_typ": 14, "pandas_dataset": 27, "exampl": [31, 35, 50, 51, 53, 55, 90, 108], "estim": [38, 49, 52, 56], "linear": 49, "logistic_regress": 49, "ssl": [52, 56], "yawar": 52, "util": [56, 88, 172, 305], "projection_head": 56, "loss": [69, 206], "infonc": 69, "yaware_infonc": 69, "metric": 77, "_regress": 77, "color": 88, "bunch": 88, "valid": 88, "weight": 88, "volum": [109, 110, 140, 141, 142, 147, 156, 157, 162], "backbon": 110, "densenet3d": 110, "alexnet3d": 110, "resnet3d": 110, "volume_transform": 140, "intens": [142, 157], "random_blur": 142, "random_nois": 142, "spatial": [147, 162], "random_rot": 147, "random_resized_crop": 147, "random_flip": 147, "random_eras": 147, "preprocess": [156, 157, 162, 171], "z_normal": 157, "rescal": 157, "resiz": 162, "resampl": 162, "crop_or_pad": 162, "search": 170, "surfifi": [171, 172, 199, 206, 210, 278, 300, 305], "mixup": 172, "_samples_gener": 199, "_gener": 199, "vae": [206, 210], "vgg": 210, "sit": 210, "nn": 278, "function": 278, "io": 305, "sampl": 305, "coord": 305}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Use Cases": [[0, "use-cases"]], "Spherical Modules Use Cases": [[0, "spherical-modules-use-cases"], [4, "spherical-modules-use-cases"]], "Presentation of the OpenBHB dataset and baseline models for age and sex predictions": [[1, "presentation-of-the-openbhb-dataset-and-baseline-models-for-age-and-sex-predictions"]], "Load the packages": [[1, "load-the-packages"]], "Load the OpenBHB dataset and plot the modalities": [[1, "load-the-openbhb-dataset-and-plot-the-modalities"]], "Plot whole-brain Voxel-Based Morphometry (VBM) and Quasi-Raw images": [[1, "plot-whole-brain-voxel-based-morphometry-vbm-and-quasi-raw-images"]], "Plot VBM-ROI on the Neuromorphometrics atlas": [[1, "plot-vbm-roi-on-the-neuromorphometrics-atlas"]], "Plot Surface-Based Measures from FreeSurfer": [[1, "plot-surface-based-measures-from-freesurfer"]], "Visualize regional measures on the Destrieux atlas": [[1, "visualize-regional-measures-on-the-destrieux-atlas"]], "Visualize fine-grained measures on the fsaverage7 template": [[1, "visualize-fine-grained-measures-on-the-fsaverage7-template"]], "Fit machine learning models for age and sex prediction": [[1, "fit-machine-learning-models-for-age-and-sex-prediction"]], "Age prediction with Ridge regression": [[1, "age-prediction-with-ridge-regression"]], "Sex classification with logistic regression": [[1, "sex-classification-with-logistic-regression"]], "Computation times": [[2, "computation-times"], [10, "computation-times"], [377, "computation-times"]], "Self-Supervised Contrastive Learning with SimCLR": [[3, "self-supervised-contrastive-learning-with-simclr"]], "Setup": [[3, "setup"]], "Data Augmentation for Contrastive Learning": [[3, "data-augmentation-for-contrastive-learning"]], "Dataset": [[3, "dataset"]], "Training": [[3, "training"]], "Logistic Regression": [[3, "logistic-regression"]], "Baseline": [[3, "baseline"]], "Conclusion": [[3, "conclusion"]], "Spherical augmentations": [[5, "spherical-augmentations"]], "SurfCutOut": [[5, "surfcutout"]], "SurfNoise": [[5, "surfnoise"]], "SurfBlur": [[5, "surfblur"]], "SurfRotation": [[5, "surfrotation"]], "HemiMixUp": [[5, "hemimixup"]], "GroupMixUp": [[5, "groupmixup"]], "GroupMixUp group": [[5, "groupmixup-group"]], "Transformer": [[5, "transformer"]], "Icosahedron matching": [[6, "icosahedron-matching"]], "Project texture": [[7, "project-texture"]], "Load data": [[7, "load-data"]], "3-D surface to 2-D grid projection": [[7, "d-surface-to-2-d-grid-projection"]], "2-D grid to 3-D surface projection": [[7, "d-grid-to-3-d-surface-projection"]], "Uniformly distributed locations": [[7, "uniformly-distributed-locations"]], "Integration in deep neural network": [[7, "integration-in-deep-neural-network"]], "Spherical neighbors": [[8, "spherical-neighbors"]], "Direct Neighbor": [[8, "direct-neighbor"]], "Rectagular Tangent Plane Neighbor": [[8, "rectagular-tangent-plane-neighbor"]], "UNet segmentation": [[9, "unet-segmentation"]], "Inspect dataset": [[9, "inspect-dataset"]], "Train the model": [[9, "train-the-model"]], "Inspect the predicted labels": [[9, "inspect-the-predicted-labels"]], "API documentation of nidl": [[11, "api-documentation-of-nidl"], [13, "api-documentation-of-nidl"]], "Installing nidl": [[12, "installing-nidl"]], "Installing a stable version": [[12, "installing-a-stable-version"]], "Installing the current version": [[12, "installing-the-current-version"]], "nidl": [[13, "nidl"]], "nidl.experiment": [[13, "nidl-experiment"]], "nidl.transforms": [[13, "nidl-transforms"]], "API documentation of nidl.callbacks": [[14, "api-documentation-of-nidl-callbacks"]], "nidl.callbacks": [[14, "nidl-callbacks"]], "nidl.callbacks.model_probing": [[14, "nidl-callbacks-model-probing"]], "nidl.callbacks.check_typing": [[14, "nidl-callbacks-check-typing"]], "API documentation of nidl.datasets": [[27, "api-documentation-of-nidl-datasets"]], "nidl.datasets": [[27, "nidl-datasets"]], "nidl.datasets.base": [[27, "nidl-datasets-base"]], "nidl.datasets.pandas_dataset": [[27, "nidl-datasets-pandas-dataset"]], "nidl.datasets.openbhb": [[27, "id1"]], "Examples": [[31, "examples"], [35, "examples"], [50, "examples"], [51, "examples"], [53, "examples"], [55, "examples"], [90, "examples"], [108, "examples"]], "API documentation of nidl.estimators": [[38, "api-documentation-of-nidl-estimators"]], "nidl.estimators": [[38, "nidl-estimators"]], "nidl.estimators.base": [[38, "nidl-estimators-base"]], "API documentation of nidl.estimators.linear": [[49, "api-documentation-of-nidl-estimators-linear"]], "nidl.estimators.linear": [[49, "nidl-estimators-linear"]], "nidl.estimators.linear.logistic_regression": [[49, "nidl-estimators-linear-logistic-regression"]], "API documentation of nidl.estimators.ssl": [[52, "api-documentation-of-nidl-estimators-ssl"]], "nidl.estimators.ssl": [[52, "nidl-estimators-ssl"]], "nidl.estimators.ssl.simclr": [[52, "id1"]], "nidl.estimators.ssl.yaware": [[52, "nidl-estimators-ssl-yaware"]], "API documentation of nidl.estimators.ssl.utils": [[56, "api-documentation-of-nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils": [[56, "nidl-estimators-ssl-utils"]], "nidl.estimators.ssl.utils.projection_heads": [[56, "nidl-estimators-ssl-utils-projection-heads"]], "API documentation of nidl.losses": [[69, "api-documentation-of-nidl-losses"]], "nidl.losses": [[69, "nidl-losses"]], "nidl.losses.infonce": [[69, "id1"]], "nidl.losses.yaware_infonce": [[69, "nidl-losses-yaware-infonce"]], "API documentation of nidl.metrics": [[77, "api-documentation-of-nidl-metrics"]], "nidl.metrics": [[77, "nidl-metrics"]], "nidl.metrics.classification": [[77, "nidl-metrics-classification"]], "nidl.metrics._regression": [[77, "nidl-metrics-regression"]], "nidl.metrics.regression": [[77, "id1"]], "API documentation of nidl.utils": [[88, "api-documentation-of-nidl-utils"]], "nidl.utils": [[88, "nidl-utils"]], "nidl.utils.color": [[88, "nidl-utils-color"]], "nidl.utils.bunch": [[88, "id1"]], "nidl.utils.validation": [[88, "nidl-utils-validation"]], "nidl.utils.weights": [[88, "id2"]], "API documentation of nidl.volume": [[109, "api-documentation-of-nidl-volume"]], "nidl.volume": [[109, "nidl-volume"]], "API documentation of nidl.volume.backbones": [[110, "api-documentation-of-nidl-volume-backbones"]], "nidl.volume.backbones": [[110, "nidl-volume-backbones"]], "nidl.volume.backbones.densenet3d": [[110, "nidl-volume-backbones-densenet3d"]], "nidl.volume.backbones.alexnet3d": [[110, "nidl-volume-backbones-alexnet3d"]], "nidl.volume.backbones.resnet3d": [[110, "nidl-volume-backbones-resnet3d"]], "API documentation of nidl.volume.transforms": [[140, "api-documentation-of-nidl-volume-transforms"]], "nidl.volume.transforms": [[140, "nidl-volume-transforms"]], "nidl.volume.transforms.volume_transform": [[140, "nidl-volume-transforms-volume-transform"]], "API documentation of nidl.volume.transforms.augmentation": [[141, "api-documentation-of-nidl-volume-transforms-augmentation"]], "nidl.volume.transforms.augmentation": [[141, "nidl-volume-transforms-augmentation"]], "API documentation of nidl.volume.transforms.augmentation.intensity": [[142, "api-documentation-of-nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity": [[142, "nidl-volume-transforms-augmentation-intensity"]], "nidl.volume.transforms.augmentation.intensity.random_blur": [[142, "nidl-volume-transforms-augmentation-intensity-random-blur"]], "nidl.volume.transforms.augmentation.intensity.random_noise": [[142, "nidl-volume-transforms-augmentation-intensity-random-noise"]], "API documentation of nidl.volume.transforms.augmentation.spatial": [[147, "api-documentation-of-nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial": [[147, "nidl-volume-transforms-augmentation-spatial"]], "nidl.volume.transforms.augmentation.spatial.random_rotation": [[147, "nidl-volume-transforms-augmentation-spatial-random-rotation"]], "nidl.volume.transforms.augmentation.spatial.random_resized_crop": [[147, "nidl-volume-transforms-augmentation-spatial-random-resized-crop"]], "nidl.volume.transforms.augmentation.spatial.random_flip": [[147, "nidl-volume-transforms-augmentation-spatial-random-flip"]], "nidl.volume.transforms.augmentation.spatial.random_erasing": [[147, "nidl-volume-transforms-augmentation-spatial-random-erasing"]], "API documentation of nidl.volume.transforms.preprocessing": [[156, "api-documentation-of-nidl-volume-transforms-preprocessing"]], "nidl.volume.transforms.preprocessing": [[156, "nidl-volume-transforms-preprocessing"]], "API documentation of nidl.volume.transforms.preprocessing.intensity": [[157, "api-documentation-of-nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity": [[157, "nidl-volume-transforms-preprocessing-intensity"]], "nidl.volume.transforms.preprocessing.intensity.z_normalization": [[157, "nidl-volume-transforms-preprocessing-intensity-z-normalization"]], "nidl.volume.transforms.preprocessing.intensity.rescale": [[157, "nidl-volume-transforms-preprocessing-intensity-rescale"]], "API documentation of nidl.volume.transforms.preprocessing.spatial": [[162, "api-documentation-of-nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial": [[162, "nidl-volume-transforms-preprocessing-spatial"]], "nidl.volume.transforms.preprocessing.spatial.resize": [[162, "id1"]], "nidl.volume.transforms.preprocessing.spatial.resample": [[162, "id2"]], "nidl.volume.transforms.preprocessing.spatial.crop_or_pad": [[162, "nidl-volume-transforms-preprocessing-spatial-crop-or-pad"]], "Search in API documentation of nidl": [[170, "search-in-api-documentation-of-nidl"]], "API documentation of surfify": [[171, "api-documentation-of-surfify"]], "surfify": [[171, "surfify"]], "surfify.transforms": [[171, "surfify-transforms"]], "surfify.preprocessing": [[171, "surfify-preprocessing"]], "API documentation of surfify.augmentation": [[172, "api-documentation-of-surfify-augmentation"]], "surfify.augmentation": [[172, "surfify-augmentation"]], "surfify.augmentation.base": [[172, "surfify-augmentation-base"]], "surfify.augmentation.utils": [[172, "surfify-augmentation-utils"]], "surfify.augmentation.mixup": [[172, "surfify-augmentation-mixup"]], "API documentation of surfify.datasets": [[199, "api-documentation-of-surfify-datasets"]], "surfify.datasets": [[199, "surfify-datasets"]], "surfify.datasets._samples_generator": [[199, "surfify-datasets-samples-generator"]], "surfify.datasets._generic": [[199, "surfify-datasets-generic"]], "API documentation of surfify.losses": [[206, "api-documentation-of-surfify-losses"]], "surfify.losses": [[206, "surfify-losses"]], "surfify.losses.vae": [[206, "surfify-losses-vae"]], "API documentation of surfify.models": [[210, "api-documentation-of-surfify-models"]], "surfify.models": [[210, "surfify-models"]], "surfify.models.vgg": [[210, "surfify-models-vgg"]], "surfify.models.base": [[210, "surfify-models-base"]], "surfify.models.simclr": [[210, "id1"]], "surfify.models.sit": [[210, "id2"]], "surfify.models.unet": [[210, "surfify-models-unet"]], "surfify.models.vae": [[210, "surfify-models-vae"]], "API documentation of surfify.nn": [[278, "api-documentation-of-surfify-nn"]], "surfify.nn": [[278, "surfify-nn"]], "surfify.nn.functional": [[278, "surfify-nn-functional"]], "surfify.nn.modules": [[278, "surfify-nn-modules"]], "API documentation of surfify.plotting": [[300, "api-documentation-of-surfify-plotting"]], "surfify.plotting": [[300, "surfify-plotting"]], "surfify.plotting.surface": [[300, "surfify-plotting-surface"]], "API documentation of surfify.utils": [[305, "api-documentation-of-surfify-utils"]], "surfify.utils": [[305, "surfify-utils"]], "surfify.utils.io": [[305, "surfify-utils-io"]], "surfify.utils.sampling": [[305, "surfify-utils-sampling"]], "surfify.utils.coord": [[305, "surfify-utils-coord"]]}, "indexentries": {"batchtypingcallback (class in nidl.callbacks)": [[15, "nidl.callbacks.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.batchtypingcallback method)": [[15, "nidl.callbacks.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.batchtypingcallback method)": [[15, "nidl.callbacks.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.batchtypingcallback method)": [[15, "nidl.callbacks.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.batchtypingcallback method)": [[15, "nidl.callbacks.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks)": [[16, "nidl.callbacks.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[16, "nidl.callbacks.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[16, "nidl.callbacks.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsclassifiercvcallback method)": [[16, "nidl.callbacks.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks)": [[17, "nidl.callbacks.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.kneighborsregressorcvcallback method)": [[17, "nidl.callbacks.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.kneighborsregressorcvcallback method)": [[17, "nidl.callbacks.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.kneighborsregressorcvcallback method)": [[17, "nidl.callbacks.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks)": [[18, "nidl.callbacks.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.logisticregressioncvcallback method)": [[18, "nidl.callbacks.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.logisticregressioncvcallback method)": [[18, "nidl.callbacks.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.logisticregressioncvcallback method)": [[18, "nidl.callbacks.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks)": [[19, "nidl.callbacks.ModelProbing"]], "extract_features() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.extract_features"]], "fit() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.modelprobing method)": [[19, "nidl.callbacks.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks)": [[20, "nidl.callbacks.RidgeCVCallback"]], "fit() (nidl.callbacks.ridgecvcallback method)": [[20, "nidl.callbacks.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.ridgecvcallback method)": [[20, "nidl.callbacks.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.ridgecvcallback method)": [[20, "nidl.callbacks.RidgeCVCallback.predict"]], "batchtypingcallback (class in nidl.callbacks.check_typing)": [[21, "nidl.callbacks.check_typing.BatchTypingCallback"]], "on_predict_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[21, "nidl.callbacks.check_typing.BatchTypingCallback.on_predict_batch_start"]], "on_test_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[21, "nidl.callbacks.check_typing.BatchTypingCallback.on_test_batch_start"]], "on_train_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[21, "nidl.callbacks.check_typing.BatchTypingCallback.on_train_batch_start"]], "on_validation_batch_start() (nidl.callbacks.check_typing.batchtypingcallback method)": [[21, "nidl.callbacks.check_typing.BatchTypingCallback.on_validation_batch_start"]], "kneighborsclassifiercvcallback (class in nidl.callbacks.model_probing)": [[22, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsclassifiercvcallback method)": [[22, "nidl.callbacks.model_probing.KNeighborsClassifierCVCallback.predict"]], "kneighborsregressorcvcallback (class in nidl.callbacks.model_probing)": [[23, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback"]], "fit() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.kneighborsregressorcvcallback method)": [[23, "nidl.callbacks.model_probing.KNeighborsRegressorCVCallback.predict"]], "logisticregressioncvcallback (class in nidl.callbacks.model_probing)": [[24, "nidl.callbacks.model_probing.LogisticRegressionCVCallback"]], "fit() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[24, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[24, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.logisticregressioncvcallback method)": [[24, "nidl.callbacks.model_probing.LogisticRegressionCVCallback.predict"]], "modelprobing (class in nidl.callbacks.model_probing)": [[25, "nidl.callbacks.model_probing.ModelProbing"]], "extract_features() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.extract_features"]], "fit() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.fit"]], "linear_probing() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.linear_probing"]], "log_metrics() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.log_metrics"]], "on_test_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_end"]], "on_test_epoch_start() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_test_epoch_start"]], "on_train_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_train_epoch_end"]], "on_validation_epoch_end() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.on_validation_epoch_end"]], "predict() (nidl.callbacks.model_probing.modelprobing method)": [[25, "nidl.callbacks.model_probing.ModelProbing.predict"]], "ridgecvcallback (class in nidl.callbacks.model_probing)": [[26, "nidl.callbacks.model_probing.RidgeCVCallback"]], "fit() (nidl.callbacks.model_probing.ridgecvcallback method)": [[26, "nidl.callbacks.model_probing.RidgeCVCallback.fit"]], "log_metrics() (nidl.callbacks.model_probing.ridgecvcallback method)": [[26, "nidl.callbacks.model_probing.RidgeCVCallback.log_metrics"]], "predict() (nidl.callbacks.model_probing.ridgecvcallback method)": [[26, "nidl.callbacks.model_probing.RidgeCVCallback.predict"]], "baseimagedataset (class in nidl.datasets)": [[28, "nidl.datasets.BaseImageDataset"]], "get_checksum() (nidl.datasets.baseimagedataset method)": [[28, "nidl.datasets.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.baseimagedataset method)": [[28, "nidl.datasets.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets)": [[29, "nidl.datasets.BaseNumpyDataset"]], "get_data() (nidl.datasets.basenumpydataset method)": [[29, "nidl.datasets.BaseNumpyDataset.get_data"]], "imagedataframedataset (class in nidl.datasets)": [[30, "nidl.datasets.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.imagedataframedataset method)": [[30, "nidl.datasets.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.imagedataframedataset method)": [[30, "nidl.datasets.ImageDataFrameDataset.apply_transform"]], "openbhb (class in nidl.datasets)": [[31, "nidl.datasets.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb method)": [[31, "nidl.datasets.OpenBHB.make_dataset"]], "basedataset (class in nidl.datasets.base)": [[32, "nidl.datasets.base.BaseDataset"]], "baseimagedataset (class in nidl.datasets.base)": [[33, "nidl.datasets.base.BaseImageDataset"]], "get_checksum() (nidl.datasets.base.baseimagedataset method)": [[33, "nidl.datasets.base.BaseImageDataset.get_checksum"]], "get_data() (nidl.datasets.base.baseimagedataset method)": [[33, "nidl.datasets.base.BaseImageDataset.get_data"]], "basenumpydataset (class in nidl.datasets.base)": [[34, "nidl.datasets.base.BaseNumpyDataset"]], "get_data() (nidl.datasets.base.basenumpydataset method)": [[34, "nidl.datasets.base.BaseNumpyDataset.get_data"]], "openbhb (class in nidl.datasets.openbhb)": [[35, "nidl.datasets.openbhb.OpenBHB"]], "download_dataset_split() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.download_dataset_split"]], "download_file() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.download_file"]], "get_cat12_template() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_cat12_template"]], "get_fs_labels() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_fs_labels"]], "get_fs_roi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_fs_roi_feature_names"]], "get_fs_xhemi_feature_names() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_fs_xhemi_feature_names"]], "get_neuromorphometrics_atlas() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_neuromorphometrics_atlas"]], "get_quasiraw_template() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_quasiraw_template"]], "get_vbm_roi_labels() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.get_vbm_roi_labels"]], "make_dataset() (nidl.datasets.openbhb.openbhb method)": [[35, "nidl.datasets.openbhb.OpenBHB.make_dataset"]], "imagedataframedataset (class in nidl.datasets.pandas_dataset)": [[36, "nidl.datasets.pandas_dataset.ImageDataFrameDataset"]], "apply_target_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[36, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_target_transform"]], "apply_transform() (nidl.datasets.pandas_dataset.imagedataframedataset method)": [[36, "nidl.datasets.pandas_dataset.ImageDataFrameDataset.apply_transform"]], "default_image_loader() (in module nidl.datasets.pandas_dataset)": [[37, "nidl.datasets.pandas_dataset.default_image_loader"]], "baseestimator (class in nidl.estimators)": [[39, "nidl.estimators.BaseEstimator"]], "fit() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.fit"]], "log() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.log"]], "log_dict() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.log_dict"]], "predict() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.predict"]], "predict_step() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.training_step"]], "transform() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.transform"]], "transform_step() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.baseestimator method)": [[39, "nidl.estimators.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators)": [[40, "nidl.estimators.ClassifierMixin"]], "clustermixin (class in nidl.estimators)": [[41, "nidl.estimators.ClusterMixin"]], "regressormixin (class in nidl.estimators)": [[42, "nidl.estimators.RegressorMixin"]], "transformermixin (class in nidl.estimators)": [[43, "nidl.estimators.TransformerMixin"]], "baseestimator (class in nidl.estimators.base)": [[44, "nidl.estimators.base.BaseEstimator"]], "fit() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.fit"]], "log() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.log"]], "log_dict() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.log_dict"]], "predict() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.predict"]], "predict_step() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.predict_step"]], "training_step() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.training_step"]], "transform() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.transform"]], "transform_step() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.transform_step"]], "validation_step() (nidl.estimators.base.baseestimator method)": [[44, "nidl.estimators.base.BaseEstimator.validation_step"]], "classifiermixin (class in nidl.estimators.base)": [[45, "nidl.estimators.base.ClassifierMixin"]], "clustermixin (class in nidl.estimators.base)": [[46, "nidl.estimators.base.ClusterMixin"]], "regressormixin (class in nidl.estimators.base)": [[47, "nidl.estimators.base.RegressorMixin"]], "transformermixin (class in nidl.estimators.base)": [[48, "nidl.estimators.base.TransformerMixin"]], "logisticregression (class in nidl.estimators.linear)": [[50, "nidl.estimators.linear.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logisticregression method)": [[50, "nidl.estimators.linear.LogisticRegression.validation_step"]], "logisticregression (class in nidl.estimators.linear.logistic_regression)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression"]], "configure_optimizers() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.configure_optimizers"]], "cross_entropy_loss() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.cross_entropy_loss"]], "freeze_encoder() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.freeze_encoder"]], "on_validation_epoch_end() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.on_validation_epoch_end"]], "predict_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.predict_step"]], "training_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.training_step"]], "validation_step() (nidl.estimators.linear.logistic_regression.logisticregression method)": [[51, "nidl.estimators.linear.logistic_regression.LogisticRegression.validation_step"]], "simclr (class in nidl.estimators.ssl)": [[53, "nidl.estimators.ssl.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr method)": [[53, "nidl.estimators.ssl.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr method)": [[53, "nidl.estimators.ssl.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr method)": [[53, "nidl.estimators.ssl.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr method)": [[53, "nidl.estimators.ssl.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr method)": [[53, "nidl.estimators.ssl.SimCLR.validation_step"]], "yawarecontrastivelearning (class in nidl.estimators.ssl)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yawarecontrastivelearning method)": [[54, "nidl.estimators.ssl.YAwareContrastiveLearning.validation_step"]], "simclr (class in nidl.estimators.ssl.simclr)": [[55, "nidl.estimators.ssl.simclr.SimCLR"]], "configure_optimizers() (nidl.estimators.ssl.simclr.simclr method)": [[55, "nidl.estimators.ssl.simclr.SimCLR.configure_optimizers"]], "info_nce_loss() (nidl.estimators.ssl.simclr.simclr method)": [[55, "nidl.estimators.ssl.simclr.SimCLR.info_nce_loss"]], "training_step() (nidl.estimators.ssl.simclr.simclr method)": [[55, "nidl.estimators.ssl.simclr.SimCLR.training_step"]], "transform_step() (nidl.estimators.ssl.simclr.simclr method)": [[55, "nidl.estimators.ssl.simclr.SimCLR.transform_step"]], "validation_step() (nidl.estimators.ssl.simclr.simclr method)": [[55, "nidl.estimators.ssl.simclr.SimCLR.validation_step"]], "projectionhead (class in nidl.estimators.ssl.utils)": [[57, "nidl.estimators.ssl.utils.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projectionhead method)": [[57, "nidl.estimators.ssl.utils.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils)": [[58, "nidl.estimators.ssl.utils.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils)": [[59, "nidl.estimators.ssl.utils.YAwareProjectionHead"]], "projectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[60, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead"]], "forward() (nidl.estimators.ssl.utils.projection_heads.projectionhead method)": [[60, "nidl.estimators.ssl.utils.projection_heads.ProjectionHead.forward"]], "simclrprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[61, "nidl.estimators.ssl.utils.projection_heads.SimCLRProjectionHead"]], "yawareprojectionhead (class in nidl.estimators.ssl.utils.projection_heads)": [[62, "nidl.estimators.ssl.utils.projection_heads.YAwareProjectionHead"]], "yawarecontrastivelearning (class in nidl.estimators.ssl.yaware)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning"]], "configure_optimizers() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.configure_optimizers"]], "parse_batch() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.parse_batch"]], "training_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.training_step"]], "transform_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.transform_step"]], "validation_step() (nidl.estimators.ssl.yaware.yawarecontrastivelearning method)": [[63, "nidl.estimators.ssl.yaware.YAwareContrastiveLearning.validation_step"]], "fetch_experiment() (in module nidl.experiment)": [[64, "nidl.experiment.fetch_experiment"]], "filter_config() (in module nidl.experiment)": [[65, "nidl.experiment.filter_config"]], "get_env() (in module nidl.experiment)": [[66, "nidl.experiment.get_env"]], "load_interface() (in module nidl.experiment)": [[67, "nidl.experiment.load_interface"]], "update_params() (in module nidl.experiment)": [[68, "nidl.experiment.update_params"]], "infonce (class in nidl.losses)": [[70, "nidl.losses.InfoNCE"]], "forward() (nidl.losses.infonce method)": [[70, "nidl.losses.InfoNCE.forward"]], "kernelmetric (class in nidl.losses)": [[71, "nidl.losses.KernelMetric"]], "fit() (nidl.losses.kernelmetric method)": [[71, "nidl.losses.KernelMetric.fit"]], "pairwise() (nidl.losses.kernelmetric method)": [[71, "nidl.losses.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.kernelmetric method)": [[71, "nidl.losses.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.kernelmetric method)": [[71, "nidl.losses.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.kernelmetric method)": [[71, "nidl.losses.KernelMetric.silverman_factor"]], "yawareinfonce (class in nidl.losses)": [[72, "nidl.losses.YAwareInfoNCE"]], "forward() (nidl.losses.yawareinfonce method)": [[72, "nidl.losses.YAwareInfoNCE.forward"]], "infonce (class in nidl.losses.infonce)": [[73, "nidl.losses.infonce.InfoNCE"]], "forward() (nidl.losses.infonce.infonce method)": [[73, "nidl.losses.infonce.InfoNCE.forward"]], "kernelmetric (class in nidl.losses.yaware_infonce)": [[74, "nidl.losses.yaware_infonce.KernelMetric"]], "fit() (nidl.losses.yaware_infonce.kernelmetric method)": [[74, "nidl.losses.yaware_infonce.KernelMetric.fit"]], "pairwise() (nidl.losses.yaware_infonce.kernelmetric method)": [[74, "nidl.losses.yaware_infonce.KernelMetric.pairwise"]], "scotts_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[74, "nidl.losses.yaware_infonce.KernelMetric.scotts_factor"]], "set_bandwidth() (nidl.losses.yaware_infonce.kernelmetric method)": [[74, "nidl.losses.yaware_infonce.KernelMetric.set_bandwidth"]], "silverman_factor() (nidl.losses.yaware_infonce.kernelmetric method)": [[74, "nidl.losses.yaware_infonce.KernelMetric.silverman_factor"]], "pairwisecosinesimilarity (class in nidl.losses.yaware_infonce)": [[75, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity"]], "forward() (nidl.losses.yaware_infonce.pairwisecosinesimilarity method)": [[75, "nidl.losses.yaware_infonce.PairwiseCosineSimilarity.forward"]], "yawareinfonce (class in nidl.losses.yaware_infonce)": [[76, "nidl.losses.yaware_infonce.YAwareInfoNCE"]], "forward() (nidl.losses.yaware_infonce.yawareinfonce method)": [[76, "nidl.losses.yaware_infonce.YAwareInfoNCE.forward"]], "_check_reg_targets() (in module nidl.metrics._regression)": [[78, "nidl.metrics._regression._check_reg_targets"]], "_check_reg_targets_with_floating_dtype() (in module nidl.metrics._regression)": [[79, "nidl.metrics._regression._check_reg_targets_with_floating_dtype"]], "_find_matching_floating_dtype() (in module nidl.metrics._regression)": [[80, "nidl.metrics._regression._find_matching_floating_dtype"]], "pearson_r() (in module nidl.metrics)": [[81, "nidl.metrics.pearson_r"]], "pearson_r() (in module nidl.metrics.regression)": [[82, "nidl.metrics.regression.pearson_r"]], "regression_report() (in module nidl.metrics.regression)": [[83, "nidl.metrics.regression.regression_report"]], "regression_report() (in module nidl.metrics)": [[84, "nidl.metrics.regression_report"]], "identity (class in nidl.transforms)": [[85, "nidl.transforms.Identity"]], "apply_transform() (nidl.transforms.identity method)": [[85, "nidl.transforms.Identity.apply_transform"]], "multiviewstransform (class in nidl.transforms)": [[86, "nidl.transforms.MultiViewsTransform"]], "apply_transform() (nidl.transforms.multiviewstransform method)": [[86, "nidl.transforms.MultiViewsTransform.apply_transform"]], "parse_data() (nidl.transforms.multiviewstransform method)": [[86, "nidl.transforms.MultiViewsTransform.parse_data"]], "transform (class in nidl.transforms)": [[87, "nidl.transforms.Transform"]], "apply_transform() (nidl.transforms.transform method)": [[87, "nidl.transforms.Transform.apply_transform"]], "parse_data() (nidl.transforms.transform method)": [[87, "nidl.transforms.Transform.parse_data"]], "parse_probability() (nidl.transforms.transform static method)": [[87, "nidl.transforms.Transform.parse_probability"]], "bunch (class in nidl.utils)": [[89, "nidl.utils.Bunch"]], "weights (class in nidl.utils)": [[90, "nidl.utils.Weights"]], "hf_download() (nidl.utils.weights class method)": [[90, "nidl.utils.Weights.hf_download"]], "hub_split() (nidl.utils.weights class method)": [[90, "nidl.utils.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights method)": [[90, "nidl.utils.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights class method)": [[90, "nidl.utils.Weights.ns_download"]], "bunch (class in nidl.utils.bunch)": [[91, "nidl.utils.bunch.Bunch"]], "colored (class in nidl.utils.color)": [[92, "nidl.utils.color.Colored"]], "attribute() (nidl.utils.color.colored method)": [[92, "nidl.utils.color.Colored.attribute"]], "background() (nidl.utils.color.colored method)": [[92, "nidl.utils.color.Colored.background"]], "foreground() (nidl.utils.color.colored method)": [[92, "nidl.utils.color.Colored.foreground"]], "reverse_dict() (nidl.utils.color.colored method)": [[92, "nidl.utils.color.Colored.reverse_dict"]], "attr() (in module nidl.utils.color)": [[93, "nidl.utils.color.attr"]], "fg() (in module nidl.utils.color)": [[94, "nidl.utils.color.fg"]], "hex() (in module nidl.utils.color)": [[95, "nidl.utils.color.hex"]], "print_multicolor() (in module nidl.utils.color)": [[96, "nidl.utils.color.print_multicolor"]], "print_result() (in module nidl.utils.color)": [[97, "nidl.utils.color.print_result"]], "print_subtitle() (in module nidl.utils.color)": [[98, "nidl.utils.color.print_subtitle"]], "print_title() (in module nidl.utils.color)": [[99, "nidl.utils.color.print_title"]], "print_warning() (in module nidl.utils.color)": [[100, "nidl.utils.color.print_warning"]], "random_stylize() (in module nidl.utils.color)": [[101, "nidl.utils.color.random_stylize"]], "stylize() (in module nidl.utils.color)": [[102, "nidl.utils.color.stylize"]], "print_multicolor() (in module nidl.utils)": [[103, "nidl.utils.print_multicolor"]], "_availableifdescriptor (class in nidl.utils.validation)": [[104, "nidl.utils.validation._AvailableIfDescriptor"]], "_estimator_is() (in module nidl.utils.validation)": [[105, "nidl.utils.validation._estimator_is"]], "available_if() (in module nidl.utils.validation)": [[106, "nidl.utils.validation.available_if"]], "check_is_fitted() (in module nidl.utils.validation)": [[107, "nidl.utils.validation.check_is_fitted"]], "weights (class in nidl.utils.weights)": [[108, "nidl.utils.weights.Weights"]], "hf_download() (nidl.utils.weights.weights class method)": [[108, "nidl.utils.weights.Weights.hf_download"]], "hub_split() (nidl.utils.weights.weights class method)": [[108, "nidl.utils.weights.Weights.hub_split"]], "load_pretrained() (nidl.utils.weights.weights method)": [[108, "nidl.utils.weights.Weights.load_pretrained"]], "ns_download() (nidl.utils.weights.weights class method)": [[108, "nidl.utils.weights.Weights.ns_download"]], "alexnet (class in nidl.volume.backbones)": [[111, "nidl.volume.backbones.AlexNet"]], "forward() (nidl.volume.backbones.alexnet method)": [[111, "nidl.volume.backbones.AlexNet.forward"]], "densenet (class in nidl.volume.backbones)": [[112, "nidl.volume.backbones.DenseNet"]], "forward() (nidl.volume.backbones.densenet method)": [[112, "nidl.volume.backbones.DenseNet.forward"]], "resnet (class in nidl.volume.backbones)": [[113, "nidl.volume.backbones.ResNet"]], "forward() (nidl.volume.backbones.resnet method)": [[113, "nidl.volume.backbones.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones)": [[114, "nidl.volume.backbones.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnettruncated method)": [[114, "nidl.volume.backbones.ResNetTruncated.forward"]], "alexnet (class in nidl.volume.backbones.alexnet3d)": [[115, "nidl.volume.backbones.alexnet3d.AlexNet"]], "forward() (nidl.volume.backbones.alexnet3d.alexnet method)": [[115, "nidl.volume.backbones.alexnet3d.AlexNet.forward"]], "densenet121() (in module nidl.volume.backbones)": [[116, "nidl.volume.backbones.densenet121"]], "densenet (class in nidl.volume.backbones.densenet3d)": [[117, "nidl.volume.backbones.densenet3d.DenseNet"]], "forward() (nidl.volume.backbones.densenet3d.densenet method)": [[117, "nidl.volume.backbones.densenet3d.DenseNet.forward"]], "_denseblock (class in nidl.volume.backbones.densenet3d)": [[118, "nidl.volume.backbones.densenet3d._DenseBlock"]], "forward() (nidl.volume.backbones.densenet3d._denseblock method)": [[118, "nidl.volume.backbones.densenet3d._DenseBlock.forward"]], "_denselayer (class in nidl.volume.backbones.densenet3d)": [[119, "nidl.volume.backbones.densenet3d._DenseLayer"]], "forward() (nidl.volume.backbones.densenet3d._denselayer method)": [[119, "nidl.volume.backbones.densenet3d._DenseLayer.forward"]], "_transition (class in nidl.volume.backbones.densenet3d)": [[120, "nidl.volume.backbones.densenet3d._Transition"]], "_bn_function_factory() (in module nidl.volume.backbones.densenet3d)": [[121, "nidl.volume.backbones.densenet3d._bn_function_factory"]], "_densenet() (in module nidl.volume.backbones.densenet3d)": [[122, "nidl.volume.backbones.densenet3d._densenet"]], "densenet121() (in module nidl.volume.backbones.densenet3d)": [[123, "nidl.volume.backbones.densenet3d.densenet121"]], "resnet18() (in module nidl.volume.backbones)": [[124, "nidl.volume.backbones.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones)": [[125, "nidl.volume.backbones.resnet18_trunc"]], "basicblock (class in nidl.volume.backbones.resnet3d)": [[126, "nidl.volume.backbones.resnet3d.BasicBlock"]], "forward() (nidl.volume.backbones.resnet3d.basicblock method)": [[126, "nidl.volume.backbones.resnet3d.BasicBlock.forward"]], "bottleneck (class in nidl.volume.backbones.resnet3d)": [[127, "nidl.volume.backbones.resnet3d.Bottleneck"]], "forward() (nidl.volume.backbones.resnet3d.bottleneck method)": [[127, "nidl.volume.backbones.resnet3d.Bottleneck.forward"]], "resnet (class in nidl.volume.backbones.resnet3d)": [[128, "nidl.volume.backbones.resnet3d.ResNet"]], "forward() (nidl.volume.backbones.resnet3d.resnet method)": [[128, "nidl.volume.backbones.resnet3d.ResNet.forward"]], "resnettruncated (class in nidl.volume.backbones.resnet3d)": [[129, "nidl.volume.backbones.resnet3d.ResNetTruncated"]], "forward() (nidl.volume.backbones.resnet3d.resnettruncated method)": [[129, "nidl.volume.backbones.resnet3d.ResNetTruncated.forward"]], "_resnet() (in module nidl.volume.backbones.resnet3d)": [[130, "nidl.volume.backbones.resnet3d._resnet"]], "_resnet_trunc() (in module nidl.volume.backbones.resnet3d)": [[131, "nidl.volume.backbones.resnet3d._resnet_trunc"]], "conv1x1() (in module nidl.volume.backbones.resnet3d)": [[132, "nidl.volume.backbones.resnet3d.conv1x1"]], "conv3x3() (in module nidl.volume.backbones.resnet3d)": [[133, "nidl.volume.backbones.resnet3d.conv3x3"]], "resnet18() (in module nidl.volume.backbones.resnet3d)": [[134, "nidl.volume.backbones.resnet3d.resnet18"]], "resnet18_trunc() (in module nidl.volume.backbones.resnet3d)": [[135, "nidl.volume.backbones.resnet3d.resnet18_trunc"]], "resnet50() (in module nidl.volume.backbones.resnet3d)": [[136, "nidl.volume.backbones.resnet3d.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones.resnet3d)": [[137, "nidl.volume.backbones.resnet3d.resnet50_trunc"]], "resnet50() (in module nidl.volume.backbones)": [[138, "nidl.volume.backbones.resnet50"]], "resnet50_trunc() (in module nidl.volume.backbones)": [[139, "nidl.volume.backbones.resnet50_trunc"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity)": [[143, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussianblur method)": [[143, "nidl.volume.transforms.augmentation.intensity.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity)": [[144, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.randomgaussiannoise method)": [[144, "nidl.volume.transforms.augmentation.intensity.RandomGaussianNoise.apply_transform"]], "randomgaussianblur (class in nidl.volume.transforms.augmentation.intensity.random_blur)": [[145, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_blur.randomgaussianblur method)": [[145, "nidl.volume.transforms.augmentation.intensity.random_blur.RandomGaussianBlur.apply_transform"]], "randomgaussiannoise (class in nidl.volume.transforms.augmentation.intensity.random_noise)": [[146, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise"]], "apply_transform() (nidl.volume.transforms.augmentation.intensity.random_noise.randomgaussiannoise method)": [[146, "nidl.volume.transforms.augmentation.intensity.random_noise.RandomGaussianNoise.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial)": [[148, "nidl.volume.transforms.augmentation.spatial.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomerasing method)": [[148, "nidl.volume.transforms.augmentation.spatial.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.randomflip method)": [[149, "nidl.volume.transforms.augmentation.spatial.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomresizedcrop method)": [[150, "nidl.volume.transforms.augmentation.spatial.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.randomrotation method)": [[151, "nidl.volume.transforms.augmentation.spatial.RandomRotation.apply_transform"]], "randomerasing (class in nidl.volume.transforms.augmentation.spatial.random_erasing)": [[152, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_erasing.randomerasing method)": [[152, "nidl.volume.transforms.augmentation.spatial.random_erasing.RandomErasing.apply_transform"]], "randomflip (class in nidl.volume.transforms.augmentation.spatial.random_flip)": [[153, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[153, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.apply_transform"]], "get_index_from_anat_label() (nidl.volume.transforms.augmentation.spatial.random_flip.randomflip method)": [[153, "nidl.volume.transforms.augmentation.spatial.random_flip.RandomFlip.get_index_from_anat_label"]], "randomresizedcrop (class in nidl.volume.transforms.augmentation.spatial.random_resized_crop)": [[154, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_resized_crop.randomresizedcrop method)": [[154, "nidl.volume.transforms.augmentation.spatial.random_resized_crop.RandomResizedCrop.apply_transform"]], "randomrotation (class in nidl.volume.transforms.augmentation.spatial.random_rotation)": [[155, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation"]], "apply_transform() (nidl.volume.transforms.augmentation.spatial.random_rotation.randomrotation method)": [[155, "nidl.volume.transforms.augmentation.spatial.random_rotation.RandomRotation.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity)": [[158, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.robustrescaling method)": [[158, "nidl.volume.transforms.preprocessing.intensity.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity)": [[159, "nidl.volume.transforms.preprocessing.intensity.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.znormalization method)": [[159, "nidl.volume.transforms.preprocessing.intensity.ZNormalization.apply_transform"]], "robustrescaling (class in nidl.volume.transforms.preprocessing.intensity.rescale)": [[160, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.rescale.robustrescaling method)": [[160, "nidl.volume.transforms.preprocessing.intensity.rescale.RobustRescaling.apply_transform"]], "znormalization (class in nidl.volume.transforms.preprocessing.intensity.z_normalization)": [[161, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization"]], "apply_transform() (nidl.volume.transforms.preprocessing.intensity.z_normalization.znormalization method)": [[161, "nidl.volume.transforms.preprocessing.intensity.z_normalization.ZNormalization.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial)": [[163, "nidl.volume.transforms.preprocessing.spatial.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.croporpad method)": [[163, "nidl.volume.transforms.preprocessing.spatial.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample method)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample static method)": [[164, "nidl.volume.transforms.preprocessing.spatial.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize method)": [[165, "nidl.volume.transforms.preprocessing.spatial.Resize.apply_transform"]], "croporpad (class in nidl.volume.transforms.preprocessing.spatial.crop_or_pad)": [[166, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.crop_or_pad.croporpad method)": [[166, "nidl.volume.transforms.preprocessing.spatial.crop_or_pad.CropOrPad.apply_transform"]], "resample (class in nidl.volume.transforms.preprocessing.spatial.resample)": [[167, "nidl.volume.transforms.preprocessing.spatial.resample.Resample"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resample.resample method)": [[167, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.apply_transform"]], "as_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[167, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.as_sitk"]], "from_sitk() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[167, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.from_sitk"]], "get_sitk_metadata_from_ras_affine() (nidl.volume.transforms.preprocessing.spatial.resample.resample static method)": [[167, "nidl.volume.transforms.preprocessing.spatial.resample.Resample.get_sitk_metadata_from_ras_affine"]], "resize (class in nidl.volume.transforms.preprocessing.spatial.resize)": [[168, "nidl.volume.transforms.preprocessing.spatial.resize.Resize"]], "apply_transform() (nidl.volume.transforms.preprocessing.spatial.resize.resize method)": [[168, "nidl.volume.transforms.preprocessing.spatial.resize.Resize.apply_transform"]], "volumetransform (class in nidl.volume.transforms.volume_transform)": [[169, "nidl.volume.transforms.volume_transform.VolumeTransform"]], "parse_data() (nidl.volume.transforms.volume_transform.volumetransform method)": [[169, "nidl.volume.transforms.volume_transform.VolumeTransform.parse_data"]], "basetransformer (class in surfify.augmentation)": [[173, "surfify.augmentation.BaseTransformer"]], "register() (surfify.augmentation.basetransformer method)": [[173, "surfify.augmentation.BaseTransformer.register"]], "groupmixup (class in surfify.augmentation)": [[174, "surfify.augmentation.GroupMixUp"]], "groupby() (surfify.augmentation.groupmixup class method)": [[174, "surfify.augmentation.GroupMixUp.groupby"]], "run() (surfify.augmentation.groupmixup method)": [[174, "surfify.augmentation.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation)": [[175, "surfify.augmentation.HemiMixUp"]], "run() (surfify.augmentation.hemimixup method)": [[175, "surfify.augmentation.HemiMixUp.run"]], "surfblur (class in surfify.augmentation)": [[176, "surfify.augmentation.SurfBlur"]], "run() (surfify.augmentation.surfblur method)": [[176, "surfify.augmentation.SurfBlur.run"]], "surfcutout (class in surfify.augmentation)": [[177, "surfify.augmentation.SurfCutOut"]], "run() (surfify.augmentation.surfcutout method)": [[177, "surfify.augmentation.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation)": [[178, "surfify.augmentation.SurfNoise"]], "run() (surfify.augmentation.surfnoise method)": [[178, "surfify.augmentation.SurfNoise.run"]], "surfrotation (class in surfify.augmentation)": [[179, "surfify.augmentation.SurfRotation"]], "run() (surfify.augmentation.surfrotation method)": [[179, "surfify.augmentation.SurfRotation.run"]], "transformer (class in surfify.augmentation)": [[180, "surfify.augmentation.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation)": [[181, "surfify.augmentation.apply_chained_transforms"]], "surfblur (class in surfify.augmentation.base)": [[182, "surfify.augmentation.base.SurfBlur"]], "run() (surfify.augmentation.base.surfblur method)": [[182, "surfify.augmentation.base.SurfBlur.run"]], "surfcutout (class in surfify.augmentation.base)": [[183, "surfify.augmentation.base.SurfCutOut"]], "run() (surfify.augmentation.base.surfcutout method)": [[183, "surfify.augmentation.base.SurfCutOut.run"]], "surfnoise (class in surfify.augmentation.base)": [[184, "surfify.augmentation.base.SurfNoise"]], "run() (surfify.augmentation.base.surfnoise method)": [[184, "surfify.augmentation.base.SurfNoise.run"]], "surfrotation (class in surfify.augmentation.base)": [[185, "surfify.augmentation.base.SurfRotation"]], "run() (surfify.augmentation.base.surfrotation method)": [[185, "surfify.augmentation.base.SurfRotation.run"]], "interval() (in module surfify.augmentation)": [[186, "surfify.augmentation.interval"]], "groupmixup (class in surfify.augmentation.mixup)": [[187, "surfify.augmentation.mixup.GroupMixUp"]], "groupby() (surfify.augmentation.mixup.groupmixup class method)": [[187, "surfify.augmentation.mixup.GroupMixUp.groupby"]], "run() (surfify.augmentation.mixup.groupmixup method)": [[187, "surfify.augmentation.mixup.GroupMixUp.run"]], "hemimixup (class in surfify.augmentation.mixup)": [[188, "surfify.augmentation.mixup.HemiMixUp"]], "run() (surfify.augmentation.mixup.hemimixup method)": [[188, "surfify.augmentation.mixup.HemiMixUp.run"]], "mixupaugmentation (class in surfify.augmentation.mixup)": [[189, "surfify.augmentation.mixup.MixUpAugmentation"]], "rand_mask() (surfify.augmentation.mixup.mixupaugmentation method)": [[189, "surfify.augmentation.mixup.MixUpAugmentation.rand_mask"]], "multichannel_augmentation() (in module surfify.augmentation)": [[190, "surfify.augmentation.multichannel_augmentation"]], "basetransformer (class in surfify.augmentation.utils)": [[191, "surfify.augmentation.utils.BaseTransformer"]], "register() (surfify.augmentation.utils.basetransformer method)": [[191, "surfify.augmentation.utils.BaseTransformer.register"]], "randomaugmentation (class in surfify.augmentation.utils)": [[192, "surfify.augmentation.utils.RandomAugmentation"]], "randomaugmentation.interval (class in surfify.augmentation.utils)": [[192, "surfify.augmentation.utils.RandomAugmentation.Interval"]], "dtype (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[192, "surfify.augmentation.utils.RandomAugmentation.Interval.dtype"]], "high (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[192, "surfify.augmentation.utils.RandomAugmentation.Interval.high"]], "low (surfify.augmentation.utils.randomaugmentation.interval attribute)": [[192, "surfify.augmentation.utils.RandomAugmentation.Interval.low"]], "transform (class in surfify.augmentation.utils)": [[193, "surfify.augmentation.utils.Transform"]], "probability (surfify.augmentation.utils.transform attribute)": [[193, "surfify.augmentation.utils.Transform.probability"]], "randomize_per_channel (surfify.augmentation.utils.transform attribute)": [[193, "surfify.augmentation.utils.Transform.randomize_per_channel"]], "transform (surfify.augmentation.utils.transform attribute)": [[193, "surfify.augmentation.utils.Transform.transform"]], "transformer (class in surfify.augmentation.utils)": [[194, "surfify.augmentation.utils.Transformer"]], "apply_chained_transforms() (in module surfify.augmentation.utils)": [[195, "surfify.augmentation.utils.apply_chained_transforms"]], "interval() (in module surfify.augmentation.utils)": [[196, "surfify.augmentation.utils.interval"]], "listify() (in module surfify.augmentation.utils)": [[197, "surfify.augmentation.utils.listify"]], "multichannel_augmentation() (in module surfify.augmentation.utils)": [[198, "surfify.augmentation.utils.multichannel_augmentation"]], "classificationdataset (class in surfify.datasets)": [[200, "surfify.datasets.ClassificationDataset"]], "genericsurfdataset (class in surfify.datasets)": [[201, "surfify.datasets.GenericSurfDataset"]], "genericsurfdataset (class in surfify.datasets._generic)": [[202, "surfify.datasets._generic.GenericSurfDataset"]], "classificationdataset (class in surfify.datasets._samples_generator)": [[203, "surfify.datasets._samples_generator.ClassificationDataset"]], "make_classification() (in module surfify.datasets._samples_generator)": [[204, "surfify.datasets._samples_generator.make_classification"]], "make_classification() (in module surfify.datasets)": [[205, "surfify.datasets.make_classification"]], "sphericalvaeloss (class in surfify.losses)": [[207, "surfify.losses.SphericalVAELoss"]], "sphericalvaeloss (class in surfify.losses.vae)": [[208, "surfify.losses.vae.SphericalVAELoss"]], "log_likelihood() (in module surfify.losses.vae)": [[209, "surfify.losses.vae.log_likelihood"]], "hemifusiondecoder (class in surfify.models)": [[211, "surfify.models.HemiFusionDecoder"]], "forward() (surfify.models.hemifusiondecoder method)": [[211, "surfify.models.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models)": [[212, "surfify.models.HemiFusionEncoder"]], "forward() (surfify.models.hemifusionencoder method)": [[212, "surfify.models.HemiFusionEncoder.forward"]], "sit (class in surfify.models)": [[213, "surfify.models.SiT"]], "forward() (surfify.models.sit method)": [[213, "surfify.models.SiT.forward"]], "simclr (class in surfify.models)": [[214, "surfify.models.SimCLR"]], "forward() (surfify.models.simclr method)": [[214, "surfify.models.SimCLR.forward"]], "sphericalbase (class in surfify.models)": [[215, "surfify.models.SphericalBase"]], "build_ico_info() (surfify.models.sphericalbase class method)": [[215, "surfify.models.SphericalBase.build_ico_info"]], "sphericalgunet (class in surfify.models)": [[216, "surfify.models.SphericalGUNet"]], "forward() (surfify.models.sphericalgunet method)": [[216, "surfify.models.SphericalGUNet.forward"]], "sphericalgvgg (class in surfify.models)": [[217, "surfify.models.SphericalGVGG"]], "forward() (surfify.models.sphericalgvgg method)": [[217, "surfify.models.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models)": [[218, "surfify.models.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models)": [[219, "surfify.models.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models)": [[220, "surfify.models.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models)": [[221, "surfify.models.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models)": [[222, "surfify.models.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models)": [[223, "surfify.models.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models)": [[224, "surfify.models.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models)": [[225, "surfify.models.SphericalGVGG19BN"]], "sphericalhemifusiondecoder (class in surfify.models)": [[226, "surfify.models.SphericalHemiFusionDecoder"]], "forward() (surfify.models.sphericalhemifusiondecoder method)": [[226, "surfify.models.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models)": [[227, "surfify.models.SphericalHemiFusionEncoder"]], "forward() (surfify.models.sphericalhemifusionencoder method)": [[227, "surfify.models.SphericalHemiFusionEncoder.forward"]], "sphericalunet (class in surfify.models)": [[228, "surfify.models.SphericalUNet"]], "forward() (surfify.models.sphericalunet method)": [[228, "surfify.models.SphericalUNet.forward"]], "sphericalvae (class in surfify.models)": [[229, "surfify.models.SphericalVAE"]], "decode() (surfify.models.sphericalvae method)": [[229, "surfify.models.SphericalVAE.decode"]], "encode() (surfify.models.sphericalvae method)": [[229, "surfify.models.SphericalVAE.encode"]], "forward() (surfify.models.sphericalvae method)": [[229, "surfify.models.SphericalVAE.forward"]], "reparameterize() (surfify.models.sphericalvae method)": [[229, "surfify.models.SphericalVAE.reparameterize"]], "sphericalvgg (class in surfify.models)": [[230, "surfify.models.SphericalVGG"]], "forward() (surfify.models.sphericalvgg method)": [[230, "surfify.models.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models)": [[231, "surfify.models.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models)": [[232, "surfify.models.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models)": [[233, "surfify.models.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models)": [[234, "surfify.models.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models)": [[235, "surfify.models.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models)": [[236, "surfify.models.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models)": [[237, "surfify.models.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models)": [[238, "surfify.models.SphericalVGG19BN"]], "ico (class in surfify.models.base)": [[239, "surfify.models.base.Ico"]], "conv_neighbor_indices (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.conv_neighbor_indices"]], "down_indices (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.down_indices"]], "neighbor_indices (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.neighbor_indices"]], "order (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.order"]], "triangles (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.triangles"]], "up_indices (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.up_indices"]], "vertices (surfify.models.base.ico attribute)": [[239, "surfify.models.base.Ico.vertices"]], "sphericalbase (class in surfify.models.base)": [[240, "surfify.models.base.SphericalBase"]], "build_ico_info() (surfify.models.base.sphericalbase class method)": [[240, "surfify.models.base.SphericalBase.build_ico_info"]], "simclr (class in surfify.models.simclr)": [[241, "surfify.models.simclr.SimCLR"]], "forward() (surfify.models.simclr.simclr method)": [[241, "surfify.models.simclr.SimCLR.forward"]], "attention (class in surfify.models.sit)": [[242, "surfify.models.sit.Attention"]], "forward() (surfify.models.sit.attention method)": [[242, "surfify.models.sit.Attention.forward"]], "feedforward (class in surfify.models.sit)": [[243, "surfify.models.sit.FeedForward"]], "forward() (surfify.models.sit.feedforward method)": [[243, "surfify.models.sit.FeedForward.forward"]], "sit (class in surfify.models.sit)": [[244, "surfify.models.sit.SiT"]], "forward() (surfify.models.sit.sit method)": [[244, "surfify.models.sit.SiT.forward"]], "transformer (class in surfify.models.sit)": [[245, "surfify.models.sit.Transformer"]], "forward() (surfify.models.sit.transformer method)": [[245, "surfify.models.sit.Transformer.forward"]], "downblock (class in surfify.models.unet)": [[246, "surfify.models.unet.DownBlock"]], "forward() (surfify.models.unet.downblock method)": [[246, "surfify.models.unet.DownBlock.forward"]], "downgblock (class in surfify.models.unet)": [[247, "surfify.models.unet.DownGBlock"]], "forward() (surfify.models.unet.downgblock method)": [[247, "surfify.models.unet.DownGBlock.forward"]], "graphicalunet (class in surfify.models.unet)": [[248, "surfify.models.unet.GraphicalUNet"]], "forward() (surfify.models.unet.graphicalunet method)": [[248, "surfify.models.unet.GraphicalUNet.forward"]], "sphericalgunet (class in surfify.models.unet)": [[249, "surfify.models.unet.SphericalGUNet"]], "forward() (surfify.models.unet.sphericalgunet method)": [[249, "surfify.models.unet.SphericalGUNet.forward"]], "sphericalunet (class in surfify.models.unet)": [[250, "surfify.models.unet.SphericalUNet"]], "forward() (surfify.models.unet.sphericalunet method)": [[250, "surfify.models.unet.SphericalUNet.forward"]], "upblock (class in surfify.models.unet)": [[251, "surfify.models.unet.UpBlock"]], "forward() (surfify.models.unet.upblock method)": [[251, "surfify.models.unet.UpBlock.forward"]], "upgblock (class in surfify.models.unet)": [[252, "surfify.models.unet.UpGBlock"]], "forward() (surfify.models.unet.upgblock method)": [[252, "surfify.models.unet.UpGBlock.forward"]], "hemifusiondecoder (class in surfify.models.vae)": [[253, "surfify.models.vae.HemiFusionDecoder"]], "forward() (surfify.models.vae.hemifusiondecoder method)": [[253, "surfify.models.vae.HemiFusionDecoder.forward"]], "hemifusionencoder (class in surfify.models.vae)": [[254, "surfify.models.vae.HemiFusionEncoder"]], "forward() (surfify.models.vae.hemifusionencoder method)": [[254, "surfify.models.vae.HemiFusionEncoder.forward"]], "sphericalhemifusiondecoder (class in surfify.models.vae)": [[255, "surfify.models.vae.SphericalHemiFusionDecoder"]], "forward() (surfify.models.vae.sphericalhemifusiondecoder method)": [[255, "surfify.models.vae.SphericalHemiFusionDecoder.forward"]], "sphericalhemifusionencoder (class in surfify.models.vae)": [[256, "surfify.models.vae.SphericalHemiFusionEncoder"]], "forward() (surfify.models.vae.sphericalhemifusionencoder method)": [[256, "surfify.models.vae.SphericalHemiFusionEncoder.forward"]], "sphericalvae (class in surfify.models.vae)": [[257, "surfify.models.vae.SphericalVAE"]], "decode() (surfify.models.vae.sphericalvae method)": [[257, "surfify.models.vae.SphericalVAE.decode"]], "encode() (surfify.models.vae.sphericalvae method)": [[257, "surfify.models.vae.SphericalVAE.encode"]], "forward() (surfify.models.vae.sphericalvae method)": [[257, "surfify.models.vae.SphericalVAE.forward"]], "reparameterize() (surfify.models.vae.sphericalvae method)": [[257, "surfify.models.vae.SphericalVAE.reparameterize"]], "compute_output_dim() (in module surfify.models.vae)": [[258, "surfify.models.vae.compute_output_dim"]], "sphericalgvgg (class in surfify.models.vgg)": [[259, "surfify.models.vgg.SphericalGVGG"]], "forward() (surfify.models.vgg.sphericalgvgg method)": [[259, "surfify.models.vgg.SphericalGVGG.forward"]], "sphericalgvgg11 (class in surfify.models.vgg)": [[260, "surfify.models.vgg.SphericalGVGG11"]], "sphericalgvgg11bn (class in surfify.models.vgg)": [[261, "surfify.models.vgg.SphericalGVGG11BN"]], "sphericalgvgg13 (class in surfify.models.vgg)": [[262, "surfify.models.vgg.SphericalGVGG13"]], "sphericalgvgg13bn (class in surfify.models.vgg)": [[263, "surfify.models.vgg.SphericalGVGG13BN"]], "sphericalgvgg16 (class in surfify.models.vgg)": [[264, "surfify.models.vgg.SphericalGVGG16"]], "sphericalgvgg16bn (class in surfify.models.vgg)": [[265, "surfify.models.vgg.SphericalGVGG16BN"]], "sphericalgvgg19 (class in surfify.models.vgg)": [[266, "surfify.models.vgg.SphericalGVGG19"]], "sphericalgvgg19bn (class in surfify.models.vgg)": [[267, "surfify.models.vgg.SphericalGVGG19BN"]], "sphericalvgg (class in surfify.models.vgg)": [[268, "surfify.models.vgg.SphericalVGG"]], "forward() (surfify.models.vgg.sphericalvgg method)": [[268, "surfify.models.vgg.SphericalVGG.forward"]], "sphericalvgg11 (class in surfify.models.vgg)": [[269, "surfify.models.vgg.SphericalVGG11"]], "sphericalvgg11bn (class in surfify.models.vgg)": [[270, "surfify.models.vgg.SphericalVGG11BN"]], "sphericalvgg13 (class in surfify.models.vgg)": [[271, "surfify.models.vgg.SphericalVGG13"]], "sphericalvgg13bn (class in surfify.models.vgg)": [[272, "surfify.models.vgg.SphericalVGG13BN"]], "sphericalvgg16 (class in surfify.models.vgg)": [[273, "surfify.models.vgg.SphericalVGG16"]], "sphericalvgg16bn (class in surfify.models.vgg)": [[274, "surfify.models.vgg.SphericalVGG16BN"]], "sphericalvgg19 (class in surfify.models.vgg)": [[275, "surfify.models.vgg.SphericalVGG19"]], "sphericalvgg19bn (class in surfify.models.vgg)": [[276, "surfify.models.vgg.SphericalVGG19BN"]], "class_factory() (in module surfify.models.vgg)": [[277, "surfify.models.vgg.class_factory"]], "icodineconv (class in surfify.nn)": [[279, "surfify.nn.IcoDiNeConv"]], "forward() (surfify.nn.icodineconv method)": [[279, "surfify.nn.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn)": [[280, "surfify.nn.IcoFixIndexUpSample"]], "forward() (surfify.nn.icofixindexupsample method)": [[280, "surfify.nn.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn)": [[281, "surfify.nn.IcoGenericUpConv"]], "forward() (surfify.nn.icogenericupconv method)": [[281, "surfify.nn.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn)": [[282, "surfify.nn.IcoMaxIndexUpSample"]], "forward() (surfify.nn.icomaxindexupsample method)": [[282, "surfify.nn.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn)": [[283, "surfify.nn.IcoPool"]], "forward() (surfify.nn.icopool method)": [[283, "surfify.nn.IcoPool.forward"]], "icorepaconv (class in surfify.nn)": [[284, "surfify.nn.IcoRePaConv"]], "forward() (surfify.nn.icorepaconv method)": [[284, "surfify.nn.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn)": [[285, "surfify.nn.IcoSpMaConv"]], "forward() (surfify.nn.icospmaconv method)": [[285, "surfify.nn.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn)": [[286, "surfify.nn.IcoSpMaConvTranspose"]], "forward() (surfify.nn.icospmaconvtranspose method)": [[286, "surfify.nn.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn)": [[287, "surfify.nn.IcoUpConv"]], "forward() (surfify.nn.icoupconv method)": [[287, "surfify.nn.IcoUpConv.forward"]], "icoupsample (class in surfify.nn)": [[288, "surfify.nn.IcoUpSample"]], "forward() (surfify.nn.icoupsample method)": [[288, "surfify.nn.IcoUpSample.forward"]], "circular_pad() (in module surfify.nn.functional)": [[289, "surfify.nn.functional.circular_pad"]], "icodineconv (class in surfify.nn.modules)": [[290, "surfify.nn.modules.IcoDiNeConv"]], "forward() (surfify.nn.modules.icodineconv method)": [[290, "surfify.nn.modules.IcoDiNeConv.forward"]], "icofixindexupsample (class in surfify.nn.modules)": [[291, "surfify.nn.modules.IcoFixIndexUpSample"]], "forward() (surfify.nn.modules.icofixindexupsample method)": [[291, "surfify.nn.modules.IcoFixIndexUpSample.forward"]], "icogenericupconv (class in surfify.nn.modules)": [[292, "surfify.nn.modules.IcoGenericUpConv"]], "forward() (surfify.nn.modules.icogenericupconv method)": [[292, "surfify.nn.modules.IcoGenericUpConv.forward"]], "icomaxindexupsample (class in surfify.nn.modules)": [[293, "surfify.nn.modules.IcoMaxIndexUpSample"]], "forward() (surfify.nn.modules.icomaxindexupsample method)": [[293, "surfify.nn.modules.IcoMaxIndexUpSample.forward"]], "icopool (class in surfify.nn.modules)": [[294, "surfify.nn.modules.IcoPool"]], "forward() (surfify.nn.modules.icopool method)": [[294, "surfify.nn.modules.IcoPool.forward"]], "icorepaconv (class in surfify.nn.modules)": [[295, "surfify.nn.modules.IcoRePaConv"]], "forward() (surfify.nn.modules.icorepaconv method)": [[295, "surfify.nn.modules.IcoRePaConv.forward"]], "icospmaconv (class in surfify.nn.modules)": [[296, "surfify.nn.modules.IcoSpMaConv"]], "forward() (surfify.nn.modules.icospmaconv method)": [[296, "surfify.nn.modules.IcoSpMaConv.forward"]], "icospmaconvtranspose (class in surfify.nn.modules)": [[297, "surfify.nn.modules.IcoSpMaConvTranspose"]], "forward() (surfify.nn.modules.icospmaconvtranspose method)": [[297, "surfify.nn.modules.IcoSpMaConvTranspose.forward"]], "icoupconv (class in surfify.nn.modules)": [[298, "surfify.nn.modules.IcoUpConv"]], "forward() (surfify.nn.modules.icoupconv method)": [[298, "surfify.nn.modules.IcoUpConv.forward"]], "icoupsample (class in surfify.nn.modules)": [[299, "surfify.nn.modules.IcoUpSample"]], "forward() (surfify.nn.modules.icoupsample method)": [[299, "surfify.nn.modules.IcoUpSample.forward"]], "plot_trisurf() (in module surfify.plotting)": [[301, "surfify.plotting.plot_trisurf"]], "plot_trisurf() (in module surfify.plotting.surface)": [[302, "surfify.plotting.surface.plot_trisurf"]], "standardscaler (class in surfify.preprocessing)": [[303, "surfify.preprocessing.StandardScaler"]], "fit() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.fit"]], "get_metadata_routing() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.get_metadata_routing"]], "inverse_transform() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.inverse_transform"]], "set_inverse_transform_request() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_partial_fit_request() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.set_transform_request"]], "transform() (surfify.preprocessing.standardscaler method)": [[303, "surfify.preprocessing.StandardScaler.transform"]], "randomcompose (class in surfify.transforms)": [[304, "surfify.transforms.RandomCompose"]], "cart2sph() (in module surfify.utils)": [[306, "surfify.utils.cart2sph"]], "cart2sph() (in module surfify.utils.coord)": [[307, "surfify.utils.coord.cart2sph"]], "find_corresponding_order() (in module surfify.utils.coord)": [[308, "surfify.utils.coord.find_corresponding_order"]], "grid2text() (in module surfify.utils.coord)": [[309, "surfify.utils.coord.grid2text"]], "ico2ico() (in module surfify.utils.coord)": [[310, "surfify.utils.coord.ico2ico"]], "sph2cart() (in module surfify.utils.coord)": [[311, "surfify.utils.coord.sph2cart"]], "text2grid() (in module surfify.utils.coord)": [[312, "surfify.utils.coord.text2grid"]], "text2ico() (in module surfify.utils.coord)": [[313, "surfify.utils.coord.text2ico"]], "debug_msg() (in module surfify.utils)": [[314, "surfify.utils.debug_msg"]], "downsample() (in module surfify.utils)": [[315, "surfify.utils.downsample"]], "downsample_data() (in module surfify.utils)": [[316, "surfify.utils.downsample_data"]], "downsample_ico() (in module surfify.utils)": [[317, "surfify.utils.downsample_ico"]], "find_neighbors() (in module surfify.utils)": [[318, "surfify.utils.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils)": [[319, "surfify.utils.find_rotation_interpol_coefs"]], "get_logger() (in module surfify.utils)": [[320, "surfify.utils.get_logger"]], "get_rectangular_projection() (in module surfify.utils)": [[321, "surfify.utils.get_rectangular_projection"]], "grid2text() (in module surfify.utils)": [[322, "surfify.utils.grid2text"]], "ico2ico() (in module surfify.utils)": [[323, "surfify.utils.ico2ico"]], "icosahedron() (in module surfify.utils)": [[324, "surfify.utils.icosahedron"]], "interpolate() (in module surfify.utils)": [[325, "surfify.utils.interpolate"]], "interpolate_data() (in module surfify.utils)": [[326, "surfify.utils.interpolate_data"]], "hideprints (class in surfify.utils.io)": [[327, "surfify.utils.io.HidePrints"]], "compute_and_store() (in module surfify.utils.io)": [[328, "surfify.utils.io.compute_and_store"]], "decompose_cifti() (in module surfify.utils.io)": [[329, "surfify.utils.io.decompose_cifti"]], "read_freesurfer() (in module surfify.utils.io)": [[330, "surfify.utils.io.read_freesurfer"]], "read_gifti() (in module surfify.utils.io)": [[331, "surfify.utils.io.read_gifti"]], "surf_data_from_cifti() (in module surfify.utils.io)": [[332, "surfify.utils.io.surf_data_from_cifti"]], "ungzip() (in module surfify.utils.io)": [[333, "surfify.utils.io.ungzip"]], "volume_from_cifti() (in module surfify.utils.io)": [[334, "surfify.utils.io.volume_from_cifti"]], "write_freesurfer() (in module surfify.utils.io)": [[335, "surfify.utils.io.write_freesurfer"]], "write_gifti() (in module surfify.utils.io)": [[336, "surfify.utils.io.write_gifti"]], "min_depth_to_get_n_neighbors() (in module surfify.utils)": [[337, "surfify.utils.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils)": [[338, "surfify.utils.neighbors"]], "neighbors_rec() (in module surfify.utils)": [[339, "surfify.utils.neighbors_rec"]], "number_of_ico_vertices() (in module surfify.utils)": [[340, "surfify.utils.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils)": [[341, "surfify.utils.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils)": [[342, "surfify.utils.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils)": [[343, "surfify.utils.order_triangles"]], "patch_tri() (in module surfify.utils)": [[344, "surfify.utils.patch_tri"]], "rotate_data() (in module surfify.utils)": [[345, "surfify.utils.rotate_data"]], "_patch_tri_iter() (in module surfify.utils.sampling)": [[346, "surfify.utils.sampling._patch_tri_iter"]], "build_freesurfer_ico() (in module surfify.utils.sampling)": [[347, "surfify.utils.sampling.build_freesurfer_ico"]], "build_fslr_ref() (in module surfify.utils.sampling)": [[348, "surfify.utils.sampling.build_fslr_ref"]], "downsample() (in module surfify.utils.sampling)": [[349, "surfify.utils.sampling.downsample"]], "downsample_data() (in module surfify.utils.sampling)": [[350, "surfify.utils.sampling.downsample_data"]], "downsample_ico() (in module surfify.utils.sampling)": [[351, "surfify.utils.sampling.downsample_ico"]], "find_neighbors() (in module surfify.utils.sampling)": [[352, "surfify.utils.sampling.find_neighbors"]], "find_rotation_interpol_coefs() (in module surfify.utils.sampling)": [[353, "surfify.utils.sampling.find_rotation_interpol_coefs"]], "get_angle_with_xaxis() (in module surfify.utils.sampling)": [[354, "surfify.utils.sampling.get_angle_with_xaxis"]], "get_rectangular_projection() (in module surfify.utils.sampling)": [[355, "surfify.utils.sampling.get_rectangular_projection"]], "icosahedron() (in module surfify.utils.sampling)": [[356, "surfify.utils.sampling.icosahedron"]], "interpolate() (in module surfify.utils.sampling)": [[357, "surfify.utils.sampling.interpolate"]], "interpolate_data() (in module surfify.utils.sampling)": [[358, "surfify.utils.sampling.interpolate_data"]], "middle_point() (in module surfify.utils.sampling)": [[359, "surfify.utils.sampling.middle_point"]], "min_depth_to_get_n_neighbors() (in module surfify.utils.sampling)": [[360, "surfify.utils.sampling.min_depth_to_get_n_neighbors"]], "neighbors() (in module surfify.utils.sampling)": [[361, "surfify.utils.sampling.neighbors"]], "neighbors_rec() (in module surfify.utils.sampling)": [[362, "surfify.utils.sampling.neighbors_rec"]], "normalize() (in module surfify.utils.sampling)": [[363, "surfify.utils.sampling.normalize"]], "number_of_ico_vertices() (in module surfify.utils.sampling)": [[364, "surfify.utils.sampling.number_of_ico_vertices"]], "number_of_neighbors() (in module surfify.utils.sampling)": [[365, "surfify.utils.sampling.number_of_neighbors"]], "order_of_ico_from_vertices() (in module surfify.utils.sampling)": [[366, "surfify.utils.sampling.order_of_ico_from_vertices"]], "order_triangles() (in module surfify.utils.sampling)": [[367, "surfify.utils.sampling.order_triangles"]], "patch_tri() (in module surfify.utils.sampling)": [[368, "surfify.utils.sampling.patch_tri"]], "rotate_data() (in module surfify.utils.sampling)": [[369, "surfify.utils.sampling.rotate_data"]], "triangles_to_edges() (in module surfify.utils.sampling)": [[370, "surfify.utils.sampling.triangles_to_edges"]], "vertex_adjacency_graph() (in module surfify.utils.sampling)": [[371, "surfify.utils.sampling.vertex_adjacency_graph"]], "setup_logging() (in module surfify.utils)": [[372, "surfify.utils.setup_logging"]], "sph2cart() (in module surfify.utils)": [[373, "surfify.utils.sph2cart"]], "text2grid() (in module surfify.utils)": [[374, "surfify.utils.text2grid"]], "text2ico() (in module surfify.utils)": [[375, "surfify.utils.text2ico"]]}})